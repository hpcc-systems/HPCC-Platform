/*##############################################################################

    HPCC SYSTEMS software Copyright (C) 2014 HPCC Systems.

    Licensed under the Apache License, Version 2.0 (the License);
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an AS IS BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
############################################################################## */


export sync := SERVICE : plugin('redis')
  SetUnicode(CONST VARSTRING options, CONST VARSTRING key, CONST UNICODE value, UNSIGNED database = 0, UNSIGNED4 expire = 0) : cpp,once,context,namespace='RedisPlugin',entrypoint='SyncRSetUChar';
  SetString(CONST VARSTRING options, CONST VARSTRING key, CONST STRING value, UNSIGNED database = 0,  UNSIGNED4 expire = 0) : cpp,once,context,namespace='RedisPlugin',entrypoint='SyncRSetStr';
  SetUtf8(CONST VARSTRING options, CONST VARSTRING key, CONST UTF8 value, UNSIGNED database = 0, UNSIGNED4 expire = 0) : cpp,once,context,namespace='RedisPlugin',entrypoint='SyncRSetUtf8';
  SetBoolean(CONST VARSTRING options, CONST VARSTRING key, BOOLEAN value, UNSIGNED database = 0, UNSIGNED4 expire = 0) : cpp,once,context,namespace='RedisPlugin',entrypoint='SyncRSetBool';
  SetReal(CONST VARSTRING options, CONST VARSTRING key, REAL value, UNSIGNED database = 0, UNSIGNED4 expire = 0) : cpp,once,context,namespace='RedisPlugin',entrypoint='SyncRSetReal';
  SetInteger(CONST VARSTRING options, CONST VARSTRING key, INTEGER value, UNSIGNED database = 0, UNSIGNED4 expire = 0) : cpp,once,context,namespace='RedisPlugin',entrypoint='SyncRSetInt';
  SetUnsigned(CONST VARSTRING options, CONST VARSTRING key, UNSIGNED value, UNSIGNED database = 0, UNSIGNED4 expire = 0) : cpp,once,context,namespace='RedisPlugin',entrypoint='SyncRSetUInt';
  SetData(CONST VARSTRING options, CONST VARSTRING key, CONST DATA value, UNSIGNED database = 0, UNSIGNED4 expire = 0) : cpp,once,context,namespace='RedisPlugin',entrypoint='SyncRSetData';

  INTEGER8 GetInteger(CONST VARSTRING options, CONST VARSTRING key, UNSIGNED database = 0) : cpp,once,context,namespace='RedisPlugin',entrypoint='SyncRGetInt8';
  UNSIGNED8 GetUnsigned(CONST VARSTRING options, CONST VARSTRING key, UNSIGNED database = 0) : cpp,once,context,namespace='RedisPlugin',entrypoint='SyncRGetUint8';
  STRING GetString(CONST VARSTRING options, CONST VARSTRING key, UNSIGNED database = 0) : cpp,once,context,namespace='RedisPlugin',entrypoint='SyncRGetStr';
  UNICODE GetUnicode(CONST VARSTRING options, CONST VARSTRING key, UNSIGNED database = 0) : cpp,once,context,namespace='RedisPlugin',entrypoint='SyncRGetUChar';
  UTF8 GetUtf8(CONST VARSTRING options, CONST VARSTRING key, UNSIGNED database = 0) : cpp,once,context,namespace='RedisPlugin',entrypoint='SyncRGetUtf8';
  BOOLEAN GetBoolean(CONST VARSTRING options, CONST VARSTRING key, UNSIGNED database = 0) : cpp,once,context,namespace='RedisPlugin',entrypoint='SyncRGetBool';
  REAL GetReal(CONST VARSTRING options, CONST VARSTRING key, UNSIGNED database = 0) : cpp,once,context,namespace='RedisPlugin',entrypoint='SyncRGetDouble';
  DATA GetData(CONST VARSTRING options, CONST VARSTRING key, UNSIGNED database = 0) : cpp,once,context,namespace='RedisPlugin',entrypoint='SyncRGetData';

  BOOLEAN Exists(CONST VARSTRING options, CONST VARSTRING key, UNSIGNED database = 0) : cpp,once,context,namespace='RedisPlugin',entrypoint='RExist';
  FlushDB(CONST VARSTRING options, UNSIGNED database = 0) : cpp,once,context,namespace='RedisPlugin',entrypoint='RClear';
  Del(CONST VARSTRING options, CONST VARSTRING key, UNSIGNED database = 0) : cpp,once,context,namespace='RedisPlugin',entrypoint='RDel';
  Persist(CONST VARSTRING options, CONST VARSTRING key, UNSIGNED database = 0) : cpp,once,context,namespace='RedisPlugin',entrypoint='RPersist';
  Expire(CONST VARSTRING options, CONST VARSTRING key, UNSIGNED4 expire, UNSIGNED database = 0) : cpp,once,context,namespace='RedisPlugin',entrypoint='RExpire';
  INTEGER DBSize(CONST VARSTRING options, UNSIGNED database = 0) : cpp,action,context,namespace='RedisPlugin',entrypoint='RDBSize';
END;

export async := SERVICE : plugin('redis')
  SetUnicode(CONST VARSTRING options, CONST VARSTRING key, CONST UNICODE value, UNSIGNED database = 0, UNSIGNED4 expire = 0) : cpp,once,context,namespace='RedisPlugin',entrypoint='AsyncRSetUChar';
  SetString(CONST VARSTRING options, CONST VARSTRING key, CONST STRING value, UNSIGNED database = 0, UNSIGNED4 expire = 0) : cpp,once,context,namespace='RedisPlugin',entrypoint='AsyncRSetStr';
  SetUtf8(CONST VARSTRING options, CONST VARSTRING key, CONST UTF8 value, UNSIGNED database = 0, UNSIGNED4 expire = 0) : cpp,once,context,namespace='RedisPlugin',entrypoint='AsyncRSetUtf8';
  SetBoolean(CONST VARSTRING options, CONST VARSTRING key, BOOLEAN value, UNSIGNED database = 0, UNSIGNED4 expire = 0) : cpp,once,context,namespace='RedisPlugin',entrypoint='AsyncRSetBool';
  SetReal(CONST VARSTRING options, CONST VARSTRING key, REAL value, UNSIGNED database = 0, UNSIGNED4 expire = 0) : cpp,once,context,namespace='RedisPlugin',entrypoint='AsyncRSetReal';
  SetInteger(CONST VARSTRING options, CONST VARSTRING key, INTEGER value, UNSIGNED database = 0, UNSIGNED4 expire = 0) : cpp,once,context,namespace='RedisPlugin',entrypoint='AsyncRSetInt';
  SetUnsigned(CONST VARSTRING options, CONST VARSTRING key, UNSIGNED value, UNSIGNED database = 0, UNSIGNED4 expire = 0) : cpp,once,context,namespace='RedisPlugin',entrypoint='AsyncRSetUInt';
  SetData(CONST VARSTRING options, CONST VARSTRING key, CONST DATA value, UNSIGNED database = 0, UNSIGNED4 expire = 0) : cpp,once,context,namespace='RedisPlugin',entrypoint='AsyncRSetData';

  INTEGER8 GetInteger(CONST VARSTRING options, CONST VARSTRING key, UNSIGNED database = 0) : cpp,once,context,namespace='RedisPlugin',entrypoint='AsyncRGetInt8';
  UNSIGNED8 GetUnsigned(CONST VARSTRING options, CONST VARSTRING key, UNSIGNED database = 0) : cpp,once,context,namespace='RedisPlugin',entrypoint='AsyncRGetUint8';
  STRING GetString(CONST VARSTRING options, CONST VARSTRING key, UNSIGNED database = 0) : cpp,once,context,namespace='RedisPlugin',entrypoint='AsyncRGetStr';
  UNICODE GetUnicode(CONST VARSTRING options, CONST VARSTRING key, UNSIGNED database = 0) : cpp,once,context,namespace='RedisPlugin',entrypoint='AsyncRGetUChar';
  UTF8 GetUtf8(CONST VARSTRING options, CONST VARSTRING key, UNSIGNED database = 0) : cpp,once,context,namespace='RedisPlugin',entrypoint='AsyncRGetUtf8';
  BOOLEAN GetBoolean(CONST VARSTRING options, CONST VARSTRING key, UNSIGNED database = 0) : cpp,once,context,namespace='RedisPlugin',entrypoint='AsyncRGetBool';
  REAL GetReal(CONST VARSTRING options, CONST VARSTRING key, UNSIGNED database = 0) : cpp,once,context,namespace='RedisPlugin',entrypoint='AsyncRGetDouble';
  DATA GetData(CONST VARSTRING options, CONST VARSTRING key, UNSIGNED database = 0) : cpp,once,context,namespace='RedisPlugin',entrypoint='AsyncRGetData';
END;

export locking := SERVICE : plugin('redis')
  UNSIGNED8 GetLockObject(CONST VARSTRING options, CONST VARSTRING key, UNSIGNED database = 0) : cpp,once,context,namespace='RedisPlugin',entrypoint='RGetLockObject';
  BOOLEAN MissThenLock(UNSIGNED8 keyPtr) : cpp,action,context,namespace='RedisPlugin',entrypoint='RMissThenLock';

  UNICODE SetUnicode(UNSIGNED8 keyPtr, CONST UNICODE value, UNSIGNED4 expire = 0) : cpp,once,context,namespace='RedisPlugin',entrypoint='LockingRSetUChar';
  STRING SetString(UNSIGNED8 keyPtr, CONST STRING value, UNSIGNED4 expire = 0) : cpp,once,context,namespace='RedisPlugin',entrypoint='LockingRSetStr';
  UTF8 SetUtf8(UNSIGNED8 keyPtr, CONST UTF8 value, UNSIGNED4 expire = 0) : cpp,once,context,namespace='RedisPlugin',entrypoint='LockingRSetUtf8';
  BOOLEAN SetBoolean(UNSIGNED8 keyPtr, BOOLEAN value, UNSIGNED4 expire = 0) : cpp,once,context,namespace='RedisPlugin',entrypoint='LockingRSetBool';
  REAL SetReal(UNSIGNED8 keyPtr, REAL value, UNSIGNED4 expire = 0) : cpp,once,context,namespace='RedisPlugin',entrypoint='LockingRSetReal';
  INTEGER SetInteger(UNSIGNED8 keyPtr, INTEGER value, UNSIGNED4 expire = 0) : cpp,once,context,namespace='RedisPlugin',entrypoint='LockingRSetInt';
  UNSIGNED SetUnsigned(UNSIGNED8 keyPtr, UNSIGNED value, UNSIGNED4 expire = 0) : cpp,once,context,namespace='RedisPlugin',entrypoint='LockingRSetUInt';
  DATA SetData(UNSIGNED8 keyPtr, CONST DATA value, UNSIGNED4 expire = 0) : cpp,once,context,namespace='RedisPlugin',entrypoint='LockingRSetData';

  INTEGER8 GetInteger(UNSIGNED8 keyPtr) : cpp,once,context,namespace='RedisPlugin',entrypoint='LockingRGetInt8';
  UNSIGNED8 GetUnsigned(UNSIGNED8 keyPtr) : cpp,once,context,namespace='RedisPlugin',entrypoint='LockingRGetUint8';
  STRING GetString(UNSIGNED8 keyPtr) : cpp,once,context,namespace='RedisPlugin',entrypoint='LockingRGetStr';
  UNICODE GetUnicode(UNSIGNED8 keyPtr) : cpp,once,context,namespace='RedisPlugin',entrypoint='LockingRGetUChar';
  UTF8 GetUtf8(UNSIGNED8 keyPtr) : cpp,once,context,namespace='RedisPlugin',entrypoint='LockingRGetUtf8';
  BOOLEAN GetBoolean(UNSIGNED8 keyPtr) : cpp,once,context,namespace='RedisPlugin',entrypoint='LockingRGetBool';
  REAL GetReal(UNSIGNED8 keyPtr) : cpp,once,context,namespace='RedisPlugin',entrypoint='LockingRGetDouble';
  DATA GetData(UNSIGNED8 keyPtr) : cpp,once,context,namespace='RedisPlugin',entrypoint='LockingRGetData';
END;

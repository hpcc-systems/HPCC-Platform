#!/bin/bash
################################################################################
#    HPCC SYSTEMS software Copyright (C) 2012 HPCC SystemsÂ®.
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
################################################################################

###<REPLACE>###

source ${INSTALL_DIR}/sbin/hpcc_setenv
deploydir=$(dirname $(type -path $0))

source  ${INSTALL_DIR}/etc/init.d/hpcc_common
component=$(basename $PWD)

PID_NAME="${PID_DIR}/${component}.pid"
INIT_PID_NAME="${PID_DIR}/init_${component}.pid"

timestamp="$(date +%Y_%m_%d_%H_%M_%S)"
export logfile="${LOG_DIR}/${component}/init_${component}_${timestamp}.log"

# for use by init_thorslave call
logredirect="init_thorslave_${component}_${timestamp}.log"

log "Starting ${component}"

log "removing any previous sentinel file"
export SENTINEL="thor.sentinel"
rm -f ${SENTINEL}

if [[ -z "$deploydir" ]]; then
    deploydir=$(pwd -P)
fi

instancedir=$(pwd -P)
source $instancedir/setvars
slaveportinc=$(($channelsperslave * $localthorportinc))

ln -s -f $deploydir/thormaster_lcr thormaster_$THORNAME

ENV_DIR=$(cat ${HPCC_CONFIG} | sed -n "/\[DEFAULT\]/,/\[/p" | grep "^configs=" | sed -e 's/^configs=//')

contains()
{
    local n=$#
    local value=${!n}
    local i=0
    for ((i=1;i < ${n};i++)); do
        if [[ "${!i}" == "${value}" ]]; then
            echo "${i}"
            return 0
        fi
    done
    echo "0"
    return 1
}

kill_slaves()
{
    log "Killing slaves"
    # NB: many of the parameters to init_thorslave not used by 'stop' command
    if [[ "$localthor" = "true" ]]; then
        $deploydir/init_thorslave stop localhost $slavespernode $THORSLAVEPORT $slaveportinc $THORMASTER $THORMASTERPORT $LOG_DIR $instancedir $deploydir $THORNAME ${INSTALL_DIR}/sbin $logredirect no-valgrind 0:0:0
    else
        # we want to kill only slaves that have already been started in run_thor
        if [[ -r $instancedir/uslaves ]]; then
            clusternodes=$(cat $instancedir/uslaves 2> /dev/null | wc -l)
            $deploydir/frunssh $instancedir/uslaves "/bin/sh -c '$deploydir/init_thorslave stop localhost $slavespernode $THORSLAVEPORT $slaveportinc $THORMASTER $THORMASTERPORT $LOG_DIR $instancedir $deploydir $THORNAME ${INSTALL_DIR}/sbin $logredirect no-valgrind 0:0:0'" -i:$SSHidentityfile -u:$SSHusername -pe:$SSHpassword -t:$SSHtimeout -a:$SSHretries -n:$clusternodes 2>&1
            FRUNSSH_RC=$?
            if [[ ${FRUNSSH_RC} -gt 0 ]]; then
                log "Error ${FRUNSSH_RC} in frunssh"
                log "Please check ${LOG_DIR}/frunssh for more details"
                # clean up any slaves it was able to reach
                log "Stopping ${component}"
                kill_process ${PID_NAME} thormaster_${component} 25
                rm -f $instancedir/slaves > /dev/null 2>&1
            else
                log "Frunssh successful"
            fi
        fi
    fi

    rm -f $instancedir/uslaves > /dev/null 2>&1
}

killed()
{
    log "Stopping ${component}"
    kill_process ${PID_NAME} thormaster_${component} 25
    log "$component Stopped"
    unlock ${LOCK_DIR}/$component/${component}.lock
    kill_slaves
    log "removing init.pid file and slaves file"
    rm -f $instancedir/slaves > /dev/null 2>&1
    exit 255
}

trap "killed" SIGINT SIGTERM
log "Ensuring a clean working environment ..."
kill_slaves
thorpid=0

while [[ 1 ]]; do
    # update slaves file in case state of environment has been altered since last run
    errorMessage=$( daliadmin server=$DALISERVER timeout=25 clusternodes ${component} $instancedir/slaves 2>&1 )
    errcode=$?
    if [[ 0 != ${errcode} ]]; then
        log "failed to connect/lookup dali group for ${component}"
        log "$errorMessage"
        sleep 3 # allow start to see us running once
        exit 1
    fi

    log "--------------------------"
    log "starting thorslaves ..."

    # Would be simpler, if there was simple way to test if ip is local and get rid of 'localthor' setting
    sort $instancedir/slaves | uniq > $instancedir/uslaves

    # build slave args and pass to slave cmdline ...
    slaveargs=""
    slaveport=$THORSLAVEPORT
    clusternode=1
    clusternodes=$(cat $instancedir/slaves | wc -l)
    for ip in $(cat $instancedir/uslaves); do
        for slaveip in $(cat $instancedir/slaves); do
            if [[ ${slaveip} = ${ip} ]]; then
                for (( slave=0; slave<${slavespernode}; slave++ )); do
                    slavenum=$(( ${clusternode} + (${slave} * ${clusternodes}) ))
                    slaveargs="${slaveargs} ${slave}:${slavenum}:${slaveport}"
                    slaveport=$(( ${slaveport} + ${slaveportinc} ))
                done
            fi
            clusternode=$(( $clusternode + 1 ))
        done
    done

    # To configure Thor to run with valgrind, set 'valgrindOptions' in the ThorCluster in the environment.xml
    # e.g. set valgrindOptions="--tool=memcheck --leak-check=full --show-leak-kinds=all -v"
    log "valgrindOptions = \"${valgrindOptions}\""
    if [[ -z "${valgrindOptions}" ]]; then
        valgrindOptions="no-valgrind"
    fi

    log "slaveargs =${slaveargs}"

    if [[ "$localthor" = "true" ]]; then
        slaveip=$(head -n 1 $instancedir/uslaves)
        $deploydir/init_thorslave start $slaveip $slavespernode $THORSLAVEPORT $slaveportinc $THORMASTER $THORMASTERPORT $LOG_DIR $instancedir $deploydir $THORNAME ${INSTALL_DIR}/sbin $logredirect "${valgrindOptions}" ${slaveargs}
    else
        clusternodes=$(cat $instancedir/uslaves | wc -l)
        escapedValgrindOptions=$(printf %q "${valgrindOptions}")
        # -----------------------------------
        # $deploydir/frunssh $instancedir/uslaves "/bin/sh -c '$deploydir/init_thorslave start %a $slavespernode $THORSLAVEPORT $slaveportinc $THORMASTER $THORMASTERPORT $LOG_DIR $instancedir $deploydir $THORNAME ${INSTALL_DIR}/sbin $logredirect ${escapedValgrindOptions} ${slaveargs}'" -i:$SSHidentityfile -u:$SSHusername -pe:$SSHpassword -t:$SSHtimeout -a:$SSHretries -n:$clusternodes 2>&1
        # FRUNSSH_RC=$?
        # if [[ ${FRUNSSH_RC} -gt 0 ]]; then
        #     log "Error ${FRUNSSH_RC} in frunssh"
        #     log "Please check ${LOG_DIR}/frunssh for more details"
        #     # clean up any slaves it was able to reach
        #     kill_slaves
        #     rm -f $instancedir/slaves > /dev/null 2>&1
        #     log "Sleeping for 30 seconds before retrying"
        #     sleep 30
        #     continue
        # fi
        # -----------------------------------
        for slavehost in $(cat $instancedir/uslaves); do
            ssh -x -o LogLevel=ERROR -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no ${slavehost} "$deploydir/init_thorslave start ${slavehost} $slavespernode $THORSLAVEPORT $slaveportinc $THORMASTER $THORMASTERPORT $LOG_DIR $instancedir $deploydir $THORNAME ${INSTALL_DIR}/sbin $logredirect ${escapedValgrindOptions} ${slaveargs}" &
        done
        # -----------------------------------
    fi

    if [[ -z ${valgrindOptions} || "${valgrindOptions}" == "no-valgrind" ]]; then
        log "thormaster cmd : $instancedir/thormaster_$THORNAME MASTER=$THORMASTER:$THORMASTERPORT"
        nohup $instancedir/thormaster_$THORNAME MASTER=$THORMASTER:$THORMASTERPORT 2> /dev/null 1>/dev/null &
    else
        cmd="valgrind ${valgrindOptions} --log-file=$LOG_DIR/$THORNAME/valgrind.thormaster.log $instancedir/thormaster_$THORNAME MASTER=$THORMASTER:$THORMASTERPORT 2>/dev/null 1>/dev/null &"
        log "${cmd}"
        eval ${cmd}
    fi

    thorpid=$!
    if [[ "$thorpid" -ne "0" ]]; then
        log "thormaster_lcr process started pid = $thorpid"

        echo $thorpid > $PID_NAME
        wait $thorpid
        errcode=$?
        case $errcode in
        # TEC_Clean - stop
        0)  log "Thormaster ($thorpid) Exited cleanly"
            rm -f $instancedir/slaves $instancedir/uslaves $PID_NAME $INIT_PID_NAME ${SENTINEL} > /dev/null 2>&1
            unlock ${LOCK_DIR}/${component}/${component}.lock
            exit 0
            ;;
        # TEC_CtrlC - stop
        1)  log "Thormaster ($thorpid) Interrupted, Ctrl-C caught"
            killed
            ;;
        # TEC_SlaveInit - stop
        4)  log "Thormaster ($thorpid) Slaves failed to initialize"
            log "Shutting down"
            killed
            ;;
        # TEC_Idle - restart
        2)  log "Thormaster ($thorpid) Idle"
            kill_slaves
            ;;
        # TEC_Swap=5, TEC_Watchdog=3, TEC_DaliDown=6 - attempt restart
        *)  if [[ $errcode -eq 5 ]]; then
                log "Thormaster ($thorpid) Swap node required"
            elif [[ $errcode -eq 3 ]]; then
                log "Thormaster ($thorpid) Lost connection to slave(s)"
            elif [[ $errcode -eq 6 ]]; then
                log "Thormaster ($thorpid) Unable to connect to Dali"
            else
                log "Thormaster ($thorpid) Unknown error code: [$errcode]"
            fi
            log "Stopping thorslave(s) for restart"
            kill_slaves
            if [[ "false" != "$autoSwapNode" ]]; then
              log "Running autoswap $THORNAME :: ($thorpid)"
              swapnode auto $DALISERVER $component
              errcode=$?
              if [[ 0 != ${errcode} ]]; then
                # stop
                log "Auto swap node failed, errcode=${errcode}"
                killed
              fi
            else
              log "Autoswap set to false. Restarting"
            fi
            # restarting thormaster
            ;;
        esac
    else
        log "failed to start thormaster_lcr, pausing for 30 seconds"
        sleep 30
        kill_slaves
    fi
    if [[ ! -e $SENTINEL ]]; then
        log "$SENTINEL has been removed or thormaster did not fully start - script stopping"
        exit 0
    fi
done

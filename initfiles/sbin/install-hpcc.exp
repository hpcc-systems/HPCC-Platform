#!/usr/bin/env expect
################################################################################
#    HPCC SYSTEMS software Copyright (C) 2012 HPCC SystemsÂ®.
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
################################################################################
#
# Usage: install-hpcc.exp
#
# This script is used as a remote engine for a cluster installation.
#
# Flow:
#
# 1. Copay HPCC package and script to node.
# 2. call remote-install-engine.sh to install and configure HPCC.
#



proc print_usage {} {
    puts ""
    puts "Usage: [lindex [split $::argv0 '/' ] end]  <host ip>"
    puts ""
    exit 1
}

proc sshcmd { cmd params_string } {
  global password user
  if {[string length $password] == 0 } {
     set cmd2 "$cmd -o LogLevel=QUIET -o BatchMode=yes -o StrictHostKeyChecking=no"
     if {[string compare $::env(USER) $user] == 0} {
        return "$cmd2 $params_string"
     } else {
        return "su $user -c \"$cmd2  [regsub -all "\"" $params_string \\\"]\""
     }
  } else {
     return "$cmd -o LogLevel=QUIET $params_string"
  }
}



proc testWithPing {} {
   global ip
   spawn ping -c1 -W 5 ${ip}
   expect eof {
      catch wait result
      if { [lindex $result 3] != 0 } {
         echo "${ip}: Cannot Ping host? (Host Alive?)"
         exit 1
      }
   }
   sleep 1
   puts "${ip}: Host is alive."
}

proc checkSSHConnection {} {
   global ip user password prompt

   set timeout 60
   # JIRA 12585 in chance root user cannot ssh with key pairs
   eval "spawn [sshcmd ssh "${user}@${ip}"]"
   expect {
      *?assword:* {
         send "${password}\r";
         exp_continue
      } "*?ermission denied*" {
         puts "The user or password is wrong"
         exit 1
      } yes/no)? {
         send "yes\r";
         exp_continue
      } timeout {
         exit 1;
      } eof {
         exit 1;
      }  -re "${prompt}" {
         puts "Connection is OK"
         send "exit\r"
      }
   }

   expect -re $
   interact;
}

proc copyPayload {} {
   global ip user password prompt

   set timeout 300
   eval "spawn [sshcmd scp "/tmp/remote_install.tgz ${user}@${ip}:~;"]"
   expect {
      *?assword:* {
         send "${password}\r";
         exp_continue
      } "*?ermission denied*" {
         puts "The user or password is wrong"
         exit 1
      } yes/no)? {
         send "yes\r";
         exp_continue
      } timeout {
         exit 1;
      } eof {
         catch wait result
         if { [lindex $result 3] != 0 } {
            exit [lindex $result 3]
         }
      }
   }
   sleep 1
}

proc expandPayload {} {
   global ip user password prompt

   set timeout 180
   eval "spawn [sshcmd ssh "${user}@${ip} \"cd /; tar -zxf ~/remote_install.tgz\""]"
   expect {
      *?assword:* {
         send "${password}\r"
         exp_continue
      } "*?ermission denied*" {
         puts "The user or password is wrong"
         exit 1
      } yes/no)? {
         send "yes\r";
         exp_continue
      } timeout {
         exit 1;
      } eof {
         catch wait result
         if { [lindex $result 3] != 0 } {
            exit [lindex $result 3]
         }
      }
   }
   sleep 1
}

proc runPayload {} {
   global ip user password prompt pkg cmd_prefix remote_install

   set basepkg  [file tail  ${pkg}]
   set timeout 60

   expect -re $
   eval "spawn [sshcmd ssh ${user}@${ip}]"
   expect {
      *?assword:* {
         send "${password}\r"
         exp_continue
      } "*?ermission denied*" {
         puts "The user or password is wrong"
         exit 1
      } yes/no)? {
         send "yes\r"
         exp_continue
      } timeout {
         exit 1;
      } eof {
         exit 1;
      } -re "${prompt}" {}
   }

   expect -re $
   send "${cmd_prefix} ${remote_install}/remote-install-engine.sh ${remote_install}/${basepkg}\r"
   expect {
      "*password for*" {
         send "${password}\r"
         exp_continue
      } "*?ermission denied*" {
         puts "The user or password is wrong"
         exit 1
      } timeout {
         exit 1;
      } eof {
         exit 1;
      }  -re "${prompt}" {}
   }

   expect  -re $
   send "echo \$?\r"
   expect   -re "(\r\n| )(\[0-9]*)\r\n" {
      if { [string compare $expect_out(2,string) "0" ] == 0 } {
         puts "${ip}: Done."
         set remotelog 0
      } else {
         set remotelog 1
      }
   }

   expect  -re $
   send "${cmd_prefix} rm ~/remote_install.tgz\r"
   expect  -re "${prompt}" {}

   if { $remotelog == 1 } {
      expect -re $
      send "cat ${remote_install}/remote-install.log\r"
      expect -re "${prompt}" {}
      exit 1
   }

   send "exit\r"
   interact
}


####################################################################
#                                                                  #
# Main                                                             #
#                                                                  #
####################################################################
set ip  [lindex $argv 0]
if { [string length $ip ] == 0 } {
   puts "Missing hostname or ip"
   print_usage
   exit 1
}

# Check required environment variables
if { [catch {
        set user            $::env(ADMIN_USER)
        set password        $::env(PASS)
        set cmd_prefix      $::env(CMDPREFIX)
        set remote_install  $::env(REMOTE_INSTALL)
        set pkg             $::env(PKG)
     } error] } {

   puts stderr "Missing environment variable.\n$error"
   exit 1
}


set prompt  "(${user}@|\\r\\n\\$ |\\r\\n# )"

testWithPing
checkSSHConnection
copyPayload
expandPayload
runPayload

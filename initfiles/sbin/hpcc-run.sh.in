#!/bin/bash
################################################################################
#    Copyright (C) 2011 HPCC Systems.
#
#    All rights reserved. This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
################################################################################
#
# Usage: hpcc-run.sh [hpcc-init | dafilesrv] [-c component] <cmd>
#
# This is acomplished with a standard ssh command with the use of the
# runtime users id_rsa file.

###<REPLACE>###

source  ${INSTALL_DIR}/etc/init.d/lock.sh
source  ${INSTALL_DIR}/etc/init.d/pid.sh
source  ${INSTALL_DIR}/etc/init.d/hpcc_common
source  ${INSTALL_DIR}/etc/init.d/init-functions
source  ${INSTALL_DIR}/etc/init.d/export-path

print_usage(){
        echo "usage: hpcc-run.sh [-c component] [-a {hpcc-init|dafilesrv}] {start|stop|restart|status|setup}"
        exit 1
}

getIPS(){
        IPS=`${INSTALL_DIR}/sbin/configgen -env ${envfile} -machines | awk -F, '{print \$1}'  | sort | uniq`
}

getDali(){
        DIP=`${INSTALL_DIR}/sbin/configgen -env ${envfile} -listall | grep Dali | awk -F, '{print \$3}'  | sort | uniq`
}

buildCmd(){
        if [ -z $3 ]; then
                CMD="sudo /etc/init.d/$1 $2"
        else
                CMD="sudo /etc/init.d/$1 -c $3 $2"
        fi
}

runCmd(){
        echo "$IP: Running $@";
        ssh -i $home/$user/.ssh/id_rsa $user@$IP $@;
}

set_envrionmentvars
envfile=$configs/$environment

getIPS
getDali



TEMP=`/usr/bin/getopt -o a:c:h --long help,action -n 'hpcc-run' -- "$@"`
if [ $? != 0 ] ; then echo "Failure to parse commandline." >&2 ; exit 1 ; fi
eval set -- "$TEMP"
while true ; do
    case "$1" in
        -c) comp=$2
            shift 2 ;;
        -a|--action) action=$2
            shift 2 ;;
        -h|--help) print_usage
                   shift ;;
        --) shift ; break ;;
        *) print_usage ;;
    esac
done

cnt=0
for arg; do 
    arg=$arg; 
    case "$arg" in
        start) 
            cmd="start"
            cnt=$(( $cnt + 1 ))
            ;;
        stop) 
            cmd="stop"
            cnt=$(( $cnt + 1 ))
            ;;
        restart) 
            cmd="restart"
            cnt=$(( $cnt + 1 ))
            ;;
        status) 
            cmd="status"
            cnt=$(( $cnt + 1 ))
            ;;
        setup) 
            cmd="setup"
            cnt=$(( $cnt + 1 ))
            ;;
        *) print_usage;;
    esac
done

if [ ${cnt} -gt 1 ]; then
        print_usage
fi

case "$action" in
    hpcc-init) ;;
    dafilesrv) ;;
    *) if [ -z $action ]; then
            action="hpcc-init"
        else
            print_usage 
        fi
        ;;
esac

if [ "${cmd}" == "restart" ]; then
    for i in stop start; do
        cmd=$i
        echo "Running '${cmd}' on cluster."
        if [ "${cmd}" == "start" ]; then
            if ping -c 1 -w 5 -n $DIP > /dev/null 2>&1; then
                echo "$DIP: Host is alive."
                CAN_SSH="`ssh -i $home/$user/.ssh/id_rsa -o BatchMode=yes -o StrictHostKeyChecking=no $user@$DIP exit > /dev/null 2>&1; echo $?`"
                if [ "$CAN_SSH" -eq 255 ]; then
                    echo "$DIP: Cannot SSH to host.";
                else
                    IP=$DIP
                    buildCmd $action $cmd $comp
                    runCmd $CMD
                fi
            else
                echo "$DIP: FAIL"
            fi 
        fi

        for IP in $IPS; do
        if [ "$IP" == "$DIP" ]; then
            continue
        fi
            if ping -c 1 -w 5 -n $IP > /dev/null 2>&1; then
                echo "$IP: Host is alive."
                CAN_SSH="`ssh -i $home/$user/.ssh/id_rsa -o BatchMode=yes -o StrictHostKeyChecking=no $user@$IP exit > /dev/null 2>&1; echo $?`"
                if [ "$CAN_SSH" -eq 255 ]; then
                    echo "$IP: Cannot SSH to host.";
                else
                    buildCmd $action $cmd $comp
                    runCmd $CMD
                fi
            else
                echo "$IP: FAIL"
            fi
        done
        
        if [ "${cmd}" == "stop" ]; then
            if ping -c 1 -w 5 -n $DIP > /dev/null 2>&1; then
                echo "$DIP: Host is alive."
                CAN_SSH="`ssh -i $home/$user/.ssh/id_rsa -o BatchMode=yes -o StrictHostKeyChecking=no $user@$DIP exit > /dev/null 2>&1; echo $?`"
                if [ "$CAN_SSH" -eq 255 ]; then
                    echo "$DIP: Cannot SSH to host.";
                else
                    IP=$DIP
                    buildCmd $action $cmd $comp
                    runCmd $CMD
                fi
            else
                echo "$DIP: FAIL"
            fi
        fi
    done
else
    if [ "${cmd}" == "start" ] || [ "${cmd}" == "status" ]; then
        if ping -c 1 -w 5 -n $DIP > /dev/null 2>&1; then
            echo "$DIP: Host is alive."
            CAN_SSH="`ssh -i $home/$user/.ssh/id_rsa -o BatchMode=yes -o StrictHostKeyChecking=no $user@$DIP exit > /dev/null 2>&1; echo $?`"
            if [ "$CAN_SSH" -eq 255 ]; then
                echo "$DIP: Cannot SSH to host.";
            else
                IP=$DIP
                buildCmd $action $cmd $comp
                runCmd $CMD
            fi
        else
            echo "$DIP: FAIL"
        fi 
    fi

    for IP in $IPS; do
        if [ "$IP" == "$DIP" ]; then
            continue
        fi
        if ping -c 1 -w 5 -n $IP > /dev/null 2>&1; then
            echo "$IP: Host is alive."
            CAN_SSH="`ssh -i $home/$user/.ssh/id_rsa -o BatchMode=yes -o StrictHostKeyChecking=no $user@$IP exit > /dev/null 2>&1; echo $?`"
            if [ "$CAN_SSH" -eq 255 ]; then
                echo "$IP: Cannot SSH to host.";
            else
                buildCmd $action $cmd $comp
                runCmd $CMD
            fi
        else
            echo "$IP: FAIL"
        fi
    done
        
    if [ "${cmd}" == "stop" ]; then
        if ping -c 1 -w 5 -n $DIP > /dev/null 2>&1; then
            echo "$DIP: Host is alive."
            CAN_SSH="`ssh -i $home/$user/.ssh/id_rsa -o BatchMode=yes -o StrictHostKeyChecking=no $user@$DIP exit > /dev/null 2>&1; echo $?`"
            if [ "$CAN_SSH" -eq 255 ]; then
                echo "$DIP: Cannot SSH to host.";
            else
                IP=$DIP
                buildCmd $action $cmd $comp
                runCmd $CMD
            fi
        else
             echo "$DIP: FAIL"
        fi
    fi
fi

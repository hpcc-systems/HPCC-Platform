#!/bin/bash
################################################################################
#    HPCC SYSTEMS software Copyright (C) 2012 HPCC SystemsÂ®.
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
################################################################################

###<REPLACE>###

source ${INSTALL_DIR}/etc/init.d/hpcc_common
source ${INSTALL_DIR}/etc/init.d/init-functions

initPath="$path/etc/init.d"
homePath=$HOME/$user
binPath="$path/bin"

if [ ! -d ${homePath}/certificate ]; then
    mkdir -p ${homePath}/certificate
fi

if [ ! -e ${homePath}/certificate/key.pem ]; then
    ssh-keygen -t rsa -N '' -f ${homePath}/certificate/key.pem \
        1>/dev/null 2>&1
    openssl rsa -in ${homePath}/certificate/key.pem -pubout \
        -out ${homePath}/certificate/public.key.pem
    chmod 0644 ${homePath}/certificate/public.key.pem
    rm -f ${homePath}/certificate/key.pem.pub
    printf "RSA key installed for user %-28s ..." "$user"
    log_success_msg
else
    printf "RSA keys are already installed for user %-15s ..." "$user"
    log_success_msg
fi

if [ ! -e ${homePath}/certificate/certificate.pem ]; then
    #openssl req -new -key ${homePath}/certificate/key.pem -keyform PEM -x509 \
    #    -days 365 -out ${homePath}/certificate/certificate.pem \
    #    -batch 1>/dev/null 2>&1
    openssl req -new -key ${homePath}/certificate/key.pem -out ${homePath}/certificate/csr.pem
    cfssl sign -config ${INSTALL_DIR}/etc/init.d/sign_config.json ${homePath}/certificate/csr.pem | cfssljson -bare ${homePath}/certificate/certificate
    printf "CA signed Certificate installed for user %-12s ..." "$user"
    log_success_msg
else
    printf "Certificate already installed for %-9s ..." "$user"
    log_success_msg
fi

if [ ! -e ${homePath}/.ssh/id_rsa ]; then
    cp ${homePath}/certificate/key.pem ${homePath}/.ssh/id_rsa
    ssh-keygen -f ${homePath}/certificate/public.key.pem -i -m PKCS8 > ${homePath}/.ssh/id_rsa.pub
    cat ${homePath}/.ssh/id_rsa.pub >> ${homePath}/.ssh/authorized_keys
    printf "ssh keys installed for user %-12s ..." "$user"
    log_success_msg
else
    printf "ssh keys already installed for %-9s ..." "$user"
    log_success_msg
fi

echo ${CA_ADDR} > /tmp/caaddr.txt

exit 0

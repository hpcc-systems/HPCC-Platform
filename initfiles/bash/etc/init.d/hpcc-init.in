#!/bin/bash
################################################################################
#    HPCC SYSTEMS software Copyright (C) 2012 HPCC Systems.
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
################################################################################
#
#########################################################################
#                                                                       #
#                          System Flow                                  #
#                                                                       #
#########################################################################
#                                                                       #
#      1. Parse Passed In arguments                                     #
#      2. Get the component and specific information                    #
#      3. Generate component related config files (runtime directory)   #
#      4. CD to the runtime Directory                                   #
#      5. Start the component                                           #
#                                                                       #
#########################################################################

##-----------------------------------------------------------------------------
#                         chkconfig Parameters
##-----------------------------------------------------------------------------

# chkconfig: 235 40 90
# Description: Starts the HPCC processes
# Provides: hpcc-init
# Required-Start: dafilesrv

##-----------------------------------------------------------------------------
#                         General Purpose Functions                           
##-----------------------------------------------------------------------------

###<REPLACE>###


function print_usage {
    echo "Usage: $0 [-c component] {start|stop|restart|status|setup}
       $0 [--componentlist] Display node component name list.
       $0 [--typelist] Display node component type list.
       $0 [-h] [--help] Display help"
    echo
    print_components
    exit 0
}

function print_components {
    if [ ! -z ${compList} ];then
        echo  "Components on this node as defined by ${CONFIG_DIR}/${ENV_XML_FILE}:"
        IFS=$'\n'
        echo  "${compList[*]}"
        unset IFS
    else
        echo  "No components on this node as defined by ${CONFIG_DIR}/${ENV_XML_FILE}."
    fi
    echo
    exit 0
}

function print_types {
    if [ ! -z ${compList} ];then
        echo  "Components types on this node as defined by ${CONFIG_DIR}/${ENV_XML_FILE}:"
        IFS=$'\n'
        echo  "${compTypeList[*]}"
        unset IFS
    else
        echo  "No components on this node as defined by ${CONFIG_DIR}/${ENV_XML_FILE}."
    fi
    echo
    exit 0
}



source  ${INSTALL_DIR}/etc/init.d/lock.sh
source  ${INSTALL_DIR}/etc/init.d/pid.sh
source  ${INSTALL_DIR}/etc/init.d/hpcc_common
source  ${INSTALL_DIR}/etc/init.d/init-functions
source  ${INSTALL_DIR}/etc/init.d/export-path

# Only root user can write following logfile
is_root

[ ! -e ${LOG_DIR} ] && mkdir -p ${LOG_DIR}
export logfile=${LOG_DIR}/hpcc-init.log

[ ! -e ${logfile}  ] && touch $logfile

## Debug variable allowing verbose debug output
##
DEBUG=${DEBUG:-NO_DEBUG}
TRACE=${TRACE:-0}
VERBOSE=${VERBOSE:-0}
COMP_BY_TYPE=${COMP_BY_TYPE:-0}
DAFILESRV=${DAFILESRV:-0}


set_environmentvars
envfile=$configs/$environment

# Know HPCC user after set_environmentvars
log_dir_owner=$(ls -ld $LOG_DIR | awk '{print $3}')
[ "log_dir_owner" != "${user}" ] && chown ${user}:${user} $LOG_DIR
chown ${user}:${user} $logfile

#Sourcing the hpcc environment
configgen_path=${path}/sbin
bin_path=${path}/bin
source ${configgen_path}/hpcc_setenv

which_service
get_commondirs

log "--------------------------"
log "--------------------------"

#Check for existance of user
check_user ${user}
if [ $? -ne 1 ];then
   log  "$user user does not exist on the system. Exiting ..."
   echo "$user user does not exits on the system. Exiting ..."
   exit 3
fi

check_group ${group}
if [ $? -ne 1 ];then
   log  "Group for user ${group} does not exist on the system. Exiting ..."
   echo "Group for user ${group} does not exist on the system. Exiting ..."
   exit 3
fi 

#changing ownership of the home directory for user.
chown -cR $user:$group ${home}/${user} 1>/dev/null 2>/dev/null

basepath=`pwd`

COMPS=`${configgen_path}/configgen -env ${envfile} -list`

comp.parser ${COMPS}

if [ -z ${compArray} ];then
   log  "There are no components configured to run on this node ..."
   echo "There are no components configured to run on this node ..."
   exit 3
fi

#--------------------------------------------------------------------------------
#                                    Beginning of the Option Parsing                                                 
#-------------------------------------------------------------------------------

compList[0]=''
compListLen=0
compTypeList[0]=''
foundThorSlave=0
compDafilesrv=''

#Forming the component list from the configgen 

for i in ${compArray[@]}; do
    compName=${i#*_}
    comp.getByName ${compName}
    componentType=`echo ${comp_return} | awk -F" " '{print $1}' | awk -F"=" '{print $2}'`
    if [ -z ${compName} ];
    then
        continue;
    elif strstr ${componentType} "dali" ;
    then
        compDali=${compName}
    elif strstr ${componentType} "thor";
    then
        comp.getByName "${compName}"
        if strstr ${comp_return} "slave";
        then
            foundThorSlave=1
        fi
        compListLen=$(expr ${compListLen} + 1)
        compList[${compListLen}]=${compName}
        compTypeList[${compListLen}]=${componentType}
    else
        if strstr ${componentType} "ftslave" ; 
        then 
            continue
        elif strstr ${componentType} "dafilesrv";
        then
            compDafilesrv=${compName}
        else
            compListLen=$(expr ${compListLen} + 1)
            compList[${compListLen}]=${compName}
            compTypeList[${compListLen}]=${componentType}
        fi
    fi
done

#Defaulting the first component as Dali 
compList[0]=$compDali
compTypeList[0]="dali"

log "The following components have been located:"
for i in ${compList[@]};do
    log "---> $i"
done
log "--------------------------"
    
#declaring all flags here
isComp=0
component=""
runSetupOnly=0
dafilesrvflag=0

TEMP=`/usr/bin/getopt -o c:hd --long help,componentlist,typelist,debug -n 'hpcc-init' -- "$@"`
if [ $? != 0 ] ; then echo "Failure to parse commandline." >&2 ; exit 1 ; fi
eval set -- "$TEMP"
while true ; do
    case "$1" in
        -c) comp=$2
            isComp=1
            comp.getByName $comp
            if [ -z $comp_return ] ;
            then
                comp.getByType $comp
                if [ -z $comp_return ]
                then
                    log "Unknown component: $comp"
                    exit 1
                fi
                for (( i=0; i<=${compListLen}; i++ ));do
                    if strstr ${compTypeList[$i]} "$comp";
                    then
                        component="$component ${compList[$i]}"
                    fi
                done
                if [ -z "${component}" ];then
                   if strstr "${comp}" "dafilesrv" ;then
                       component="${component} ${compDafilesrv}"
                   fi
                fi
            else
                component=$comp
            fi
            shift 2 ;;
        -d|--debug) DEBUG="DEBUG"
                    shift ;;
        -h|--help)  print_usage
                    shift ;;
        --componentlist) print_components
                    shift ;;
        --typelist) print_types
                    shift ;;
        --) shift ; break ;;
        *) print_usage ;;
    esac
done
for arg do arg=$arg; done

if [ -z $arg ] || [ $# -ne 1 ]; then
    print_usage
fi

log "Debug log written to $LOG_DIR/hpcc-init.debug"
exec 2>$LOG_DIR/hpcc-init.debug
set -x

if [ -z ${component} ]; then
    for (( i=0; i<=${compListLen}; i++ ));do
        component="$component ${compList[$i]}"
    done
elif strstr ${component} "dafilesrv";then
    compDafilesrv=${component}
    component=''
else
    compDafilesrv=''
fi

case "$arg" in 
    status|start|restart|setup)
        cmd=$arg
        ;;
    stop)
       #need to reverse the list so that dali stops last
       cmd=$arg
       component_rev=""
       if [ "${isComp}" -eq 0 ]; then
         for (( i=${compListLen}; i>=0; i-- ));
         do
            if strstr ${compList[$i]} "dafilesrv" ;then
              continue;
            fi
            component_rev="$component_rev ${compList[$i]}"
         done
         if [ ! -z "${component_rev}" ]; then
            component=${component_rev}
         fi   
       fi
       ;;
    *) print_usage
        ;;
esac

log "Attempting to execute ${cmd} argument on specified components"

unset IFS

# Create dropzone on a full system start
if [ ${cmd} = "start" ] || [ "${cmd}" = "restart" ]; then
    log "Creating dropzone"
    create_dropzone
fi

#Before we start/stop any component we should check dafilesrv.
if [ ! -z "${compDafilesrv}" ];then
    case "$1" in
        start)
            /etc/init.d/dafilesrv status 1>/dev/null 2>/dev/null
            if [ $? -ne 0 ];then
              log "--------------------------"
              log "${compDafilesrv} ---> ${cmd}"
              /etc/init.d/dafilesrv $1 2>/dev/null
            else
              log  "Dependent service dafilesrv, ${compDafilesrv} is already running."
              echo "Dependent service dafilesrv, ${compDafilesrv} is already running."
            fi
            ;;
        status|setup)
            /etc/init.d/dafilesrv ${1} 2>/dev/null
            ;;
        stop|restart)
            ;;
    esac
fi

# Restart handling for entire system
if [ ${cmd} = "restart" ] && [ "${isComp}" -eq 0 ]; then
    log "Stopping entire system for a full restart"
    log "--------------------------"
    echo "*****************************************"
    echo "Stopping entire system for a full restart"
    echo "*****************************************"
    cmd=stop
    statForStop=0;
    for (( i=${compListLen}; i>=0; i-- ));do
        if [ -z "${compList[$i]}" ];then
          continue;
        fi
        set_componentvars ${compList[$i]}
        xcmd="${cmd}_component ${compList[$i]}"
        log "--------------------------"
        log "${compName} ---> ${cmd}"
        if strstr ${compType} "thor" && [ ${foundThorSlave} -eq 1 ];
        then
            log "Thor slave found on the node, hence skipping the component "
            continue
        elif strstr ${compType} "dafilesrv" ;then
            log "skipping the component ${compName}"
            continue;
        else
          eval $xcmd
          statForEach=$?
          log "${xcmd} ---> Exit status ${statForEach}"
          statForStop=$(( ${statForStop} == 3 ? ${statForEach} : ${statForStop} ))
        fi
    done 

    log "Starting the entire System"
    log "--------------------------"
    echo "***************************************************"
    echo "Starting the entire System"
    echo "***************************************************"
    cmd=start
    /etc/init.d/dafilesrv status 1>/dev/null 2>/dev/null
    if [ $? -ne 0 ];then
        log "--------------------------"
        log "${compDafilesrv} ---> ${cmd}"
        /etc/init.d/dafilesrv $1 2>/dev/null
    fi

    statForStart=0
    for (( i=0; i<=${compListLen}; i++ ));do
        if [ -z "${compList[$i]}" ];then
           continue;
        fi
        set_componentvars ${compList[$i]}
        xcmd="${cmd}_component ${compList[$i]}"
        log "--------------------------"
        log "${compName} ---> ${cmd}"
        if strstr ${compType} "thor" && [ ${foundThorSlave}  -eq 1 ]; 
        then
            log "Thor slave found on the node, hence just running the setup for thor"
            setup_component
            continue
        else
           eval $xcmd
           statForEach=$?
           log "${xcmd} ---> Exit status ${statForEach}"
           statForStart=$(( ${statForStart} == 0 ? ${statForEach} : ${statForStart} ))
        fi
    done
    if [ "${statForStop}" -eq 3 ] && [ "${statForStart}" -eq 0 ];
    then
        exit 0
    else
       a=$(( ${statForStop} != 0  ? $statForStop : $statForStart ))
       exit $a
    fi
fi

# All other command handling
# start, stop and status (individual component restart as well)
STATUS=0
for C in ${component} ; do
    if [ -z "${C}" ];then
      continue;
    fi
    set_componentvars ${C}
    xcmd="${cmd}_component ${C}"
    if strstr ${compType} "thor" && [ ${foundThorSlave} -eq 1 ] && [ "${cmd}" != "status" ] && [ "${cmd}" != "setup" ]; then
      log "Thor slave found on the node, hence just running the setup for thor"
      setup_component
      continue
    else
      log "--------------------------"
      log "${compName} ---> ${cmd}"
      eval $xcmd
      statForEach=$?
      log "${cmd}_component ${C} ---> Exit status ${statForEach}"
      STATUS=$(( $STATUS == 0 ? $statForEach : $STATUS))
    fi
done 


if [ "$cmd" = "stop" ] && [ -n "$compDafilesrv" ]
then
    /etc/init.d/dafilesrv status 1>/dev/null 2>/dev/null
    if [ $? -ne 0 ];then
      log  "Service dafilesrv, ${compDafilesrv} is already stopped."
      echo "Service dafilesrv, ${compDafilesrv} is already stopped."
    else
      log  "Service dafilesrv, ${compDafilesrv} is still running."
      echo "Service dafilesrv, ${compDafilesrv} is still running."
      echo "To stop it, run \"service dafilesrv stop\"."
    fi

fi
exit ${STATUS}

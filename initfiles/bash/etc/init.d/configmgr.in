#!/bin/bash
## Copyright © 2011 HPCC Systems.  All rights reserved.
#------------------------------------------------------------------------------
#                       Common Function                                         
##------------------------------------------------------------------------------

###<REPLACE>###

createConf ()
{
    awk -f ${reg_path}/regex.awk -v NEW_ENVFILE=$1 -v NEW_PORT=$2 -v NEW_CONFFILE=$3< ${path}${configs}/configmgr/esp.xml >${runtime}/${compName}/esp.xml
}

removePidfiles ()
{
    rm -rf ${runtime}/${compName}.pid
    rm -rf ${lock}/${compName}.lock
    rm -rf ${pid}/${compName}_init.pid
    rm -rf ${pid}/${compName}.pid
    rm -rf ${pid}/init_${compName}.pid
}

cleanup ()
{
    echo "Exiting configMgr"
    #stop configesp
    PIDPATH=${pid}/${compName}_init.pid
    stopcmd="${daemon_path}/start-stop-daemon -K -p $PIDPATH"
    eval $stopcmd 
    sleep 2
    killall -9 configesp >/dev/null 2>&1
    removePidfiles
    exit 
}


control_c ()
{
    echo "Ctrl-c was hit. Exiting the process"
    cleanup
    exit 
}

print_usage ()
{
    echo >&2 "Usage : $0 <full path for env file> <port> <full path for conf file>
              or $0 (will use default files and default port number)"
    exit 0
}

source  ${INSTALL_DIR}/etc/init.d/lock.sh
source  ${INSTALL_DIR}/etc/init.d/pid.sh
source  ${INSTALL_DIR}/etc/init.d/hpcc_common
source  ${INSTALL_DIR}/etc/init.d/init-functions
source  ${INSTALL_DIR}/etc/init.d/export-path

HPCC_CONFIG=${HPCC_CONFIG:-${CONFIG_DIR}/${ENV_CONF_FILE}}
SECTION=${SECTION:-DEFAULT}
cfg.parser ${HPCC_CONFIG}
cfg.section.${SECTION}

if [ ${DEBUG:-NO_DEBUG} != "NO_DEBUG" ]; then
    echo "\$runtime=$runtime"
    echo "\$path=$path"
    echo "\$configs=$configs"
    echo "\$configsbackup=$configsbackup"
    echo "\$user=$user"
    echo "\$lock=$lock"
    echo "\$pid=$pid"
    echo "\$log=$log"
    echo "\$environment=$environment"
    echo "\$interface=$interface"
    echo "\$sourcedir=$sourcedir"
    echo
fi

exec_script_path=${path}/bin
configgenPath="${path}/sbin/configgen"
reg_path=${path}/sbin

# Checking if start-stop-deamon exists
if [ ! -e ${path}/bin/start-stop-daemon ]; then
    result=$(which start-stop-daemon)
    if [ "$?" -ne 0 ]; then
        echo "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
        echo "You don't have start-stop-deamon installed"
        echo "YOU CAN'T RUN THIS SYSTEM - SORRY"
        echo "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
        exit 0
    else
        daemon_path=$(echo $result | tr '/' '\n' | grep -v start-stop-daemon | tr '\n' '/')
    fi
else
    daemon_path=${path}/bin
fi

compName=configmgr

is_root

# Trapping keyboard interrupt  control-c
trap control_c SIGINT

# Setting up Environment variables
export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${path}/lib
export PATH=${PATH}:${runtime}/bin:${path}/sbin

# Creating runtime environment for ConfigMgr
mkdir -p ${runtime}/$compName
mkdir -p ${log}/$compName
mkdir -p ${lock}/$compName
mkdir -p ${pid}/$compName
logFile=${log}/${compName}/${compName}.log

initPidFile=${pid}/${compName}_init.pid
compPidFile=${pid}/${compName}.pid
lockFile=${lock}/${compName}.lock
defaultEnv=0

# Checking input arguments 
if [ $# -eq 3 ]; then 
    filename=$1
    portnum=$2
    conffile=$3
    echo "<filename> = ${filename}"
    echo "<portnumber> = ${portnum}"
    echo "<LocalConfFile> = ${conffile}"
    #checking where files exists or not
    if [ ! -e ${filename} ] || [ ! -e ${conffile} ]
    then
       echo "File ${filename} or ${conffile} does not exists"
       exit 
    fi
elif [ $# -eq 0 ]; then
    defaultEnv=1
    filename="${sourcedir}/${environment}"
    portnum="8015"
    conffile="${configs}/environment.conf"
    echo "Using default filename ${sourcedir}/${environment} and default port \"8015\"" 
    if [ ! -d ${sourcedir} ];
    then
       #creating source directory if not present
       createDir ${sourcedir}
       cp ${configs}/${environment} ${sourcedir} > /dev/null 2<&1
       chmod 755 ${sourcedir}/${environment}
    else
        if [ ! -e ${filename} ];
        then
            if [ ${DEBUG:-NO_DEBUG} != "NO_DEBUG" ]; then
                echo "Default environment file does not exists, copying from ${configs}"
            fi
            cp ${configs}/${environment} ${sourcedir}/environment.xml > /dev/null 2<&1
            chmod 755 ${sourcedir}/environment.xml
        fi
    fi
else
    print_usage
fi

createConf "${filename}" "${portnum}" "${conffile}"

# Configgen checking step
echo -n "Validating environment file ${filename} using configgen ..."
sleep 1
cmd="${configgenPath} -env ${filename} -validateonly"
eval $cmd
if [ "$?" -ne 0 ]; then
    echo " Failure"
    exit 
else
    echo " Success"
fi


# Sanity Check for previous instances of configmgr. This code also takes care if configmgr script/configesp is not running and it killed by kill command

check_status ${initPidFile} ${lockFile} ${compPidFile} 0 
RCSTAT=$?

if [ ${RCSTAT} -eq 0 ]; then
    checkPid ${initPidFile}
    echo "Configmgr is already running with Pid $__pidValue"
    exit 0
else
    #component is not running, If pid/lock file exist remove them
    if [ ${RCSTAT} -eq 1 ] || [ ${RCSTAT} -eq 2 ]
    then 
         removePidfiles
    fi
fi

#-----------------------------------------------------------
# Actual Processing begins 
#-----------------------------------------------------------
cd ${runtime}/${compName}

#start configesp
EXEC_COMMAND="${exec_script_path}/init_configesp >> $logFile 2>&1"
startcmd="${daemon_path}/start-stop-daemon -S -p ${initPidFile} -c ${user}:${group} -d ${runtime}/${compName} -m -x ${EXEC_COMMAND} -b"
eval ${startcmd}
started=$?

if [ ${DEBUG:-NO_DEBUG} != "NO_DEBUG" ]; then
    echo $startcmd
    echo "configesp status = $started"
fi

echo -n "Verifying configmgr startup ..."
sleep 2

check_status ${initPidFile} ${lockFile} ${compPidFile} 1 
RCSTAT=$?

if [ ${RCSTAT} -ne 0 ];then
   echo "Failure"
   cleanup
else
    echo " Success"
    echo "Exit by pressing ctrl-c..."
    while :
        check_status ${initPidFile} ${lockFile} ${compPidFile} 1 
        if [ $? -ne 0 ] ;
        then
            if [ "${DEBUG}" != "NO_DEBUG" ];
            then
                 echo "Init_configesp/Configesp is not running, hence shutting down configmgr script"
            fi
            kill -2 $$ > /dev/null 2>&1
        fi
        trap control_c SIGINT
    do 
        sleep 1
    done
fi
 

<?xml version="1.0" encoding="UTF-8"?>
<!--
################################################################################
#    HPCC SYSTEMS software Copyright (C) 2012 HPCC SystemsÂ®.
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
################################################################################
-->

<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:fo="http://www.w3.org/1999/XSL/Format" xml:space="default">
<xsl:strip-space elements="*"/>
<xsl:output method="text" media-type="text/plain" encoding="US-ASCII"/>
    
<xsl:param name="process" select="'thor'"/>
<xsl:param name="clusterType"/>

    
<xsl:template match="text()"/>


<xsl:template match="/">
    <xsl:apply-templates select="Environment/Software/ThorCluster[@name=$process]"/>
</xsl:template>

    
<xsl:template match="ThorCluster">
    <xsl:variable name="computerName" select="@computer"/>
    <xsl:variable name="domainName"><xsl:call-template name="getDomain"><xsl:with-param name="computer" select="@computer"/></xsl:call-template></xsl:variable>
    <xsl:variable name="domainNode" select="/Environment/Hardware/Domain[@name=$domainName]"/>
    <xsl:variable name="thoruser"   select="$domainNode/@username"/>
    <xsl:variable name="thorpasswd" select="$domainNode/@password"/>
# setvars script generated by setvars_linux.xsl
#
# General settings
<xsl:if test="string(@name) != ''">
export THORNAME=<xsl:value-of select="@name"/>
</xsl:if>
<xsl:if test="string(@nodeGroup) != ''">
export THORPRIMARY=<xsl:value-of select="@nodeGroup"/>
<xsl:if test="string(@name) != string(@nodeGroup)">
export THORSECONDARY=<xsl:value-of select="@name"/>
</xsl:if>
</xsl:if>
export THORMASTER=<xsl:call-template name="getNetAddress">
                    <xsl:with-param name="computer" select="ThorMasterProcess/@computer"/>
                </xsl:call-template>
<xsl:choose>
    <xsl:when test="string(@masterport) != ''">
export THORMASTERPORT=<xsl:value-of select="@masterport"/>
    </xsl:when>
    <xsl:otherwise>
export THORMASTERPORT=20000
    </xsl:otherwise>
</xsl:choose>
<xsl:choose>
    <xsl:when test="string(@slaveport) != ''">
export THORSLAVEPORT=<xsl:value-of select="@slaveport"/>
    </xsl:when>
    <xsl:otherwise>
export THORSLAVEPORT=20100
    </xsl:otherwise>
</xsl:choose>
<xsl:if test="string(@localThorPortInc) != ''">
export localthorportinc=<xsl:value-of select="@localThorPortInc"/>
</xsl:if>
export domain=<xsl:value-of select="$domainName"/>
export slavespernode=<xsl:choose>
<xsl:when test="string(@slavesPerNode) != ''"><xsl:value-of select="@slavesPerNode"/></xsl:when>
<xsl:otherwise>1</xsl:otherwise>
</xsl:choose>
<xsl:if test="string(@multiSlaves) != ''">
export multislaves=<xsl:value-of select="@multiSlaves"/>
</xsl:if>
<xsl:if test="string($thoruser) != ''">
export THORUSER=<xsl:value-of select="$thoruser"/>
</xsl:if>
<xsl:if test="string($thorpasswd) != ''">
export THORPASSWD=<xsl:value-of select="$thorpasswd"/>
</xsl:if>
<xsl:if test="string(@daliServers) != ''">
export DALISERVER=<xsl:call-template name="getDaliServers">
                    <xsl:with-param name="daliServer" select="@daliServers"/>
                </xsl:call-template>
</xsl:if>
<xsl:if test="string(@localThor) != ''">
export localthor=<xsl:value-of select="@localThor"/>
</xsl:if>
<xsl:if test="string(@processPerSlave) != ''">
export processperslave=<xsl:value-of select="@processPerSlave"/>
</xsl:if>
<xsl:if test="string(Storage/@breakoutLimit) != ''">
export breakoutlimit=<xsl:value-of select="Storage/@breakoutLimit"/>
</xsl:if>
<xsl:if test="string(Storage/@refreshRate) != ''">
export refreshrate=<xsl:value-of select="Storage/@refreshRate"/>
</xsl:if>
<xsl:if test="string($clusterType) != ''">
export clustertype=<xsl:value-of select="$clusterType"/>
</xsl:if>
export replicateOutputs=<xsl:choose>
           <xsl:when test="@replicateOutputs='true'">1</xsl:when>
           <xsl:when test="@replicateOutputs='1'">1</xsl:when>
           <xsl:otherwise>0</xsl:otherwise>
            </xsl:choose>
export autoSwapNode=<xsl:choose>
           <xsl:when test="SwapNode/@AutoSwapNode='true'">1</xsl:when>
           <xsl:when test="SwapNode/@AutoSwapNode='1'">1</xsl:when>
           <xsl:otherwise>0</xsl:otherwise>
            </xsl:choose>
<xsl:choose>
  <xsl:when test="string(@Legacy) != ''">
    export LCR=
  </xsl:when>
  <xsl:otherwise>
    export LCR=_lcr
  </xsl:otherwise>
</xsl:choose>
<xsl:if test="string(SSH/@SSHidentityfile) != ''">
export SSHidentityfile=<xsl:value-of select="SSH/@SSHidentityfile"/>
</xsl:if>
<xsl:if test="string(SSH/@SSHusername) != ''">
export SSHusername=<xsl:value-of select="SSH/@SSHusername"/>
</xsl:if>
<xsl:if test="string(SSH/@SSHpassword) != ''">
export SSHpassword=<xsl:value-of select="SSH/@SSHpassword"/>
</xsl:if>
<xsl:if test="string(SSH/@SSHtimeout) != ''">
export SSHtimeout=<xsl:value-of select="SSH/@SSHtimeout"/>
</xsl:if>
<xsl:if test="string(SSH/@SSHretries) != ''">
export SSHretries=<xsl:value-of select="SSH/@SSHretries"/>
</xsl:if>
<xsl:if test="string(SSH/@SSHsudomount) != ''">
export SSHsudomount=<xsl:value-of select="SSH/@SSHsudomount"/>
</xsl:if>

</xsl:template><!--/Environment/Software/ThorCluster-->

<xsl:template name="getDaliServers">
    <xsl:param name="daliServer"/>
    <xsl:for-each select="/Environment/Software/DaliServerProcess[@name=$daliServer]/Instance">
        <xsl:call-template name="getNetAddress">
            <xsl:with-param name="computer" select="@computer"/>
        </xsl:call-template>
        <xsl:if test="string(@port) != ''">:<xsl:value-of select="@port"/></xsl:if>
        <xsl:if test="position() != last()">, </xsl:if>
    </xsl:for-each>
</xsl:template><!--getDaliServers-->

<xsl:template name="getNetAddress">
    <xsl:param name="computer"/>
    <xsl:value-of select="/Environment/Hardware/Computer[@name=$computer]/@netAddress"/>
</xsl:template><!--getNetAddress-->

<xsl:template name="getDomain">
  <xsl:param name="computer"/>
  <xsl:value-of select="/Environment/Hardware/Computer[@name=$computer]/@domain"/>
</xsl:template>

</xsl:stylesheet>

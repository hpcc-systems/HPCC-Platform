#!/bin/bash
################################################################################
#    HPCC SYSTEMS software Copyright (C) 2012 HPCC Systems.
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
################################################################################

PATH_PRE=`type -path hpcc_setenv`
INSTALL_DIR=`dirname ${PATH_PRE}`/..
source  ${INSTALL_DIR}/etc/init.d/hpcc_common

source ${PATH_PRE} ""
comp_base=`basename $PWD`
MASTER_PID_NAME="$PID/${comp_base}_master.pid" ## this needed when we use bash_init_system

which_pidof

if [ $# -lt 1 ]; then
    echo usage: $0 thordeploydir 
    exit 1
fi

export SENTINEL="thor.sentinel"

# deploydir = where binaries and scripts live
if [ -z "$deploydir" ]; then
export deploydir=$(pwd -P)
fi
# instancedir = [cwd] - on legacy system would be same as deploydir
export instancedir=$(pwd -P)

. $instancedir/setvars

if [ "$#" -lt "2" ] || [ "$2" != "keep_sentinel" ]; then
    echo removing sentinel file
    rm -f $instancedir/${SENTINEL}
    sleep 1
fi

masterpid=`cat ${MASTER_PID_NAME} 2> /dev/null`
if [ ! -z $masterpid ]; then
  while :
  do
    kill -0 $masterpid >& /dev/null
    masterRunning=$(( $? == 0 ? 1 : 0 ))
    if [ 0 == $masterRunning ]; then
      break
    fi
    echo --------------------------
    echo stopping thormaster $THORMASTER 
    kill $masterpid >& /dev/null
    sleep 8
    kill -9 $masterpid >& /dev/null
    sleep 1
  done
fi

echo --------------------------
echo stopping thor slaves 

if [ "$localthor" = "true" ]; then
  SLAVE_PID_NAME="$PID/${comp_base}_slave_*.pid"
  slavepid=`cat ${SLAVE_PID_NAME} 2> /dev/null`
  kill -9 $slavepid 2> /dev/null
else
  # we want to kill only slaves that have already been started in run_thor
  if [ -r $instancedir/uslaves.start ]; then
    nslaves=`cat $instancedir/uslaves.start | wc -l`
    $deploydir/frunssh $instancedir/uslaves.start "/bin/sh -c '$deploydir/stop_slaves ${THORNAME} ${PATH_PRE}'" -i:$SSHidentityfile -u:$SSHusername -pe:$SSHpassword -t:$SSHtimeout -a:$SSHretries -n:$nslaves 2>&1 | egrep -v "no process killed"
    echo slaves stopped
    rm -rf $instancedir/uslaves.start
  fi
fi

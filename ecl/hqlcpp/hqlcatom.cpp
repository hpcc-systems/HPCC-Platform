/*##############################################################################

    HPCC SYSTEMS software Copyright (C) 2012 HPCC SystemsÂ®.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
############################################################################## */
#include "platform.h"
#include "jlib.hpp"
#include "jexcept.hpp"
#include "jmisc.hpp"
#include "javahash.hpp"
#include "eclhelper.hpp"

#include "hql.hpp"
#include "hqlatoms.hpp"
#include "hqlcatom.hpp"

IAtom * _accessedFromChild_Atom;
IAtom * accessorAtom;
IAtom * activeActivityMarkerAtom;
IAtom * activeMatchTextAtom;
IAtom * activeMatchUnicodeAtom;
IAtom * activeMatchUtf8Atom;
IAtom * activeProductionMarkerAtom;
IAtom * activeValidateMarkerAtom;
IAtom * activityIdMarkerAtom;
IAtom * blobHelperAtom;
IAtom * branchAtom;
IAtom * checkpointAtom;
IAtom * childAtom;
IAtom * classAtom;
IAtom * clearAtom;
IAtom * __clearHelperAtom;
IAtom * _conditionalRowMarker_Atom;
IAtom * csvReadMarkerAtom;
IAtom * decimalAtom;
IAtom * declareAtom;
IAtom * delayedAtom;
IAtom * dependencyAtom;
IAtom * deserializerAtom;
IAtom * dictionaryAtom;
IAtom * eclAtom;
IAtom * endAtom;
IAtom * ensureCapacityAtom;
IAtom * fileAtom;
IAtom * funnelAtom;
IAtom * forceAllCheckAtom;
IAtom * goAtom;
IAtom * guardAtom;
IAtom * helperAtom;
IAtom * indexLayoutMarkerAtom;
IAtom * initAtom;
IAtom * insideOnCreateAtom;
IAtom * insideOnStartAtom;
IAtom * instanceAtom;
IAtom * _loop_Atom;
IAtom * _loopFirst_Atom;
IAtom * mainprototypesAtom;
IAtom * multiInstanceAtom;
IAtom * _noAccess_Atom;
IAtom * _noReplicate_Atom;
IAtom * noSetAtom;
IAtom * _noVirtual_Atom;
IAtom * numResultsAtom;
IAtom * packingAtom;
IAtom * parentHelpersAtom;
IAtom * pathAtom;
IAtom * prefetcherInstanceMarkerAtom;
IAtom * quickAtom;
IAtom * _regexFindInstance_Atom;
IAtom * _regexInstance_Atom;
IAtom * resultsAtom;
IAtom * rowAllocatorMarkerAtom;
IAtom * rtlFieldKeyMarkerAtom;
IAtom * _selfJoinPlaceholder_Atom;
IAtom * serializerAtom;
IAtom * serializerInstanceMarkerAtom;
IAtom * skipActionMarkerAtom;
IAtom * skipReturnMarkerAtom;
IAtom * speedAtom;
IAtom * _spill_Atom;
IAtom * _spillReason_Atom;
IAtom * _steppedMeta_Atom;
IAtom * subgraphAtom;
IAtom * _translated_Atom;
IAtom * userFunctionAtom;
IAtom * utf8Atom;
IAtom * wrapperAtom;
IAtom * xmlColumnProviderAtom;
IAtom * xmlReadMarkerAtom;


IIdAtom * acosId;
IIdAtom * addAggregateRowId;
IIdAtom * addAllId;
IIdAtom * addRangeId;
IIdAtom * addWorkunitAssertFailureId;
IIdAtom * an2bId;
IIdAtom * an2fId;
IIdAtom * an2l4Id;
IIdAtom * an2l8Id;
IIdAtom * an2ls4Id;
IIdAtom * an2ls8Id;
IIdAtom * appendRowsToRowsetId;
IIdAtom * appendSetXId;
IIdAtom * ascii2ebcdicId;
IIdAtom * asinId;
IIdAtom * atan2Id;
IIdAtom * atanId;
IIdAtom * bool2DataId;
IIdAtom * bool2StrId;
IIdAtom * bool2StrXId;
IIdAtom * bool2VStrId;
IIdAtom * bool2VStrXId;
IIdAtom * castIntId[9][2];
IIdAtom * checkFieldOverflowId;
IIdAtom * checkRowOverflowId;
IIdAtom * clibExpId;
IIdAtom * cloneVStringId;
IIdAtom * cloneVStringXId;
IIdAtom * codeGeneratorId;
IIdAtom * codepage2UnicodeId;
IIdAtom * codepage2UnicodeXId;
IIdAtom * codepageToUtf8Id;
IIdAtom * codepageToUtf8XId;
IIdAtom * codepage2VUnicodeId;
IIdAtom * codepage2VUnicodeXId;
IIdAtom * columnGetBoolId;
IIdAtom * columnGetDataId;
IIdAtom * columnGetDataXId;
IIdAtom * columnGetIntId;
IIdAtom * columnGetQStringId;
IIdAtom * columnGetSetIsAllId;
IIdAtom * columnGetStringId;
IIdAtom * columnGetStringXId;
IIdAtom * columnGetUnicodeXId;
IIdAtom * columnGetUtf8XId;
IIdAtom * columnReadBoolId;
IIdAtom * columnReadDataId;
IIdAtom * columnReadDataXId;
IIdAtom * columnReadIntId;
IIdAtom * columnReadQStringId;
IIdAtom * columnReadSetIsAllId;
IIdAtom * columnReadStringId;
IIdAtom * columnReadStringXId;
IIdAtom * columnReadUnicodeXId;
IIdAtom * columnReadUtf8XId;
IIdAtom * compareDataDataId;
IIdAtom * compareEStrEStrId;
IIdAtom * compareQStrQStrId;
IIdAtom * compareStrBlankId;
IIdAtom * compareStrStrId;
IIdAtom * compareUnicodeUnicodeId;
IIdAtom * compareUnicodeUnicodeStrengthId;
IIdAtom * compareUtf8Utf8Id;
IIdAtom * compareUtf8Utf8StrengthId;
IIdAtom * compareVStrVStrId;
IIdAtom * compareVUnicodeVUnicodeId;
IIdAtom * compareVUnicodeVUnicodeStrengthId;
IIdAtom * concatId;
IIdAtom * concatExtendId;
IIdAtom * concatStr2StrId;
IIdAtom * concatStrFId;
IIdAtom * concatStrExtendId;
IIdAtom * concatUnicodeId;
IIdAtom * concatUnicodeExtendId;
IIdAtom * concatUnicodeFId;
IIdAtom * concatUnicodeToUnicodeId;
IIdAtom * concatUtf8Id;
IIdAtom * concatUtf8ToUtf8Id;
IIdAtom * concatVStr2StrId;
IIdAtom * concatVStrId;
IIdAtom * concatVStrFId;
IIdAtom * concatVUnicodeId;
IIdAtom * concatVUnicodeFId;
IIdAtom * concatVUnicodeToUnicodeId;
IIdAtom * cosId;
IIdAtom * coshId;
IIdAtom * countProviderId;
IIdAtom * countRowsId;
IIdAtom * countToSizeId;
IIdAtom * crcDataId;
IIdAtom * crcUnicodeId;
IIdAtom * crcUtf8Id;
IIdAtom * crcVStrId;
IIdAtom * crcVUnicodeId;
IIdAtom * createBlobId;
IIdAtom * createDataRangeLowId;
IIdAtom * createDataRangeHighId;
IIdAtom * createOrderId;
IIdAtom * createQStrRangeLowId;
IIdAtom * createQStrRangeHighId;
IIdAtom * createQuotedStringId;
IIdAtom * createRangeLowId;
IIdAtom * createRangeHighId;
IIdAtom * createRealInfId;
IIdAtom * createRealNullId;
IIdAtom * createRowFromJsonId;
IIdAtom * createRowFromXmlId;
IIdAtom * createRowStreamId;
IIdAtom * createStrRangeLowId;
IIdAtom * createStrRangeHighId;
IIdAtom * createUnicodeRangeLowId;
IIdAtom * createUnicodeRangeHighId;
IIdAtom * createRegexId;
IIdAtom * createWRegexId;
IIdAtom * csvStr2BoolId;
IIdAtom * ctxGetRowJsonId;
IIdAtom * ctxGetRowXmlId;
IIdAtom * data2BoolId;
IIdAtom * dataset2DatasetXId;
IIdAtom * dataset2RowsetXId;
IIdAtom * DecAbsId;
IIdAtom * DecAddId;
IIdAtom * DecCompareDecimalId;
IIdAtom * DecCompareUDecimalId;
IIdAtom * DecCompareNullId;
IIdAtom * DecDistinctId;
IIdAtom * DecDistinctRId;
IIdAtom * DecDivideId;
IIdAtom * DecModulusId;
IIdAtom * DecMulId;
IIdAtom * DecNegateId;
IIdAtom * DecPopDecimalId;
IIdAtom * DecPopInt64Id;
IIdAtom * DecPopLongId;
IIdAtom * DecPopRealId;
IIdAtom * DecPopStringId;
IIdAtom * DecPopStringXId;
IIdAtom * DecPopUDecimalId;
IIdAtom * DecPopVStringId;
IIdAtom * DecPopVStringXId;
IIdAtom * DecPushCStringId;
IIdAtom * DecPushDecimalId;
IIdAtom * DecPushInt64Id;
IIdAtom * DecPushLongId;
IIdAtom * DecPushQStringId;
IIdAtom * DecPushRealId;
IIdAtom * DecPushStringId;
IIdAtom * DecPushUDecimalId;
IIdAtom * DecPushUInt64Id;
IIdAtom * DecPushUnicodeId;
IIdAtom * DecPushUtf8Id;
IIdAtom * DecRoundId;
IIdAtom * DecRoundUpId;
IIdAtom * DecRoundToId;
IIdAtom * DecSetPrecisionId;
IIdAtom * DecSubId;
IIdAtom * DecTruncateId;
IIdAtom * DecTruncateAtId;
IIdAtom * DecValidId;
IIdAtom * DecValidTosId;
IIdAtom * deleteFileId;
IIdAtom * deserializeRawId;
IIdAtom * deserializeChildDictionaryFromDatasetFromStreamId;
IIdAtom * deserializeChildDictionaryFromStreamId;
IIdAtom * deserializeChildRowsetFromStreamId;
IIdAtom * deserializeCStringXId;
IIdAtom * deserializeDataXId;
IIdAtom * deserializeDatasetXId;
IIdAtom * deserializeDictionaryXId;
IIdAtom * deserializeGroupedDatasetXId;
IIdAtom * deserializeQStrXId;
IIdAtom * deserializeRowId;
IIdAtom * deserializeRowsetXId;
IIdAtom * deserializeGroupedRowsetXId;
IIdAtom * deserializeSetId;
IIdAtom * deserializeStringXId;
IIdAtom * deserializeUnicodeXId;
IIdAtom * deserializeUtf8XId;
IIdAtom * deserializeVUnicodeXId;
IIdAtom * deserializerReadNId;
IIdAtom * deserializerReadPackedIntId;
IIdAtom * deserializerReadSizeId;
IIdAtom * deserializerReadUtf8Id;
IIdAtom * deserializerReadVStrId;
IIdAtom * deserializerReadVUniId;
IIdAtom * deserializerPeekId;
IIdAtom * deserializerBeginNestedId;
IIdAtom * deserializerFinishedNestedId;
IIdAtom * deserializerSkipNId;
IIdAtom * deserializerSkipPackedIntId;
IIdAtom * deserializerSkipUtf8Id;
IIdAtom * deserializerSkipVStrId;
IIdAtom * deserializerSkipVUniId;
IIdAtom * destroyRegexId;
IIdAtom * destroyWRegexId;
IIdAtom * destructMetaMemberId;
IIdAtom * dictionaryCountId;
IIdAtom * dictionaryExistsId;
IIdAtom * dictionaryLookupId;
IIdAtom * dictionaryLookupExistsId;
IIdAtom * doNotifyId;
IIdAtom * doNotifyTargetId;
IIdAtom * ebcdic2asciiId;
IIdAtom * en2fId;
IIdAtom * en2l4Id;
IIdAtom * en2l8Id;
IIdAtom * en2ls4Id;
IIdAtom * en2ls8Id;
IIdAtom * ensureCapacityId;
IIdAtom * ensureRowAvailableId;
IIdAtom * __eogId;
IIdAtom * estr2EStrId;
IIdAtom * estr2VStrId;
IIdAtom * estr2VStrXId;
IIdAtom * evaluateChildQueryInstanceId;
IIdAtom * ex2fId;
IIdAtom * executeGraphId;
IIdAtom * executeChildQueryInstanceId;
IIdAtom * f2anId;
IIdAtom * f2axId;
IIdAtom * f2vnId;
IIdAtom * f2vxId;
IIdAtom * failDivideByZeroId;
IIdAtom * _failId;
IIdAtom * fileExistsId;
IIdAtom * finalizeRowClearId;
IIdAtom * freeId;
IIdAtom * freeExceptionId;
IIdAtom * getBytesFromBuilderId;
IIdAtom * getChildQueryDictionaryResultId;
IIdAtom * getChildQueryLinkedResultId;
IIdAtom * getChildQueryLinkedRowResultId;
IIdAtom * getClusterSizeId;
IIdAtom * getDatasetHashId;
IIdAtom * getECLId;
IIdAtom * getEnvId;
IIdAtom * getEventExtraId;
IIdAtom * getEventNameId;
IIdAtom * getExpandLogicalNameId;
IIdAtom * getExternalResultHashId;
IIdAtom * getFailMessageId;
IIdAtom * getFilePositionId;
IIdAtom * getGraphLoopCounterId;
IIdAtom * getIsValidId;
IIdAtom * getLocalDictionaryResultId;
IIdAtom * getLocalFailMessageId;
IIdAtom * getLocalFilePositionId;
IIdAtom * getLocalLinkedResultId;
IIdAtom * getLocalLinkedRowResultId;
IIdAtom * getMatchedId;
IIdAtom * getMatchLengthId;
IIdAtom * getMatchPositionId;
IIdAtom * getMatchRowId;
IIdAtom * getMatchTextId;
IIdAtom * getMatchUnicodeId;
IIdAtom * getMatchUtf8Id;
IIdAtom * getPackedSignedId;
IIdAtom * getPackedSizeId;
IIdAtom * getPackedUnsignedId;
IIdAtom * getProductionResultId;
IIdAtom * getProductionTextId;
IIdAtom * getProductionUnicodeId;
IIdAtom * getProductionUtf8Id;
IIdAtom * getResultBoolId;
IIdAtom * getResultDataId;
IIdAtom * getResultDatasetId;
IIdAtom * getResultDecimalId;
IIdAtom * getResultDictionaryId;
IIdAtom * getResultHashId;
IIdAtom * getResultIntId;
IIdAtom * getResultQStringId;
IIdAtom * getResultRealId;
IIdAtom * getResultRowsetId;
IIdAtom * getResultSetId;
IIdAtom * getResultStringId;
IIdAtom * getResultStringFId;
IIdAtom * getResultUnicodeId;
IIdAtom * getResultVarStringId;
IIdAtom * getResultVarUnicodeId;
IIdAtom * getRootResultId;
IIdAtom * getStartCyclesId;
IIdAtom * getWorkflowIdId;
IIdAtom * getWuidId;
IIdAtom * groupedDataset2RowsetXId;
IIdAtom * groupedRowset2DatasetXId;
IIdAtom * hash32DataId;
IIdAtom * hash32Data1Id;
IIdAtom * hash32Data2Id;
IIdAtom * hash32Data3Id;
IIdAtom * hash32Data4Id;
IIdAtom * hash32Data5Id;
IIdAtom * hash32Data6Id;
IIdAtom * hash32Data7Id;
IIdAtom * hash32Data8Id;
IIdAtom * hash32UnicodeId;
IIdAtom * hash32Utf8Id;
IIdAtom * hash32VStrId;
IIdAtom * hash32VUnicodeId;
IIdAtom * hash64DataId;
IIdAtom * hash64UnicodeId;
IIdAtom * hash64Utf8Id;
IIdAtom * hash64VStrId;
IIdAtom * hash64VUnicodeId;
IIdAtom * hashDataId;
IIdAtom * hashDataNCId;
IIdAtom * hashMd5FinishId;
IIdAtom * hashMd5InitId;
IIdAtom * hashMd5DataId;
IIdAtom * hashUnicodeId;
IIdAtom * hashUtf8Id;
IIdAtom * hashVStrId;
IIdAtom * hashVStrNCId;
IIdAtom * hashVUnicodeId;
IIdAtom * IIndirectMemberVisitor_visitRowId;
IIdAtom * IIndirectMemberVisitor_visitRowsetId;
IIdAtom * initProcessId;
IIdAtom * intFormatId;
IIdAtom * isResultId;
IIdAtom * keyUnicodeXId;
IIdAtom * keyUnicodeStrengthXId;
IIdAtom * killRangeId;
IIdAtom * l42anId;
IIdAtom * l42axId;
IIdAtom * l42vnId;
IIdAtom * l42vxId;
IIdAtom * l82anId;
IIdAtom * l82axId;
IIdAtom * l82vnId;
IIdAtom * l82vxId;
IIdAtom * linkdataset2linkdatasetId;
IIdAtom * linkRowId;
IIdAtom * linkRowsetId;
IIdAtom * lnId;
IIdAtom * loadResourceId;
IIdAtom * log10Id;
IIdAtom * lookupBlobId;
IIdAtom * ls42anId;
IIdAtom * ls42axId;
IIdAtom * ls42vnId;
IIdAtom * ls42vxId;
IIdAtom * ls82anId;
IIdAtom * ls82axId;
IIdAtom * ls82vnId;
IIdAtom * ls82vxId;
IIdAtom * memcmpId;
IIdAtom * memcpyId;
IIdAtom * memsetId;
IIdAtom * newWhenActionArgId;
IIdAtom * newCountAggregateArgId;
IIdAtom * newDegroupArgId;
IIdAtom * newExistsAggregateArgId;
IIdAtom * newFunnelArgId;
IIdAtom * newGraphLoopResultWriteArgId;
IIdAtom * newLibraryConstantRawIteratorArgId;
IIdAtom * newLocalResultReadArgId;
IIdAtom * newLocalResultSpillArgId;
IIdAtom * newMemorySpillReadArgId;
IIdAtom * newMemorySpillSplitArgId;
IIdAtom * newNullArgId;
IIdAtom * newSelectNArgId;
IIdAtom * newSplitArgId;
IIdAtom * newWorkUnitReadArgId;
IIdAtom * newWorkUnitWriteArgId;
IIdAtom * noteSectionTimeId;
IIdAtom * offsetProviderId;
IIdAtom * outputXmlBeginNestedId;
IIdAtom * outputXmlBeginArrayId;
IIdAtom * outputXmlBoolId;
IIdAtom * outputXmlDataId;
IIdAtom * outputXmlDecimalId;
IIdAtom * outputXmlEndArrayId;
IIdAtom * outputXmlEndNestedId;
IIdAtom * outputXmlIntId;
IIdAtom * outputXmlQStringId;
IIdAtom * outputXmlRealId;
IIdAtom * outputXmlSetAllId;
IIdAtom * outputXmlStringId;
IIdAtom * outputXmlUIntId;
IIdAtom * outputXmlUnicodeId;
IIdAtom * outputXmlUtf8Id;
IIdAtom * outputXmlInlineId;
IIdAtom * powerId;
IIdAtom * prefixDiffStrId;
IIdAtom * prefixDiffUnicodeId;
IIdAtom * processFieldBoolId;
IIdAtom * processFieldDataId;
IIdAtom * processFieldDecimalId;
IIdAtom * processFieldIntId;
IIdAtom * processFieldQStringId;
IIdAtom * processFieldRealId;
IIdAtom * processFieldStringId;
IIdAtom * processFieldUIntId;
IIdAtom * processFieldUnicodeId;
IIdAtom * processFieldUtf8Id;
IIdAtom * processFieldSetAllId;
IIdAtom * processFieldBeginSetId;
IIdAtom * processFieldBeginDatasetId;
IIdAtom * processFieldBeginRowId;
IIdAtom * processFieldEndSetId;
IIdAtom * processFieldEndDatasetId;
IIdAtom * processFieldEndRowId;
IIdAtom * qstr2BoolId;
IIdAtom * qstr2DataId;
IIdAtom * qstr2DataXId;
IIdAtom * qstrToQStrId;
IIdAtom * qstrToQStrXId;
IIdAtom * qstr2StrId;
IIdAtom * qstr2StrXId;
IIdAtom * qstr2VStrId;
IIdAtom * qstrLengthId;
IIdAtom * qstrSizeId;
IIdAtom * queryFailCodeId;
IIdAtom * queryLocalFailCodeId;
IIdAtom * queryLocalResultId;
IIdAtom * queryLogicalFilenameId;
IIdAtom * rankedFromOrderId;
IIdAtom * rankFromOrderId;
IIdAtom * readIntId[9][2];
IIdAtom * readSwapIntId[9][2];
IIdAtom * realFormatId;
IIdAtom * regexFindXId;
IIdAtom * regexGetFindStrId;
IIdAtom * regexNewSetStrPatternId;
IIdAtom * regexNewSetUStrPatternId;
IIdAtom * regexNewStrFindId;
IIdAtom * regexNewStrFoundId;
IIdAtom * regexNewStrFoundXId;
IIdAtom * regexNewStrReplaceXId;
IIdAtom * regexNewUStrFindId;
IIdAtom * regexNewUStrFoundId;
IIdAtom * regexNewUStrFoundXId;
IIdAtom * regexNewUStrReplaceXId;
IIdAtom * regexMatchSetId;
IIdAtom * regexUStrMatchSetId;
IIdAtom * regexReplaceXId;
IIdAtom * registerTimerId;
IIdAtom * releaseRowId;
IIdAtom * releaseRowsetId;
IIdAtom * reportFieldOverflowId;
IIdAtom * reportRowOverflowId;
IIdAtom * responseinfoId;
IIdAtom * restoreClusterId;
IIdAtom * returnPersistVersionId;
IIdAtom * reverseIntId[9][2];
IIdAtom * roundId;
IIdAtom * roundToId;
IIdAtom * roundupId;
IIdAtom * rowset2DatasetXId;
IIdAtom * rtlCopyRowLinkChildrenId;
IIdAtom * rtlDeserializeDictionaryId;
IIdAtom * rtlDeserializeDictionaryFromDatasetId;
IIdAtom * rtlDeserializeRowId;
IIdAtom * rtlDeserializeToBuilderId;
IIdAtom * rtlLinkChildrenId;
IIdAtom * rtlMaxId;
IIdAtom * rtlMinId;
IIdAtom * rtlRandomId;
IIdAtom * rtlSerializeDictionaryId;
IIdAtom * rtlSerializeDictionaryToDatasetId;
IIdAtom * rtlSerializeToBuilderId;
IIdAtom * searchTableInteger4Id;
IIdAtom * searchTableInteger8Id;
IIdAtom * searchTableUInteger4Id;
IIdAtom * searchTableUInteger8Id;
IIdAtom * searchUnicodeTableId;
IIdAtom * searchUtf8TableId;
IIdAtom * searchVUnicodeTableId;
IIdAtom * selectClusterId;
IIdAtom * serializeChildDictionaryToStreamId;
IIdAtom * serializeChildDictionaryToDatasetToStreamId;
IIdAtom * serializeChildRowsetToStreamId;
IIdAtom * serializeCStringXId;
IIdAtom * serializeDataXId;
IIdAtom * serializeDatasetXId;
IIdAtom * serializeGroupedDatasetXId;
IIdAtom * serializeStringXId;
IIdAtom * serializeBoolId;
IIdAtom * serializeDictionaryXId;
IIdAtom * serializeFixedDataId;
IIdAtom * serializeFixedStringId;
IIdAtom * serializeLPDataId;
IIdAtom * serializeLPQStringId;
IIdAtom * serializeLPStringId;
IIdAtom * serializeQStrXId;
IIdAtom * serializeRawId;
IIdAtom * serializeReal4Id;
IIdAtom * serializeReal8Id;
IIdAtom * serializeRowId;
IIdAtom * serializeRowsetXId;
IIdAtom * serializeGroupedRowsetXId;
IIdAtom * serializeSetId;
IIdAtom * serializeUnicodeXId;
IIdAtom * serializeUtf8XId;
IIdAtom * serializerPutId;
IIdAtom * serializerBeginNestedId;
IIdAtom * serializerEndNestedId;
IIdAtom * setConditionCodeId;
IIdAtom * setMethodId;
IIdAtom * setOwnMethodId;
IIdAtom * setPackedSignedId;
IIdAtom * setPackedUnsignedId;
IIdAtom * setResultBoolId;
IIdAtom * setResultDataId;
IIdAtom * setResultDatasetId;
IIdAtom * setResultDecimalId;
IIdAtom * setResultIntId;
IIdAtom * setResultQStringId;
IIdAtom * setResultRawId;
IIdAtom * setResultRealId;
IIdAtom * setResultSetId;
IIdAtom * setResultStringId;
IIdAtom * setResultUIntId;
IIdAtom * setResultUnicodeId;
IIdAtom * setResultVarStringId;
IIdAtom * setResultVarUnicodeId;
IIdAtom * setWorkflowConditionId;
IIdAtom * set2SetXId;
IIdAtom * sinId;
IIdAtom * sinhId;
IIdAtom * sqrtId;
IIdAtom * str2DataId;
IIdAtom * str2DataXId;
IIdAtom * strToQStrId;
IIdAtom * strToQStrXId;
IIdAtom * str2StrId;
IIdAtom * str2StrXId;
IIdAtom * str2VStrId;
IIdAtom * str2VStrXId;
IIdAtom * strcpyId;
IIdAtom * strlenId;
IIdAtom * subDataFTId;
IIdAtom * subDataFTXId;
IIdAtom * subDataFXId;
IIdAtom * subQStrFTId;
IIdAtom * subQStrFTXId;
IIdAtom * subQStrFXId;
IIdAtom * subStrFTId;
IIdAtom * subStrFTXId;
IIdAtom * subStrFXId;
IIdAtom * sysFailId;
IIdAtom * tanId;
IIdAtom * tanhId;
IIdAtom * trimAllId;
IIdAtom * trimBothId;
IIdAtom * trimLeftId;
IIdAtom * trimRightId;
IIdAtom * trimStrLenId;
IIdAtom * trimUnicodeAllId;
IIdAtom * trimUnicodeBothId;
IIdAtom * trimUnicodeLeftId;
IIdAtom * trimUnicodeRightId;
IIdAtom * trimUnicodeStrLenId;
IIdAtom * trimUtf8AllId;
IIdAtom * trimUtf8BothId;
IIdAtom * trimUtf8LeftId;
IIdAtom * trimUtf8RightId;
IIdAtom * trimUtf8StrLenId;
IIdAtom * trimVAllId;
IIdAtom * trimVBothId;
IIdAtom * trimVLeftId;
IIdAtom * trimVRightId;
IIdAtom * trimVStrLenId;
IIdAtom * trimVUnicodeAllId;
IIdAtom * trimVUnicodeBothId;
IIdAtom * trimVUnicodeLeftId;
IIdAtom * trimVUnicodeRightId;
IIdAtom * trimVUnicodeStrLenId;
IIdAtom * truncateId;
IIdAtom * UCharId;
IIdAtom * unicode2CodepageId;
IIdAtom * unicode2CodepageXId;
IIdAtom * unicode2DataId;
IIdAtom * unicode2DataXId;
IIdAtom * unicode2UnicodeId;
IIdAtom * unicode2UnicodeXId;
IIdAtom * unicodeToUtf8Id;
IIdAtom * unicodeToUtf8XId;
IIdAtom * unicode2VCodepageId;
IIdAtom * unicode2VCodepageXId;
IIdAtom * unicode2VUnicodeId;
IIdAtom * unicode2VUnicodeXId;
IIdAtom * unicodeNullTerminateId;
IIdAtom * unicodeStrcpyId;
IIdAtom * unicodeStrlenId;
IIdAtom * unicodeSubStrFXId;
IIdAtom * unicodeSubStrFTXId;
IIdAtom * utf82CodepageId;
IIdAtom * utf82CodepageXId;
IIdAtom * utf82DataId;
IIdAtom * utf82DataXId;
IIdAtom * utf82UnicodeId;
IIdAtom * utf82UnicodeXId;
IIdAtom * utf8ToUtf8Id;
IIdAtom * utf8ToUtf8XId;
IIdAtom * utf8LengthId;
IIdAtom * utf8SizeId;
IIdAtom * utf8SubStrFTXId;
IIdAtom * utf8SubStrFXId;
IIdAtom * validRealId;
IIdAtom * vcodepage2UnicodeId;
IIdAtom * vcodepage2UnicodeXId;
IIdAtom * vcodepage2VUnicodeId;
IIdAtom * vcodepage2VUnicodeXId;
IIdAtom * vn2bId;
IIdAtom * vn2fId;
IIdAtom * vn2l4Id;
IIdAtom * vn2l8Id;
IIdAtom * vn2ls4Id;
IIdAtom * vn2ls8Id;
IIdAtom * vstr2DataId;
IIdAtom * vstr2StrId;
IIdAtom * vstr2VStrId;
IIdAtom * vunicode2CodepageId;
IIdAtom * vunicode2CodepageXId;
IIdAtom * vunicode2DataId;
IIdAtom * vunicode2DataXId;
IIdAtom * vunicode2UnicodeId;
IIdAtom * vunicode2UnicodeXId;
IIdAtom * vunicode2VCodepageId;
IIdAtom * vunicode2VCodepageXId;
IIdAtom * vunicode2VUnicodeId;
IIdAtom * vunicode2VUnicodeXId;
IIdAtom * walkIndirectMetaMemberId;
IIdAtom * wregexFindXId;
IIdAtom * wregexGetFindStrId;
IIdAtom * wregexReplaceXId;
IIdAtom * writeEbcdicId;
IIdAtom * writeIntId[9];
IIdAtom * writeRealId;
IIdAtom * writeSignedId;
IIdAtom * writeStringId;
IIdAtom * writeUnicodeId;
IIdAtom * writeUnsignedId;
IIdAtom * writeUtf8Id;
IIdAtom * xmlDecodeStrId;
IIdAtom * xmlDecodeUStrId;
IIdAtom * xmlEncodeStrId;
IIdAtom * xmlEncodeUStrId;

//===========================================================================

//MORE: Need to change many MAKEATOM to MAKEID in this file, and most of the explicit calls should be removed/changed

#define MAKEID(x)   x##Id = createIdAtom(#x)
#define MAKEATOM(x) x##Atom = createLowerCaseAtom(#x)
#define MAKESYSATOM(x)  _##x##_Atom = createLowerCaseAtom("$_" #x "_")

MODULE_INIT(INIT_PRIORITY_HQLATOM-1)
{
    MAKEID(clibExp);
    MAKEID(_fail);

    acosId = createIdAtom("_acos");
    MAKEID(addAggregateRow);
    MAKEID(addAll);
    MAKEID(addRange);
    MAKEID(addWorkunitAssertFailure);
    MAKEID(an2b);
    MAKEID(an2f);
    MAKEID(an2l4);
    MAKEID(an2l8);
    MAKEID(an2ls4);
    MAKEID(an2ls8);
    MAKEID(appendRowsToRowset);
    MAKEID(appendSetX);
    MAKEID(ascii2ebcdic);
    asinId = createIdAtom("_asin");
    atan2Id = createIdAtom("_atan2");
    atanId = createIdAtom("_atan");
    MAKEID(bool2Data);
    MAKEID(bool2Str);
    MAKEID(bool2StrX);
    MAKEID(bool2VStr);
    MAKEID(bool2VStrX);
    _clear(castIntId);
    castIntId[3][true] = createIdAtom("castInt3");
    castIntId[5][true] = createIdAtom("castInt5");
    castIntId[6][true] = createIdAtom("castInt6");
    castIntId[7][true] = createIdAtom("castInt7");
    castIntId[3][false] = createIdAtom("castUInt3");
    castIntId[5][false] = createIdAtom("castUInt5");
    castIntId[6][false] = createIdAtom("castUInt6");
    castIntId[7][false] = createIdAtom("castUInt7");
    MAKEID(checkFieldOverflow);
    MAKEID(checkRowOverflow);
    MAKEID(cloneVString);
    MAKEID(cloneVStringX);
    MAKEID(codeGenerator);
    MAKEID(codepage2Unicode);
    MAKEID(codepage2UnicodeX);
    MAKEID(codepageToUtf8);
    MAKEID(codepageToUtf8X);
    MAKEID(codepage2VUnicode);
    MAKEID(codepage2VUnicodeX);
    MAKEID(columnGetBool);
    MAKEID(columnGetData);
    MAKEID(columnGetDataX);
    MAKEID(columnGetInt);
    MAKEID(columnGetQString);
    MAKEID(columnGetSetIsAll);
    MAKEID(columnGetString);
    MAKEID(columnGetStringX);
    MAKEID(columnGetUnicodeX);
    MAKEID(columnGetUtf8X);
    MAKEID(columnReadBool);
    MAKEID(columnReadData);
    MAKEID(columnReadDataX);
    MAKEID(columnReadInt);
    MAKEID(columnReadQString);
    MAKEID(columnReadSetIsAll);
    MAKEID(columnReadString);
    MAKEID(columnReadStringX);
    MAKEID(columnReadUnicodeX);
    MAKEID(columnReadUtf8X);
    MAKEID(compareDataData);
    MAKEID(compareEStrEStr);
    MAKEID(compareQStrQStr);
    MAKEID(compareStrBlank);
    MAKEID(compareStrStr);
    MAKEID(compareUnicodeUnicode);
    MAKEID(compareUnicodeUnicodeStrength);
    MAKEID(compareUtf8Utf8);
    MAKEID(compareUtf8Utf8Strength);
    MAKEID(compareVStrVStr);
    MAKEID(compareVUnicodeVUnicode);
    MAKEID(compareVUnicodeVUnicodeStrength);
    MAKEID(concat);
    MAKEID(concatExtend);
    MAKEID(concatStr2Str);
    MAKEID(concatStrExtend);
    MAKEID(concatStrF);
    MAKEID(concatUnicode);
    MAKEID(concatUnicodeExtend);
    MAKEID(concatUnicodeF);
    MAKEID(concatUnicodeToUnicode);
    MAKEID(concatUtf8);
    MAKEID(concatUtf8ToUtf8);
    MAKEID(concatVStr2Str);
    MAKEID(concatVStr);
    MAKEID(concatVStrF);
    MAKEID(concatVUnicode);
    MAKEID(concatVUnicodeF);
    MAKEID(concatVUnicodeToUnicode);
    cosId = createIdAtom("_cos");
    coshId = createIdAtom("_cosh");
    MAKEID(countProvider);
    MAKEID(countRows);
    MAKEID(countToSize);
    MAKEID(crcData);
    MAKEID(crcUnicode);
    MAKEID(crcUtf8);
    MAKEID(crcVStr);
    MAKEID(crcVUnicode);
    MAKEID(createBlob);
    MAKEID(createDataRangeLow);
    MAKEID(createDataRangeHigh);
    MAKEID(createOrder);
    MAKEID(createQStrRangeLow);
    MAKEID(createQStrRangeHigh);
    MAKEID(createQuotedString);
    MAKEID(createRangeLow);
    MAKEID(createRangeHigh);
    MAKEID(createRealInf);
    MAKEID(createRealNull);
    MAKEID(createRegex);
    MAKEID(createRowFromJson);
    MAKEID(createRowFromXml);
    MAKEID(createRowStream);
    MAKEID(createStrRangeLow);
    MAKEID(createStrRangeHigh);
    MAKEID(createUnicodeRangeLow);
    MAKEID(createUnicodeRangeHigh);
    MAKEID(createWRegex);
    MAKEID(csvStr2Bool);
    MAKEID(ctxGetRowJson);
    MAKEID(ctxGetRowXml);
    MAKEID(data2Bool);
    MAKEID(dataset2DatasetX);
    MAKEID(dataset2RowsetX);
    MAKEID(DecAbs);
    MAKEID(DecAdd);
    MAKEID(DecCompareDecimal);
    MAKEID(DecCompareUDecimal);
    MAKEID(DecCompareNull);
    MAKEID(DecDistinct);
    MAKEID(DecDistinctR);
    MAKEID(DecDivide);
    MAKEID(DecModulus);
    MAKEID(DecMul);
    MAKEID(DecNegate);
    MAKEID(DecPopDecimal);
    MAKEID(DecPopInt64);
    MAKEID(DecPopLong);
    MAKEID(DecPopReal);
    MAKEID(DecPopString);
    MAKEID(DecPopStringX);
    MAKEID(DecPopUDecimal);
    MAKEID(DecPopVString);
    MAKEID(DecPopVStringX);
    MAKEID(DecPushCString);
    MAKEID(DecPushDecimal);
    MAKEID(DecPushInt64);
    MAKEID(DecPushLong);
    MAKEID(DecPushReal);
    MAKEID(DecPushQString);
    MAKEID(DecPushString);
    MAKEID(DecPushUDecimal);
    MAKEID(DecPushUInt64);
    MAKEID(DecPushUnicode);
    MAKEID(DecPushUtf8);
    MAKEID(DecRound);
    MAKEID(DecRoundUp);
    MAKEID(DecRoundTo);
    MAKEID(DecSetPrecision);
    MAKEID(DecSub);
    MAKEID(DecTruncate);
    MAKEID(DecTruncateAt);
    MAKEID(DecValid);
    MAKEID(DecValidTos);
    MAKEID(deleteFile);
    MAKEID(deserializeRaw);
    MAKEID(deserializeChildDictionaryFromStream);
    MAKEID(deserializeChildDictionaryFromDatasetFromStream);
    MAKEID(deserializeChildRowsetFromStream);
    MAKEID(deserializeCStringX);
    MAKEID(deserializeDataX);
    MAKEID(deserializeDatasetX);
    MAKEID(deserializeDictionaryX);
    MAKEID(deserializeGroupedDatasetX);
    MAKEID(deserializeQStrX);
    MAKEID(deserializeRow);
    MAKEID(deserializeRowsetX);
    MAKEID(deserializeGroupedRowsetX);
    MAKEID(deserializeSet);
    MAKEID(deserializeStringX);
    MAKEID(deserializeUnicodeX);
    MAKEID(deserializeUtf8X);
    MAKEID(deserializeVUnicodeX);
    MAKEID(deserializerReadN);
    MAKEID(deserializerReadPackedInt);
    MAKEID(deserializerReadSize);
    MAKEID(deserializerReadUtf8);
    MAKEID(deserializerReadVStr);
    MAKEID(deserializerReadVUni);
    MAKEID(deserializerPeek);
    MAKEID(deserializerBeginNested);
    MAKEID(deserializerFinishedNested);
    MAKEID(deserializerSkipN);
    MAKEID(deserializerSkipPackedInt);
    MAKEID(deserializerSkipUtf8);
    MAKEID(deserializerSkipVStr);
    MAKEID(deserializerSkipVUni);
    MAKEID(destroyRegex);
    MAKEID(destroyWRegex);
    MAKEID(destructMetaMember);
    MAKEID(dictionaryCount);
    MAKEID(dictionaryExists);
    MAKEID(dictionaryLookup);
    MAKEID(dictionaryLookupExists);
    MAKEID(doNotify);
    MAKEID(doNotifyTarget);
    MAKEID(ebcdic2ascii);
    MAKEID(en2f);
    MAKEID(en2l4);
    MAKEID(en2l8);
    MAKEID(en2ls4);
    MAKEID(en2ls8);
    MAKEID(ensureCapacity);
    MAKEID(ensureRowAvailable);
    MAKEID(__eog);
    estr2EStrId = createIdAtom("eStr2EStr");
    estr2VStrId = createIdAtom("eStr2VStr");
    estr2VStrXId = createIdAtom("EStr2VStrX");
    MAKEID(evaluateChildQueryInstance);
    MAKEID(ex2f);
    MAKEID(executeGraph);
    MAKEID(executeChildQueryInstance);
    MAKEID(f2an);
    f2axId = createIdAtom("_f2ax");
    MAKEID(f2vn);
    MAKEID(f2vx);
    MAKEID(failDivideByZero);
    MAKEID(fileExists);
    MAKEID(finalizeRowClear);
    MAKEID(free);
    MAKEID(freeException);
    MAKEID(getBytesFromBuilder);
    MAKEID(getChildQueryDictionaryResult);
    MAKEID(getChildQueryLinkedResult);
    MAKEID(getChildQueryLinkedRowResult);
    MAKEID(getClusterSize);
    MAKEID(getDatasetHash);
    MAKEID(getECL);
    MAKEID(getEnv);
    MAKEID(getEventExtra);
    MAKEID(getEventName);
    MAKEID(getExpandLogicalName);
    MAKEID(getExternalResultHash);
    MAKEID(getFailMessage);
    MAKEID(getFilePosition);
    MAKEID(getGraphLoopCounter);
    MAKEID(getIsValid);
    MAKEID(getLocalDictionaryResult);
    MAKEID(getLocalFailMessage);
    MAKEID(getLocalFilePosition);
    MAKEID(getLocalLinkedResult);
    MAKEID(getLocalLinkedRowResult);
    MAKEID(getMatched);
    MAKEID(getMatchLength);
    MAKEID(getMatchPosition);
    MAKEID(getMatchRow);
    MAKEID(getMatchText);
    MAKEID(getMatchUnicode);
    MAKEID(getMatchUtf8);
    MAKEID(getPackedSigned);
    MAKEID(getPackedSize);
    MAKEID(getPackedUnsigned);
    MAKEID(getProductionResult);
    MAKEID(getProductionText);
    MAKEID(getProductionUnicode);
    MAKEID(getProductionUtf8);
    MAKEID(getResultBool);
    MAKEID(getResultData);
    MAKEID(getResultDataset);
    MAKEID(getResultDecimal);
    MAKEID(getResultDictionary);
    MAKEID(getResultHash);
    MAKEID(getResultInt);
    MAKEID(getResultQString);
    MAKEID(getResultReal);
    MAKEID(getResultRowset);
    MAKEID(getResultSet);
    MAKEID(getResultString);
    MAKEID(getResultStringF);
    MAKEID(getResultUnicode);
    MAKEID(getResultVarString);
    MAKEID(getResultVarUnicode);
    MAKEID(getRootResult);
    MAKEID(getStartCycles);
    MAKEID(getWorkflowId);
    MAKEID(getWuid);
    MAKEID(groupedDataset2RowsetX);
    MAKEID(groupedRowset2DatasetX);
    MAKEID(hash32Data);
    MAKEID(hash32Data1);
    MAKEID(hash32Data2);
    MAKEID(hash32Data3);
    MAKEID(hash32Data4);
    MAKEID(hash32Data5);
    MAKEID(hash32Data6);
    MAKEID(hash32Data7);
    MAKEID(hash32Data8);
    MAKEID(hash32VStr);
    MAKEID(hash32Unicode);
    MAKEID(hash32Utf8);
    MAKEID(hash32VUnicode);
    MAKEID(hash64Data);
    MAKEID(hash64VStr);
    MAKEID(hash64Unicode);
    MAKEID(hash64Utf8);
    MAKEID(hash64VUnicode);
    MAKEID(hashData);
    MAKEID(hashDataNC);
    MAKEID(hashMd5Finish);
    MAKEID(hashMd5Init);
    MAKEID(hashMd5Data);
    MAKEID(hashVStr);
    MAKEID(hashVStrNC);
    MAKEID(hashUnicode);
    MAKEID(hashUtf8);
    MAKEID(hashVUnicode);
    MAKEID(IIndirectMemberVisitor_visitRow);
    MAKEID(IIndirectMemberVisitor_visitRowset);
    intFormatId = createIdAtom("_intformat");
    MAKEID(isResult);
    MAKEID(keyUnicodeX);
    MAKEID(keyUnicodeStrengthX);
    MAKEID(killRange);
    MAKEID(l42an);
    MAKEID(l42ax);
    MAKEID(l42vn);
    MAKEID(l42vx);
    MAKEID(l82an);
    MAKEID(l82ax);
    MAKEID(l82vn);
    MAKEID(l82vx);
    MAKEID(linkdataset2linkdataset);
    MAKEID(linkRow);
    MAKEID(linkRowset);
    lnId = createIdAtom("_ln");
    MAKEID(loadResource);
    MAKEID(lookupBlob);
    log10Id = createIdAtom("_log10");
    MAKEID(ls42an);
    MAKEID(ls42ax);
    MAKEID(ls42vn);
    MAKEID(ls42vx);
    MAKEID(ls82an);
    MAKEID(ls82ax);
    MAKEID(ls82vn);
    MAKEID(ls82vx);
    MAKEID(memcmp);
    MAKEID(memcpy);
    MAKEID(memset);
    MAKEID(newWhenActionArg);
    MAKEID(newCountAggregateArg);
    MAKEID(newDegroupArg);
    MAKEID(newExistsAggregateArg);
    MAKEID(newFunnelArg);
    MAKEID(newGraphLoopResultWriteArg);
    MAKEID(newLibraryConstantRawIteratorArg);
    MAKEID(newLocalResultReadArg);
    MAKEID(newLocalResultSpillArg);
    MAKEID(newMemorySpillReadArg);
    MAKEID(newMemorySpillSplitArg);
    MAKEID(newNullArg);
    MAKEID(newSelectNArg);
    MAKEID(newSplitArg);
    MAKEID(newWorkUnitReadArg);
    MAKEID(newWorkUnitWriteArg);
    MAKEID(noteSectionTime);
    MAKEID(offsetProvider);
    MAKEID(outputXmlBeginArray);
    MAKEID(outputXmlBeginNested);
    MAKEID(outputXmlBool);
    MAKEID(outputXmlData);
    MAKEID(outputXmlDecimal);
    MAKEID(outputXmlEndArray);
    MAKEID(outputXmlEndNested);
    MAKEID(outputXmlInt);
    MAKEID(outputXmlQString);
    MAKEID(outputXmlReal);
    MAKEID(outputXmlSetAll);
    MAKEID(outputXmlString);
    MAKEID(outputXmlUInt);
    MAKEID(outputXmlUnicode);
    MAKEID(outputXmlUtf8);
    MAKEID(outputXmlInline);
    powerId = createIdAtom("_power");
    MAKEID(prefixDiffStr);
    MAKEID(prefixDiffUnicode);
    MAKEID(processFieldBool);
    MAKEID(processFieldData);
    MAKEID(processFieldDecimal);
    MAKEID(processFieldInt);
    MAKEID(processFieldQString);
    MAKEID(processFieldReal);
    MAKEID(processFieldString);
    MAKEID(processFieldUInt);
    MAKEID(processFieldUnicode);
    MAKEID(processFieldUtf8);
    MAKEID(processFieldSetAll);
    MAKEID(processFieldBeginSet);
    MAKEID(processFieldBeginDataset);
    MAKEID(processFieldBeginRow);
    MAKEID(processFieldEndSet);
    MAKEID(processFieldEndDataset);
    MAKEID(processFieldEndRow);
    MAKEID(qstr2Bool);
    MAKEID(qstr2Data);
    MAKEID(qstr2DataX);
    MAKEID(qstrToQStr);
    MAKEID(qstrToQStrX);
    MAKEID(qstr2Str);
    MAKEID(qstr2StrX);
    MAKEID(qstr2VStr);
    MAKEID(qstrLength);
    MAKEID(qstrSize);
    MAKEID(queryFailCode);
    MAKEID(queryLocalFailCode);
    MAKEID(queryLocalResult);
    MAKEID(queryLogicalFilename);
    MAKEID(rankedFromOrder);
    MAKEID(rankFromOrder);
    readIntId[3][true] = createIdAtom("readInt3");
    readIntId[5][true] = createIdAtom("readInt5");
    readIntId[6][true] = createIdAtom("readInt6");
    readIntId[7][true] = createIdAtom("readInt7");
    readIntId[3][false] = createIdAtom("readUInt3");
    readIntId[5][false] = createIdAtom("readUInt5");
    readIntId[6][false] = createIdAtom("readUInt6");
    readIntId[7][false] = createIdAtom("readUInt7");
    readSwapIntId[3][true] = createIdAtom("readSwapInt3");
    readSwapIntId[5][true] = createIdAtom("readSwapInt5");
    readSwapIntId[6][true] = createIdAtom("readSwapInt6");
    readSwapIntId[7][true] = createIdAtom("readSwapInt7");
    readSwapIntId[3][false] = createIdAtom("readSwapUInt3");
    readSwapIntId[5][false] = createIdAtom("readSwapUInt5");
    readSwapIntId[6][false] = createIdAtom("readSwapUInt6");
    readSwapIntId[7][false] = createIdAtom("readSwapUInt7");
    realFormatId = createIdAtom("_realformat");
    MAKEID(regexFindX);
    MAKEID(regexGetFindStr);
    MAKEID(regexNewSetStrPattern);
    MAKEID(regexNewSetUStrPattern);
    MAKEID(regexNewStrFind);
    MAKEID(regexNewStrFound);
    MAKEID(regexNewStrFoundX);
    MAKEID(regexNewStrReplaceX);
    MAKEID(regexNewUStrFind);
    MAKEID(regexNewUStrFound);
    MAKEID(regexNewUStrFoundX);
    MAKEID(regexNewUStrReplaceX);
    MAKEID(regexMatchSet);
    MAKEID(regexUStrMatchSet);
    MAKEID(regexReplaceX);
    MAKEID(registerTimer);
    MAKEID(releaseRow);
    MAKEID(releaseRowset);
    MAKEID(reportFieldOverflow);
    MAKEID(reportRowOverflow);
    MAKEID(responseinfo);
    MAKEID(restoreCluster);
    MAKEID(returnPersistVersion);

    reverseIntId[2][false] = createIdAtom("revUInt2");
    reverseIntId[3][false] = createIdAtom("revUInt3");
    reverseIntId[4][false] = createIdAtom("revUInt4");
    reverseIntId[5][false] = createIdAtom("revUInt5");
    reverseIntId[6][false] = createIdAtom("revUInt6");
    reverseIntId[7][false] = createIdAtom("revUInt7");
    reverseIntId[8][false] = createIdAtom("revUInt8");
    reverseIntId[2][true] = createIdAtom("revInt2");
    reverseIntId[3][true] = createIdAtom("revInt3");
    reverseIntId[4][true] = createIdAtom("revInt4");
    reverseIntId[5][true] = createIdAtom("revInt5");
    reverseIntId[6][true] = createIdAtom("revInt6");
    reverseIntId[7][true] = createIdAtom("revInt7");
    reverseIntId[8][true] = createIdAtom("revInt8");

    roundId = createIdAtom("_round");
    MAKEID(roundTo);
    roundupId = createIdAtom("_roundup");
    MAKEID(rowset2DatasetX);
    MAKEID(rtlCopyRowLinkChildren);
    MAKEID(rtlDeserializeDictionary);
    MAKEID(rtlDeserializeDictionaryFromDataset);
    MAKEID(rtlDeserializeRow);
    MAKEID(rtlDeserializeToBuilder);
    MAKEID(rtlLinkChildren);
    MAKEID(rtlMax);
    MAKEID(rtlMin);
    MAKEID(rtlRandom);
    MAKEID(rtlSerializeDictionary);
    MAKEID(rtlSerializeDictionaryToDataset);
    MAKEID(rtlSerializeToBuilder);
    MAKEID(searchTableInteger4);
    MAKEID(searchTableInteger8);
    MAKEID(searchTableUInteger4);
    MAKEID(searchTableUInteger8);
    MAKEID(searchUnicodeTable);
    MAKEID(searchVUnicodeTable);
    MAKEID(searchUtf8Table);
    MAKEID(selectCluster);
    MAKEID(serializeBool);
    MAKEID(serializeChildDictionaryToStream);
    MAKEID(serializeChildDictionaryToDatasetToStream);
    MAKEID(serializeChildRowsetToStream);
    MAKEID(serializeCStringX);
    MAKEID(serializeDataX);
    MAKEID(serializeDatasetX);
    MAKEID(serializeStringX);
    MAKEID(serializeDictionaryX);
    MAKEID(serializeFixedData);
    MAKEID(serializeFixedString);
    MAKEID(serializeGroupedDatasetX);
    MAKEID(serializeGroupedRowsetX);
    MAKEID(serializeLPData);
    MAKEID(serializeLPQString);
    MAKEID(serializeLPString);
    MAKEID(serializeQStrX);
    MAKEID(serializeRaw);
    MAKEID(serializeReal4);
    MAKEID(serializeReal8);
    MAKEID(serializeRow);
    MAKEID(serializeRowsetX);
    MAKEID(serializeSet);
    MAKEID(serializeUnicodeX);
    MAKEID(serializeUtf8X);
    MAKEID(serializerPut);
    MAKEID(serializerBeginNested);
    MAKEID(serializerEndNested);
    MAKEID(setConditionCode);
    MAKEID(setMethod);
    MAKEID(setOwnMethod);
    MAKEID(setPackedSigned);
    MAKEID(setPackedUnsigned);
    MAKEID(setResultBool);
    MAKEID(setResultData);
    MAKEID(setResultDataset);
    MAKEID(setResultDecimal);
    MAKEID(setResultInt);
    MAKEID(setResultQString);
    MAKEID(setResultRaw);;
    MAKEID(setResultReal);
    MAKEID(setResultSet);
    MAKEID(setResultString);
    MAKEID(setResultUInt);
    MAKEID(setResultUnicode);
    MAKEID(setResultVarString);
    MAKEID(setResultVarUnicode);
    MAKEID(setWorkflowCondition);
    MAKEID(set2SetX);
    sinId = createIdAtom("_sin");
    sinhId = createIdAtom("_sinh");
    sqrtId = createIdAtom("_sqrt");
    MAKEID(str2Data);
    MAKEID(str2DataX);
    MAKEID(strToQStr);
    MAKEID(strToQStrX);
    MAKEID(str2Str);
    MAKEID(str2StrX);
    MAKEID(str2VStr);
    MAKEID(str2VStrX);
    MAKEID(strcpy);
    MAKEID(strlen);
    MAKEID(subDataFT);
    MAKEID(subDataFTX);
    MAKEID(subDataFX);
    MAKEID(subQStrFT);
    MAKEID(subQStrFTX);
    MAKEID(subQStrFX);
    MAKEID(subStrFX);
    MAKEID(subStrFT);
    MAKEID(subStrFTX);
    MAKEID(sysFail);
    tanId = createIdAtom("_tan");
    tanhId = createIdAtom("_tanh");
    MAKEID(trimAll);
    MAKEID(trimBoth);
    MAKEID(trimLeft);
    MAKEID(trimRight);
    MAKEID(trimStrLen);
    MAKEID(trimUnicodeAll);
    MAKEID(trimUnicodeBoth);
    MAKEID(trimUnicodeLeft);
    MAKEID(trimUnicodeRight);
    MAKEID(trimUnicodeStrLen);
    MAKEID(trimUtf8All);
    MAKEID(trimUtf8Both);
    MAKEID(trimUtf8Left);
    MAKEID(trimUtf8Right);
    MAKEID(trimUtf8StrLen);
    MAKEID(trimVAll);
    MAKEID(trimVBoth);
    MAKEID(trimVLeft);
    MAKEID(trimVRight);
    MAKEID(trimVStrLen);
    MAKEID(trimVUnicodeAll);
    MAKEID(trimVUnicodeBoth);
    MAKEID(trimVUnicodeLeft);
    MAKEID(trimVUnicodeRight);
    MAKEID(trimVUnicodeStrLen);
    truncateId = createIdAtom("_truncate");
    MAKEID(UChar);
    MAKEID(unicode2Codepage);
    MAKEID(unicode2CodepageX);
    MAKEID(unicode2Data);
    MAKEID(unicode2DataX);
    MAKEID(unicode2CodepageX);
    MAKEID(unicode2Unicode);
    MAKEID(unicode2UnicodeX);
    MAKEID(unicodeToUtf8);
    MAKEID(unicodeToUtf8X);
    MAKEID(unicode2VCodepage);
    MAKEID(unicode2VCodepageX);
    MAKEID(unicode2VUnicode);
    MAKEID(unicode2VUnicodeX);
    MAKEID(unicodeNullTerminate);
    MAKEID(unicodeStrcpy);
    MAKEID(unicodeStrlen);
    MAKEID(unicodeSubStrFX);
    MAKEID(unicodeSubStrFTX);
    MAKEID(utf82Codepage);
    MAKEID(utf82CodepageX);
    MAKEID(utf82Data);
    MAKEID(utf82DataX);
    MAKEID(utf82Unicode);
    MAKEID(utf82UnicodeX);
    MAKEID(utf8ToUtf8);
    MAKEID(utf8ToUtf8X);
    MAKEID(utf8Length);
    MAKEID(utf8Size);
    MAKEID(utf8SubStrFX);
    MAKEID(utf8SubStrFTX);
    MAKEID(validReal);
    MAKEID(vcodepage2Unicode);
    MAKEID(vcodepage2UnicodeX);
    MAKEID(vcodepage2VUnicode);
    MAKEID(vcodepage2VUnicodeX);
    MAKEID(vn2b);
    MAKEID(vn2f);
    MAKEID(vn2l4);
    MAKEID(vn2l8);
    MAKEID(vn2ls4);
    MAKEID(vn2ls8);
    MAKEID(vstr2Data);
    MAKEID(vstr2Str);
    MAKEID(vstr2VStr);
    MAKEID(vunicode2Codepage);
    MAKEID(vunicode2CodepageX);
    MAKEID(vunicode2Data);
    MAKEID(vunicode2DataX);
    MAKEID(vunicode2Unicode);
    MAKEID(vunicode2UnicodeX);
    MAKEID(vunicode2VCodepage);
    MAKEID(vunicode2VCodepageX);
    MAKEID(vunicode2VUnicode);
    MAKEID(vunicode2VUnicodeX);
    MAKEID(walkIndirectMetaMember);
    MAKEID(wregexFindX);
    MAKEID(wregexGetFindStr);
    MAKEID(wregexReplaceX);
    MAKEID(writeEbcdic);
    writeIntId[3] = createIdAtom("writeInt3");
    writeIntId[5] = createIdAtom("writeInt5");
    writeIntId[6] = createIdAtom("writeInt6");
    writeIntId[7] = createIdAtom("writeInt7");
    MAKEID(writeReal);
    MAKEID(writeSigned);
    MAKEID(writeString);
    MAKEID(writeUnicode);
    MAKEID(writeUnsigned);
    MAKEID(writeUtf8);
    MAKEID(xmlDecodeStr);
    MAKEID(xmlDecodeUStr);
    MAKEID(xmlEncodeStr);
    MAKEID(xmlEncodeUStr);

//Atoms
    MAKEATOM(accessor);
    MAKEATOM(activeActivityMarker);
    MAKEATOM(activeMatchText);
    MAKEATOM(activeMatchUnicode);
    MAKEATOM(activeMatchUtf8);
    MAKEATOM(activeProductionMarker);
    MAKEATOM(activeValidateMarker);
    MAKEATOM(activityIdMarker);
    MAKEATOM(blobHelper);
    MAKEATOM(branch);
    MAKEATOM(checkpoint);
    MAKEATOM(child);
    MAKEATOM(class);
    MAKEATOM(clear);
    MAKEATOM(__clearHelper);
    MAKEATOM(csvReadMarker);
    MAKEATOM(decimal);
    MAKEATOM(declare);
    MAKEATOM(dictionary);
    MAKEATOM(delayed);
    MAKEATOM(dependency);
    MAKEATOM(deserializer);
    MAKEATOM(ecl);
    MAKEATOM(end);
    MAKEATOM(ensureCapacity);
    MAKEATOM(file);
    MAKEATOM(forceAllCheck);
    MAKEATOM(funnel);
    MAKEATOM(go);
    MAKEATOM(guard);
    MAKEATOM(helper);
    MAKEATOM(indexLayoutMarker);
    MAKEATOM(init);
    MAKEATOM(insideOnCreate);
    MAKEATOM(insideOnStart);
    MAKEATOM(instance);
    MAKEATOM(mainprototypes);
    MAKEATOM(multiInstance);
    MAKEATOM(noSet);
    MAKEATOM(numResults);
    MAKEATOM(packing);
    MAKEATOM(parentHelpers);
    MAKEATOM(path);
    MAKEATOM(prefetcherInstanceMarker);
    MAKEATOM(quick);
    MAKEATOM(results);
    MAKEATOM(rowAllocatorMarker);
    MAKEATOM(rtlFieldKeyMarker);
    MAKEATOM(serializer);
    MAKEATOM(serializerInstanceMarker);
    MAKEATOM(skipActionMarker);
    MAKEATOM(skipReturnMarker);
    MAKEATOM(speed);
    MAKEATOM(subgraph);
    MAKEATOM(userFunction);
    utf8Atom = createAtom("utf-8");
    MAKEATOM(wrapper);
    MAKEATOM(xmlColumnProvider);
    MAKEATOM(xmlReadMarker);

    MAKESYSATOM(accessedFromChild);
    MAKESYSATOM(conditionalRowMarker);
    MAKESYSATOM(loop);
    MAKESYSATOM(loopFirst);
    MAKESYSATOM(noAccess);
    MAKESYSATOM(noReplicate);
    MAKESYSATOM(noVirtual);
    MAKESYSATOM(regexFindInstance);
    MAKESYSATOM(regexInstance);
    MAKESYSATOM(selfJoinPlaceholder);
    MAKESYSATOM(spill);
    MAKESYSATOM(spillReason);
    MAKESYSATOM(steppedMeta);
    MAKESYSATOM(translated);
    return true;
}

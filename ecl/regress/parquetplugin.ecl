IMPORT Parquet;

// Test datatypes
SEQUENTIAL(
PARALLEL(
    ParquetIO.write(DATASET([{000, 'aaa', 0},
                             {001, 'aab', false},
                             {002, 'aac', 1},
                             {003, 'aad', true},
                             {004, 'aae', 9872},
                             {005, 'aaf', -1235},
                             {006, 'aag', TRUE},
                             {007, 'aah', FALSE},
                             {008, 'aai',  'abc'},
                             {009, 'aaj', '0'}], {UNSIGNED testid, STRING3 testname, BOOLEAN value}), '/tmp/ParquetTest/BooleanTest.parquet', TRUE),
    ParquetIO.write(DATASET([{010, 'aai', 123},
                             {011, 'aaj', -987},
                             {012, 'aak', 0},
                             {013, 'aal', 42},
                             {014, 'aam', -500},
                             {015, 'aan', 999},
                             {016, 'aao', 7},
                             {017, 'aap', -12345},
                             {018, 'aaq', 987654},
                             {019, 'aar', 1000000}], {UNSIGNED testid, STRING3 testname, INTEGER value}), '/tmp/ParquetTest/IntegerTest.parquet', TRUE),
    ParquetIO.write(DATASET([{020, 'aas', 3.14},
                             {021, 'aat', -0.5},
                             {022, 'aau', 123.456},
                             {023, 'aav', -987.654},
                             {024, 'aaw', 0.001},
                             {025, 'aax', 999.99},
                             {026, 'aay', 7.5},
                             {027, 'aaz', -1234.5678},
                             {028, 'aba', 98765.4321},
                             {029, 'abb', 0.00001}], {UNSIGNED testid, STRING3 testname, REAL value}), '/tmp/ParquetTest/RealTest.parquet', TRUE),
    ParquetIO.write(DATASET([{030, 'abc', 123.456789},
                             {031, 'abd', -987.654321},
                             {032, 'abe', 0.000001},
                             {033, 'abf', 42.424242},
                             {034, 'abg', -500.50505},
                             {035, 'abh', 999.999999},
                             {036, 'abi', 7.777777},
                             {037, 'abj', -12345.6789},
                             {038, 'abk', 987654.321},
                             {039, 'abl', 0.0000001}], {UNSIGNED testid, STRING3 testname, DECIMAL value}), '/tmp/ParquetTest/DecimalTest.parquet', TRUE),
    ParquetIO.write(DATASET([{040, 'abm', 'Hello, World!'},
                             {041, 'abn', 'Data Science'},
                             {042, 'abo', '12345'},
                             {043, 'abp', 'Python is fun!'},
                             {044, 'abq', 'Strings rock!'},
                             {045, 'abr', 'Testing 1, 2, 3...'},
                             {046, 'abs', 'Let\'s code!'},
                             {047, 'abt', 'Strings and more strings'},
                             {048, 'abu', '\251\252\253\253\256'},
                             {049, 'abv', 'Special characters: !@#$%^&*'}], {UNSIGNED testid, STRING3 testname, STRING value}), '/tmp/ParquetTest/StringTest.parquet', TRUE),
    ParquetIO.write(DATASET([{050, 'abw', 'This is a "Q" string.'},
                             {051, 'abx', 'Another "example" here.'},
                             {052, 'aby', 'Qstrings are useful!'},
                             {053, 'abz', 'Escaping quotes: \\"'},
                             {054, 'aca', 'special characters ! " # $'},
                             {055, 'acb', 'testing string'},
                             {056, 'acc', 'Qstrings rock!'},
                             {057, 'acd', 'Testing "()*+,-)" characters.'},
                             {058, 'ace', '!"#$&\'()*+,-./;<>_[\\]'},
                             {059, 'acf', '<@@[[[[\'\\\'\\\'\'\\]]]]'}], {UNSIGNED testid, STRING3 testname, QSTRING value}), '/tmp/ParquetTest/QStringTest.parquet', TRUE),
    ParquetIO.write(DATASET([{060, 'acg', U'こんにちは、世界！'},
                             {061, 'ach', U'Unicode characters: ḸḹḾ'},
                             {062, 'aci', U'Ṏ Beautiful Unicode Ṙ'},
                             {063, 'acj', U'Unicode is fascinating!'},
                             {064, 'ack', U'Ṙ Unicode Symbols ẫ'},
                             {065, 'acl', U'Special characters: ©®™'},
                             {066, 'acm', U'Unicode magic ⊗⊘⊙⊚⊛⊜⊝'},
                             {067, 'acn', U'Testing Unicode: ⋖⋗⋙⋚⋛⋜⋝'},
                             {068, 'aco', U'∭∮∯ More Unicode Fun ∐∑−∓∔'},
                             {069, 'acp', U'∆∇∈∉∊∋∌ Unicode Everywhere ⋸⋹⋺⋻'}], {UNSIGNED testid, STRING3 testname, UNICODE value}), '/tmp/ParquetTest/UnicodeTest.parquet', TRUE),
    ParquetIO.write(DATASET([{070, 'acq', U'Café au lait ☕'},
                             {071, 'acr', U'🎉 UTF-8 Characters 🎉'},
                             {072, 'acs', U'Special characters: ©®™'},
                             {073, 'act', U'UTF-8 magic ✨'},
                             {074, 'acu', U'🌟 More UTF-8 Fun 🌟'},
                             {075, 'acv', U'Testing UTF-8: 💡🔍🌐'},
                             {076, 'acw', U'🌟 UTF-8 Everywhere 🌟'},
                             {077, 'acx', U'UTF-8 is versatile!'},
                             {078, 'acy', U'UTF-8 for the win!'},
                             {079, 'acz', U'🌟 UTF-8 Symbols 🌟'}], {UNSIGNED testid, STRING3 testname, UTF8 value}), '/tmp/ParquetTest/UTF8Test.parquet', TRUE),
    ParquetIO.write(DATASET([{080, 'ada', x'01a48d8414d848e900'},
                             {081, 'adb', x'01f48ab446a76f8923'},
                             {082, 'adc', x'01a48ec793a76f9400'},
                             {083, 'add', x'01a48ecd6e65d8e803'},
                             {084, 'ade', x'01a48ed1bb70d84c01'},
                             {085, 'adf', x'01a48ed8f40385ba01'},
                             {086, 'adg', x'01a4901558d7c91900'},
                             {087, 'adh', x'01a490101d3de9ac02'},
                             {088, 'adi', x'01a49155d1caf41500'},
                             {089, 'adj', x'01a49156089fce5a02'}], {UNSIGNED testid, STRING3 testname, DATA value}), '/tmp/ParquetTest/DataTest.parquet', TRUE),
    ParquetIO.write(DATASET([{090, 'adk', U'Short text'},
                             {091, 'adl', U'A longer variable-length string'},
                             {092, 'adm', U'Strings are flexible!'},
                             {093, 'adn', U'Variable-length strings rock!'},
                             {094, 'ado', U'Testing varstrings: \251\252'},
                             {095, 'adp', U'Varstrings everywhere!'},
                             {096, 'adq', U'%$ More Varstring Fun ^*'},
                             {097, 'adr', U'Varstrings for the win!'},
                             {098, 'ads', U'Varstrings galore!'},
                             {099, 'adt', U'*** Varstring Universe ***'}], {UNSIGNED testid, STRING3 testname, VARSTRING value}), '/tmp/ParquetTest/VarstringTest.parquet', TRUE),
    ParquetIO.write(DATASET([{100, 'adu', U'Variable-length Unicode: こんにちは、世界！'},
                             {101, 'adv', U'🌟 Variable-length Unicode Symbols 🌟'},
                             {102, 'adw', U'Unicode flexibility is awesome!'},
                             {103, 'adx', U'Testing varunicodes: 🌈🌐'},
                             {104, 'ady', U'Varunicodes everywhere!'},
                             {105, 'adz', U'🌟 More Varunicode Fun 🌟'},
                             {106, 'aea', U'Varunicodes for the win!'},
                             {107, 'aeb', U'Varunicodes galore!'},
                             {108, 'aec', U'🌟 Varunicode Universe 🌟'},
                             {109, 'aed', U'🌟 Varunicode Magic 🌟'}], {UNSIGNED testid, STRING3 testname, VARUNICODE value}), '/tmp/ParquetTest/VarunicodeTest.parquet', TRUE),
    ParquetIO.write(DATASET([{110, 'aee', [true]},
                             {111, 'aef', [false]},
                             {112, 'aeg', [true, false, true, false, true]},
                             {113, 'aeh', [true, true, true, true, false]},
                             {114, 'aei', [true, true, false, true, true]}], {UNSIGNED testid, STRING3 testname, SET OF BOOLEAN value}), '/tmp/ParquetTest/SetofBooleanTest.parquet', TRUE),
    ParquetIO.write(DATASET([{115, 'aej', [42]},
                             {116, 'aek', [-10]},
                             {117, 'ael', [0,34,367,-12]},
                             {118, 'aem', [100,89,12]},
                             {119, 'aen', [1,2,3,4,5]}], {UNSIGNED testid, STRING3 testname, SET OF INTEGER value}), '/tmp/ParquetTest/SetofIntegerTest.parquet', TRUE),
    ParquetIO.write(DATASET([{120, 'aeo', [3.14, -2.718]},
                             {121, 'aep', [0.0]},
                             {122, 'aeq', [2.5, -0.5, 1.618]},
                             {123, 'aer', [7.77, -3.33]},
                             {124, 'aes', [4.2, 9.99, 3.1415926]}], {UNSIGNED testid, STRING3 testname, SET OF REAL value}), '/tmp/ParquetTest/SetofRealTest.parquet', TRUE),
    ParquetIO.write(DATASET([{125, 'aej', [1.23456789]},
                             {126, 'aek', [3.14159265, 2.71828183]},
                             {127, 'ael', [0.0, -1.23456789, -0.98765432]},
                             {128, 'aem', [0.12345678, -0.12345678, 19.12389555]},
                             {129, 'aen', [9.87654321, -5.43210987]}], {UNSIGNED testid, STRING3 testname, SET OF DECIMAL value}), '/tmp/ParquetTest/SetofDecimalTest.parquet', TRUE),
    ParquetIO.write(DATASET([{130, 'aeo', ['Hello', 'World']},
                             {131, 'aep', ['Parquet']},
                             {132, 'aeq', ['SET', 'OF', 'Test']},
                             {133, 'aer', ['String', 'Data', 'ECL']},
                             {134, 'aes', ['string', 'STRING']}], {UNSIGNED testid, STRING3 testname, SET OF STRING value}), '/tmp/ParquetTest/SetofStringTest.parquet', TRUE),
    ParquetIO.write(DATASET([{135, 'aet', ['"QString 1"']},
                             {136, 'aeu', ['akjdcna', '(&*^%$)']},
                             {137, 'aev', ['slk0934', '32415', '123vder']},
                             {138, 'aew', ['(*^&^&%$)', '^%$#']},
                             {139, 'aex', ['!@*^$', '1234754']}], {UNSIGNED testid, STRING3 testname, SET OF QSTRING value}), '/tmp/ParquetTest/SetofQStringTest.parquet', TRUE),
    ParquetIO.write(DATASET([{140, 'aey', [U'こんにちは、世界！']},
                             {141, 'aez', [U'Unicode flexibility is awesome!', U'Testing unicodes: 🌈🌐']},
                             {142, 'afa', [U'🌟 UTF8 Universe 🌟', U'Unicodes everywhere!', U'🌟 More Unicode Fun 🌟']},
                             {143, 'afb', [U'Unicodes for the win!', U'Unicodes galore!', U'🌟 Unicode Symbols 🌟']},
                             {144, 'afc', [U'🌟 Unicode Universe 🌟', U'🌟 Unicode Magic 🌟']}], {UNSIGNED testid, STRING3 testname, SET OF UNICODE value}), '/tmp/ParquetTest/SetofUnicodeTest.parquet', TRUE),
    ParquetIO.write(DATASET([{145, 'afd', [U'こんにちは、世界！', U'🌟 UTF8 Symbols 🌟', U'🌟 More UTF8 Fun 🌟']},
                             {146, 'afe', [U'UTF8 flexibility is awesome!', U'Testing utf8: 🌈🌐']},
                             {147, 'aff', [U'UTF8 everywhere!']},
                             {148, 'afg', [U'UTF8 for the win!', U'UTF8 galore!']},
                             {149, 'afh', [U'🌟 UTF8 Magic 🌟']}], {UNSIGNED testid, STRING3 testname, SET OF UTF8 value}), '/tmp/ParquetTest/SetofUTF8Test.parquet', TRUE),
    ParquetIO.write(DATASET([{150, 'afi', [x'01a48d8414d848e900', x'01a48ec793a76f9400', x'01a48ed1bb70d84c01', x'01a4901558d7c91900']},
                             {151, 'afj', [x'01f48ab446a76f8923', x'01a48ecd6e65d8e803', x'01a49156089fce5a02']},
                             {152, 'afk', [x'01a48d8414d848e900', x'01a48ec793a76f9400']},
                             {153, 'afl', [x'01f48ab446a76f8923']},
                             {154, 'afm', [x'01a48d8414d848e900', x'01a48ec793a76f9400', x'01a48ed8f40385ba01']}], {UNSIGNED testid, STRING3 testname, SET OF DATA value}), '/tmp/ParquetTest/SetofDataTest.parquet', TRUE),
    ParquetIO.write(DATASET([{155, 'afo', ['Hello', 'World']},
                             {156, 'afp', ['Parquet']},
                             {157, 'afq', ['SET', 'OF', 'Test']},
                             {158, 'afr', ['String', 'Data', 'ECL']},
                             {159, 'afs', ['string', 'STRING']}], {UNSIGNED testid, STRING3 testname, SET OF VARSTRING value}), '/tmp/ParquetTest/SetofVarstringTest.parquet', TRUE),
    ParquetIO.write(DATASET([{160, 'aft', [U'こんにちは、世界！']},
                             {161, 'afu', [U'Unicode flexibility is awesome!', U'Testing unicodes: 🌈🌐']},
                             {162, 'afv', [U'🌟 UTF8 Universe 🌟', U'Unicodes everywhere!', U'🌟 More Unicode Fun 🌟']},
                             {163, 'afw', [U'Unicodes for the win!', U'Unicodes galore!', U'🌟 Unicode Symbols 🌟']},
                             {164, 'afx', [U'🌟 Unicode Universe 🌟', U'🌟 Unicode Magic 🌟']}], {UNSIGNED testid, STRING3 testname, SET OF VARUNICODE value}), '/tmp/ParquetTest/SetofVarunicodeTest.parquet', TRUE),
    ParquetIO.write(DATASET([{165, 'afy', {true, 42, 3.14, 1.23456789, 'Hello', 'QString', U'こんにちは、世界！', U'🌟 UTF8 Symbols 🌟', x'01010101', [1, 2, 3]}},
                             {166, 'afz', {false, -10, -2.718, -0.98765432, 'World', 'AnotherQString', U'こんばんは、世界！', U'🌟 More UTF8 Fun 🌟', x'FF00FF00', [4, 5, 6]}},
                             {167, 'aga', {true, 0, 0.0, 0.0, 'Parquet', 'YetAnotherQString', U'おはよう、世界！', U'🌟 Unicode Magic 🌟', x'AABBCCDD', [7, 8, 9]}},
                             {168, 'agb', {false, 100, 1.618, 2.5, 'ECL', 'LastQString', U'こんばんは、日本！', U'🌟 Unicode Universe 🌟', x'12345678', [10, 11, 12]}},
                             {169, 'agc', {true, -5, -0.5, 3.14159265, 'SET', 'FinalQString', U'おやすみ、世界！', U'🌟 More Unicode Fun 🌟', x'FEDCBA98', [13, 14, 15]}},
                             {170, 'agd', {false, 7, 7.77, 0.12345678, 'Test', 'OneMoreQString', U'さようなら、世界！', U'🌟 Unicode Symbols 🌟', x'12345678', [16, 17, 18]}},
                             {171, 'age', {true, -20, -3.33, 8.88, 'String', 'FinalQString', U'おやすみ、日本！', U'🌟 UTF8 Symbols 🌟', x'FEDCBA98', [19, 20, 21]}},
                             {172, 'agf', {false, 15, 4.2, 0.123, 'Data', 'YetAnotherQString', U'おはよう、日本！', U'🌟 Unicode Magic 🌟', x'12345678', [22, 23, 24]}},
                             {173, 'agg', {true, 8, 9.99, -0.12345678, 'Varstring', 'AnotherQString', U'こんにちは、日本！', U'🌟 More UTF8 Fun 🌟', x'FEDCBA98', [25, 26, 27]}},
                             {174, 'agh', {false, 0, -7.77, 0.123, 'Unicode', 'LastQString', U'さようなら、日本！', U'🌟 Unicode Universe 🌟', x'12345678', [28, 29, 30]}}], {UNSIGNED testid, STRING3 testname, {BOOLEAN b, INTEGER i, REAL r, DECIMAL de, STRING s, QSTRING q, UNICODE u, UTF8 u8, DATA da, SET OF INTEGER soi} value}), '/tmp/ParquetTest/ChildDatasetTest.parquet', TRUE),
    ParquetIO.write(DATASET([{175, 'agi', 0},
                             {176, 'agj', false},
                             {177, 'agk', 1},
                             {178, 'agl',  'abc'},
                             {179, 'agm', '0'}], {UNSIGNED testid, STRING3 testname, BOOLEAN value}), '/tmp/ParquetTest/SNAPPYBooleanTest.parquet', TRUE, 'SNAPPY'),
    ParquetIO.write(DATASET([{180, 'agn', 123},
                             {181, 'ago', -987},
                             {182, 'agp', 0},
                             {183, 'agq', 987654},
                             {184, 'agr', 1000000}], {UNSIGNED testid, STRING3 testname, INTEGER value}), '/tmp/ParquetTest/SNAPPYIntegerTest.parquet', TRUE, 'SNAPPY'),
    ParquetIO.write(DATASET([{185, 'ags', 3.14},
                             {186, 'agt', -0.5},
                             {187, 'agu', 123.456},
                             {188, 'agv', -987.654},
                             {189, 'agw', 0.00001}], {UNSIGNED testid, STRING3 testname, REAL value}), '/tmp/ParquetTest/SNAPPYRealTest.parquet', TRUE, 'SNAPPY'),
    ParquetIO.write(DATASET([{190, 'agx', 123.456789},
                             {191, 'agy', -987.654321},
                             {192, 'agz', 0.000001},
                             {193, 'aha', 987654.321},
                             {194, 'ahb', 0.0000001}], {UNSIGNED testid, STRING3 testname, DECIMAL value}), '/tmp/ParquetTest/SNAPPYDecimalTest.parquet', TRUE, 'SNAPPY'),
    ParquetIO.write(DATASET([{195, 'ahc', 'Hello, World!'},
                             {196, 'ahd', 'Data Science'},
                             {197, 'ahe', '12345'},
                             {198, 'ahf', '\251\252\253\253\256'},
                             {199, 'ahg', 'Special characters: !@#$%^&*'}], {UNSIGNED testid, STRING3 testname, STRING value}), '/tmp/ParquetTest/SNAPPYStringTest.parquet', TRUE, 'SNAPPY'),
    ParquetIO.write(DATASET([{200, 'ahh', 'This is a "Q" string.'},
                             {201, 'ahi', 'Another "example" here.'},
                             {202, 'ahj', 'Testing "()*+,-)" characters.'},
                             {203, 'ahk', '!"#$&\'()*+,-./;<>_[\\]'},
                             {204, 'ahl', '<@@[[[[\'\\\'\\\'\'\\]]]]'}], {UNSIGNED testid, STRING3 testname, QSTRING value}), '/tmp/ParquetTest/SNAPPYQStringTest.parquet', TRUE, 'SNAPPY'),
    ParquetIO.write(DATASET([{205, 'ahm', U'こんにちは、世界！'},
                             {206, 'ahn', U'Unicode characters: ḸḹḾ'},
                             {207, 'aho', U'Testing Unicode: ⋖⋗⋙⋚⋛⋜⋝'},
                             {208, 'ahp', U'∭∮∯ More Unicode Fun ∐∑−∓∔'},
                             {209, 'ahq', U'∆∇∈∉∊∋∌ Unicode Everywhere ⋸⋹⋺⋻'}], {UNSIGNED testid, STRING3 testname, UNICODE value}), '/tmp/ParquetTest/SNAPPYUnicodeTest.parquet', TRUE, 'SNAPPY'),
    ParquetIO.write(DATASET([{210, 'ahr', U'Café au lait ☕'},
                             {211, 'ahs', U'🎉 UTF-8 Characters 🎉'},
                             {212, 'aht', U'Special characters: ©®™'},
                             {213, 'ahu', U'UTF-8 for the win!'},
                             {214, 'ahv', U'🌟 UTF-8 Symbols 🌟'}], {UNSIGNED testid, STRING3 testname, UTF8 value}), '/tmp/ParquetTest/SNAPPYUTF8Test.parquet', TRUE, 'SNAPPY'),
    ParquetIO.write(DATASET([{215, 'ahw', x'01a48d8414d848e900'},
                             {216, 'ahx', x'01f48ab446a76f8923'},
                             {217, 'ahy', x'01a490101d3de9ac02'},
                             {218, 'ahz', x'01a49155d1caf41500'},
                             {219, 'aia', x'01a49156089fce5a02'}], {UNSIGNED testid, STRING3 testname, DATA value}), '/tmp/ParquetTest/SNAPPYDataTest.parquet', TRUE, 'SNAPPY'),
    ParquetIO.write(DATASET([{220, 'aib', U'Short text'},
                             {221, 'aic', U'A longer variable-length string'},
                             {222, 'aid', U'Strings are flexible!'},
                             {223, 'aie', U'Varstrings galore!'},
                             {224, 'aif', U'*** Varstring Universe ***'}], {UNSIGNED testid, STRING3 testname, VARSTRING value}), '/tmp/ParquetTest/SNAPPYVarstringTest.parquet', TRUE, 'SNAPPY'),
    ParquetIO.write(DATASET([{225, 'aig', U'Variable-length Unicode: こんにちは、世界！'},
                             {226, 'aih', U'🌟 Variable-length Unicode Symbols 🌟'},
                             {227, 'aii', U'Unicode flexibility is awesome!'},
                             {228, 'aij', U'🌟 Varunicode Universe 🌟'},
                             {229, 'aik', U'🌟 Varunicode Magic 🌟'}], {UNSIGNED testid, STRING3 testname, VARUNICODE value}), '/tmp/ParquetTest/SNAPPYVarunicodeTest.parquet', TRUE, 'SNAPPY'),
    ParquetIO.write(DATASET([{230, 'ail', [true]},
                             {231, 'aim', [true, true, false, true, true]}], {UNSIGNED testid, STRING3 testname, SET OF BOOLEAN value}), '/tmp/ParquetTest/SNAPPYSetofBooleanTest.parquet', TRUE, 'SNAPPY'),
    ParquetIO.write(DATASET([{232, 'ain', [42]},
                             {233, 'aio', [1,2,3,4,5]}], {UNSIGNED testid, STRING3 testname, SET OF INTEGER value}), '/tmp/ParquetTest/SNAPPYSetofIntegerTest.parquet', TRUE, 'SNAPPY'),
    ParquetIO.write(DATASET([{234, 'aip', [3.14, -2.718]},
                             {235, 'aiq', [4.2, 9.99, 3.1415926]}], {UNSIGNED testid, STRING3 testname, SET OF REAL value}), '/tmp/ParquetTest/SNAPPYSetofRealTest.parquet', TRUE, 'SNAPPY'),
    ParquetIO.write(DATASET([{236, 'air', [1.23456789]},
                             {237, 'ais', [9.87654321, -5.43210987]}], {UNSIGNED testid, STRING3 testname, SET OF DECIMAL value}), '/tmp/ParquetTest/SNAPPYSetofDecimalTest.parquet', TRUE, 'SNAPPY'),
    ParquetIO.write(DATASET([{238, 'ait', ['Hello', 'World']},
                             {239, 'aiu', ['string', 'STRING']}], {UNSIGNED testid, STRING3 testname, SET OF STRING value}), '/tmp/ParquetTest/SNAPPYSetofStringTest.parquet', TRUE, 'SNAPPY'),
    ParquetIO.write(DATASET([{240, 'aiv', ['"QString 1"']},
                             {241, 'aiw', ['!@*^$', '1234754']}], {UNSIGNED testid, STRING3 testname, SET OF QSTRING value}), '/tmp/ParquetTest/SNAPPYSetofQStringTest.parquet', TRUE, 'SNAPPY'),
    ParquetIO.write(DATASET([{242, 'aix', [U'こんにちは、世界！']},
                             {243, 'aiy', [U'🌟 Unicode Universe 🌟', U'🌟 Unicode Magic 🌟']}], {UNSIGNED testid, STRING3 testname, SET OF UNICODE value}), '/tmp/ParquetTest/SNAPPYSetofUnicodeTest.parquet', TRUE, 'SNAPPY'),
    ParquetIO.write(DATASET([{244, 'aiz', [U'こんにちは、世界！', U'🌟 UTF8 Symbols 🌟', U'🌟 More UTF8 Fun 🌟']},
                             {245, 'aja', [U'🌟 UTF8 Magic 🌟']}], {UNSIGNED testid, STRING3 testname, SET OF UTF8 value}), '/tmp/ParquetTest/SNAPPYSetofUTF8Test.parquet', TRUE, 'SNAPPY'),
    ParquetIO.write(DATASET([{246, 'ajb', [x'01a48d8414d848e900', x'01a48ec793a76f9400', x'01a48ed1bb70d84c01', x'01a4901558d7c91900']},
                             {247, 'ajc', [x'01a48d8414d848e900', x'01a48ec793a76f9400', x'01a48ed8f40385ba01']}], {UNSIGNED testid, STRING3 testname, SET OF DATA value}), '/tmp/ParquetTest/SNAPPYSetofDataTest.parquet', TRUE, 'SNAPPY'),
    ParquetIO.write(DATASET([{248, 'ajd', ['Hello', 'World']},
                             {249, 'aje', ['string', 'STRING']}], {UNSIGNED testid, STRING3 testname, SET OF VARSTRING value}), '/tmp/ParquetTest/SNAPPYSetofVarstringTest.parquet', TRUE, 'SNAPPY'),
    ParquetIO.write(DATASET([{250, 'ajf', [U'こんにちは、世界！']},
                             {251, 'ajg', [U'🌟 Unicode Universe 🌟', U'🌟 Unicode Magic 🌟']}], {UNSIGNED testid, STRING3 testname, SET OF VARUNICODE value}), '/tmp/ParquetTest/SNAPPYSetofVarunicodeTest.parquet', TRUE, 'SNAPPY'),
    ParquetIO.write(DATASET([{252, 'ajh', {true, 42, 3.14, 1.23456789, 'Hello', 'QString', U'こんにちは、世界！', U'🌟 UTF8 Symbols 🌟', x'01010101', [1, 2, 3]}},
                             {253, 'aji', {false, -10, -2.718, -0.98765432, 'World', 'AnotherQString', U'こんばんは、世界！', U'🌟 More UTF8 Fun 🌟', x'FF00FF00', [4, 5, 6]}},
                             {254, 'ajj', {false, 15, 4.2, 0.123, 'Data', 'YetAnotherQString', U'おはよう、日本！', U'🌟 Unicode Magic 🌟', x'12345678', [22, 23, 24]}},
                             {255, 'ajk', {true, 8, 9.99, -0.12345678, 'Varstring', 'AnotherQString', U'こんにちは、日本！', U'🌟 More UTF8 Fun 🌟', x'FEDCBA98', [25, 26, 27]}},
                             {256, 'ajl', {false, 0, -7.77, 0.123, 'Unicode', 'LastQString', U'さようなら、日本！', U'🌟 Unicode Universe 🌟', x'12345678', [28, 29, 30]}}], {UNSIGNED testid, STRING3 testname, {BOOLEAN b, INTEGER i, REAL r, DECIMAL de, STRING s, QSTRING q, UNICODE u, UTF8 u8, DATA da, SET OF INTEGER soi} value}), '/tmp/ParquetTest/SNAPPYChildDatasetTest.parquet', TRUE, 'SNAPPY'),
    ParquetIO.write(DATASET([{257, 'ajm', 0},
                             {258, 'ajn', false},
                             {259, 'ajo', 1},
                             {260, 'ajp',  'abc'},
                             {261, 'ajq', '0'}], {UNSIGNED testid, STRING3 testname, BOOLEAN value}), '/tmp/ParquetTest/GZIPBooleanTest.parquet', TRUE, 'GZIP'),
    ParquetIO.write(DATASET([{262, 'ajr', 123},
                             {263, 'ajs', -987},
                             {264, 'ajt', 0},
                             {265, 'aju', 987654},
                             {266, 'ajv', 1000000}], {UNSIGNED testid, STRING3 testname, INTEGER value}), '/tmp/ParquetTest/GZIPIntegerTest.parquet', TRUE, 'GZIP'),
    ParquetIO.write(DATASET([{267, 'ajw', 3.14},
                             {268, 'ajx', -0.5},
                             {269, 'ajy', 123.456},
                             {270, 'ajz', -987.654},
                             {271, 'aka', 0.00001}], {UNSIGNED testid, STRING3 testname, REAL value}), '/tmp/ParquetTest/GZIPRealTest.parquet', TRUE, 'GZIP'),
    ParquetIO.write(DATASET([{272, 'akb', 123.456789},
                             {273, 'akc', -987.654321},
                             {274, 'akd', 0.000001},
                             {275, 'ake', 987654.321},
                             {276, 'akf', 0.0000001}], {UNSIGNED testid, STRING3 testname, DECIMAL value}), '/tmp/ParquetTest/GZIPDecimalTest.parquet', TRUE, 'GZIP'),
    ParquetIO.write(DATASET([{277, 'akg', 'Hello, World!'},
                             {278, 'akh', 'Data Science'},
                             {279, 'aki', '12345'},
                             {280, 'akj', '\251\252\253\253\256'},
                             {181, 'akk', 'Special characters: !@#$%^&*'}], {UNSIGNED testid, STRING3 testname, STRING value}), '/tmp/ParquetTest/GZIPStringTest.parquet', TRUE, 'GZIP'),
    ParquetIO.write(DATASET([{282, 'akl', 'This is a "Q" string.'},
                             {283, 'akm', 'Another "example" here.'},
                             {284, 'akn', 'Testing "()*+,-)" characters.'},
                             {285, 'ako', '!"#$&\'()*+,-./;<>_[\\]'},
                             {286, 'akp', '<@@[[[[\'\\\'\\\'\'\\]]]]'}], {UNSIGNED testid, STRING3 testname, QSTRING value}), '/tmp/ParquetTest/GZIPQStringTest.parquet', TRUE, 'GZIP'),
    ParquetIO.write(DATASET([{287, 'akq', U'こんにちは、世界！'},
                             {288, 'akr', U'Unicode characters: ḸḹḾ'},
                             {289, 'aks', U'Testing Unicode: ⋖⋗⋙⋚⋛⋜⋝'},
                             {290, 'akt', U'∭∮∯ More Unicode Fun ∐∑−∓∔'},
                             {291, 'aku', U'∆∇∈∉∊∋∌ Unicode Everywhere ⋸⋹⋺⋻'}], {UNSIGNED testid, STRING3 testname, UNICODE value}), '/tmp/ParquetTest/GZIPUnicodeTest.parquet', TRUE, 'GZIP'),
    ParquetIO.write(DATASET([{292, 'akv', U'Café au lait ☕'},
                             {293, 'akw', U'🎉 UTF-8 Characters 🎉'},
                             {294, 'akx', U'Special characters: ©®™'},
                             {295, 'aky', U'UTF-8 for the win!'},
                             {296, 'akz', U'🌟 UTF-8 Symbols 🌟'}], {UNSIGNED testid, STRING3 testname, UTF8 value}), '/tmp/ParquetTest/GZIPUTF8Test.parquet', TRUE, 'GZIP'),
    ParquetIO.write(DATASET([{297, 'ala', x'01a48d8414d848e900'},
                             {298, 'alb', x'01f48ab446a76f8923'},
                             {299, 'alc', x'01a490101d3de9ac02'},
                             {300, 'ald', x'01a49155d1caf41500'},
                             {309, 'ale', x'01a49156089fce5a02'}], {UNSIGNED testid, STRING3 testname, DATA value}), '/tmp/ParquetTest/GZIPDataTest.parquet', TRUE, 'GZIP'),
    ParquetIO.write(DATASET([{300, 'alf', U'Short text'},
                             {301, 'alg', U'A longer variable-length string'},
                             {302, 'alh', U'Strings are flexible!'},
                             {303, 'ali', U'Varstrings galore!'},
                             {304, 'alj', U'*** Varstring Universe ***'}], {UNSIGNED testid, STRING3 testname, VARSTRING value}), '/tmp/ParquetTest/GZIPVarstringTest.parquet', TRUE, 'GZIP'),
    ParquetIO.write(DATASET([{305, 'alk', U'Variable-length Unicode: こんにちは、世界！'},
                             {306, 'all', U'🌟 Variable-length Unicode Symbols 🌟'},
                             {307, 'alm', U'Unicode flexibility is awesome!'},
                             {308, 'aln', U'🌟 Varunicode Universe 🌟'},
                             {309, 'alo', U'🌟 Varunicode Magic 🌟'}], {UNSIGNED testid, STRING3 testname, VARUNICODE value}), '/tmp/ParquetTest/GZIPVarunicodeTest.parquet', TRUE, 'GZIP'),
    ParquetIO.write(DATASET([{310, 'alp', [true]},
                             {311, 'alq', [true, true, false, true, true]}], {UNSIGNED testid, STRING3 testname, SET OF BOOLEAN value}), '/tmp/ParquetTest/GZIPSetofBooleanTest.parquet', TRUE, 'GZIP'),
    ParquetIO.write(DATASET([{312, 'alr', [42]},
                             {313, 'als', [1,2,3,4,5]}], {UNSIGNED testid, STRING3 testname, SET OF INTEGER value}), '/tmp/ParquetTest/GZIPSetofIntegerTest.parquet', TRUE, 'GZIP'),
    ParquetIO.write(DATASET([{314, 'alt', [3.14, -2.718]},
                             {315, 'alu', [4.2, 9.99, 3.1415926]}], {UNSIGNED testid, STRING3 testname, SET OF REAL value}), '/tmp/ParquetTest/GZIPSetofRealTest.parquet', TRUE, 'GZIP'),
    ParquetIO.write(DATASET([{316, 'alv', [1.23456789]},
                             {317, 'alw', [9.87654321, -5.43210987]}], {UNSIGNED testid, STRING3 testname, SET OF DECIMAL value}), '/tmp/ParquetTest/GZIPSetofDecimalTest.parquet', TRUE, 'GZIP'),
    ParquetIO.write(DATASET([{318, 'alx', ['Hello', 'World']},
                             {319, 'aly', ['string', 'STRING']}], {UNSIGNED testid, STRING3 testname, SET OF STRING value}), '/tmp/ParquetTest/GZIPSetofStringTest.parquet', TRUE, 'GZIP'),
    ParquetIO.write(DATASET([{320, 'alz', ['"QString 1"']},
                             {321, 'ama', ['!@*^$', '1234754']}], {UNSIGNED testid, STRING3 testname, SET OF QSTRING value}), '/tmp/ParquetTest/GZIPSetofQStringTest.parquet', TRUE, 'GZIP'),
    ParquetIO.write(DATASET([{322, 'amb', [U'こんにちは、世界！']},
                             {323, 'amc', [U'🌟 Unicode Universe 🌟', U'🌟 Unicode Magic 🌟']}], {UNSIGNED testid, STRING3 testname, SET OF UNICODE value}), '/tmp/ParquetTest/GZIPSetofUnicodeTest.parquet', TRUE, 'GZIP'),
    ParquetIO.write(DATASET([{324, 'amd', [U'こんにちは、世界！', U'🌟 UTF8 Symbols 🌟', U'🌟 More UTF8 Fun 🌟']},
                             {325, 'ame', [U'🌟 UTF8 Magic 🌟']}], {UNSIGNED testid, STRING3 testname, SET OF UTF8 value}), '/tmp/ParquetTest/GZIPSetofUTF8Test.parquet', TRUE, 'GZIP'),
    ParquetIO.write(DATASET([{326, 'amf', [x'01a48d8414d848e900', x'01a48ec793a76f9400', x'01a48ed1bb70d84c01', x'01a4901558d7c91900']},
                             {327, 'amg', [x'01a48d8414d848e900', x'01a48ec793a76f9400', x'01a48ed8f40385ba01']}], {UNSIGNED testid, STRING3 testname, SET OF DATA value}), '/tmp/ParquetTest/GZIPSetofDataTest.parquet', TRUE, 'GZIP'),
    ParquetIO.write(DATASET([{328, 'amh', ['Hello', 'World']},
                             {329, 'ami', ['string', 'STRING']}], {UNSIGNED testid, STRING3 testname, SET OF VARSTRING value}), '/tmp/ParquetTest/GZIPSetofVarstringTest.parquet', TRUE, 'GZIP'),
    ParquetIO.write(DATASET([{330, 'amj', [U'こんにちは、世界！']},
                             {331, 'amk', [U'🌟 Unicode Universe 🌟', U'🌟 Unicode Magic 🌟']}], {UNSIGNED testid, STRING3 testname, SET OF VARUNICODE value}), '/tmp/ParquetTest/GZIPSetofVarunicodeTest.parquet', TRUE, 'GZIP'),
    ParquetIO.write(DATASET([{332, 'aml', {true, 42, 3.14, 1.23456789, 'Hello', 'QString', U'こんにちは、世界！', U'🌟 UTF8 Symbols 🌟', x'01010101', [1, 2, 3]}},
                             {333, 'amm', {false, -10, -2.718, -0.98765432, 'World', 'AnotherQString', U'こんばんは、世界！', U'🌟 More UTF8 Fun 🌟', x'FF00FF00', [4, 5, 6]}},
                             {334, 'amn', {false, 15, 4.2, 0.123, 'Data', 'YetAnotherQString', U'おはよう、日本！', U'🌟 Unicode Magic 🌟', x'12345678', [22, 23, 24]}},
                             {335, 'amo', {true, 8, 9.99, -0.12345678, 'Varstring', 'AnotherQString', U'こんにちは、日本！', U'🌟 More UTF8 Fun 🌟', x'FEDCBA98', [25, 26, 27]}},
                             {336, 'amp', {false, 0, -7.77, 0.123, 'Unicode', 'LastQString', U'さようなら、日本！', U'🌟 Unicode Universe 🌟', x'12345678', [28, 29, 30]}}], {UNSIGNED testid, STRING3 testname, {BOOLEAN b, INTEGER i, REAL r, DECIMAL de, STRING s, QSTRING q, UNICODE u, UTF8 u8, DATA da, SET OF INTEGER soi} value}), '/tmp/ParquetTest/GZIPChildDatasetTest.parquet', TRUE, 'GZIP'),
    ParquetIO.write(DATASET([{337, 'amq', 0},
                             {338, 'amr', false},
                             {339, 'ams', 1},
                             {340, 'amt',  'abc'},
                             {341, 'amu', '0'}], {UNSIGNED testid, STRING3 testname, BOOLEAN value}), '/tmp/ParquetTest/BROTLIBooleanTest.parquet', TRUE, 'BROTLI'),
    ParquetIO.write(DATASET([{342, 'amv', 123},
                             {343, 'amw', -987},
                             {344, 'amx', 0},
                             {345, 'amy', 987654},
                             {346, 'amz', 1000000}], {UNSIGNED testid, STRING3 testname, INTEGER value}), '/tmp/ParquetTest/BROTLIIntegerTest.parquet', TRUE, 'BROTLI'),
    ParquetIO.write(DATASET([{347, 'ana', 3.14},
                             {348, 'anb', -0.5},
                             {349, 'anc', 123.456},
                             {350, 'and', -987.654},
                             {351, 'ane', 0.00001}], {UNSIGNED testid, STRING3 testname, REAL value}), '/tmp/ParquetTest/BROTLIRealTest.parquet', TRUE, 'BROTLI'),
    ParquetIO.write(DATASET([{352, 'anf', 123.456789},
                             {353, 'ang', -987.654321},
                             {354, 'anh', 0.000001},
                             {355, 'ani', 987654.321},
                             {356, 'anj', 0.0000001}], {UNSIGNED testid, STRING3 testname, DECIMAL value}), '/tmp/ParquetTest/BROTLIDecimalTest.parquet', TRUE, 'BROTLI'),
    ParquetIO.write(DATASET([{357, 'ank', 'Hello, World!'},
                             {358, 'anl', 'Data Science'},
                             {359, 'anm', '12345'},
                             {360, 'ann', '\251\252\253\253\256'},
                             {361, 'ano', 'Special characters: !@#$%^&*'}], {UNSIGNED testid, STRING3 testname, STRING value}), '/tmp/ParquetTest/BROTLIStringTest.parquet', TRUE, 'BROTLI'),
    ParquetIO.write(DATASET([{362, 'anp', 'This is a "Q" string.'},
                             {363, 'anq', 'Another "example" here.'},
                             {364, 'anr', 'Testing "()*+,-)" characters.'},
                             {365, 'ans', '!"#$&\'()*+,-./;<>_[\\]'},
                             {366, 'ant', '<@@[[[[\'\\\'\\\'\'\\]]]]'}], {UNSIGNED testid, STRING3 testname, QSTRING value}), '/tmp/ParquetTest/BROTLIQStringTest.parquet', TRUE, 'BROTLI'),
    ParquetIO.write(DATASET([{367, 'anu', U'こんにちは、世界！'},
                             {368, 'anv', U'Unicode characters: ḸḹḾ'},
                             {369, 'anw', U'Testing Unicode: ⋖⋗⋙⋚⋛⋜⋝'},
                             {370, 'anx', U'∭∮∯ More Unicode Fun ∐∑−∓∔'},
                             {371, 'any', U'∆∇∈∉∊∋∌ Unicode Everywhere ⋸⋹⋺⋻'}], {UNSIGNED testid, STRING3 testname, UNICODE value}), '/tmp/ParquetTest/BROTLIUnicodeTest.parquet', TRUE, 'BROTLI'),
    ParquetIO.write(DATASET([{372, 'anz', U'Café au lait ☕'},
                             {373, 'aoa', U'🎉 UTF-8 Characters 🎉'},
                             {374, 'aob', U'Special characters: ©®™'},
                             {375, 'aoc', U'UTF-8 for the win!'},
                             {376, 'aod', U'🌟 UTF-8 Symbols 🌟'}], {UNSIGNED testid, STRING3 testname, UTF8 value}), '/tmp/ParquetTest/BROTLIUTF8Test.parquet', TRUE, 'BROTLI'),
    ParquetIO.write(DATASET([{377, 'aoe', x'01a48d8414d848e900'},
                             {378, 'aof', x'01f48ab446a76f8923'},
                             {379, 'aog', x'01a490101d3de9ac02'},
                             {380, 'aoh', x'01a49155d1caf41500'},
                             {381, 'aoi', x'01a49156089fce5a02'}], {UNSIGNED testid, STRING3 testname, DATA value}), '/tmp/ParquetTest/BROTLIDataTest.parquet', TRUE, 'BROTLI'),
    ParquetIO.write(DATASET([{382, 'aoj', U'Short text'},
                             {383, 'aok', U'A longer variable-length string'},
                             {384, 'aol', U'Strings are flexible!'},
                             {385, 'aom', U'Varstrings galore!'},
                             {386, 'aon', U'*** Varstring Universe ***'}], {UNSIGNED testid, STRING3 testname, VARSTRING value}), '/tmp/ParquetTest/BROTLIVarstringTest.parquet', TRUE, 'BROTLI'),
    ParquetIO.write(DATASET([{387, 'aoo', U'Variable-length Unicode: こんにちは、世界！'},
                             {388, 'aop', U'🌟 Variable-length Unicode Symbols 🌟'},
                             {389, 'aoq', U'Unicode flexibility is awesome!'},
                             {390, 'aor', U'🌟 Varunicode Universe 🌟'},
                             {391, 'aos', U'🌟 Varunicode Magic 🌟'}], {UNSIGNED testid, STRING3 testname, VARUNICODE value}), '/tmp/ParquetTest/BROTLIVarunicodeTest.parquet', TRUE, 'BROTLI'),
    ParquetIO.write(DATASET([{392, 'aot', [true]},
                             {393, 'aou', [true, true, false, true, true]}], {UNSIGNED testid, STRING3 testname, SET OF BOOLEAN value}), '/tmp/ParquetTest/BROTLISetofBooleanTest.parquet', TRUE, 'BROTLI'),
    ParquetIO.write(DATASET([{394, 'aov', [42]},
                             {395, 'aow', [1,2,3,4,5]}], {UNSIGNED testid, STRING3 testname, SET OF INTEGER value}), '/tmp/ParquetTest/BROTLISetofIntegerTest.parquet', TRUE, 'BROTLI'),
    ParquetIO.write(DATASET([{396, 'aox', [3.14, -2.718]},
                             {397, 'aoy', [4.2, 9.99, 3.1415926]}], {UNSIGNED testid, STRING3 testname, SET OF REAL value}), '/tmp/ParquetTest/BROTLISetofRealTest.parquet', TRUE, 'BROTLI'),
    ParquetIO.write(DATASET([{398, 'aoz', [1.23456789]},
                             {399, 'apa', [9.87654321, -5.43210987]}], {UNSIGNED testid, STRING3 testname, SET OF DECIMAL value}), '/tmp/ParquetTest/BROTLISetofDecimalTest.parquet', TRUE, 'BROTLI'),
    ParquetIO.write(DATASET([{400, 'apb', ['Hello', 'World']},
                             {401, 'apc', ['string', 'STRING']}], {UNSIGNED testid, STRING3 testname, SET OF STRING value}), '/tmp/ParquetTest/BROTLISetofStringTest.parquet', TRUE, 'BROTLI'),
    ParquetIO.write(DATASET([{402, 'apd', ['"QString 1"']},
                             {403, 'ape', ['!@*^$', '1234754']}], {UNSIGNED testid, STRING3 testname, SET OF QSTRING value}), '/tmp/ParquetTest/BROTLISetofQStringTest.parquet', TRUE, 'BROTLI'),
    ParquetIO.write(DATASET([{404, 'apf', [U'こんにちは、世界！']},
                             {405, 'apg', [U'🌟 Unicode Universe 🌟', U'🌟 Unicode Magic 🌟']}], {UNSIGNED testid, STRING3 testname, SET OF UNICODE value}), '/tmp/ParquetTest/BROTLISetofUnicodeTest.parquet', TRUE, 'BROTLI'),
    ParquetIO.write(DATASET([{406, 'aph', [U'こんにちは、世界！', U'🌟 UTF8 Symbols 🌟', U'🌟 More UTF8 Fun 🌟']},
                             {407, 'api', [U'🌟 UTF8 Magic 🌟']}], {UNSIGNED testid, STRING3 testname, SET OF UTF8 value}), '/tmp/ParquetTest/BROTLISetofUTF8Test.parquet', TRUE, 'BROTLI'),
    ParquetIO.write(DATASET([{408, 'apj', [x'01a48d8414d848e900', x'01a48ec793a76f9400', x'01a48ed1bb70d84c01', x'01a4901558d7c91900']},
                             {409, 'apk', [x'01a48d8414d848e900', x'01a48ec793a76f9400', x'01a48ed8f40385ba01']}], {UNSIGNED testid, STRING3 testname, SET OF DATA value}), '/tmp/ParquetTest/BROTLISetofDataTest.parquet', TRUE, 'BROTLI'),
    ParquetIO.write(DATASET([{410, 'apl', ['Hello', 'World']},
                             {411, 'apm', ['string', 'STRING']}], {UNSIGNED testid, STRING3 testname, SET OF VARSTRING value}), '/tmp/ParquetTest/BROTLISetofVarstringTest.parquet', TRUE, 'BROTLI'),
    ParquetIO.write(DATASET([{412, 'apn', [U'こんにちは、世界！']},
                             {413, 'apo', [U'🌟 Unicode Universe 🌟', U'🌟 Unicode Magic 🌟']}], {UNSIGNED testid, STRING3 testname, SET OF VARUNICODE value}), '/tmp/ParquetTest/BROTLISetofVarunicodeTest.parquet', TRUE, 'BROTLI'),
    ParquetIO.write(DATASET([{414, 'app', {true, 42, 3.14, 1.23456789, 'Hello', 'QString', U'こんにちは、世界！', U'🌟 UTF8 Symbols 🌟', x'01010101', [1, 2, 3]}},
                             {415, 'apq', {false, -10, -2.718, -0.98765432, 'World', 'AnotherQString', U'こんばんは、世界！', U'🌟 More UTF8 Fun 🌟', x'FF00FF00', [4, 5, 6]}},
                             {416, 'apr', {false, 15, 4.2, 0.123, 'Data', 'YetAnotherQString', U'おはよう、日本！', U'🌟 Unicode Magic 🌟', x'12345678', [22, 23, 24]}},
                             {417, 'aps', {true, 8, 9.99, -0.12345678, 'Varstring', 'AnotherQString', U'こんにちは、日本！', U'🌟 More UTF8 Fun 🌟', x'FEDCBA98', [25, 26, 27]}},
                             {418, 'apt', {false, 0, -7.77, 0.123, 'Unicode', 'LastQString', U'さようなら、日本！', U'🌟 Unicode Universe 🌟', x'12345678', [28, 29, 30]}}], {UNSIGNED testid, STRING3 testname, {BOOLEAN b, INTEGER i, REAL r, DECIMAL de, STRING s, QSTRING q, UNICODE u, UTF8 u8, DATA da, SET OF INTEGER soi} value}), '/tmp/ParquetTest/BROTLIChildDatasetTest.parquet', TRUE, 'BROTLI'),
    ParquetIO.write(DATASET([{419, 'apu', 0},
                             {420, 'apv', false},
                             {421, 'apw', 1},
                             {422, 'apx',  'abc'},
                             {423, 'apy', '0'}], {UNSIGNED testid, STRING3 testname, BOOLEAN value}), '/tmp/ParquetTest/LZ4BooleanTest.parquet', TRUE, 'LZ4'),
    ParquetIO.write(DATASET([{424, 'apz', 123},
                             {425, 'aqa', -987},
                             {426, 'aqb', 0},
                             {427, 'aqc', 987654},
                             {428, 'aqd', 1000000}], {UNSIGNED testid, STRING3 testname, INTEGER value}), '/tmp/ParquetTest/LZ4IntegerTest.parquet', TRUE, 'LZ4'),
    ParquetIO.write(DATASET([{429, 'aqe', 3.14},
                             {430, 'aqf', -0.5},
                             {431, 'aqg', 123.456},
                             {432, 'aqh', -987.654},
                             {433, 'aqi', 0.00001}], {UNSIGNED testid, STRING3 testname, REAL value}), '/tmp/ParquetTest/LZ4RealTest.parquet', TRUE, 'LZ4'),
    ParquetIO.write(DATASET([{434, 'aqj', 123.456789},
                             {435, 'aqk', -987.654321},
                             {436, 'aql', 0.000001},
                             {437, 'aqm', 987654.321},
                             {438, 'aqn', 0.0000001}], {UNSIGNED testid, STRING3 testname, DECIMAL value}), '/tmp/ParquetTest/LZ4DecimalTest.parquet', TRUE, 'LZ4'),
    ParquetIO.write(DATASET([{439, 'aqo', 'Hello, World!'},
                             {440, 'aqp', 'Data Science'},
                             {441, 'aqq', '12345'},
                             {442, 'aqr', '\251\252\253\253\256'},
                             {443, 'aqs', 'Special characters: !@#$%^&*'}], {UNSIGNED testid, STRING3 testname, STRING value}), '/tmp/ParquetTest/LZ4StringTest.parquet', TRUE, 'LZ4'),
    ParquetIO.write(DATASET([{444, 'aqt', 'This is a "Q" string.'},
                             {445, 'aqu', 'Another "example" here.'},
                             {446, 'aqv', 'Testing "()*+,-)" characters.'},
                             {447, 'aqw', '!"#$&\'()*+,-./;<>_[\\]'},
                             {448, 'aqx', '<@@[[[[\'\\\'\\\'\'\\]]]]'}], {UNSIGNED testid, STRING3 testname, QSTRING value}), '/tmp/ParquetTest/LZ4QStringTest.parquet', TRUE, 'LZ4'),
    ParquetIO.write(DATASET([{449, 'aqy', U'こんにちは、世界！'},
                             {450, 'aqz', U'Unicode characters: ḸḹḾ'},
                             {451, 'ara', U'Testing Unicode: ⋖⋗⋙⋚⋛⋜⋝'},
                             {452, 'arb', U'∭∮∯ More Unicode Fun ∐∑−∓∔'},
                             {453, 'arc', U'∆∇∈∉∊∋∌ Unicode Everywhere ⋸⋹⋺⋻'}], {UNSIGNED testid, STRING3 testname, UNICODE value}), '/tmp/ParquetTest/LZ4UnicodeTest.parquet', TRUE, 'LZ4'),
    ParquetIO.write(DATASET([{454, 'ard', U'Café au lait ☕'},
                             {455, 'are', U'🎉 UTF-8 Characters 🎉'},
                             {456, 'arf', U'Special characters: ©®™'},
                             {457, 'arg', U'UTF-8 for the win!'},
                             {458, 'arh', U'🌟 UTF-8 Symbols 🌟'}], {UNSIGNED testid, STRING3 testname, UTF8 value}), '/tmp/ParquetTest/LZ4UTF8Test.parquet', TRUE, 'LZ4'),
    ParquetIO.write(DATASET([{459, 'ari', x'01a48d8414d848e900'},
                             {460, 'arj', x'01f48ab446a76f8923'},
                             {461, 'ark', x'01a490101d3de9ac02'},
                             {462, 'arl', x'01a49155d1caf41500'},
                             {463, 'arm', x'01a49156089fce5a02'}], {UNSIGNED testid, STRING3 testname, DATA value}), '/tmp/ParquetTest/LZ4DataTest.parquet', TRUE, 'LZ4'),
    ParquetIO.write(DATASET([{464, 'arn', U'Short text'},
                             {465, 'aro', U'A longer variable-length string'},
                             {466, 'arp', U'Strings are flexible!'},
                             {467, 'arq', U'Varstrings galore!'},
                             {468, 'arr', U'*** Varstring Universe ***'}], {UNSIGNED testid, STRING3 testname, VARSTRING value}), '/tmp/ParquetTest/LZ4VarstringTest.parquet', TRUE, 'LZ4'),
    ParquetIO.write(DATASET([{469, 'ars', U'Variable-length Unicode: こんにちは、世界！'},
                             {470, 'art', U'🌟 Variable-length Unicode Symbols 🌟'},
                             {471, 'aru', U'Unicode flexibility is awesome!'},
                             {472, 'arv', U'🌟 Varunicode Universe 🌟'},
                             {473, 'arw', U'🌟 Varunicode Magic 🌟'}], {UNSIGNED testid, STRING3 testname, VARUNICODE value}), '/tmp/ParquetTest/LZ4VarunicodeTest.parquet', TRUE, 'LZ4'),
    ParquetIO.write(DATASET([{474, 'arx', [true]},
                             {475, 'ary', [true, true, false, true, true]}], {UNSIGNED testid, STRING3 testname, SET OF BOOLEAN value}), '/tmp/ParquetTest/LZ4SetofBooleanTest.parquet', TRUE, 'LZ4'),
    ParquetIO.write(DATASET([{476, 'arz', [42]},
                             {477, 'asa', [1,2,3,4,5]}], {UNSIGNED testid, STRING3 testname, SET OF INTEGER value}), '/tmp/ParquetTest/LZ4SetofIntegerTest.parquet', TRUE, 'LZ4'),
    ParquetIO.write(DATASET([{478, 'asb', [3.14, -2.718]},
                             {479, 'asc', [4.2, 9.99, 3.1415926]}], {UNSIGNED testid, STRING3 testname, SET OF REAL value}), '/tmp/ParquetTest/LZ4SetofRealTest.parquet', TRUE, 'LZ4'),
    ParquetIO.write(DATASET([{480, 'asd', [1.23456789]},
                             {481, 'ase', [9.87654321, -5.43210987]}], {UNSIGNED testid, STRING3 testname, SET OF DECIMAL value}), '/tmp/ParquetTest/LZ4SetofDecimalTest.parquet', TRUE, 'LZ4'),
    ParquetIO.write(DATASET([{482, 'asf', ['Hello', 'World']},
                             {483, 'asg', ['string', 'STRING']}], {UNSIGNED testid, STRING3 testname, SET OF STRING value}), '/tmp/ParquetTest/LZ4SetofStringTest.parquet', TRUE, 'LZ4'),
    ParquetIO.write(DATASET([{484, 'ash', ['"QString 1"']},
                             {485, 'asi', ['!@*^$', '1234754']}], {UNSIGNED testid, STRING3 testname, SET OF QSTRING value}), '/tmp/ParquetTest/LZ4SetofQStringTest.parquet', TRUE, 'LZ4'),
    ParquetIO.write(DATASET([{486, 'asj', [U'こんにちは、世界！']},
                             {487, 'ask', [U'🌟 Unicode Universe 🌟', U'🌟 Unicode Magic 🌟']}], {UNSIGNED testid, STRING3 testname, SET OF UNICODE value}), '/tmp/ParquetTest/LZ4SetofUnicodeTest.parquet', TRUE, 'LZ4'),
    ParquetIO.write(DATASET([{488, 'asl', [U'こんにちは、世界！', U'🌟 UTF8 Symbols 🌟', U'🌟 More UTF8 Fun 🌟']},
                             {489, 'asm', [U'🌟 UTF8 Magic 🌟']}], {UNSIGNED testid, STRING3 testname, SET OF UTF8 value}), '/tmp/ParquetTest/LZ4SetofUTF8Test.parquet', TRUE, 'LZ4'),
    ParquetIO.write(DATASET([{490, 'asn', [x'01a48d8414d848e900', x'01a48ec793a76f9400', x'01a48ed1bb70d84c01', x'01a4901558d7c91900']},
                             {491, 'aso', [x'01a48d8414d848e900', x'01a48ec793a76f9400', x'01a48ed8f40385ba01']}], {UNSIGNED testid, STRING3 testname, SET OF DATA value}), '/tmp/ParquetTest/LZ4SetofDataTest.parquet', TRUE, 'LZ4'),
    ParquetIO.write(DATASET([{492, 'asp', ['Hello', 'World']},
                             {493, 'asq', ['string', 'STRING']}], {UNSIGNED testid, STRING3 testname, SET OF VARSTRING value}), '/tmp/ParquetTest/LZ4SetofVarstringTest.parquet', TRUE, 'LZ4'),
    ParquetIO.write(DATASET([{494, 'asr', [U'こんにちは、世界！']},
                             {495, 'zzz', [U'🌟 Unicode Universe 🌟', U'🌟 Unicode Magic 🌟']}], {UNSIGNED testid, STRING3 testname, SET OF VARUNICODE value}), '/tmp/ParquetTest/LZ4SetofVarunicodeTest.parquet', TRUE, 'LZ4'),
    ParquetIO.write(DATASET([{496, 'ast', {true, 42, 3.14, 1.23456789, 'Hello', 'QString', U'こんにちは、世界！', U'🌟 UTF8 Symbols 🌟', x'01010101', [1, 2, 3]}},
                             {497, 'asu', {false, -10, -2.718, -0.98765432, 'World', 'AnotherQString', U'こんばんは、世界！', U'🌟 More UTF8 Fun 🌟', x'FF00FF00', [4, 5, 6]}},
                             {498, 'asv', {false, 15, 4.2, 0.123, 'Data', 'YetAnotherQString', U'おはよう、日本！', U'🌟 Unicode Magic 🌟', x'12345678', [22, 23, 24]}},
                             {499, 'asw', {true, 8, 9.99, -0.12345678, 'Varstring', 'AnotherQString', U'こんにちは、日本！', U'🌟 More UTF8 Fun 🌟', x'FEDCBA98', [25, 26, 27]}},
                             {500, 'asx', {false, 0, -7.77, 0.123, 'Unicode', 'LastQString', U'さようなら、日本！', U'🌟 Unicode Universe 🌟', x'12345678', [28, 29, 30]}}], {UNSIGNED testid, STRING3 testname, {BOOLEAN b, INTEGER i, REAL r, DECIMAL de, STRING s, QSTRING q, UNICODE u, UTF8 u8, DATA da, SET OF INTEGER soi} value}), '/tmp/ParquetTest/LZ4ChildDatasetTest.parquet', TRUE, 'LZ4'),
    ParquetIO.write(DATASET([{501, 'asy', 0},
                             {502, 'asz', false},
                             {503, 'ata', 1},
                             {504, 'atb',  'abc'},
                             {505, 'atc', '0'}], {UNSIGNED testid, STRING3 testname, BOOLEAN value}), '/tmp/ParquetTest/ZSTDBooleanTest.parquet', TRUE, 'ZSTD'),
    ParquetIO.write(DATASET([{506, 'atd', 123},
                             {507, 'ate', -987},
                             {508, 'atf', 0},
                             {509, 'atg', 987654},
                             {510, 'ath', 1000000}], {UNSIGNED testid, STRING3 testname, INTEGER value}), '/tmp/ParquetTest/ZSTDIntegerTest.parquet', TRUE, 'ZSTD'),
    ParquetIO.write(DATASET([{511, 'ati', 3.14},
                             {512, 'atj', -0.5},
                             {513, 'atk', 123.456},
                             {514, 'atl', -987.654},
                             {515, 'atm', 0.00001}], {UNSIGNED testid, STRING3 testname, REAL value}), '/tmp/ParquetTest/ZSTDRealTest.parquet', TRUE, 'ZSTD'),
    ParquetIO.write(DATASET([{516, 'atn', 123.456789},
                             {517, 'ato', -987.654321},
                             {518, 'atp', 0.000001},
                             {519, 'atq', 987654.321},
                             {520, 'atr', 0.0000001}], {UNSIGNED testid, STRING3 testname, DECIMAL value}), '/tmp/ParquetTest/ZSTDDecimalTest.parquet', TRUE, 'ZSTD'),
    ParquetIO.write(DATASET([{521, 'ats', 'Hello, World!'},
                             {522, 'att', 'Data Science'},
                             {523, 'atu', '12345'},
                             {524, 'atv', '\251\252\253\253\256'},
                             {525, 'atw', 'Special characters: !@#$%^&*'}], {UNSIGNED testid, STRING3 testname, STRING value}), '/tmp/ParquetTest/ZSTDStringTest.parquet', TRUE, 'ZSTD'),
    ParquetIO.write(DATASET([{526, 'atx', 'This is a "Q" string.'},
                             {527, 'aty', 'Another "example" here.'},
                             {528, 'atz', 'Testing "()*+,-)" characters.'},
                             {529, 'aua', '!"#$&\'()*+,-./;<>_[\\]'},
                             {530, 'aub', '<@@[[[[\'\\\'\\\'\'\\]]]]'}], {UNSIGNED testid, STRING3 testname, QSTRING value}), '/tmp/ParquetTest/ZSTDQStringTest.parquet', TRUE, 'ZSTD'),
    ParquetIO.write(DATASET([{531, 'auc', U'こんにちは、世界！'},
                             {532, 'aud', U'Unicode characters: ḸḹḾ'},
                             {533, 'aue', U'Testing Unicode: ⋖⋗⋙⋚⋛⋜⋝'},
                             {534, 'auf', U'∭∮∯ More Unicode Fun ∐∑−∓∔'},
                             {535, 'aug', U'∆∇∈∉∊∋∌ Unicode Everywhere ⋸⋹⋺⋻'}], {UNSIGNED testid, STRING3 testname, UNICODE value}), '/tmp/ParquetTest/ZSTDUnicodeTest.parquet', TRUE, 'ZSTD'),
    ParquetIO.write(DATASET([{536, 'auh', U'Café au lait ☕'},
                             {537, 'aui', U'🎉 UTF-8 Characters 🎉'},
                             {538, 'auj', U'Special characters: ©®™'},
                             {539, 'auk', U'UTF-8 for the win!'},
                             {540, 'aul', U'🌟 UTF-8 Symbols 🌟'}], {UNSIGNED testid, STRING3 testname, UTF8 value}), '/tmp/ParquetTest/ZSTDUTF8Test.parquet', TRUE, 'ZSTD'),
    ParquetIO.write(DATASET([{541, 'aum', x'01a48d8414d848e900'},
                             {542, 'aun', x'01f48ab446a76f8923'},
                             {543, 'auo', x'01a490101d3de9ac02'},
                             {544, 'aup', x'01a49155d1caf41500'},
                             {545, 'auq', x'01a49156089fce5a02'}], {UNSIGNED testid, STRING3 testname, DATA value}), '/tmp/ParquetTest/ZSTDDataTest.parquet', TRUE, 'ZSTD'),
    ParquetIO.write(DATASET([{546, 'aur', U'Short text'},
                             {547, 'aus', U'A longer variable-length string'},
                             {548, 'aut', U'Strings are flexible!'},
                             {549, 'auu', U'Varstrings galore!'},
                             {550, 'auv', U'*** Varstring Universe ***'}], {UNSIGNED testid, STRING3 testname, VARSTRING value}), '/tmp/ParquetTest/ZSTDVarstringTest.parquet', TRUE, 'ZSTD'),
    ParquetIO.write(DATASET([{551, 'auw', U'Variable-length Unicode: こんにちは、世界！'},
                             {552, 'aux', U'🌟 Variable-length Unicode Symbols 🌟'},
                             {553, 'auy', U'Unicode flexibility is awesome!'},
                             {554, 'auz', U'🌟 Varunicode Universe 🌟'},
                             {555, 'ava', U'🌟 Varunicode Magic 🌟'}], {UNSIGNED testid, STRING3 testname, VARUNICODE value}), '/tmp/ParquetTest/ZSTDVarunicodeTest.parquet', TRUE, 'ZSTD'),
    ParquetIO.write(DATASET([{556, 'avb', [true]},
                             {557, 'avc', [true, true, false, true, true]}], {UNSIGNED testid, STRING3 testname, SET OF BOOLEAN value}), '/tmp/ParquetTest/ZSTDSetofBooleanTest.parquet', TRUE, 'ZSTD'),
    ParquetIO.write(DATASET([{558, 'avd', [42]},
                             {559, 'ave', [1,2,3,4,5]}], {UNSIGNED testid, STRING3 testname, SET OF INTEGER value}), '/tmp/ParquetTest/ZSTDSetofIntegerTest.parquet', TRUE, 'ZSTD'),
    ParquetIO.write(DATASET([{560, 'avf', [3.14, -2.718]},
                             {561, 'avg', [4.2, 9.99, 3.1415926]}], {UNSIGNED testid, STRING3 testname, SET OF REAL value}), '/tmp/ParquetTest/ZSTDSetofRealTest.parquet', TRUE, 'ZSTD'),
    ParquetIO.write(DATASET([{562, 'avh', [1.23456789]},
                             {563, 'avi', [9.87654321, -5.43210987]}], {UNSIGNED testid, STRING3 testname, SET OF DECIMAL value}), '/tmp/ParquetTest/ZSTDSetofDecimalTest.parquet', TRUE, 'ZSTD'),
    ParquetIO.write(DATASET([{564, 'avj', ['Hello', 'World']},
                             {565, 'avk', ['string', 'STRING']}], {UNSIGNED testid, STRING3 testname, SET OF STRING value}), '/tmp/ParquetTest/ZSTDSetofStringTest.parquet', TRUE, 'ZSTD'),
    ParquetIO.write(DATASET([{566, 'avl', ['"QString 1"']},
                             {567, 'avm', ['!@*^$', '1234754']}], {UNSIGNED testid, STRING3 testname, SET OF QSTRING value}), '/tmp/ParquetTest/ZSTDSetofQStringTest.parquet', TRUE, 'ZSTD'),
    ParquetIO.write(DATASET([{568, 'avn', [U'こんにちは、世界！']},
                             {569, 'avo', [U'🌟 Unicode Universe 🌟', U'🌟 Unicode Magic 🌟']}], {UNSIGNED testid, STRING3 testname, SET OF UNICODE value}), '/tmp/ParquetTest/ZSTDSetofUnicodeTest.parquet', TRUE, 'ZSTD'),
    ParquetIO.write(DATASET([{570, 'avp', [U'こんにちは、世界！', U'🌟 UTF8 Symbols 🌟', U'🌟 More UTF8 Fun 🌟']},
                             {571, 'avq', [U'🌟 UTF8 Magic 🌟']}], {UNSIGNED testid, STRING3 testname, SET OF UTF8 value}), '/tmp/ParquetTest/ZSTDSetofUTF8Test.parquet', TRUE, 'ZSTD'),
    ParquetIO.write(DATASET([{572, 'avr', [x'01a48d8414d848e900', x'01a48ec793a76f9400', x'01a48ed1bb70d84c01', x'01a4901558d7c91900']},
                             {573, 'avs', [x'01a48d8414d848e900', x'01a48ec793a76f9400', x'01a48ed8f40385ba01']}], {UNSIGNED testid, STRING3 testname, SET OF DATA value}), '/tmp/ParquetTest/ZSTDSetofDataTest.parquet', TRUE, 'ZSTD'),
    ParquetIO.write(DATASET([{574, 'avt', ['Hello', 'World']},
                             {575, 'avu', ['string', 'STRING']}], {UNSIGNED testid, STRING3 testname, SET OF VARSTRING value}), '/tmp/ParquetTest/ZSTDSetofVarstringTest.parquet', TRUE, 'ZSTD'),
    ParquetIO.write(DATASET([{576, 'avv', [U'こんにちは、世界！']},
                             {577, 'avw', [U'🌟 Unicode Universe 🌟', U'🌟 Unicode Magic 🌟']}], {UNSIGNED testid, STRING3 testname, SET OF VARUNICODE value}), '/tmp/ParquetTest/ZSTDSetofVarunicodeTest.parquet', TRUE, 'ZSTD'),
    ParquetIO.write(DATASET([{578, 'avx', {true, 42, 3.14, 1.23456789, 'Hello', 'QString', U'こんにちは、世界！', U'🌟 UTF8 Symbols 🌟', x'01010101', [1, 2, 3]}},
                             {579, 'avy', {false, -10, -2.718, -0.98765432, 'World', 'AnotherQString', U'こんばんは、世界！', U'🌟 More UTF8 Fun 🌟', x'FF00FF00', [4, 5, 6]}},
                             {580, 'avz', {false, 15, 4.2, 0.123, 'Data', 'YetAnotherQString', U'おはよう、日本！', U'🌟 Unicode Magic 🌟', x'12345678', [22, 23, 24]}},
                             {581, 'awa', {true, 8, 9.99, -0.12345678, 'Varstring', 'AnotherQString', U'こんにちは、日本！', U'🌟 More UTF8 Fun 🌟', x'FEDCBA98', [25, 26, 27]}},
                             {582, 'awb', {false, 0, -7.77, 0.123, 'Unicode', 'LastQString', U'さようなら、日本！', U'🌟 Unicode Universe 🌟', x'12345678', [28, 29, 30]}}], {UNSIGNED testid, STRING3 testname, {BOOLEAN b, INTEGER i, REAL r, DECIMAL de, STRING s, QSTRING q, UNICODE u, UTF8 u8, DATA da, SET OF INTEGER soi} value}), '/tmp/ParquetTest/ZSTDChildDatasetTest.parquet', TRUE, 'ZSTD'),
    ParquetIO.write(DATASET([{583, 'awc', {true, 42, 3.14, 1.23456789, 'Hello', 'QString', U'こんにちは、世界！', U'🌟 UTF8 Symbols 🌟', x'01010101', [1, 2, 3]}},
                             {584, 'awd', {false, -10, -2.718, -0.98765432, 'World', 'AnotherQString', U'こんばんは、世界！', U'🌟 More UTF8 Fun 🌟', x'FF00FF00', [4, 5, 6]}},
                             {585, 'awe', {false, 15, 4.2, 0.123, 'Data', 'YetAnotherQString', U'おはよう、日本！', U'🌟 Unicode Magic 🌟', x'12345678', [22, 23, 24]}},
                             {586, 'awf', {true, 8, 9.99, -0.12345678, 'Varstring', 'AnotherQString', U'こんにちは、日本！', U'🌟 More UTF8 Fun 🌟', x'FEDCBA98', [25, 26, 27]}},
                             {587, 'awg', {false, 0, -7.77, 0.123, 'Unicode', 'LastQString', U'さようなら、日本！', U'🌟 Unicode Universe 🌟', x'12345678', [28, 29, 30]}}], {UNSIGNED testid, STRING3 testname, {BOOLEAN b {XPATH('B')}, INTEGER i {XPATH('I')}, REAL r {XPATH('R')}, DECIMAL de {XPATH('DE')}, STRING s {XPATH('S')}, QSTRING q {XPATH('Q')}, UNICODE u {XPATH('U')}, UTF8 u8 {XPATH('U8')}, DATA da {XPATH('DA')}, SET OF INTEGER soi {XPATH('SOI')}} value}), '/tmp/ParquetTest/xpathTest1.parquet', TRUE),
    ParquetIO.write(DATASET([{588, 'awh', true, 42, 3.14, 1.23456789, 'Hello', 'QString', U'こんにちは、世界！', U'🌟 UTF8 Symbols 🌟', x'01010101', [1, 2, 3]},
                             {589, 'awi', false, -10, -2.718, -0.98765432, 'World', 'AnotherQString', U'こんばんは、世界！', U'🌟 More UTF8 Fun 🌟', x'FF00FF00', [4, 5, 6]},
                             {590, 'awj', false, 15, 4.2, 0.123, 'Data', 'YetAnotherQString', U'おはよう、日本！', U'🌟 Unicode Magic 🌟', x'12345678', [22, 23, 24]},
                             {591, 'awk', true, 8, 9.99, -0.12345678, 'Varstring', 'AnotherQString', U'こんにちは、日本！', U'🌟 More UTF8 Fun 🌟', x'FEDCBA98', [25, 26, 27]},
                             {592, 'awl', false, 0, -7.77, 0.123, 'Unicode', 'LastQString', U'さようなら、日本！', U'🌟 Unicode Universe 🌟', x'12345678', [28, 29, 30]}], {UNSIGNED testid, STRING3 testname, BOOLEAN b {XPATH('B')}, INTEGER i {XPATH('I')}, REAL r {XPATH('R')}, DECIMAL de {XPATH('DE')}, STRING s {XPATH('S')}, QSTRING q {XPATH('Q')}, UNICODE u {XPATH('U')}, UTF8 u8 {XPATH('U8')}, DATA da {XPATH('DA')}, SET OF INTEGER soi {XPATH('SOI')}}), '/tmp/ParquetTest/xpathTest2.parquet', TRUE)
),
PARALLEL(
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; BOOLEAN value}, '/tmp/ParquetTest/BooleanTest.parquet'), NAMED('BooleanTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; INTEGER value}, '/tmp/ParquetTest/IntegerTest.parquet'), NAMED('IntegerTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; REAL value}, '/tmp/ParquetTest/RealTest.parquet'), NAMED('RealTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; DECIMAL value}, '/tmp/ParquetTest/DecimalTest.parquet'), NAMED('DecimalTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; STRING value}, '/tmp/ParquetTest/StringTest.parquet'), NAMED('StringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; QSTRING value}, '/tmp/ParquetTest/QStringTest.parquet'), NAMED('QStringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; UNICODE value}, '/tmp/ParquetTest/UnicodeTest.parquet'), NAMED('UnicodeTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; UTF8 value}, '/tmp/ParquetTest/UTF8Test.parquet'), NAMED('UTF8Test')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; DATA value}, '/tmp/ParquetTest/DataTest.parquet'), NAMED('DataTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; VARSTRING value}, '/tmp/ParquetTest/VarstringTest.parquet'), NAMED('VarstringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; VARUNICODE value}, '/tmp/ParquetTest/VarunicodeTest.parquet'), NAMED('VarunicodeTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF BOOLEAN value}, '/tmp/ParquetTest/SetofBooleanTest.parquet'), NAMED('SetofBooleanTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF INTEGER value}, '/tmp/ParquetTest/SetofIntegerTest.parquet'), NAMED('SetofIntegerTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF REAL value}, '/tmp/ParquetTest/SetofRealTest.parquet'), NAMED('SetofRealTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF DECIMAL value}, '/tmp/ParquetTest/SetofDecimalTest.parquet'), NAMED('SetofDecimalTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF STRING value}, '/tmp/ParquetTest/SetofStringTest.parquet'), NAMED('SetofStringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF QSTRING value}, '/tmp/ParquetTest/SetofQStringTest.parquet'), NAMED('SetofQStringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF UNICODE value}, '/tmp/ParquetTest/SetofUnicodeTest.parquet'), NAMED('SetofUnicodeTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF UTF8 value}, '/tmp/ParquetTest/SetofUTF8Test.parquet'), NAMED('SetofUTF8Test')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF DATA value}, '/tmp/ParquetTest/SetofDataTest.parquet'), NAMED('SetofDataTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF VARSTRING value}, '/tmp/ParquetTest/SetofVarstringTest.parquet'), NAMED('SetofVarstringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF VARUNICODE value}, '/tmp/ParquetTest/SetofVarunicodeTest.parquet'), NAMED('SetofVarunicodeTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; {BOOLEAN b; INTEGER i; REAL r; DECIMAL de; STRING s; QSTRING q; UNICODE u; UTF8 u8; DATA da; SET OF INTEGER soi} value}, '/tmp/ParquetTest/ChildDatasetTest.parquet'), NAMED('ChildDatasetTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; BOOLEAN value}, '/tmp/ParquetTest/SNAPPYBooleanTest.parquet'), NAMED('SNAPPYBooleanTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; INTEGER value}, '/tmp/ParquetTest/SNAPPYIntegerTest.parquet'), NAMED('SNAPPYIntegerTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; REAL value}, '/tmp/ParquetTest/SNAPPYRealTest.parquet'), NAMED('SNAPPYRealTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; DECIMAL value}, '/tmp/ParquetTest/SNAPPYDecimalTest.parquet'), NAMED('SNAPPYDecimalTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; STRING value}, '/tmp/ParquetTest/SNAPPYStringTest.parquet'), NAMED('SNAPPYStringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; QSTRING value}, '/tmp/ParquetTest/SNAPPYQStringTest.parquet'), NAMED('SNAPPYQStringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; UNICODE value}, '/tmp/ParquetTest/SNAPPYUnicodeTest.parquet'), NAMED('SNAPPYUnicodeTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; UTF8 value}, '/tmp/ParquetTest/SNAPPYUTF8Test.parquet'), NAMED('SNAPPYUTF8Test')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; DATA value}, '/tmp/ParquetTest/SNAPPYDataTest.parquet'), NAMED('SNAPPYDataTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; VARSTRING value}, '/tmp/ParquetTest/SNAPPYVarstringTest.parquet'), NAMED('SNAPPYVarstringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; VARUNICODE value}, '/tmp/ParquetTest/SNAPPYVarunicodeTest.parquet'), NAMED('SNAPPYVarunicodeTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF BOOLEAN value}, '/tmp/ParquetTest/SNAPPYSetofBooleanTest.parquet'), NAMED('SNAPPYSetofBooleanTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF INTEGER value}, '/tmp/ParquetTest/SNAPPYSetofIntegerTest.parquet'), NAMED('SNAPPYSetofIntegerTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF REAL value}, '/tmp/ParquetTest/SNAPPYSetofRealTest.parquet'), NAMED('SNAPPYSetofRealTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF DECIMAL value}, '/tmp/ParquetTest/SNAPPYSetofDecimalTest.parquet'), NAMED('SNAPPYSetofDecimalTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF STRING value}, '/tmp/ParquetTest/SNAPPYSetofStringTest.parquet'), NAMED('SNAPPYSetofStringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF QSTRING value}, '/tmp/ParquetTest/SNAPPYSetofQStringTest.parquet'), NAMED('SNAPPYSetofQStringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF UNICODE value}, '/tmp/ParquetTest/SNAPPYSetofUnicodeTest.parquet'), NAMED('SNAPPYSetofUnicodeTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF UTF8 value}, '/tmp/ParquetTest/SNAPPYSetofUTF8Test.parquet'), NAMED('SNAPPYSetofUTF8Test')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF DATA value}, '/tmp/ParquetTest/SNAPPYSetofDataTest.parquet'), NAMED('SNAPPYSetofDataTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF VARSTRING value}, '/tmp/ParquetTest/SNAPPYSetofVarstringTest.parquet'), NAMED('SNAPPYSetofVarstringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF VARUNICODE value}, '/tmp/ParquetTest/SNAPPYSetofVarunicodeTest.parquet'), NAMED('SNAPPYSetofVarunicodeTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; {BOOLEAN b; INTEGER i; REAL r; DECIMAL de; STRING s; QSTRING q; UNICODE u; UTF8 u8; DATA da; SET OF INTEGER soi} value}, '/tmp/ParquetTest/SNAPPYChildDatasetTest.parquet'), NAMED('SNAPPYChildDatasetTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; BOOLEAN value}, '/tmp/ParquetTest/GZIPBooleanTest.parquet'), NAMED('GZIPBooleanTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; INTEGER value}, '/tmp/ParquetTest/GZIPIntegerTest.parquet'), NAMED('GZIPIntegerTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; REAL value}, '/tmp/ParquetTest/GZIPRealTest.parquet'), NAMED('GZIPRealTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; DECIMAL value}, '/tmp/ParquetTest/GZIPDecimalTest.parquet'), NAMED('GZIPDecimalTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; STRING value}, '/tmp/ParquetTest/GZIPStringTest.parquet'), NAMED('GZIPStringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; QSTRING value}, '/tmp/ParquetTest/GZIPQStringTest.parquet'), NAMED('GZIPQStringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; UNICODE value}, '/tmp/ParquetTest/GZIPUnicodeTest.parquet'), NAMED('GZIPUnicodeTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; UTF8 value}, '/tmp/ParquetTest/GZIPUTF8Test.parquet'), NAMED('GZIPUTF8Test')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; DATA value}, '/tmp/ParquetTest/GZIPDataTest.parquet'), NAMED('GZIPDataTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; VARSTRING value}, '/tmp/ParquetTest/GZIPVarstringTest.parquet'), NAMED('GZIPVarstringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; VARUNICODE value}, '/tmp/ParquetTest/GZIPVarunicodeTest.parquet'), NAMED('GZIPVarunicodeTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF BOOLEAN value}, '/tmp/ParquetTest/GZIPSetofBooleanTest.parquet'), NAMED('GZIPSetofBooleanTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF INTEGER value}, '/tmp/ParquetTest/GZIPSetofIntegerTest.parquet'), NAMED('GZIPSetofIntegerTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF REAL value}, '/tmp/ParquetTest/GZIPSetofRealTest.parquet'), NAMED('GZIPSetofRealTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF DECIMAL value}, '/tmp/ParquetTest/GZIPSetofDecimalTest.parquet'), NAMED('GZIPSetofDecimalTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF STRING value}, '/tmp/ParquetTest/GZIPSetofStringTest.parquet'), NAMED('GZIPSetofStringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF QSTRING value}, '/tmp/ParquetTest/GZIPSetofQStringTest.parquet'), NAMED('GZIPSetofQStringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF UNICODE value}, '/tmp/ParquetTest/GZIPSetofUnicodeTest.parquet'), NAMED('GZIPSetofUnicodeTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF UTF8 value}, '/tmp/ParquetTest/GZIPSetofUTF8Test.parquet'), NAMED('GZIPSetofUTF8Test')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF DATA value}, '/tmp/ParquetTest/GZIPSetofDataTest.parquet'), NAMED('GZIPSetofDataTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF VARSTRING value}, '/tmp/ParquetTest/GZIPSetofVarstringTest.parquet'), NAMED('GZIPSetofVarstringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF VARUNICODE value}, '/tmp/ParquetTest/GZIPSetofVarunicodeTest.parquet'), NAMED('GZIPSetofVarunicodeTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; {BOOLEAN b; INTEGER i; REAL r; DECIMAL de; STRING s; QSTRING q; UNICODE u; UTF8 u8; DATA da; SET OF INTEGER soi} value}, '/tmp/ParquetTest/GZIPChildDatasetTest.parquet'), NAMED('GZIPChildDatasetTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; BOOLEAN value}, '/tmp/ParquetTest/BROTLIBooleanTest.parquet'), NAMED('BROTLIBooleanTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; INTEGER value}, '/tmp/ParquetTest/BROTLIIntegerTest.parquet'), NAMED('BROTLIIntegerTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; REAL value}, '/tmp/ParquetTest/BROTLIRealTest.parquet'), NAMED('BROTLIRealTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; DECIMAL value}, '/tmp/ParquetTest/BROTLIDecimalTest.parquet'), NAMED('BROTLIDecimalTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; STRING value}, '/tmp/ParquetTest/BROTLIStringTest.parquet'), NAMED('BROTLIStringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; QSTRING value}, '/tmp/ParquetTest/BROTLIQStringTest.parquet'), NAMED('BROTLIQStringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; UNICODE value}, '/tmp/ParquetTest/BROTLIUnicodeTest.parquet'), NAMED('BROTLIUnicodeTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; UTF8 value}, '/tmp/ParquetTest/BROTLIUTF8Test.parquet'), NAMED('BROTLIUTF8Test')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; DATA value}, '/tmp/ParquetTest/BROTLIDataTest.parquet'), NAMED('BROTLIDataTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; VARSTRING value}, '/tmp/ParquetTest/BROTLIVarstringTest.parquet'), NAMED('BROTLIVarstringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; VARUNICODE value}, '/tmp/ParquetTest/BROTLIVarunicodeTest.parquet'), NAMED('BROTLIVarunicodeTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF BOOLEAN value}, '/tmp/ParquetTest/BROTLISetofBooleanTest.parquet'), NAMED('BROTLISetofBooleanTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF INTEGER value}, '/tmp/ParquetTest/BROTLISetofIntegerTest.parquet'), NAMED('BROTLISetofIntegerTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF REAL value}, '/tmp/ParquetTest/BROTLISetofRealTest.parquet'), NAMED('BROTLISetofRealTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF DECIMAL value}, '/tmp/ParquetTest/BROTLISetofDecimalTest.parquet'), NAMED('BROTLISetofDecimalTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF STRING value}, '/tmp/ParquetTest/BROTLISetofStringTest.parquet'), NAMED('BROTLISetofStringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF QSTRING value}, '/tmp/ParquetTest/BROTLISetofQStringTest.parquet'), NAMED('BROTLISetofQStringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF UNICODE value}, '/tmp/ParquetTest/BROTLISetofUnicodeTest.parquet'), NAMED('BROTLISetofUnicodeTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF UTF8 value}, '/tmp/ParquetTest/BROTLISetofUTF8Test.parquet'), NAMED('BROTLISetofUTF8Test')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF DATA value}, '/tmp/ParquetTest/BROTLISetofDataTest.parquet'), NAMED('BROTLISetofDataTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF VARSTRING value}, '/tmp/ParquetTest/BROTLISetofVarstringTest.parquet'), NAMED('BROTLISetofVarstringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF VARUNICODE value}, '/tmp/ParquetTest/BROTLISetofVarunicodeTest.parquet'), NAMED('BROTLISetofVarunicodeTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; {BOOLEAN b; INTEGER i; REAL r; DECIMAL de; STRING s; QSTRING q; UNICODE u; UTF8 u8; DATA da; SET OF INTEGER soi} value}, '/tmp/ParquetTest/BROTLIChildDatasetTest.parquet'), NAMED('BROTLIChildDatasetTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; BOOLEAN value}, '/tmp/ParquetTest/LZ4BooleanTest.parquet'), NAMED('LZ4BooleanTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; INTEGER value}, '/tmp/ParquetTest/LZ4IntegerTest.parquet'), NAMED('LZ4IntegerTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; REAL value}, '/tmp/ParquetTest/LZ4RealTest.parquet'), NAMED('LZ4RealTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; DECIMAL value}, '/tmp/ParquetTest/LZ4DecimalTest.parquet'), NAMED('LZ4DecimalTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; STRING value}, '/tmp/ParquetTest/LZ4StringTest.parquet'), NAMED('LZ4StringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; QSTRING value}, '/tmp/ParquetTest/LZ4QStringTest.parquet'), NAMED('LZ4QStringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; UNICODE value}, '/tmp/ParquetTest/LZ4UnicodeTest.parquet'), NAMED('LZ4UnicodeTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; UTF8 value}, '/tmp/ParquetTest/LZ4UTF8Test.parquet'), NAMED('LZ4UTF8Test')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; DATA value}, '/tmp/ParquetTest/LZ4DataTest.parquet'), NAMED('LZ4DataTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; VARSTRING value}, '/tmp/ParquetTest/LZ4VarstringTest.parquet'), NAMED('LZ4VarstringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; VARUNICODE value}, '/tmp/ParquetTest/LZ4VarunicodeTest.parquet'), NAMED('LZ4VarunicodeTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF BOOLEAN value}, '/tmp/ParquetTest/LZ4SetofBooleanTest.parquet'), NAMED('LZ4SetofBooleanTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF INTEGER value}, '/tmp/ParquetTest/LZ4SetofIntegerTest.parquet'), NAMED('LZ4SetofIntegerTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF REAL value}, '/tmp/ParquetTest/LZ4SetofRealTest.parquet'), NAMED('LZ4SetofRealTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF DECIMAL value}, '/tmp/ParquetTest/LZ4SetofDecimalTest.parquet'), NAMED('LZ4SetofDecimalTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF STRING value}, '/tmp/ParquetTest/LZ4SetofStringTest.parquet'), NAMED('LZ4SetofStringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF QSTRING value}, '/tmp/ParquetTest/LZ4SetofQStringTest.parquet'), NAMED('LZ4SetofQStringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF UNICODE value}, '/tmp/ParquetTest/LZ4SetofUnicodeTest.parquet'), NAMED('LZ4SetofUnicodeTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF UTF8 value}, '/tmp/ParquetTest/LZ4SetofUTF8Test.parquet'), NAMED('LZ4SetofUTF8Test')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF DATA value}, '/tmp/ParquetTest/LZ4SetofDataTest.parquet'), NAMED('LZ4SetofDataTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF VARSTRING value}, '/tmp/ParquetTest/LZ4SetofVarstringTest.parquet'), NAMED('LZ4SetofVarstringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF VARUNICODE value}, '/tmp/ParquetTest/LZ4SetofVarunicodeTest.parquet'), NAMED('LZ4SetofVarunicodeTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; {BOOLEAN b; INTEGER i; REAL r; DECIMAL de; STRING s; QSTRING q; UNICODE u; UTF8 u8; DATA da; SET OF INTEGER soi} value}, '/tmp/ParquetTest/LZ4ChildDatasetTest.parquet'), NAMED('LZ4ChildDatasetTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; BOOLEAN value}, '/tmp/ParquetTest/ZSTDBooleanTest.parquet'), NAMED('ZSTDBooleanTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; INTEGER value}, '/tmp/ParquetTest/ZSTDIntegerTest.parquet'), NAMED('ZSTDIntegerTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; REAL value}, '/tmp/ParquetTest/ZSTDRealTest.parquet'), NAMED('ZSTDRealTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; DECIMAL value}, '/tmp/ParquetTest/ZSTDDecimalTest.parquet'), NAMED('ZSTDDecimalTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; STRING value}, '/tmp/ParquetTest/ZSTDStringTest.parquet'), NAMED('ZSTDStringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; QSTRING value}, '/tmp/ParquetTest/ZSTDQStringTest.parquet'), NAMED('ZSTDQStringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; UNICODE value}, '/tmp/ParquetTest/ZSTDUnicodeTest.parquet'), NAMED('ZSTDUnicodeTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; UTF8 value}, '/tmp/ParquetTest/ZSTDUTF8Test.parquet'), NAMED('ZSTDUTF8Test')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; DATA value}, '/tmp/ParquetTest/ZSTDDataTest.parquet'), NAMED('ZSTDDataTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; VARSTRING value}, '/tmp/ParquetTest/ZSTDVarstringTest.parquet'), NAMED('ZSTDVarstringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; VARUNICODE value}, '/tmp/ParquetTest/ZSTDVarunicodeTest.parquet'), NAMED('ZSTDVarunicodeTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF BOOLEAN value}, '/tmp/ParquetTest/ZSTDSetofBooleanTest.parquet'), NAMED('ZSTDSetofBooleanTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF INTEGER value}, '/tmp/ParquetTest/ZSTDSetofIntegerTest.parquet'), NAMED('ZSTDSetofIntegerTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF REAL value}, '/tmp/ParquetTest/ZSTDSetofRealTest.parquet'), NAMED('ZSTDSetofRealTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF DECIMAL value}, '/tmp/ParquetTest/ZSTDSetofDecimalTest.parquet'), NAMED('ZSTDSetofDecimalTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF STRING value}, '/tmp/ParquetTest/ZSTDSetofStringTest.parquet'), NAMED('ZSTDSetofStringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF QSTRING value}, '/tmp/ParquetTest/ZSTDSetofQStringTest.parquet'), NAMED('ZSTDSetofQStringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF UNICODE value}, '/tmp/ParquetTest/ZSTDSetofUnicodeTest.parquet'), NAMED('ZSTDSetofUnicodeTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF UTF8 value}, '/tmp/ParquetTest/ZSTDSetofUTF8Test.parquet'), NAMED('ZSTDSetofUTF8Test')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF DATA value}, '/tmp/ParquetTest/ZSTDSetofDataTest.parquet'), NAMED('ZSTDSetofDataTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF VARSTRING value}, '/tmp/ParquetTest/ZSTDSetofVarstringTest.parquet'), NAMED('ZSTDSetofVarstringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF VARUNICODE value}, '/tmp/ParquetTest/ZSTDSetofVarunicodeTest.parquet'), NAMED('ZSTDSetofVarunicodeTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; {BOOLEAN b; INTEGER i; REAL r; DECIMAL de; STRING s; QSTRING q; UNICODE u; UTF8 u8; DATA da; SET OF INTEGER soi} value}, '/tmp/ParquetTest/ZSTDChildDatasetTest.parquet'), NAMED('ZSTDChildDatasetTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; {BOOLEAN b {XPATH('B')}; INTEGER i {XPATH('I')}; REAL r {XPATH('R')}; DECIMAL de {XPATH('DE')}; STRING s {XPATH('S')}; QSTRING q {XPATH('Q')}; UNICODE u {XPATH('U')}; UTF8 u8 {XPATH('U8')}; DATA da {XPATH('DA')}; SET OF INTEGER soi {XPATH('SOI')}} value}, '/tmp/ParquetTest/xpathTest1.parquet'), NAMED('XPathTest1')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; BOOLEAN b {XPATH('B')}; INTEGER i {XPATH('I')}; REAL r {XPATH('R')}; DECIMAL de {XPATH('DE')}; STRING s {XPATH('S')}; QSTRING q {XPATH('Q')}; UNICODE u {XPATH('U')}; UTF8 u8 {XPATH('U8')}; DATA da {XPATH('DA')}; SET OF INTEGER soi {XPATH('SOI')}}, '/tmp/ParquetTest/xpathTest2.parquet'), NAMED('XPathTest2')),
)
);

// Test partitioned datasets

#!/bin/bash
wu=$1
if [ -z $1 ]
then
    #sqagg on thor
    wu=W20170829-172623
    if [ -z $wu ]
    then
        echo WUID not supplied
        exit
    fi;
fi;

function daliadmin {
    echo ------ daliadmin $1 ------
    echo $daliadmincmd . wuattr $wu $1
    #$daliadmincmd . wuattr $wu $1
    $wutool info daliserver=. $wu $1
    echo
    echo
}

wutool=/home/gavin/buildr/RelWithDebInfo/bin/wutool
daliadmincmd=/home/gavin/buildr/RelWithDebInfo/bin/daliadmin
# daliadmincmd=/home/gavin/build/Debug/bin/daliadmin
#The following should be TimeLocalExecute, but thor needs to start publishing it.
timeattr=TimeMaxLocalExecute

searchsg='graph1:sg1'
searchid='sg1'
searchsg2='graph1:sg30'

### The Tests #####################################
# Check invalid filters
daliadmin magic[true]
daliadmin source[blah]
daliadmin source[global,stats]      # lists not yet supported - possibly in the future
daliadmin scope[rubbish:xyz]
daliadmin scope[graph1:xyz]
daliadmin id[xyz]
daliadmin stype[graph1]
daliadmin depth[]
daliadmin depth[x]
daliadmin depth[x..]
daliadmin depth[..x]
daliadmin depth[100..1]

daliadmin where[]
daliadmin where[rubbish]
daliadmin where[NumStarts!=3]
daliadmin where[numstarts=x]

daliadmin matched[maybe]            # not caught
daliadmin nested[allofit]
daliadmin include[supergraph]
daliadmin includetype[graph1]

daliadmin properties[magic]
daliadmin STAT[fish]
daliadmin attribute[fish]

daliadmin measure[quantum]
daliadmin measure[]
daliadmin version[]

#Check various legal queries
#Only the scope lists - filter by the different sources
daliadmin props[scope],source[all]
daliadmin props[scope],source[global]
daliadmin props[scope],source[stats]
daliadmin props[scope],source[graph]
daliadmin props[scope],source[exception]

#Filter which attributes are returned
#All attributes
daliadmin stat[all]
#Only elapsed time attributes
daliadmin stat[TimeElapsed]
#Only hints
daliadmin hint[all]
#Only attributes
daliadmin attr[all]

# Provide a list of top level scopes/activities
daliadmin depth[1],source[global]


# check extracting attributes at a fixed depth
daliadmin depth[2],source[global]
daliadmin depth[2],source[stats]
daliadmin depth[2],source[graph]

# provide the values for [TimeLocalExecute] for all top level scopes { Top level heat map }
daliadmin depth[1],stat[$timeattr]

# Single root global scope (blank)
daliadmin depth[0],props[scope]

# first level of scopes - both forms should be equivalent, but implemented differently
daliadmin depth[1],props[scope]
daliadmin depth[0],nested[1],matched[false],props[scope]

# second level of scopes - both forms should be equivalent, but implemented differently
daliadmin depth[2],props[scope]
daliadmin depth[1],nested[1],matched[false],props[scope]

# Provide all the children of element [n] in the global element [n] { Expand subgraphs within a graph }
daliadmin scope[$searchsg],matched[false],nested[1],props[scope]

# Provide the scope information for a particular activity { To map errors to graph locations }
daliadmin id[$searchid],props[scope]

# Provide an entire heirarchy starting from a particular subgraph. { quick sub-graph view }
daliadmin scope[$searchsg],nested[all],props[scope]

# For all activities that read data, return the $timeattr. { A filtered heat map }
daliadmin where[NumMinDiskReads],stat[$timeattr],stat[NumMinDiskReads]

# Return children for 2 items - which nest inside each other
daliadmin id[sg30],id[sg33],nested[1],matched[false],props[scope]

# For all activities in a particular subgraph return all time attributes { A multiple series bar chart }
daliadmin id[sg1],include[activity],matched[false],measure[Time],nested[all]
daliadmin id[sg30],include[activity],measure[Time],nested[all]

#Check matches within a range of depths.
daliadmin include[activity],depth[5..7],props[scope]

# All attributes for all activities within a subgraph (but not within a child subgraph) { a table of attributes for the current subgraph }
daliadmin scope[$searchsg],nested[1],include[activity],matched[false],props[all]

# For all activities return WhenFirstRow and TimeElapsed { gantt chart of activities within a subgraph }
daliadmin scope[$searchsg],nested[1],include[activity],matched[false],stat[WhenMinFirstRow],stat[TimeMaxLocalExecute]

#MORE: Does the filter apply to the match criteria or the child values?  May also need having?
daliadmin scope[$searchsg2],include[activity],matched[false],where[WhenMinFirstRow],measure[When],stat[WhenMinFirstRow],stat[TimeMaxLocalExecute],nested[all]

# Update all properties for a subgraph { e.g., for updating graph progress }.  version[1] implies no static values
daliadmin scope[$searchsg],version[1],props[all],nested[all]

# Full dump of all statistics - to provide raw material for tables/client side analysis { stats tab, user xml output }
daliadmin props[stat],version[1],nested[all]

# Find all activities which spent more than 100us processing.
daliadmin stype[activity],where[$timeattr],stat[$timeattr]
daliadmin "stype[activity],where[$timeattr>=1000000],stat[$timeattr]"
daliadmin stype[activity],where[$timeattr=1000000..],stat[$timeattr]
daliadmin stype[activity],where[$timeattr=1000000..2000000],stat[$timeattr]
daliadmin stype[activity],where[$timeattr=..2000000],stat[$timeattr]
daliadmin stype[activity],where[$timeattr=1000us,2ms],stat[$timeattr]

# Find all activities which spent more than 1 minute sorting { anomaly detection }
daliadmin "stype[activity],where[TimeSortElapsed>=60s],props[scope]"

/*##############################################################################

    Copyright (C) 2011 HPCC Systems.

    All rights reserved. This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
############################################################################## */

#include "xslprocessor.hpp" 
//  ===========================================================================

ESPStruct RoxieQueryAlias
{
    string ID;
    string Original;
};

ESPStruct RoxieQuery
{
    string ID;
    [min_ver("1.02")] string WUID;
    //string Cluster;
    //string Label;
    //string AssociatedName;
    [min_ver("1.01")] string DeployedBy;
    [min_ver("1.01")] string UpdatedBy;
    string Error;
    string Comment;
    string Extra;
    string HighPriority;
    string HasAliases;
    string Suspended;
};

ESPrequest 
[
]
RoxieQuerySearchRequest
{
};

ESPresponse 
[
   exceptions_inline
]
RoxieQuerySearchResponse
{
    ESParray<string, ClusterName> ClusterNames;
    ESParray<string, SuspendedSelection> SuspendedSelections;
};


ESPrequest 
[
]
RoxieQueryListRequest
{
    ESParray<string> IDs;

    string LogicalName;
    string Cluster;
    string Suspended;
    int PageSize;
    int PageStartFrom;
    string Sortby;
    bool Descending(false);
};

ESPresponse 
[
    exceptions_inline,
    encode(0)
]
RoxieQueryListResponse
{
    ESParray<ESPstruct RoxieQuery> RoxieQueries;

    int PageSize(100);
    int64 PageStartFrom(1);
    int64 LastPageFrom(-1);
    int64 PageEndAt;
    int64 PrevPageFrom(-1);
    int64 NextPageFrom(-1);
    int64 NumFiles;
    string Sortby;
    bool Descending(false);
    string LogicalName;
    string Cluster;
    string ParametersForPaging;
    string ParametersForSorting;
};

ESPrequest 
[
]
RoxieQueryDetailsRequest
{
    string QueryID;
    string Cluster;
};

ESPresponse 
[
   exceptions_inline
]
RoxieQueryDetailsResponse
{
    string QueryID;
    string Cluster;
    string WUID;
    string AssociatedName;
    string HighPriority;
    string Suspended;
    string Label;
    string Error;
    string Comment;
    string Extra;
    [min_ver("1.01")] string DeployedBy;
    [min_ver("1.01")] string UpdatedBy;
    
    ESParray<ESPStruct RoxieQueryAlias> Aliases;
};

ESPrequest GVCAjaxGraphRequest
{
    string Cluster;
    string Name;
    string GraphName;
};

ESPresponse [exceptions_inline, http_encode(0)] GVCAjaxGraphResponse
{
    string Cluster;
    string Name;
    string GraphName;
    string GraphType;
};

ESPrequest ShowGVCGraphRequest
{
    string Cluster;
    string QueryId;
    string GraphName;
};

ESPresponse [exceptions_inline, http_encode(0)] ShowGVCGraphResponse
{
    string Cluster;
    string QueryId;
    string GraphName;
    ESParray<string> GraphNames;
    string TheGraph;
};

ESPrequest RoxieQueryProcessGraphRequest
{
    string  Cluster;
    string  QueryId;
    string  GraphName;
    bool    XmlGraph;
    bool    Stats;
};

ESPresponse  [encode(0), exceptions_inline] RoxieQueryProcessGraphResponse
{
    string theGraph;
};


//  ===========================================================================
ESPservice [
    version("1.10"), default_client_version("1.10"),
    noforms, 
    exceptions_inline("./smc_xslt/exceptions.xslt")] WsRoxieQuery
{
    ESPuses ESPStruct RoxieQueryAlias;
    ESPuses ESPStruct RoxieQuery;

    ESPmethod [resp_xsl_default("/esp/xslt/roxiequery_search.xslt")] RoxieQuerySearch(RoxieQuerySearchRequest, RoxieQuerySearchResponse);
    ESPmethod [resp_xsl_default("/esp/xslt/roxiequery.xslt")] RoxieQueryList(RoxieQueryListRequest, RoxieQueryListResponse);
    ESPmethod [resp_xsl_default("/esp/xslt/roxiequerydetails.xslt")] QueryDetails(RoxieQueryDetailsRequest, RoxieQueryDetailsResponse);
    ESPmethod [description("Stub for Ajax GVC Graph."), help(""), resp_xsl_default("/esp/xslt/GvcGraph.xslt")] GVCAjaxGraph(GVCAjaxGraphRequest, GVCAjaxGraphResponse);
    ESPmethod [description("Show GVC graph for a Roxie query"), help(""), resp_xsl_default("/esp/xslt/RoxieGVCGraph.xslt")] ShowGVCGraph(ShowGVCGraphRequest, ShowGVCGraphResponse);
    ESPmethod [resp_xsl_default("/esp/xslt/graphStats.xslt")] RoxieQueryProcessGraph(RoxieQueryProcessGraphRequest, RoxieQueryProcessGraphResponse);
};

SCMexportdef(WsRoxieQuery);

SCMapi(WsRoxieQuery) IClientWsRoxieQuery *createWsRoxieQueryClient();

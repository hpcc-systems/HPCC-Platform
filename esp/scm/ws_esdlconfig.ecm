/*##############################################################################
HPCC SYSTEMS software Copyright (C) 2013 HPCC SystemsÂ®.
############################################################################## */

EspInclude(common);
EspInclude(ws_topology);

ESPrequest EchoRequest
{
    string Request;
};

ESPresponse EchoResponse
{
    string Response;
};

ESPstruct BaseESDLStatus
{
    int Code;
    string Description;
};

ESPStruct MethodConfig
{
    string Name;
    ESParray<ESPstruct NamedValue, Attribute> Attributes;
    string Elements;
    string XML;
};

ESPStruct ESDLConfiguration
{
    ESParray<ESPStruct MethodConfig, Method> Methods;
};
ESPstruct ESDLBinding
{
    string Id;
    string EspProcess;
    [min_ver("1.4")] int Port;
    [max_ver("1.3")] string EspBinding;
};

ESPstruct ESDLDefinition
{
    string Name;
    int Seq;
    string Id;
    [min_ver("1.1")] string Interface;
    [min_ver("1.2")] ESParray<string, Name> ESDLServices;
};

ESPStruct ESDLBindingContents
{
    ESPStruct ESDLDefinition Definition;
    ESPStruct ESDLConfiguration Configuration;
};

ESPrequest [nil_remove] GetESDLDefinitionRequest
{
    string Id;
    [min_ver("1.3")] string Name;
    [min_ver("1.3")] int Seq;
    string ServiceName;
    [min_ver("1.2")] boolean ReportMethodsAvailable;
};

ESPresponse [nil_remove, exceptions_inline] GetESDLDefinitionResponse
{
    string Id;
    [min_ver("1.2")] ESParray<string, Name> ESDLServices;
    string XMLDefinition;
    ESPstruct BaseESDLStatus status;
    ESParray<ESPStruct MethodConfig, Method> Methods;
};

ESPrequest PublishESDLDefinitionRequest
{
    string ServiceName;
    string XMLDefinition;
    boolean DeletePrevious;
    [min_ver("1.2")] boolean EchoDefinition;
};

ESPresponse [nil_remove, exceptions_inline] PublishESDLDefinitionResponse
{
    string ServiceName;
    int EsdlVersion;
    boolean DeletePrevious;
    ESPstruct BaseESDLStatus status;
    [min_ver("1.2")] ESParray<string, Name> ESDLServices;
    [min_ver("1.2")] string XMLDefinition;
    [min_ver("1.2")] ESParray<ESPStruct MethodConfig, Method> Methods;
};

ESPrequest [nil_remove] PublishESDLBindingRequest
{
    string EspProcName;        //Name of ESP Process
    string EspBindingName;     //Name of ESP Binding
    string EspPort;            //Port to bind on. You need to specify either EspBindingName or EspPort.
    string EsdlDefinitionID;   // The ESDL definition name.ver
    string EsdlServiceName;    //Name of service as defined in ESDL Definition

    [max_ver("1.3")] string EspServiceName;

    boolean Overwrite;
    string Config; // dynamic xml, can have <Binding EspProcess=xxx EspBinding=WsAccurint><Definition name=xx id=xx.yy><Methods><Method>...
                   //              or  <Definition name=xx id=xx.yy><Methods><Method>...
                   //              or  <Methods><Method>....
                   //<methods><Method name="name"  url="http://10.173.128.100:9876" password="h7webmX+vmTgtAsFmC+ahQ==" username="rpastrana" queryname="UPS_Services.RightAddressService" status="available" testrepo="0" querytype="roxie"/><Methods>
    [min_ver("1.2")] ESParray<ESPStruct MethodConfig, Method> Methods;
    [min_ver("1.2")] boolean EchoBinding;
};

ESPresponse [exceptions_inline] PublishESDLBindingResponse
{
    string EsdlDefinitionID; // The ESDL definition name.ver
    boolean Overwrite;
    string EspProcName;     //Name of ESP Process
    string EspPort;         //Name + port = service
    ESPstruct BaseESDLStatus status;
    [min_ver("1.2")] ESPStruct ESDLBindingContents ESDLBinding;
};

ESPrequest [nil_remove] ListDESDLEspBindingsReq
{
    boolean IncludeESDLBindingInfo;
};

ESPStruct [nil_remove] TpBindingEx
{
    string Name;
    string Service;
    string ServiceType;
    string BindingType;
    string ServiceBuildSet;
    string Port;
    string Protocol;
    ESPStruct ESDLBindingContents ESDLBinding;
};

ESPStruct ESPServerEx
{
    string Name;
    string Description;
    string Build;
    string Type;
    string Path;
    string LogDirectory;
    ESParray<ESPstruct TpBindingEx> TpBindingEx;
};

ESPresponse ListDESDLEspBindingsResp
{
    ESParray<ESPStruct ESPServerEx, ESPServer> ESPServers;
};

ESPrequest [nil_remove] ConfigureESDLBindingMethodRequest
{
    [min_ver("1.4")] string EsdlBindingId;
    [min_ver("1.4")] string MethodName;
    [max_ver("1.3")] string EspProcName;       //Name of ESP Process
    [max_ver("1.3")] string EspBindingName;    //Name + port = binding
    [max_ver("1.3")] string EspPort;            //Esp Proc + Esp port = ESP Binding
    [max_ver("1.3")] string EsdlDefinitionID;   // The ESDL definition name.ver
    [max_ver("1.3")] string EsdlServiceName;    //Name of service as defined in ESDL Definition
    boolean Overwrite;
    //string Attributes;        //xml <methods><Method name="name" url="http://vvvzzz.yyy.xxx:9876" password="h7fermX+gmYuuBwUsS-qeZ==" username="myname" queryname="UPS_Services.RightAddressService" status="available" testrepo="0" querytype="roxie"/><Methods>
    string Config; // dynamic xml, can have <Binding EspProcess=xxx EspBinding=WsAccurint><Definition name=xx id=xx.yy><Methods><Method>...
                   //              or  <Definition name=xx id=xx.yy><Methods><Method>...
                   //              or  <Methods><Method>....
                   //<methods><Method name="name"  url="http://10.173.128.100:9876" password="h7webmX+vmTgtAsFmC+ahQ==" username="rpastrana" queryname="UPS_Services.RightAddressService" status="available" testrepo="0" querytype="roxie"/><Methods>
    [min_ver("1.2")] ESPStruct MethodConfig MethodStructure;
    [min_ver("1.2")] boolean EchoBinding;
};

ESPresponse [nil_remove, exceptions_inline] ConfigureESDLBindingMethodResponse
{
    string EspProcName;                          //Name of ESP Process
    [max_ver("1.1")] string ServiceName;         //which ESDL definition are we configuring
    [max_ver("1.1")] int ServiceEsdlVersion;     //which version of the ESDL def are we configuring
    [min_ver("1.2")] string EspBindingName;
    [min_ver("1.2")] string EsdlDefinitionID;    //The ESDL definition name.ver
    [min_ver("1.2")] string EsdlServiceName;     //which ESDL definition are we configuring
    ESPstruct BaseESDLStatus status;
    [min_ver("1.2")] ESPStruct ESDLBindingContents ESDLBinding;
};

ESPrequest GetESDLBindingRequest
{
    string EsdlBindingId;
    [max_ver("1.3")] string EspProcName;   //Name of ESP Process
    [max_ver("1.3")] string EspBindingName;
    [max_ver("1.3")] string EspPort;
    [min_ver("1.1")] bool IncludeInterfaceDefinition;
    [min_ver("1.2")] boolean ReportMethodsAvailable;
};

ESPresponse [exceptions_inline] GetESDLBindingResponse
{
    string ServiceName;  //which ESDL definition are we configuring
    string EspProcName;   //Name of ESP Process
    string BindingName;
    string EspPort;
    string ConfigXML;
    [min_ver("1.1")] ESPStruct ESDLBindingContents ESDLBinding;
    ESPstruct BaseESDLStatus status;
};

ESPrequest DeleteESDLDefinitionRequest
{
    string Id;
    string Name;
    string Version;
};

ESPrequest DeleteESDLBindingRequest
{
    string Id;
    string EspProcess;
    string EspBinding;
};

ESPresponse [exceptions_inline] DeleteESDLRegistryEntryResponse
{
    string DeletedTree;
    ESPstruct BaseESDLStatus status;
};

ESPrequest ListESDLDefinitionsRequest
{
};

ESPresponse [exceptions_inline] ListESDLDefinitionsResponse
{
    ESParray<ESPstruct ESDLDefinition, Definition> Definitions;
};

ESPstruct EspPortStruct
{
    int Value;
    ESParray<ESPstruct ESDLBinding, Binding> Bindings;
};

ESPstruct EspProcessStruct
{
    string Name;
    ESParray<ESPstruct EspPortStruct, Port> Ports;
};

ESPrequest [exceptions_inline] ListESDLBindingsRequest
{
};

ESPresponse [exceptions_inline] ListESDLBindingsResponse
{
    string BindingsXML;
    [max_ver("1.3")] ESParray<ESPstruct ESDLBinding, Binding> Bindings;
    [min_ver("1.4")] ESParray<ESPstruct EspProcessStruct, EspProcess> EspProcesses;
};

#define VERSION_FOR_ESDLCMD "1.4"

ESPservice [auth_feature("ESDLConfigAccess:ACCESS"), version("1.4"), exceptions_inline("./smc_xslt/exceptions.xslt")] WsESDLConfig
{
    ESPmethod Echo(EchoRequest, EchoResponse);
    ESPmethod [auth_feature("ESDLConfigAccess:WRITE")] PublishESDLDefinition(PublishESDLDefinitionRequest, PublishESDLDefinitionResponse);
    ESPmethod [auth_feature("ESDLConfigAccess:WRITE")] PublishESDLBinding(PublishESDLBindingRequest, PublishESDLBindingResponse);
    ESPmethod [auth_feature("ESDLConfigAccess:WRITE")] ConfigureESDLBindingMethod(ConfigureESDLBindingMethodRequest, ConfigureESDLBindingMethodResponse);
    ESPmethod [auth_feature("ESDLConfigAccess:READ")]  GetESDLBinding(GetESDLBindingRequest, GetESDLBindingResponse);
    ESPmethod [auth_feature("ESDLConfigAccess:FULL")]  DeleteESDLBinding(DeleteESDLBindingRequest, DeleteESDLRegistryEntryResponse);
    ESPmethod [auth_feature("ESDLConfigAccess:FULL")]  DeleteESDLDefinition(DeleteESDLDefinitionRequest, DeleteESDLRegistryEntryResponse);
    ESPmethod [auth_feature("ESDLConfigAccess:READ")]  GetESDLDefinition(GetESDLDefinitionRequest, GetESDLDefinitionResponse);
    ESPmethod [auth_feature("ESDLConfigAccess:READ")]  ListESDLDefinitions(ListESDLDefinitionsRequest, ListESDLDefinitionsResponse);
    ESPmethod [auth_feature("ESDLConfigAccess:READ")]  ListESDLBindings(ListESDLBindingsRequest, ListESDLBindingsResponse);
    ESPmethod [auth_feature("ESDLConfigAccess:READ,ClusterTopologyAccess:READ"), min_ver("1.2")] ListDESDLEspBindings(ListDESDLEspBindingsReq, ListDESDLEspBindingsResp);
};

SCMexportdef(WsESDLConfig);

SCMapi(WsESDLConfig) IClientWsESDLConfig *createWsESDLConfigClient();

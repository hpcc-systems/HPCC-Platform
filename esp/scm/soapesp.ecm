/*##############################################################################

    HPCC SYSTEMS software Copyright (C) 2012 HPCC Systems.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
############################################################################## */


//SCM Interfaces
#include "esp.hpp"

//ESP Bindings
#include "http/platform/mime.hpp"

#include "xpp/XmlPullParser.h"
using namespace xpp;

//Jlib
#include "jstring.hpp"

SCMinterface ISoapMessage (IInterface)
{
    const char* getMessageType();
    StringBuffer& toString(StringBuffer& str);
    IEspContext *queryContext();
};

SCMinterface IRpcMessage (IInterface)
{
    IEspContext *queryContext();
    void setContext(IEspContext *value);

    const char* get_name();
    void set_name(const char* name);
    void set_ns(const char* ns);
    void set_nsuri(const char* nsuri);
    StringBuffer& get_nsuri(StringBuffer& nsuri);

    const char* get_text();
    void set_text(const char* text);
    void append_text(const char* text);

    bool get_value(const char* path, StringAttr& value);
    bool get_value(const char* path, StringBuffer& value);
    bool get_value(const char* path, StringBuffer& value, bool bSimpleXml);
    bool get_value(const char* path, int& value);
    bool get_value(const char* path, long& value);
    bool get_value(const char* path, __int64& value);
    bool get_value(const char* path, unsigned long& value);
    bool get_value(const char* path, unsigned int& value);
    bool get_value(const char* path, unsigned short& value);
    bool get_value(const char* path, unsigned char& value);
    bool get_value(const char* path, short& value);
    bool get_value(const char* path, bool& value);
    bool get_value(const char* path, double& value);
    bool get_value(const char* path, float& value);
    bool get_value(const char* path, StringArray& value);
    bool get_value(const char* path, StringArray& value, bool simpleXml);
    bool get_value(const char* path, IntArray& value);
    bool get_value(const char* path, ShortArray& value);
    bool get_value(const char* path, Int64Array& value);
    bool get_value(const char* path, BoolArray& value);
    bool get_value(const char* path, FloatArray& value);
    bool get_value(const char* path, DoubleArray& value);

    void add_value(const char* path, const char* ns, const char* name, const char* type, const char* value, bool encodeXml);
    void add_value(const char* path, const char* ns, const char* name, const char* type, const char* value);
    void add_value(const char* path, const char* ns, const char* name, const char* type, StringBuffer& value);
    void add_value(const char* path, const char* ns, const char* name, const char* type, long value);
    void add_value(const char* path, const char* ns, const char* name, const char* type, __int64 value);
    void add_value(const char* path, const char* ns, const char* name, const char* type, unsigned long value);
    void add_value(const char* path, const char* ns, const char* name, const char* type, int value);
    void add_value(const char* path, const char* ns, const char* name, const char* type, unsigned int value);
    void add_value(const char* path, const char* ns, const char* name, const char* type, unsigned short value);
    void add_value(const char* path, const char* ns, const char* name, const char* type, bool value);
    void add_value(const char* path, const char* ns, const char* name, const char* type, double value);
    void add_value(const char* path, const char* ns, const char* name, 
            const char* childns, const char* childname, const char* childtype, StringArray& value);
    void add_value(const char* path, const char* ns, const char* name, 
            const char* childns, const char* childname, const char* childtype, ShortArray& value);
    void add_value(const char* path, const char* ns, const char* name, 
            const char* childns, const char* childname, const char* childtype, IntArray& value);
    void add_value(const char* path, const char* ns, const char* name, 
            const char* childns, const char* childname, const char* childtype, Int64Array& value);
    void add_value(const char* path, const char* ns, const char* name, 
            const char* childns, const char* childname, const char* childtype, BoolArray& value);
    void add_value(const char* path, const char* ns, const char* name, 
            const char* childns, const char* childname, const char* childtype, FloatArray& value);
    void add_value(const char* path, const char* ns, const char* name, 
            const char* childns, const char* childname, const char* childtype, DoubleArray& value);

    void add_value(const char* path, const char* ns, const char* name, const char* type, const char* value, IProperties& attrs);
    void add_value(const char* path, const char* name, const char* value, IProperties& attrs);
    void add_attr(const char* path, const char* name, const char* value, IProperties& attrs);

   void unmarshall(XmlPullParser* xpp);
    //void marshall(StringBuffer& outbuf);
    void marshall(StringBuffer& outbuf, CMimeMultiPart* multipart);
    void simple_marshall(StringBuffer& outbuf);
    void setEncodeXml(bool encode);
    bool getEncodeXml();
    void setSerializedContent(const char * c);
};

SCMinterface IRpcSerializable (IInterface)
{
    void serialize(IEspContext* ctx, StringBuffer& buffer, const char *rootname);
    bool unserialize(IRpcMessage& rpc, const char *tagname, const char *basepath);
};

SCMinterface ISoapService (IEspService)
{
    int processRequest(ISoapMessage &request, ISoapMessage& response);
};

typedef IArrayOf<IRpcMessage> IRpcMessageArray;

SCMinterface ISoapClient (IInterface)
{
    int setUsernameToken(const char* username, const char* password, const char* realm);
    void disableKeepAlive();
    int postRequest(IRpcMessage& rpccall, IRpcMessage& response);
    int postRequest(const char* soapaction, IRpcMessage& rpccall, IRpcMessage& response);
    int postRequest(const char* soapaction, IRpcMessage& rpccall, StringBuffer& responsebuf);
    int postRequest(const char* contenttype, const char* soapaction, IRpcMessage& rpccall, IRpcMessage& response);
    int postRequest(const char* contenttype, const char* soapaction, IRpcMessage& rpccall, StringBuffer& responsebuf);
    int postRequest(IRpcMessage& rpccall, StringBuffer& responsebuf);

    int postRequest(IRpcMessage& rpccall, StringBuffer& responsebuf, IRpcMessageArray *headers);
    int postRequest(const char* contenttype, const char* soapaction, IRpcMessage& rpccall, StringBuffer& responsebuf, IRpcMessageArray *headers);
    int postRequest(const char* soapaction, IRpcMessage& rpccall, StringBuffer& responsebuf, IRpcMessageArray *headers);
};

SCMinterface IHttpServerService (IInterface)
{
    int processRequest();
    int onPost();
    int onGet();
};

SCMinterface ITransportClient (IInterface)
{
    int postRequest(ISoapMessage &request, ISoapMessage& response);
};

SCMinterface IEspSoapBinding(IEspRpcBinding)
{
    int processRequest(IRpcMessage * rpc_call, IRpcMessage * rpc_response);
};

SCMenum RpcMessageState
{
    RPC_MESSAGE_OK,
    RPC_MESSAGE_CONNECTION_ERROR,
    RPC_MESSAGE_ERROR
};

SCMinterface IRpcMessageBinding(IInterface)
{
    void setClientValue(unsigned val);
    unsigned getClientValue();

    void setReqId(unsigned val);
    unsigned getReqId();

    void setEventSink(void *val);
    void *getEventSink();

    void setState(IInterface *state);
    IInterface *queryState();

    void setThunkHandle(void * val);
    void *getThunkHandle();

    void setMethod(const char *method);
    const char *getMethod();

    void lock();
    void unlock();
};


SCMinterface IRpcResponseBinding(IRpcMessageBinding)
{
    void setRpcState(RpcMessageState state);
    RpcMessageState getRpcState();
    
    bool unserialize(IRpcMessage& rpc_response, const char *tag, const char *path);
};


SCMinterface IRpcRequestBinding(IRpcMessageBinding)
{
    const char *getUrl();
    void setUrl(const char *val);

    void serialize(IRpcMessage& rpc_response);
    //void serialize(StringBuffer& buffer, const char *rootname);
    void post(IRpcResponseBinding& response);
};

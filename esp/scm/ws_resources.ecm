/*##############################################################################

    HPCC SYSTEMS software Copyright (C) 2021 HPCC SystemsÂ®.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
############################################################################## */

EspInclude(common);

ESPenum ResourceType : string
{
    UNKNOWN("UNKNOWN"),
    TRACES("TRACES"),
    LOGS("LOGS"),
    METRICS("METRICS")
};

ESPenum HPCCQueueType : string
{
    Thor("Thor"),
    HThor("HThor"),
    Roxie("Roxie"),
    All("All")
};

ESPStruct HPCCService
{
    string Name;
    string Type;
    unsigned Port;
    bool TLSSecure;
};

ESPStruct ServicePorts
{
    string Name;
    string Protocol;
    unsigned Port;
};

ESPenum ExternalIPStatus : string
{
    Unknown("Unknown"),
    None("None"),
    Pending("Pending")
};

//The ExternalIPsEx or ClusterIPsEx is used when ExternalIPs or ClusterIPs is empty.
//The value is based on the existing https://github.com/kubernetes/kubernetes.
ESPStruct ServiceConnection
{
    string Type;
    ESParray<string> ExternalIPs;
    ESPenum ExternalIPStatus ExternalIPStatus; //Use this field when ExternalIPs is empty.
                                               //Set to 'none' for spec type 'ClusterIP' and spec type 'NodePort';
                                               //set to 'pending' for spec type 'LoadBalancer'; leave it empty for spec type 'ExternalName';
                                               //set to 'unknown' for unknown spec types.
    ESParray<ESPstruct ServicePorts> Ports;
};

ESPStruct DiscoveredWebLink
{
    string ServiceName;
    string NameSpace;
    ESParray<ESPstruct NamedValue> Annotations;
    [min_ver("1.02")] ESPstruct ServiceConnection Connection;
};

ESPStruct ConfiguredWebLink
{
    string Name;
    string Description;
    string URL;
    [min_ver("1.04")] ResourceType ResourceType;
};

ESPrequest ServiceQueryRequest
{
    string Type;
    string Name;
};

ESPresponse [nil_remove, exceptions_inline] ServiceQueryResponse
{
    ESParray<ESPstruct HPCCService, Service> Services;
};

ESPrequest WebLinksQueryRequest
{
};

ESPresponse [nil_remove, exceptions_inline] WebLinksQueryResponse
{
    ESParray<ESPstruct DiscoveredWebLink> DiscoveredWebLinks;
    ESParray<ESPstruct ConfiguredWebLink> ConfiguredWebLinks;
};

ESPStruct [nil_remove] HPCCQueue
{
    string Name;
    ESPenum HPCCQueueType Type;
};

ESPrequest TargetQueryRequest
{
    ESPenum HPCCQueueType Type;
};

ESPresponse [nil_remove, exceptions_inline] TargetQueryResponse
{
    ESParray<ESPstruct HPCCQueue> Queues;
    ESParray<string> Roxies;
};

ESPservice [auth_feature("ResourceQueryAccess:ACCESS"), version("1.04"), generated_client_version("0.0"), exceptions_inline("./smc_xslt/exceptions.xslt"), disable_profile_execution] WsResources
{
    ESPmethod [auth_feature("ResourceQueryAccess:READ"), min_ver("1.03")] TargetQuery(TargetQueryRequest, TargetQueryResponse);
    ESPmethod [auth_feature("ResourceQueryAccess:READ")] ServiceQuery(ServiceQueryRequest, ServiceQueryResponse);
    ESPmethod [auth_feature("ResourceQueryAccess:READ"), min_ver("1.01")] WebLinksQuery(WebLinksQueryRequest, WebLinksQueryResponse);
};

SCMexportdef(WsResources);

SCMapi(WsResources) IClientWsResources *createWsResourcesClient();

/*##############################################################################

    HPCC SYSTEMS software Copyright (C) 2012 HPCC Systems.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
############################################################################## */

#ifndef ROXIEMANAGER_API
#define ROXIEMANAGER_API __declspec(dllimport)
#endif

#include "esp.hpp"
#include "jptree.hpp"
#include "jsocket.hpp"
#include "workunit.hpp"

interface IUserDescriptor;
interface IRoxieCommunicationClient;

SCMenum ActivationOptions1
{
    NO_ACTIVATE = 0,
    ACTIVATE = 1,
    ACTIVATE_SUSPEND = 2,
    ACTIVATE_DELETE = 3,
    LOAD_DATA_ONLY = 4,
    ACTIVATE_LOAD_DATA_ONLY = 5
};

enum RoxieQueryPriorities
{
    UNKNOWN_PRIORITY = -1,
    LOW_PRIORITY = 0,
    HIGH_PRIORITY = 1,
    SLA_PRIORITY = 2
};

SCMenum LayoutTranslationEnabledType
{
    RLT_OFF,
    RLT_ON,
    RLT_UNKNOWN
};


SCMinterface IConstRoxieQueryCompileInfo(IInterface)
{
    unsigned getMemoryLimit();
    unsigned getWuTimeOut();
    unsigned getTimeLimit();
    unsigned getWarnTimeLimit();
    bool getPoolGraphs();
    bool getHighPriority();
    int getQueryPriority();
    const char *queryRepositoryLabel();
    const char *queryJobName();
    const char *queryEcl();
    const char *queryAppName();
    const char *queryClusterName();
    const char *queryDefaultStyleName();
    const char *queryModuleName();
    const char *queryWuDebugOptions();
};


SCMinterface IRoxieQueryCompileInfo(IConstRoxieQueryCompileInfo)
{
    void setMemoryLimit(unsigned val);
    void setWuTimeOut(unsigned val);
    void setTimeLimit(unsigned val);
    void setWarnTimeLimit(unsigned val);
    void setPoolGraphs(bool val);
    void setHighPriority(bool val);
    void setQueryPriority(int val);
    void setRepositoryLabel(const char *val);
    void enableWebServiceInfoRetrieval(const char *_moduleName, const char *_defaultStyleName);
    void setWuDebugOptions(const char *val);
};


SCMinterface IConstRoxieQueryProcessingInfo(IInterface)
{
    bool getLoadDataOnly();
    bool getResolveFileInfo();
    bool getNoForms();
    bool getUseRenamedFileInfo();
    const char *queryComment();
    const char *queryPackageName();
    const char *queryDfsDaliIp();
    const char *querySourceRoxieClusterName();
    bool getGeneratePackageFileInfo();
    const char *queryScope();
    IUserDescriptor *queryUserDescriptor();
    int getLayoutTranslationEnabled();
    bool getResolveKeyDiffInfo();
    bool getCopyKeyDiffLocationInfo();
};


SCMinterface IRoxieQueryProcessingInfo(IConstRoxieQueryProcessingInfo)
{
    void setLoadDataOnly(bool val);
    void setResolveFileInfo(bool val);
    void setUseRenamedFileInfo(bool val);
    void setComment(const char *val);
    void setPackageName(const char *val);
    void setNoForms(bool val);
    void setDfsDaliIp(const char *val);
    void setSourceRoxieClusterName(const char *val);
    void setGeneratePackageFileInfo(bool val);
    void setScope(const char *val);
    void setUserDescriptor(IUserDescriptor *val);
    void setLayoutTranslationEnabled(int val);
    void setResolveKeyDiffInfo(bool val);
    void setCopyKeyDiffLocationInfo(bool val);
};


SCMinterface IRoxieQueryManager(IInterface)
{
    bool compileQuery(SCMStringBuffer &wuid, SCMStringBuffer &roxieQueryName, IRoxieQueryCompileInfo &compileInfo,
                      IRoxieQueryProcessingInfo&processingInfo, const char *targetClusterName, SCMStringBuffer &status);

    bool deployQuery(SCMStringBuffer &wuid, SCMStringBuffer &roxieQueryName, IRoxieQueryCompileInfo &compileInfo,
                     IRoxieQueryProcessingInfo &processingInfo, const char *userId, WUQueryActivationOptions activateOption, bool allowNewRoxieOnDemandQuery, const char *targetClusterName, const char *querySetName, bool notifyRoxie, SCMStringBuffer &status, SCMStringBuffer &roxieDeployStatus);

    bool deployWorkunit(SCMStringBuffer &wuid,  SCMStringBuffer &roxieQueryName, IRoxieQueryProcessingInfo &processingInfo, const char *userId, WUQueryActivationOptions activateOption, const char *querySetName, bool notifyRoxie, SCMStringBuffer &status, SCMStringBuffer &roxieDeployStatus);
    bool publishWorkunit(IConstWorkUnit *workunit,  SCMStringBuffer &roxieQueryName, IRoxieQueryProcessingInfo &processingInfo, const char *userId, WUQueryActivationOptions activateOption, const char *querySetName, bool notifyRoxie, SCMStringBuffer &status, SCMStringBuffer &roxieDeployStatus);
    
    bool publishFromQuerySet(SCMStringBuffer &name, SCMStringBuffer &roxieQueryName, IRoxieQueryProcessingInfo &processingInfo, const char *userId, WUQueryActivationOptions activateOption, const char *sourceQuerySetName, const char *targetQuerySetName, const char *sourceDaliIP, const char *queryComment, bool notifyRoxie, SCMStringBuffer &status, SCMStringBuffer &roxieDeployStatus);
    
    void getNewQueryWorkunitId(SCMStringBuffer &wuid, SCMStringBuffer &roxieQueryName, const char *queryAppName);

    const char *runQuery(IConstWorkUnit *workunit, const char *roxieQueryName, bool resultsToSocket, bool allowNewRoxieOnDemandQuery, SCMStringBuffer &response);

    void addAlias(const char *alias, const char *queryId, const char *querySetName, bool notifyRoxie, SCMStringBuffer &oldActive);
    void suspendQuery(const char *id, const char *querySetName, bool notifyRoxie, SCMStringBuffer &status);
    void unsuspendQuery(const char *id, const char *querySetName, bool notifyRoxie, SCMStringBuffer &status);
    void deleteQuery(const char *id, const char *querySetName, bool notifyRoxie, SCMStringBuffer &status);
    void removeAlias(const char *alias, const char *querySetName, bool notifyRoxie, SCMStringBuffer &status);
    void removeAllAliasForQuery(const char *id, const char *querySetName, bool notifyRoxie, SCMStringBuffer &status);
    
    IPropertyTree *retrieveQueryList(const char *filter, bool excludeQueryNames, bool excludeAliasNames, bool excludeLibraryNames, bool excludeDataOnlyNames, unsigned version);

    void setQueryWarningTime(const char *id, unsigned warnTime, SCMStringBuffer &status);
    unsigned getQueryWarningTime(const char *id);

    bool updateACLInfo(bool allow, const char *restrict_ip, const char *mask, const char *query, const char *errorMsg, int errorCode, int port, SCMStringBuffer &status);
};




extern "C" ROXIEMANAGER_API IRoxieQueryManager *createRoxieQueryManager(SocketEndpoint &roxieEP, const char *roxieName, const char *workunitDali, unsigned roxieTimeout, const char *_userName, const char *_password, int logLevel);


extern "C" ROXIEMANAGER_API IRoxieQueryCompileInfo *createRoxieQueryCompileInfo(const char *_ecl, const char *_jobName, const char *_clusterName, const char *_appName);
extern "C" ROXIEMANAGER_API IRoxieQueryProcessingInfo *createRoxieQueryProcessingInfo();




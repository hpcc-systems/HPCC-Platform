/*##############################################################################

    Copyright (C) 2011 HPCC Systems.

    All rights reserved. This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
############################################################################## */

#ifndef ROXIEMANAGER_API
#define ROXIEMANAGER_API __declspec(dllimport)
#endif

#include "esp.hpp"
#include "jptree.hpp"
#include "jsocket.hpp"
#include "workunit.hpp"

interface IUserDescriptor;
interface IRoxieCommunicationClient;

SCMenum ActivationOptions1
{
    NO_ACTIVATE = 0,
    ACTIVATE = 1,
    ACTIVATE_SUSPEND = 2,
    ACTIVATE_DELETE = 3,
    LOAD_DATA_ONLY = 4,
    ACTIVATE_LOAD_DATA_ONLY = 5
};

enum RoxieQueryPriorities
{
    UNKNOWN_PRIORITY = -1,
    LOW_PRIORITY = 0,
    HIGH_PRIORITY = 1,
    SLA_PRIORITY = 2
};

SCMenum LayoutTranslationEnabledType
{
    RLT_OFF,
    RLT_ON,
    RLT_UNKNOWN
};


SCMinterface IConstRoxieQueryCompileInfo(IInterface)
{
    unsigned getMemoryLimit();
    unsigned getWuTimeOut();
    unsigned getTimeLimit();
    unsigned getWarnTimeLimit();
    bool getPoolGraphs();
    bool getHighPriority();
    int getQueryPriority();
    const char *queryRepositoryLabel();
    const char *queryJobName();
    const char *queryEcl();
    const char *queryAppName();
    const char *queryClusterName();
    const char *queryDefaultStyleName();
    const char *queryModuleName();
    const char *queryWuDebugOptions();
};


SCMinterface IRoxieQueryCompileInfo(IConstRoxieQueryCompileInfo)
{
    void setMemoryLimit(unsigned val);
    void setWuTimeOut(unsigned val);
    void setTimeLimit(unsigned val);
    void setWarnTimeLimit(unsigned val);
    void setPoolGraphs(bool val);
    void setHighPriority(bool val);
    void setQueryPriority(int val);
    void setRepositoryLabel(const char *val);
    void enableWebServiceInfoRetrieval(const char *_moduleName, const char *_defaultStyleName);
    void setWuDebugOptions(const char *val);
};


SCMinterface IConstRoxieQueryProcessingInfo(IInterface)
{
    bool getLoadDataOnly();
    bool getResolveFileInfo();
    bool getNoForms();
    bool getUseRenamedFileInfo();
    const char *queryComment();
    const char *queryPackageName();
    const char *queryDfsDaliIp();
    const char *querySourceRoxieClusterName();
    bool getGeneratePackageFileInfo();
    const char *queryScope();
    IUserDescriptor *queryUserDescriptor();
    int getLayoutTranslationEnabled();
    bool getResolveKeyDiffInfo();
    bool getCopyKeyDiffLocationInfo();
};


SCMinterface IRoxieQueryProcessingInfo(IConstRoxieQueryProcessingInfo)
{
    void setLoadDataOnly(bool val);
    void setResolveFileInfo(bool val);
    void setUseRenamedFileInfo(bool val);
    void setComment(const char *val);
    void setPackageName(const char *val);
    void setNoForms(bool val);
    void setDfsDaliIp(const char *val);
    void setSourceRoxieClusterName(const char *val);
    void setGeneratePackageFileInfo(bool val);
    void setScope(const char *val);
    void setUserDescriptor(IUserDescriptor *val);
    void setLayoutTranslationEnabled(int val);
    void setResolveKeyDiffInfo(bool val);
    void setCopyKeyDiffLocationInfo(bool val);
};


SCMinterface IRoxieQueryManager(IInterface)
{
    bool compileQuery(SCMStringBuffer &wuid, SCMStringBuffer &roxieQueryName, IRoxieQueryCompileInfo &compileInfo,
                      IRoxieQueryProcessingInfo&processingInfo, const char *targetClusterName, SCMStringBuffer &status);

    bool deployQuery(SCMStringBuffer &wuid, SCMStringBuffer &roxieQueryName, IRoxieQueryCompileInfo &compileInfo,
                     IRoxieQueryProcessingInfo &processingInfo, const char *userId, WUQueryActivationOptions activateOption, bool allowNewRoxieOnDemandQuery, const char *targetClusterName, const char *querySetName, bool notifyRoxie, SCMStringBuffer &status, SCMStringBuffer &roxieDeployStatus);

    bool deployWorkunit(SCMStringBuffer &wuid,  SCMStringBuffer &roxieQueryName, IRoxieQueryProcessingInfo &processingInfo, const char *userId, WUQueryActivationOptions activateOption, const char *querySetName, bool notifyRoxie, SCMStringBuffer &status, SCMStringBuffer &roxieDeployStatus);
    bool publishWorkunit(IConstWorkUnit *workunit,  SCMStringBuffer &roxieQueryName, IRoxieQueryProcessingInfo &processingInfo, const char *userId, WUQueryActivationOptions activateOption, const char *querySetName, bool notifyRoxie, SCMStringBuffer &status, SCMStringBuffer &roxieDeployStatus);
    
    bool publishFromQuerySet(SCMStringBuffer &name, SCMStringBuffer &roxieQueryName, IRoxieQueryProcessingInfo &processingInfo, const char *userId, WUQueryActivationOptions activateOption, const char *sourceQuerySetName, const char *targetQuerySetName, const char *sourceDaliIP, const char *queryComment, bool notifyRoxie, SCMStringBuffer &status, SCMStringBuffer &roxieDeployStatus);
    
    void getNewQueryWorkunitId(SCMStringBuffer &wuid, SCMStringBuffer &roxieQueryName, const char *queryAppName);

    const char *runQuery(IConstWorkUnit *workunit, const char *roxieQueryName, bool resultsToSocket, bool allowNewRoxieOnDemandQuery, SCMStringBuffer &response);

    void addAlias(const char *alias, const char *queryId, const char *querySetName, bool notifyRoxie, SCMStringBuffer &oldActive);
    void suspendQuery(const char *id, const char *querySetName, bool notifyRoxie, SCMStringBuffer &status);
    void unsuspendQuery(const char *id, const char *querySetName, bool notifyRoxie, SCMStringBuffer &status);
    void deleteQuery(const char *id, const char *querySetName, bool notifyRoxie, SCMStringBuffer &status);
    void removeAlias(const char *alias, const char *querySetName, bool notifyRoxie, SCMStringBuffer &status);
    void removeAllAliasForQuery(const char *id, const char *querySetName, bool notifyRoxie, SCMStringBuffer &status);
    
    IPropertyTree *retrieveQueryList(const char *filter, bool excludeQueryNames, bool excludeAliasNames, bool excludeLibraryNames, bool excludeDataOnlyNames, unsigned version);

    void setQueryWarningTime(const char *id, unsigned warnTime, SCMStringBuffer &status);
    unsigned getQueryWarningTime(const char *id);

    bool updateACLInfo(bool allow, const char *restrict_ip, const char *mask, const char *query, const char *errorMsg, int errorCode, int port, SCMStringBuffer &status);
};




extern "C" ROXIEMANAGER_API IRoxieQueryManager *createRoxieQueryManager(SocketEndpoint &roxieEP, const char *roxieName, const char *workunitDali, unsigned roxieTimeout, const char *_userName, const char *_password, int logLevel);


extern "C" ROXIEMANAGER_API IRoxieQueryCompileInfo *createRoxieQueryCompileInfo(const char *_ecl, const char *_jobName, const char *_clusterName, const char *_appName);
extern "C" ROXIEMANAGER_API IRoxieQueryProcessingInfo *createRoxieQueryProcessingInfo();




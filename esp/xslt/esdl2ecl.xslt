<?xml version="1.0" encoding="UTF-8"?>
<!--
##############################################################################
#    Copyright (C) 2011 HPCC Systems.
#
#    All rights reserved. This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
##############################################################################
-->

<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
    <xsl:output method="text" version="1.0" encoding="UTF-8" indent="yes" />
    <xsl:param name="sourceFileName" select="'UNKNOWN'"/>
    <xsl:variable name="docname" select="esxdl/@name"/>
    <xsl:template match="/">
        <xsl:apply-templates select="esxdl"/>
    </xsl:template>
    <xsl:template name="doNotChangeManuallyComment">
        <xsl:text>/*** Not to be hand edited (changes will be lost on re-generation) ***/
/*** ECL Interface generated by esdl2ecl version 1.0 from </xsl:text><xsl:copy-of select="$sourceFileName"/> <xsl:text>.xml. ***/
/*===================================================*/

</xsl:text>
    </xsl:template>
    <xsl:template match="esxdl">
                 <xsl:call-template name="doNotChangeManuallyComment"/>
            <xsl:text>export </xsl:text>
            <xsl:choose>
                <xsl:when test="starts-with(@name, 'wsm_')"><xsl:value-of select="substring(@name, 5)"/></xsl:when>
                <xsl:otherwise><xsl:value-of select="@name"/></xsl:otherwise>
            </xsl:choose>
            <xsl:text> := MODULE
            
</xsl:text>
        <xsl:if test="$docname='wsm_share'">
        <xsl:text>export t_StringArrayItem := record, MAXLENGTH (1024)
            string value { xpath('') };
end;

</xsl:text>
        </xsl:if>
        <xsl:apply-templates select="EsdlStruct"/>
        <xsl:apply-templates select="EsdlRequest"/>
        <xsl:apply-templates select="EsdlResponse"/>

        <xsl:text>
end;

</xsl:text>
          <xsl:call-template name="doNotChangeManuallyComment"/>
    </xsl:template>

    <xsl:template match="EsdlElement[@complex_type]">
        <xsl:if test="not(@ecl_hide)">
            <xsl:text>  </xsl:text><xsl:value-of select="@ecl_type"/><xsl:text> </xsl:text> <xsl:call-template name="output_ecl_name"/><xsl:text> {xpath('</xsl:text><xsl:value-of select="@name"/><xsl:text>')};</xsl:text>
            <xsl:if test="@optional">
                <xsl:text>//hidden[</xsl:text><xsl:value-of select="@optional"/><xsl:text>]</xsl:text>
            </xsl:if>
<xsl:text>
</xsl:text>
        </xsl:if>
    </xsl:template>
    <xsl:template match="EsdlElement[@type]">
        <xsl:if test="not(@ecl_hide)">
            <xsl:text>  </xsl:text><xsl:call-template name="output_basic_type"/><xsl:text> </xsl:text><xsl:call-template name="output_ecl_name"/><xsl:text> {xpath('</xsl:text><xsl:value-of select="@name"/><xsl:text>')};</xsl:text>
            <xsl:if test="@optional">
                <xsl:text>//hidden[</xsl:text><xsl:value-of select="@optional"/><xsl:text>]</xsl:text>
            </xsl:if>
<xsl:text>
</xsl:text>
        </xsl:if>
    </xsl:template>
    <xsl:template match="EsdlEnum">
        <xsl:variable name="entype" select="@enum_type"/>
        <xsl:text>  </xsl:text><xsl:value-of select="@ecl_type"/><xsl:text> </xsl:text><xsl:value-of select="@name"/><xsl:text> {xpath('</xsl:text><xsl:value-of select="@name"/><xsl:text>')}; </xsl:text><xsl:value-of select="@ecl_comment"/>
        <xsl:if test="@optional">
            <xsl:text>//hidden[</xsl:text><xsl:value-of select="@optional"/><xsl:text>]</xsl:text>
        </xsl:if>
<xsl:text>
</xsl:text>
    </xsl:template>
    <xsl:template match="EsdlArray[@type='string']">
        <xsl:if test="not(@ecl_hide)">
        <xsl:text>  dataset(</xsl:text><xsl:if test="$docname!='wsm_share'"><xsl:text>share.</xsl:text></xsl:if><xsl:text>t_StringArrayItem) </xsl:text><xsl:call-template name="output_ecl_name"/>
        <xsl:text> {</xsl:text>
        <xsl:text>xpath('</xsl:text><xsl:value-of select="@name"/><xsl:text>/</xsl:text><xsl:value-of select="@item_tag"/><xsl:text>')</xsl:text>
        <xsl:choose>
            <xsl:when test="@max_count_var"><xsl:text>, MAXCOUNT(</xsl:text><xsl:value-of select="@max_count_var"/><xsl:text>)</xsl:text></xsl:when>
            <xsl:when test="@max_count"><xsl:text>, MAXCOUNT(</xsl:text><xsl:value-of select="@max_count"/><xsl:text>)</xsl:text></xsl:when>
        </xsl:choose>
        <xsl:text>};</xsl:text>
        <xsl:if test="@optional">
            <xsl:text>//hidden[</xsl:text><xsl:value-of select="@optional"/><xsl:text>]</xsl:text>
        </xsl:if>
        <xsl:text>
</xsl:text>
    </xsl:if>
    </xsl:template>
    <xsl:template match="EsdlArray">
        <xsl:if test="not(@ecl_hide)">
            <xsl:text>  dataset(</xsl:text> <xsl:value-of select="@ecl_type"/><xsl:text>) </xsl:text><xsl:call-template name="output_ecl_name"/>
            <xsl:text> {</xsl:text>
            <xsl:text>xpath('</xsl:text><xsl:value-of select="@name"/><xsl:text>/</xsl:text><xsl:value-of select="@item_tag"/><xsl:text>')</xsl:text>
            <xsl:choose>
                <xsl:when test="@max_count_var"><xsl:text>, MAXCOUNT(</xsl:text><xsl:value-of select="@max_count_var"/><xsl:text>)</xsl:text></xsl:when>
                <xsl:when test="@max_count"><xsl:text>, MAXCOUNT(</xsl:text><xsl:value-of select="@max_count"/><xsl:text>)</xsl:text></xsl:when>
            </xsl:choose>
        <xsl:text>};</xsl:text>
        <xsl:if test="@optional">
            <xsl:text>//hidden[</xsl:text><xsl:value-of select="@optional"/><xsl:text>]</xsl:text>
        </xsl:if>
        <xsl:text>
</xsl:text>
        </xsl:if>
    </xsl:template>

    <xsl:template match="EsdlStruct">
        <xsl:if test="not(@ecl_hide)">
            <xsl:text>export t_</xsl:text><xsl:call-template name="output_ecl_name"/><xsl:text> := record</xsl:text>
            <xsl:if test="@ecl_base_type"><xsl:text> (</xsl:text><xsl:value-of select="@ecl_base_type"/><xsl:text>)</xsl:text></xsl:if>
            <xsl:if test="@max_len"><xsl:text>, MAXLENGTH (</xsl:text><xsl:value-of select="@max_len"/><xsl:text>)</xsl:text></xsl:if>
            <xsl:text>
</xsl:text>
            <xsl:apply-templates select="*"/>
            <xsl:text>end;
        
</xsl:text>
        </xsl:if>
    </xsl:template>

    <xsl:template match="EsdlRequest">
        <xsl:text>export t_</xsl:text><xsl:call-template name="output_ecl_name"/><xsl:text> := record</xsl:text>
        <xsl:if test="@ecl_base_type"><xsl:text> (</xsl:text><xsl:value-of select="@ecl_base_type"/><xsl:text>)</xsl:text></xsl:if>
        <xsl:if test="@max_len"><xsl:text>, MAXLENGTH (</xsl:text><xsl:value-of select="@max_len"/><xsl:text>)</xsl:text></xsl:if>
        <xsl:text>
</xsl:text>
        <xsl:apply-templates select="*"/>
        <xsl:text>end;
        
</xsl:text>
    </xsl:template>

    <xsl:template match="EsdlResponse">
        <xsl:text>export t_</xsl:text><xsl:call-template name="output_ecl_name"/><xsl:text> := record</xsl:text>
        <xsl:if test="@ecl_base_type"><xsl:text> (</xsl:text><xsl:value-of select="@ecl_base_type"/><xsl:text>)</xsl:text></xsl:if>
        <xsl:if test="@max_len"><xsl:text>, MAXLENGTH (</xsl:text><xsl:value-of select="@max_len"/><xsl:text>)</xsl:text></xsl:if>
        <xsl:text>
</xsl:text>
        <xsl:apply-templates select="*"/>
        <xsl:text>end;
        
</xsl:text>
    </xsl:template>


<xsl:template name="output_ecl_name">
<xsl:choose>
    <xsl:when test="@ecl_name"><xsl:value-of select="@ecl_name"/></xsl:when>
    <xsl:otherwise><xsl:value-of select="@name"/></xsl:otherwise>
</xsl:choose>

</xsl:template>

<xsl:template name="output_basic_type">
    <xsl:param name="basic_type" select="@type"/>
    <xsl:param name="size" select="@max_len"/>
    <xsl:choose>
        <xsl:when test="@ecl_type"><xsl:value-of select="@ecl_type"/></xsl:when>
        <xsl:when test="$basic_type='int'"><xsl:text>integer</xsl:text><xsl:value-of select="$size"/></xsl:when>
        <xsl:when test="$basic_type='long'"><xsl:text>integer4</xsl:text><xsl:value-of select="$size"/></xsl:when>
        <xsl:when test="$basic_type='short'"><xsl:text>integer2</xsl:text></xsl:when>
        <xsl:when test="$basic_type='bool'"><xsl:text>boolean</xsl:text></xsl:when>
        <xsl:when test="$basic_type='string'"><xsl:text>string</xsl:text><xsl:value-of select="$size"/></xsl:when>
        <xsl:when test="$basic_type='double'"><xsl:text>real8</xsl:text></xsl:when>
        <xsl:when test="$basic_type='float'"><xsl:text>real4</xsl:text></xsl:when>
        <xsl:when test="$basic_type='base64Binary'"><xsl:text>string</xsl:text></xsl:when>
        <xsl:otherwise><xsl:value-of select="$basic_type"/><xsl:value-of select="$size"/></xsl:otherwise>
    </xsl:choose>
</xsl:template>


</xsl:stylesheet>

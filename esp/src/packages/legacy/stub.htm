<!DOCTYPE html>
<html>

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="minimum-scale=1, initial-scale=1, width=device-width, shrink-to-fit=no" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <meta name="robots" content="noindex">
    <title>ECL Watch</title>
    <script src="/esp/files/node_modules/es6-promise/dist/es6-promise.auto.min.js"></script>
    <link rel="stylesheet" href="/esp/files/dist/font-awesome/css/font-awesome.min.css">
    <link rel="icon" type="image/png" href="/esp/files/img/favlogo.png">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500">
    <style>
        body {
            padding: 0px;
            margin: 0px;
            overflow: hidden;
        }
    </style>
    <script>
        //  Polyfills  ---
        if (typeof Object.assign !== 'function') {
            Object.defineProperty(Object, "assign", {
                value: function assign(target, varArgs) {
                    'use strict';
                    if (target === null || target === undefined) {
                        throw new TypeError('Cannot convert undefined or null to object');
                    }
                    var to = Object(target);
                    for (var index = 1; index < arguments.length; index++) {
                        var nextSource = arguments[index];
                        if (nextSource !== null && nextSource !== undefined) {
                            for (var nextKey in nextSource) {
                                if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
                                    to[nextKey] = nextSource[nextKey];
                                }
                            }
                        }
                    }
                    return to;
                },
                writable: true,
                configurable: true
            });
        }

        if (!Array.prototype.find) {
            Object.defineProperty(Array.prototype, 'find', {
                value: function (predicate) {
                    if (this == null) {
                        throw TypeError('"this" is null or not defined');
                    }
                    var o = Object(this);
                    var len = o.length >>> 0;
                    if (typeof predicate !== 'function') {
                        throw TypeError('predicate must be a function');
                    }
                    var thisArg = arguments[1];
                    var k = 0;
                    while (k < len) {
                        var kValue = o[k];
                        if (predicate.call(thisArg, kValue, k, o)) {
                            return kValue;
                        }
                        k++;
                    }
                    return undefined;
                },
                configurable: true,
                writable: true
            });
        }
    </script>
    <script type="text/javascript">
        getAuthType();
        function getAuthType() {
            if (document.cookie.indexOf("ESPSessionState=true") > -1) {
                checkCookie();
            } else if (document.cookie.indexOf("ESPSessionState=false") > -1) {
                window.location.href;
            } else {
                sendAuthRequest();
            }

            function checkCookie() {
                document.cookie.indexOf("ESPAuthenticated=true") > -1 ? window.location.href : window.location.href = location.origin + "/esp/files/Login.html";
            }

            function sendAuthRequest() {
                var xhttp = new XMLHttpRequest();
                xhttp.onload = function () {
                    var responseType = this.responseXML && this.responseXML.childNodes && this.responseXML.childNodes.length ? this.responseXML.childNodes[0].textContent : "None";
                    if (this.readyState == 4 && this.status == 200) {
                        switch (responseType) {
                            case 'Mixed':
                            case 'PerSessionOnly':
                                document.cookie = ("ESPSessionState=true");
                                break;
                            case 'PerRequestOnly':
                            case 'UserNameOnly':
                            case 'None':
                                document.cookie = ("ESPSessionState=false");
                                break;
                            default:
                                document.cookie = ("ESPSessionState=false");
                        }
                    } else {
                        document.cookie = ("ESPSessionState=false");
                        console.error('Authorization Request Error:  ' + this.status + ' ' + this.statusText);
                    }
                }
                xhttp.open('GET', '/esp/getauthtype', true);
                xhttp.send();
            }
        }
    </script>
</head>

<body class="flat">
    <!-- overlay -->
    <div id="SessionLock"></div>
    <div id="loadingOverlay" class="loadingOverlay pageOverlay"></div>
    <!-- application -->
    <script type="text/javascript" src="/esp/files/dist/stub.eclwatch.js" charset="utf-8"></script>
</body>

</html>
function add_comp_to_envxml()
{
    _comp=$1
    _default_name=$2
    env_in=$3
    env_out=$4

    # If nothing to process
    cp $env_in  $env_out

    [ ! -e ${ipDir}/${_comp}* ] && return

    index=1
    env_in_tmp=${env_in}
    env_out_tmp=${wkDir}/tmp/env_out_tmp_${index}.xml
    ls ${ipDir} | grep ${_comp}* | while read ip_file
    do
        name=$(echo ${ip_file} | cut -d '-' -s -f 2)
        [ -z "$name" ] && name=$_default_name
        cmd="$SUDOCMD ${HPCC_HOME}/sbin/envgen2 -env-in $env_in_tmp -env-out $env_out_tmp \
             -add-node ${_comp}#${name}@ipfile=${ipDir}/${ip_file}"

        comp_opts_var="$(echo "$ip_file" | tr 'a-z' 'A-Z' | tr '-' '_')_OPTS"
        comp_opts=${!comp_opts_var}
        [ -n "comp_opts" ] && cmd="$cmd -mod sw:${_comp}#${name}@${comp_opts}"

        inst_comp_opts_var="INSTANCE_${comp_opts_var}"
        inst_comp_opts=${!inst_comp_opts_var}
        [ -n "inst_comp_opts" ] && cmd="$cmd -mod sw:${_comp}#${name}:instance@${inst_comp_opts}"

        echo "$cmd"
        eval "$cmd"

        cp ${env_out_tmp}  ${env_out}

        index=$(expr $index \+ 1)
        env_in_tmp=${env_out_tmp}
        env_out_tmp=${wkDir}/tmp/env_out_tmp_${index}.xml
    done
}

function add_roxie_to_envxml()
{
    env_in=$1
    env_out=$2

    # If nothing to process
    cp $env_in  $env_out

    [ ! -e ${ipDir}/roxie* ] && return

    index=1
    env_in_tmp=${env_in}
    env_out_tmp=${wkDir}/tmp/env_out_tmp_${index}.xml_
    ls ${ipDir} | grep roxie* | while read ip_file
    do
        roxie_name=$(echo ${ip_file} | cut -d '-' -s -f 2)
        [ -z "$roxie_name" ] && roxie_name=myroxie

        # Add roxie nodes
        env_out_tmp=${wkDir}/tmp/env_roxie_${index}.xml
        echo "$SUDOCMD ${HPCC_HOME}/sbin/envgen2 -env-in $env_in_tmp -env-out ${env_out_tmp} \
             -add-node roxie#${roxie_name}@ipfile=${ipDir}/${ip_file}"
        $SUDOCMD ${HPCC_HOME}/sbin/envgen2 -env-in $env_in_tmp -env-out ${env_out_tmp} \
             -add-node roxie#${roxie_name}@ipfile=${ipDir}/${ip_file}

        cp ${env_out_tmp}  ${env_out}

        index=$(expr $index \+ 1)
        env_in_tmp=${env_out_tmp}
        env_out_tmp=${wkDir}/tmp/env_out_tmp_${index}.xml
    done
}

function add_thor_to_envxml()
{
    env_in=$1
    env_out=$2

    # If nothing to process
    cp $env_in  $env_out

    [ ! -e ${ipDir}/thor-* ] && return

    index=1
    master_index=1  # In chance no master thor provided and there are multiple support nodes
    env_in_tmp=${env_in}
    env_out_tmp=${wkDir}/tmp/env_out_tmp_${index}.xml
    ls ${ipDir} | grep thor-* | while read ip_file
    do
        thor_name=$(echo ${ip_file} | cut -d '-' -s -f 2)
        [ -z "$thor_name" ] && thor_name=mythor

        # Add thor master node
        if [ -e ${ipDir}/thormaster_${thor_name} ]
        then
           master_ip=$(cat ${ipDir}/thormaster_${thor_name}* | sed 's/;//g')
        else
           master_ip=$(cat ${ipDir}/support | head -n ${master_index} | tail -n 1 | sed 's/;//g')
           let master_index="($master_index + 1)  % ${support_nodes} + 1"
        fi

        # Add thor nodes

        cmd="$SUDOCMD ${HPCC_HOME}/sbin/envgen2 -env-in $env_in_tmp -env-out ${env_out_tmp}"
        cmd="$cmd -add-node thor#${thor_name}:master@ip=${master_ip}:slave@ipfile=${ipDir}/${ip_file}"

        #thor_name
        node_group_name=
        found=false
        for ng in $(echo $NODE_GROUP | tr ';' ' ')
        do
           ng_name=$(echo $ng | cut -d':' -f1)
           ng_body=$(echo $ng | cut -d':' -f2)
           for thor_name2 in $(echo $ng_body | tr ',' ' ')
           do
               if [ "$thor_name2" = "$thor_name" ]
               then
                  node_group_name=$ng_name
                  found=true
                  break
               fi
           done
           [ "$found" = "true" ] && break
        done
        [ -n "$node_group_name" ] && cmd="$cmd -mod sw:thor#${thor_name}@nodeGroup=${node_group_name}"

        echo "$cmd"
        eval "$cmd"

        cp ${env_out_tmp}  ${env_out}

        index=$(expr $index \+ 1)
        env_in_tmp=${env_out_tmp}
        env_out_tmp=${wkDir}/tmp/env_out_tmp_${index}.xml
    done
}

function create_topology()
{
    env_in=$1
    env_out=$2

    # If nothing to process
    cp $env_in  $env_out
    [ -z "$TOPOLOGY" ] && return

    if [ "$TOPOLOGY" = "default" ]
    then
        cmd="$SUDOCMD ${HPCC_HOME}/sbin/envgen2 -env-in $env_in -env-out ${env_out} -add-topology default"
        echo "$cmd"
        eval "$cmd"
        return
    fi

    env_in_tmp=${env_in}
    index=1
    env_out_tmp=${wkDir}/tmp/env_topo_tmp_${index}.xml
    for topology in $(echo $TOPOLOGY | tr '#' ' ')
    do
       #echo ""
       topo_name=$(echo $topology | cut -d'%' -f1)
       #echo "Topology name $topo_name"
       topo_body=$(echo $topology | cut -d'%' -f2)

       for cluster in $(echo $topo_body | tr ';' ' ')
       do
          cluster_name=$(echo $cluster | cut -d':' -f1)
          cluster_body=$(echo $cluster | cut -d':' -f2)
          #echo "  cluster name:  $cluster_name"

          cmd="$SUDOCMD ${HPCC_HOME}/sbin/envgen2 -env-in $env_in_tmp -env-out ${env_out_tmp} -add-topology ${topo_name}:cluster@name=${cluster_name}"
          for process in $(echo $cluster_body | tr ',' ' ')
          do
              process_tag=$(echo $process | cut -d'@' -f1)
              process_name=$(echo $process | cut -d'@' -f2)
              #echo "     process: $process_tag name: $process_name"
              cmd="${cmd}:${process_tag}@process=${process_name}"
          done

          echo "$cmd"
          eval "$cmd"

          cp ${env_out_tmp}  ${env_out}

          index=$(expr $index \+ 1)
          env_in_tmp=${env_out_tmp}
          env_out_tmp=${wkDir}/tmp/env_topo_tmp_${index}.xml
       done
    done
}

function collect_ips()
{
  mkdir -p $ipDir
  trials=3
  while [ $trials -gt 0 ]
  do
    [ $notGetIps -eq 0 ] &&  ${SCRIPT_DIR}/docker/get_ips.sh ${networkName}
    ${SCRIPT_DIR}/docker/CollectIPsFromDocker.py -d ${ipDir} -i /tmp/${cluster_ips}
    [ $? -eq 0 ] && break
    trials=$(expr $trials \- 1)
    sleep 5
  done
}

function process_category_settings()
{
   return
}

function process_override_settings()
{
   return
}

function process_xpathattrs_settings()
{
   return
}

function process_comp_settings()
{
   return
}

function add_xml_contents()
{
   return
}

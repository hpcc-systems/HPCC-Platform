#!/usr/bin/env python

'''
/*#############################################################################

    HPCC SYSTEMS software Copyright (C) 2012 HPCC Systems.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
############################################################################ */
'''

import argparse
import logging
import os

from hpcc.regression.regress import Regression
from hpcc.util.ecl.file import ECLFile

if __name__ == "__main__":
    prog = "regress"
    description = 'HPCC Platform Regression suite'
    parser = argparse.ArgumentParser(prog=prog, description=description)
    parser.add_argument('--version', '-v', action='version',
                        version='%(prog)s 0.0.1')
    parser.add_argument('--config', help="Config file to use.",
                        nargs='?', default="regress.json")
    parser.add_argument('--loglevel', help="Set the log level.",
                        nargs='?', default="info",
                        choices=['info', 'debug'])
    parser.add_argument('--suiteDir', '-s', help="suiteDir to use.",
                        nargs='?', default=".")
    subparsers = parser.add_subparsers(help='sub-command help')
    parser_list = subparsers.add_parser('list', help='list help')
    parser_list.add_argument('clusters', help="Print clusters from config.",
                             action='store_true')
    parser_run = subparsers.add_parser('run', help='run help')
    parser_run.add_argument('cluster', help="Run the cluster suite.",
                            nargs='?', default='setup')
    parser_query = subparsers.add_parser('query', help='query help')
    parser_query.add_argument('query', help="Run a single query.",
                              nargs='?')
    parser_query.add_argument('cluster', help="Cluster for single query run.",
                            nargs='?', default='thor')
    parser_query.add_argument('publish', help="Publish compiled query insted of run.",
                            nargs='?', default='False')
    args = parser.parse_args()

    suiteDir = ""
    if 'suiteDir' in args:
        suiteDir = args.suiteDir
    try:
        regress = Regression(args.config, args.loglevel, suiteDir)
        if 'clusters' in args:
            Clusters = ['setup']
            for cluster in regress.config.Clusters:
                Clusters.append(str(cluster))
            print "Avaliable Clusters: "
            for i in Clusters:
                print i
        if 'query' in args:
            ecl = os.path.join(regress.dir_ec, args.query)
            eclfile = ECLFile(ecl, regress.dir_a, regress.dir_ex,
                              regress.dir_r)
            if not eclfile.testSkip(args.cluster)['skip']:
                if not eclfile.testExclusion(args.cluster):
                    report = regress.buildLogging(args.query)
                    if (args.publish == 'publish') or eclfile.testPublish():
                        regress.runQuery(args.cluster, eclfile, report, 1, True)
                    else:
                        regress.runQuery(args.cluster, eclfile, report)
                    Regression.displayReport(report)
                else:
                    print args.query+" excluded on "+args.cluster+" cluster."
            else:
                print args.query+" skipped on "+args.cluster+" cluster."
        elif 'cluster' in args:
            regress.bootstrap(args.cluster)
            if 'setup' in args.cluster:
                regress.runSuite('setup', regress.setup)
            else:
                regress.runSuite(args.cluster, regress.suites[args.cluster])
    except Exception as e:
        logging.critical(e)
    except KeyboardInterrupt:
        logging.critical("Keyboard Interrupt Caught.")

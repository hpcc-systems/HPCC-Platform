/*##############################################################################

    HPCC SYSTEMS software Copyright (C) 2017 HPCC SystemsÂ®.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
############################################################################## */

// IMPORTANT: this test is generated by the perl script genjointest.pl, so do not edit it by hand

#option('convertJoinToLookup', 0);
#option('noAllToLookupConversion', 1);
#option('spanMultipleCpp', 1);

childrec := RECORD,MAXLENGTH(100)
    UNSIGNED1 i;
    STRING3 lstr;
    STRING3 rstr;
    UNSIGNED1 c;
    STRING label;
    BOOLEAN mpl := false;
    BOOLEAN ml := false;
    BOOLEAN mr := false;
    INTEGER1 vr := 0;
END;

childlhs := SORTED(DATASET([{3, 'aaa', '', 0, ''}, {4, 'bbb', '', 0, ''}, {5, 'ccc', '', 0, ''}, {6, 'ddd', '', 0, ''}, {7, 'eee', '', 0, ''}], childrec), i);
childrhs := SORTED(DATASET([{1, '', 'fff', 0, ''}, {3, '', 'ggg', 0, ''}, {5, '', 'hhh', 0, ''}, {5, '', 'iii', 0, ''}, {5, '', 'xxx', 0, ''}, {5, '', 'jjj', 0, ''}, {7, '', 'kkk', 0, ''}, {9, '', 'lll', 0, ''}, {9, '', 'mmm', 0, ''}], childrec), i);

jrec := RECORD,MAXLENGTH(100)
    UNSIGNED1 i;
    STRING3 lstr;
    STRING3 rstr;
    UNSIGNED1 c;
    STRING label;
    dataset(childrec) children;
    BOOLEAN ml := false;
    BOOLEAN mr := false;
    INTEGER1 vr := 0;
END;

lhs := SORTED(DATASET([{3, 'aaa', '', 0, '', childlhs}, {4, 'bbb', '', 0, '', childlhs}, {5, 'ccc', '', 0, '', childlhs}, {6, 'ddd', '', 0, '', childlhs}, {7, 'eee', '', 0, '', childlhs}], jrec), i);
rhs := SORTED(DATASET([{1, '', 'fff', 0, '', childrhs}, {3, '', 'ggg', 0, '', childrhs}, {5, '', 'hhh', 0, '', childrhs}, {5, '', 'iii', 0, '', childrhs}, {5, '', 'xxx', 0, '', childrhs}, {5, '', 'jjj', 0, '', childrhs}, {7, '', 'kkk', 0, '', childrhs}, {9, '', 'lll', 0, '', childrhs}, {9, '', 'mmm', 0, '', childrhs}], jrec), i);

trueval := true : stored('trueval');
falseval := false : stored('falseval');

BOOLEAN childmatch1(childrec l, childrec r) := (l.i = r.i);
BOOLEAN childmatch2(childrec l, childrec r) := (r.rstr < 'x');
BOOLEAN childmatch(childrec l, childrec r) := (childmatch1(l, r) AND childmatch2(l, r));

BOOLEAN match1(jrec l, jrec r) := (l.i = r.i);
BOOLEAN match2(jrec l, jrec r) := (r.rstr < 'x');
BOOLEAN match(jrec l, jrec r) := (match1(l, r) AND match2(l, r));

// transform for joins and non-group denormalizes, to be used with match
childrec xfmchild(jrec lparent, childrec l, jrec rparent, childrec r, STRING lab) := TRANSFORM
    SELF.i := l.i;
    SELF.lstr := l.lstr;
    SELF.rstr := r.rstr;
    SELF.c := l.c+1;
    SELF.label := lab;
    SELF.mpl := MATCHED(lparent);
    SELF.ml := MATCHED(l);
    SELF.mr := MATCHED(r);
    SELF.vr := IF (MATCHED(r), -1, 1);
END;

jrec xfm(jrec l, jrec r, STRING lab) := TRANSFORM
    SELF.i := l.i;
    SELF.lstr := l.lstr;
    SELF.rstr := r.rstr;
    SELF.c := l.c+1;
    SELF.label := lab;
    SELF.ml := MATCHED(l);
    SELF.mr := MATCHED(r);
    SELF.vr := IF (MATCHED(r), -1, 1);
    SELF.children := JOIN(l.children, r.children, childmatch(LEFT, RIGHT), xfmchild(l, LEFT, r, RIGHT, 'JOINCHILDREN'), FULL OUTER);
END;

join____FOU________ := JOIN(lhs, rhs, match(LEFT, RIGHT), xfm(LEFT, RIGHT, 'JOIN_FULL_OUTER'), FULL OUTER);
output(join____FOU________);


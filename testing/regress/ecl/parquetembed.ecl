//class=embedded
//class=file
//class=parquet
//version compressionType='UNCOMPRESSED'
//version compressionType='Snappy'
//version compressionType='GZip'
//version compressionType='Brotli'
//version compressionType='LZ4'
//version compressionType='ZSTD'
//version compressionType='UNCOMPRESSED',genericDiskRead=true,nothor,noroxie
//version compressionType='Snappy',genericDiskRead=true,nothor,noroxie
//version compressionType='GZip',genericDiskRead=true,nothor,noroxie
//version compressionType='Brotli',genericDiskRead=true,nothor,noroxie
//version compressionType='LZ4',genericDiskRead=true,nothor,noroxie
//version compressionType='ZSTD',genericDiskRead=true,nothor,noroxie

import ^ as root;
compressionType := #IFDEFINED(root.compressionType, 'UNCOMPRESSED');
genericDiskRead := #IFDEFINED(root.genericDiskRead, FALSE);

//--- end of version configuration ---

IMPORT Parquet;

// Test datatypes
SEQUENTIAL(
PARALLEL(
    ParquetIO.write(DATASET([{000, 'aaa', 0},
                             {001, 'aab', false},
                             {002, 'aac', 1},
                             {003, 'aad', true},
                             {004, 'aae', 9872},
                             {005, 'aaf', -1235},
                             {006, 'aag', TRUE},
                             {007, 'aah', FALSE},
                             {008, 'aai',  'abc'},
                             {009, 'aaj', '0'}], {UNSIGNED testid, STRING3 testname, BOOLEAN value}), '/tmp/BooleanTest.parquet', TRUE, compressionType),
    ParquetIO.write(DATASET([{010, 'aai', 123},
                             {011, 'aaj', -987},
                             {012, 'aak', 0},
                             {013, 'aal', 42},
                             {014, 'aam', -500},
                             {015, 'aan', 999},
                             {016, 'aao', 7},
                             {017, 'aap', -12345},
                             {018, 'aaq', 987654},
                             {019, 'aar', 1000000}], {UNSIGNED testid, STRING3 testname, INTEGER value}), '/tmp/IntegerTest.parquet', TRUE, compressionType),
    ParquetIO.write(DATASET([{020, 'aas', 3.14},
                             {021, 'aat', -0.5},
                             {022, 'aau', 123.456},
                             {023, 'aav', -987.654},
                             {024, 'aaw', 0.001},
                             {025, 'aax', 999.99},
                             {026, 'aay', 7.5},
                             {027, 'aaz', -1234.5678},
                             {028, 'aba', 98765.4321},
                             {029, 'abb', 0.00001}], {UNSIGNED testid, STRING3 testname, REAL value}), '/tmp/RealTest.parquet', TRUE, compressionType),
    ParquetIO.write(DATASET([{030, 'abc', 123.456789},
                             {031, 'abd', -987.654321},
                             {032, 'abe', 0.000001},
                             {033, 'abf', 42.424242},
                             {034, 'abg', -500.50505},
                             {035, 'abh', 999.999999},
                             {036, 'abi', 7.777777},
                             {037, 'abj', -12345.6789},
                             {038, 'abk', 987654.321},
                             {039, 'abl', 0.0000001}], {UNSIGNED testid, STRING3 testname, DECIMAL value}), '/tmp/DecimalTest.parquet', TRUE, compressionType),
    ParquetIO.write(DATASET([{040, 'abm', 'Hello, World!'},
                             {041, 'abn', 'Data Science'},
                             {042, 'abo', '12345'},
                             {043, 'abp', 'Python is fun!'},
                             {044, 'abq', 'Strings rock!'},
                             {045, 'abr', 'Testing 1, 2, 3...'},
                             {046, 'abs', 'Let\'s code!'},
                             {047, 'abt', 'Strings and more strings'},
                             {048, 'abu', '\251\252\253\253\256'},
                             {049, 'abv', 'Special characters: !@#$%^&*'}], {UNSIGNED testid, STRING3 testname, STRING value}), '/tmp/StringTest.parquet', TRUE, compressionType),
    ParquetIO.write(DATASET([{050, 'abw', 'This is a "Q" string.'},
                             {051, 'abx', 'Another "example" here.'},
                             {052, 'aby', 'Qstrings are useful!'},
                             {053, 'abz', 'Escaping quotes: \\"'},
                             {054, 'aca', 'special characters ! " # $'},
                             {055, 'acb', 'testing string'},
                             {056, 'acc', 'Qstrings rock!'},
                             {057, 'acd', 'Testing "()*+,-)" characters.'},
                             {058, 'ace', '!"#$&\'()*+,-./;<>_[\\]'},
                             {059, 'acf', '<@@[[[[\'\\\'\\\'\'\\]]]]'}], {UNSIGNED testid, STRING3 testname, QSTRING value}), '/tmp/QStringTest.parquet', TRUE, compressionType),
    ParquetIO.write(DATASET([{060, 'acg', U'こんにちは、世界！'},
                             {061, 'ach', U'Unicode characters: ḸḹḾ'},
                             {062, 'aci', U'Ṏ Beautiful Unicode Ṙ'},
                             {063, 'acj', U'Unicode is fascinating!'},
                             {064, 'ack', U'Ṙ Unicode Symbols ẫ'},
                             {065, 'acl', U'Special characters: ©®™'},
                             {066, 'acm', U'Unicode magic ⊗⊘⊙⊚⊛⊜⊝'},
                             {067, 'acn', U'Testing Unicode: ⋖⋗⋙⋚⋛⋜⋝'},
                             {068, 'aco', U'∭∮∯ More Unicode Fun ∐∑−∓∔'},
                             {069, 'acp', U'∆∇∈∉∊∋∌ Unicode Everywhere ⋸⋹⋺⋻'}], {UNSIGNED testid, STRING3 testname, UNICODE value}), '/tmp/UnicodeTest.parquet', TRUE, compressionType),
    ParquetIO.write(DATASET([{070, 'acq', U'Café au lait ☕'},
                             {071, 'acr', U'🎉 UTF-8 Characters 🎉'},
                             {072, 'acs', U'Special characters: ©®™'},
                             {073, 'act', U'UTF-8 magic ✨'},
                             {074, 'acu', U'🌟 More UTF-8 Fun 🌟'},
                             {075, 'acv', U'Testing UTF-8: 💡🔍🌐'},
                             {076, 'acw', U'🌟 UTF-8 Everywhere 🌟'},
                             {077, 'acx', U'UTF-8 is versatile!'},
                             {078, 'acy', U'UTF-8 for the win!'},
                             {079, 'acz', U'🌟 UTF-8 Symbols 🌟'}], {UNSIGNED testid, STRING3 testname, UTF8 value}), '/tmp/UTF8Test.parquet', TRUE, compressionType),
    ParquetIO.write(DATASET([{080, 'ada', x'01a48d8414d848e900'},
                             {081, 'adb', x'01f48ab446a76f8923'},
                             {082, 'adc', x'01a48ec793a76f9400'},
                             {083, 'add', x'01a48ecd6e65d8e803'},
                             {084, 'ade', x'01a48ed1bb70d84c01'},
                             {085, 'adf', x'01a48ed8f40385ba01'},
                             {086, 'adg', x'01a4901558d7c91900'},
                             {087, 'adh', x'01a490101d3de9ac02'},
                             {088, 'adi', x'01a49155d1caf41500'},
                             {089, 'adj', x'01a49156089fce5a02'}], {UNSIGNED testid, STRING3 testname, DATA value}), '/tmp/DataTest.parquet', TRUE, compressionType),
    ParquetIO.write(DATASET([{090, 'adk', U'Short text'},
                             {091, 'adl', U'A longer variable-length string'},
                             {092, 'adm', U'Strings are flexible!'},
                             {093, 'adn', U'Variable-length strings rock!'},
                             {094, 'ado', U'Testing varstrings: \251\252'},
                             {095, 'adp', U'Varstrings everywhere!'},
                             {096, 'adq', U'%$ More Varstring Fun ^*'},
                             {097, 'adr', U'Varstrings for the win!'},
                             {098, 'ads', U'Varstrings galore!'},
                             {099, 'adt', U'*** Varstring Universe ***'}], {UNSIGNED testid, STRING3 testname, VARSTRING value}), '/tmp/VarstringTest.parquet', TRUE, compressionType),
    ParquetIO.write(DATASET([{100, 'adu', U'Variable-length Unicode: こんにちは、世界！'},
                             {101, 'adv', U'🌟 Variable-length Unicode Symbols 🌟'},
                             {102, 'adw', U'Unicode flexibility is awesome!'},
                             {103, 'adx', U'Testing varunicodes: 🌈🌐'},
                             {104, 'ady', U'Varunicodes everywhere!'},
                             {105, 'adz', U'🌟 More Varunicode Fun 🌟'},
                             {106, 'aea', U'Varunicodes for the win!'},
                             {107, 'aeb', U'Varunicodes galore!'},
                             {108, 'aec', U'🌟 Varunicode Universe 🌟'},
                             {109, 'aed', U'🌟 Varunicode Magic 🌟'}], {UNSIGNED testid, STRING3 testname, VARUNICODE value}), '/tmp/VarunicodeTest.parquet', TRUE, compressionType),
    ParquetIO.write(DATASET([{110, 'aee', [true]},
                             {111, 'aef', [false]},
                             {112, 'aeg', [true, false, true, false, true]},
                             {113, 'aeh', [true, true, true, true, false]},
                             {114, 'aei', [true, true, false, true, true]}], {UNSIGNED testid, STRING3 testname, SET OF BOOLEAN value}), '/tmp/SetofBooleanTest.parquet', TRUE, compressionType),
    ParquetIO.write(DATASET([{115, 'aej', [42]},
                             {116, 'aek', [-10]},
                             {117, 'ael', [0,34,367,-12]},
                             {118, 'aem', [100,89,12]},
                             {119, 'aen', [1,2,3,4,5]}], {UNSIGNED testid, STRING3 testname, SET OF INTEGER value}), '/tmp/SetofIntegerTest.parquet', TRUE, compressionType),
    ParquetIO.write(DATASET([{120, 'aeo', [3.14, -2.718]},
                             {121, 'aep', [0.0]},
                             {122, 'aeq', [2.5, -0.5, 1.618]},
                             {123, 'aer', [7.77, -3.33]},
                             {124, 'aes', [4.2, 9.99, 3.1415926]}], {UNSIGNED testid, STRING3 testname, SET OF REAL value}), '/tmp/SetofRealTest.parquet', TRUE, compressionType),
    ParquetIO.write(DATASET([{125, 'aej', [1.23456789]},
                             {126, 'aek', [3.14159265, 2.71828183]},
                             {127, 'ael', [0.0, -1.23456789, -0.98765432]},
                             {128, 'aem', [0.12345678, -0.12345678, 19.12389555]},
                             {129, 'aen', [9.87654321, -5.43210987]}], {UNSIGNED testid, STRING3 testname, SET OF DECIMAL value}), '/tmp/SetofDecimalTest.parquet', TRUE, compressionType),
    ParquetIO.write(DATASET([{130, 'aeo', ['Hello', 'World']},
                             {131, 'aep', ['Parquet']},
                             {132, 'aeq', ['SET', 'OF', 'Test']},
                             {133, 'aer', ['String', 'Data', 'ECL']},
                             {134, 'aes', ['string', 'STRING']}], {UNSIGNED testid, STRING3 testname, SET OF STRING value}), '/tmp/SetofStringTest.parquet', TRUE, compressionType),
    ParquetIO.write(DATASET([{135, 'aet', ['"QString 1"']},
                             {136, 'aeu', ['akjdcna', '(&*^%$)']},
                             {137, 'aev', ['slk0934', '32415', '123vder']},
                             {138, 'aew', ['(*^&^&%$)', '^%$#']},
                             {139, 'aex', ['!@*^$', '1234754']}], {UNSIGNED testid, STRING3 testname, SET OF QSTRING value}), '/tmp/SetofQStringTest.parquet', TRUE, compressionType),
    ParquetIO.write(DATASET([{140, 'aey', [U'こんにちは、世界！']},
                             {141, 'aez', [U'Unicode flexibility is awesome!', U'Testing unicodes: 🌈🌐']},
                             {142, 'afa', [U'🌟 UTF8 Universe 🌟', U'Unicodes everywhere!', U'🌟 More Unicode Fun 🌟']},
                             {143, 'afb', [U'Unicodes for the win!', U'Unicodes galore!', U'🌟 Unicode Symbols 🌟']},
                             {144, 'afc', [U'🌟 Unicode Universe 🌟', U'🌟 Unicode Magic 🌟']}], {UNSIGNED testid, STRING3 testname, SET OF UNICODE value}), '/tmp/SetofUnicodeTest.parquet', TRUE, compressionType),
    ParquetIO.write(DATASET([{145, 'afd', [U'こんにちは、世界！', U'🌟 UTF8 Symbols 🌟', U'🌟 More UTF8 Fun 🌟']},
                             {146, 'afe', [U'UTF8 flexibility is awesome!', U'Testing utf8: 🌈🌐']},
                             {147, 'aff', [U'UTF8 everywhere!']},
                             {148, 'afg', [U'UTF8 for the win!', U'UTF8 galore!']},
                             {149, 'afh', [U'🌟 UTF8 Magic 🌟']}], {UNSIGNED testid, STRING3 testname, SET OF UTF8 value}), '/tmp/SetofUTF8Test.parquet', TRUE, compressionType),
    ParquetIO.write(DATASET([{150, 'afi', [x'01a48d8414d848e900', x'01a48ec793a76f9400', x'01a48ed1bb70d84c01', x'01a4901558d7c91900']},
                             {151, 'afj', [x'01f48ab446a76f8923', x'01a48ecd6e65d8e803', x'01a49156089fce5a02']},
                             {152, 'afk', [x'01a48d8414d848e900', x'01a48ec793a76f9400']},
                             {153, 'afl', [x'01f48ab446a76f8923']},
                             {154, 'afm', [x'01a48d8414d848e900', x'01a48ec793a76f9400', x'01a48ed8f40385ba01']}], {UNSIGNED testid, STRING3 testname, SET OF DATA value}), '/tmp/SetofDataTest.parquet', TRUE, compressionType),
    ParquetIO.write(DATASET([{155, 'afo', ['Hello', 'World']},
                             {156, 'afp', ['Parquet']},
                             {157, 'afq', ['SET', 'OF', 'Test']},
                             {158, 'afr', ['String', 'Data', 'ECL']},
                             {159, 'afs', ['string', 'STRING']}], {UNSIGNED testid, STRING3 testname, SET OF VARSTRING value}), '/tmp/SetofVarstringTest.parquet', TRUE, compressionType),
    ParquetIO.write(DATASET([{160, 'aft', [U'こんにちは、世界！']},
                             {161, 'afu', [U'Unicode flexibility is awesome!', U'Testing unicodes: 🌈🌐']},
                             {162, 'afv', [U'🌟 UTF8 Universe 🌟', U'Unicodes everywhere!', U'🌟 More Unicode Fun 🌟']},
                             {163, 'afw', [U'Unicodes for the win!', U'Unicodes galore!', U'🌟 Unicode Symbols 🌟']},
                             {164, 'afx', [U'🌟 Unicode Universe 🌟', U'🌟 Unicode Magic 🌟']}], {UNSIGNED testid, STRING3 testname, SET OF VARUNICODE value}), '/tmp/SetofVarunicodeTest.parquet', TRUE, compressionType),
    ParquetIO.write(DATASET([{165, 'afy', {true, 42, 3.14, 1.23456789, 'Hello', 'QString', U'こんにちは、世界！', U'🌟 UTF8 Symbols 🌟', x'01010101', [1, 2, 3]}},
                             {166, 'afz', {false, -10, -2.718, -0.98765432, 'World', 'AnotherQString', U'こんばんは、世界！', U'🌟 More UTF8 Fun 🌟', x'FF00FF00', [4, 5, 6]}},
                             {167, 'aga', {true, 0, 0.0, 0.0, 'Parquet', 'YetAnotherQString', U'おはよう、世界！', U'🌟 Unicode Magic 🌟', x'AABBCCDD', [7, 8, 9]}},
                             {168, 'agb', {false, 100, 1.618, 2.5, 'ECL', 'LastQString', U'こんばんは、日本！', U'🌟 Unicode Universe 🌟', x'12345678', [10, 11, 12]}},
                             {169, 'agc', {true, -5, -0.5, 3.14159265, 'SET', 'FinalQString', U'おやすみ、世界！', U'🌟 More Unicode Fun 🌟', x'FEDCBA98', [13, 14, 15]}},
                             {170, 'agd', {false, 7, 7.77, 0.12345678, 'Test', 'OneMoreQString', U'さようなら、世界！', U'🌟 Unicode Symbols 🌟', x'12345678', [16, 17, 18]}},
                             {171, 'age', {true, -20, -3.33, 8.88, 'String', 'FinalQString', U'おやすみ、日本！', U'🌟 UTF8 Symbols 🌟', x'FEDCBA98', [19, 20, 21]}},
                             {172, 'agf', {false, 15, 4.2, 0.123, 'Data', 'YetAnotherQString', U'おはよう、日本！', U'🌟 Unicode Magic 🌟', x'12345678', [22, 23, 24]}},
                             {173, 'agg', {true, 8, 9.99, -0.12345678, 'Varstring', 'AnotherQString', U'こんにちは、日本！', U'🌟 More UTF8 Fun 🌟', x'FEDCBA98', [25, 26, 27]}},
                             {174, 'agh', {false, 0, -7.77, 0.123, 'Unicode', 'LastQString', U'さようなら、日本！', U'🌟 Unicode Universe 🌟', x'12345678', [28, 29, 30]}}], {UNSIGNED testid, STRING3 testname, {BOOLEAN b, INTEGER i, REAL r, DECIMAL de, STRING s, QSTRING q, UNICODE u, UTF8 u8, DATA da, SET OF INTEGER soi} value}), '/tmp/ChildDatasetTest.parquet', TRUE, compressionType),
    ParquetIO.write(DATASET([{175, 'agi', {true, 42, 3.14, 1.23456789, 'Hello', 'QString', U'こんにちは、世界！', U'🌟 UTF8 Symbols 🌟', x'01010101', [1, 2, 3]}},
                             {176, 'agj', {false, -10, -2.718, -0.98765432, 'World', 'AnotherQString', U'こんばんは、世界！', U'🌟 More UTF8 Fun 🌟', x'FF00FF00', [4, 5, 6]}},
                             {177, 'agk', {false, 15, 4.2, 0.123, 'Data', 'YetAnotherQString', U'おはよう、日本！', U'🌟 Unicode Magic 🌟', x'12345678', [22, 23, 24]}},
                             {178, 'agl', {true, 8, 9.99, -0.12345678, 'Varstring', 'AnotherQString', U'こんにちは、日本！', U'🌟 More UTF8 Fun 🌟', x'FEDCBA98', [25, 26, 27]}},
                             {179, 'agm', {false, 0, -7.77, 0.123, 'Unicode', 'LastQString', U'さようなら、日本！', U'🌟 Unicode Universe 🌟', x'12345678', [28, 29, 30]}}], {UNSIGNED testid, STRING3 testname, {BOOLEAN b {XPATH('B')}, INTEGER i {XPATH('I')}, REAL r {XPATH('R')}, DECIMAL de {XPATH('DE')}, STRING s {XPATH('S')}, QSTRING q {XPATH('Q')}, UNICODE u {XPATH('U')}, UTF8 u8 {XPATH('U8')}, DATA da {XPATH('DA')}, SET OF INTEGER soi {XPATH('SOI')}} value}), '/tmp/xpathTest1.parquet', TRUE, compressionType),
    ParquetIO.write(DATASET([{180, 'agn', true, 42, 3.14, 1.23456789, 'Hello', 'QString', U'こんにちは、世界！', U'🌟 UTF8 Symbols 🌟', x'01010101', [1, 2, 3]},
                             {181, 'ago', false, -10, -2.718, -0.98765432, 'World', 'AnotherQString', U'こんばんは、世界！', U'🌟 More UTF8 Fun 🌟', x'FF00FF00', [4, 5, 6]},
                             {182, 'agp', false, 15, 4.2, 0.123, 'Data', 'YetAnotherQString', U'おはよう、日本！', U'🌟 Unicode Magic 🌟', x'12345678', [22, 23, 24]},
                             {183, 'agq', true, 8, 9.99, -0.12345678, 'Varstring', 'AnotherQString', U'こんにちは、日本！', U'🌟 More UTF8 Fun 🌟', x'FEDCBA98', [25, 26, 27]},
                             {184, 'agr', false, 0, -7.77, 0.123, 'Unicode', 'LastQString', U'さようなら、日本！', U'🌟 Unicode Universe 🌟', x'12345678', [28, 29, 30]}], {UNSIGNED testid, STRING3 testname, BOOLEAN b {XPATH('B')}, INTEGER i {XPATH('I')}, REAL r {XPATH('R')}, DECIMAL de {XPATH('DE')}, STRING s {XPATH('S')}, QSTRING q {XPATH('Q')}, UNICODE u {XPATH('U')}, UTF8 u8 {XPATH('U8')}, DATA da {XPATH('DA')}, SET OF INTEGER soi {XPATH('SOI')}}), '/tmp/xpathTest2.parquet', TRUE)
),
PARALLEL(
#IF(NOT genericDiskRead)
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; BOOLEAN value}, '/tmp/BooleanTest.parquet'), NAMED('BooleanTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; INTEGER value}, '/tmp/IntegerTest.parquet'), NAMED('IntegerTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; REAL value}, '/tmp/RealTest.parquet'), NAMED('RealTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; DECIMAL value}, '/tmp/DecimalTest.parquet'), NAMED('DecimalTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; STRING value}, '/tmp/StringTest.parquet'), NAMED('StringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; QSTRING value}, '/tmp/QStringTest.parquet'), NAMED('QStringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; UNICODE value}, '/tmp/UnicodeTest.parquet'), NAMED('UnicodeTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; UTF8 value}, '/tmp/UTF8Test.parquet'), NAMED('UTF8Test')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; DATA value}, '/tmp/DataTest.parquet'), NAMED('DataTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; VARSTRING value}, '/tmp/VarstringTest.parquet'), NAMED('VarstringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; VARUNICODE value}, '/tmp/VarunicodeTest.parquet'), NAMED('VarunicodeTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF BOOLEAN value}, '/tmp/SetofBooleanTest.parquet'), NAMED('SetofBooleanTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF INTEGER value}, '/tmp/SetofIntegerTest.parquet'), NAMED('SetofIntegerTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF REAL value}, '/tmp/SetofRealTest.parquet'), NAMED('SetofRealTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF DECIMAL value}, '/tmp/SetofDecimalTest.parquet'), NAMED('SetofDecimalTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF STRING value}, '/tmp/SetofStringTest.parquet'), NAMED('SetofStringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF QSTRING value}, '/tmp/SetofQStringTest.parquet'), NAMED('SetofQStringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF UNICODE value}, '/tmp/SetofUnicodeTest.parquet'), NAMED('SetofUnicodeTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF UTF8 value}, '/tmp/SetofUTF8Test.parquet'), NAMED('SetofUTF8Test')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF DATA value}, '/tmp/SetofDataTest.parquet'), NAMED('SetofDataTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF VARSTRING value}, '/tmp/SetofVarstringTest.parquet'), NAMED('SetofVarstringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; SET OF VARUNICODE value}, '/tmp/SetofVarunicodeTest.parquet'), NAMED('SetofVarunicodeTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; {BOOLEAN b; INTEGER i; REAL r; DECIMAL de; STRING s; QSTRING q; UNICODE u; UTF8 u8; DATA da; SET OF INTEGER soi} value}, '/tmp/ChildDatasetTest.parquet'), NAMED('ChildDatasetTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; {BOOLEAN b {XPATH('B')}; INTEGER i {XPATH('I')}; REAL r {XPATH('R')}; DECIMAL de {XPATH('DE')}; STRING s {XPATH('S')}; QSTRING q {XPATH('Q')}; UNICODE u {XPATH('U')}; UTF8 u8 {XPATH('U8')}; DATA da {XPATH('DA')}; SET OF INTEGER soi {XPATH('SOI')}} value}, '/tmp/xpathTest1.parquet'), NAMED('XPathTest1')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; BOOLEAN b {XPATH('B')}; INTEGER i {XPATH('I')}; REAL r {XPATH('R')}; DECIMAL de {XPATH('DE')}; STRING s {XPATH('S')}; QSTRING q {XPATH('Q')}; UNICODE u {XPATH('U')}; UTF8 u8 {XPATH('U8')}; DATA da {XPATH('DA')}; SET OF INTEGER soi {XPATH('SOI')}}, '/tmp/xpathTest2.parquet'), NAMED('XPathTest2')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; INTEGER value}, '/tmp/BooleanTest.parquet'), NAMED('BooleanToIntegerTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; REAL value}, '/tmp/BooleanTest.parquet'), NAMED('BooleanToRealTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; DECIMAL value}, '/tmp/BooleanTest.parquet'), NAMED('BooleanToDecimalTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; STRING value}, '/tmp/BooleanTest.parquet'), NAMED('BooleanToStringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; QSTRING value}, '/tmp/BooleanTest.parquet'), NAMED('BooleanToQStringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; UNICODE value}, '/tmp/BooleanTest.parquet'), NAMED('BooleanToUnicodeTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; UTF8 value}, '/tmp/BooleanTest.parquet'), NAMED('BooleanToUTF8Test')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; DATA value}, '/tmp/BooleanTest.parquet'), NAMED('BooleanToDataTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; BOOLEAN value}, '/tmp/IntegerTest.parquet'), NAMED('IntegerToIntegerTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; REAL value}, '/tmp/IntegerTest.parquet'), NAMED('IntegerToRealTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; DECIMAL value}, '/tmp/IntegerTest.parquet'), NAMED('IntegerToDecimalTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; STRING value}, '/tmp/IntegerTest.parquet'), NAMED('IntegerToStringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; QSTRING value}, '/tmp/IntegerTest.parquet'), NAMED('IntegerToQStringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; UNICODE value}, '/tmp/IntegerTest.parquet'), NAMED('IntegerToUnicodeTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; UTF8 value}, '/tmp/IntegerTest.parquet'), NAMED('IntegerToUTF8Test')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; DATA value}, '/tmp/IntegerTest.parquet'), NAMED('IntegerToDataTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; INTEGER value}, '/tmp/RealTest.parquet'), NAMED('RealToIntegerTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; BOOLEAN value}, '/tmp/RealTest.parquet'), NAMED('RealToBooleanTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; DECIMAL value}, '/tmp/RealTest.parquet'), NAMED('RealToDecimalTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; STRING value}, '/tmp/RealTest.parquet'), NAMED('RealToStringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; QSTRING value}, '/tmp/RealTest.parquet'), NAMED('RealToQStringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; UNICODE value}, '/tmp/RealTest.parquet'), NAMED('RealToUnicodeTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; UTF8 value}, '/tmp/RealTest.parquet'), NAMED('RealToUTF8Test')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; DATA value}, '/tmp/RealTest.parquet'), NAMED('RealToDataTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; INTEGER value}, '/tmp/DecimalTest.parquet'), NAMED('DecimalToIntegerTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; REAL value}, '/tmp/DecimalTest.parquet'), NAMED('DecimalToRealTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; BOOLEAN value}, '/tmp/DecimalTest.parquet'), NAMED('DecimalToBooleanTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; STRING value}, '/tmp/DecimalTest.parquet'), NAMED('DecimalToStringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; QSTRING value}, '/tmp/DecimalTest.parquet'), NAMED('DecimalToQStringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; UNICODE value}, '/tmp/DecimalTest.parquet'), NAMED('DecimalToUnicodeTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; UTF8 value}, '/tmp/DecimalTest.parquet'), NAMED('DecimalToUTF8Test')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; DATA value}, '/tmp/DecimalTest.parquet'), NAMED('DecimalToDataTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; INTEGER value}, '/tmp/StringTest.parquet'), NAMED('StringToIntegerTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; REAL value}, '/tmp/StringTest.parquet'), NAMED('StringToRealTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; DECIMAL value}, '/tmp/StringTest.parquet'), NAMED('StringToDecimalTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; BOOLEAN value}, '/tmp/StringTest.parquet'), NAMED('StringToBooleanTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; QSTRING value}, '/tmp/StringTest.parquet'), NAMED('StringToQStringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; UNICODE value}, '/tmp/StringTest.parquet'), NAMED('StringToUnicodeTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; UTF8 value}, '/tmp/StringTest.parquet'), NAMED('StringToUTF8Test')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; DATA value}, '/tmp/StringTest.parquet'), NAMED('StringToDataTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; INTEGER value}, '/tmp/QStringTest.parquet'), NAMED('QStringToIntegerTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; REAL value}, '/tmp/QStringTest.parquet'), NAMED('QStringToRealTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; DECIMAL value}, '/tmp/QStringTest.parquet'), NAMED('QStringToDecimalTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; STRING value}, '/tmp/QStringTest.parquet'), NAMED('QStringToStringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; BOOLEAN value}, '/tmp/QStringTest.parquet'), NAMED('QStringToBooleanTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; UNICODE value}, '/tmp/QStringTest.parquet'), NAMED('QStringToUnicodeTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; UTF8 value}, '/tmp/QStringTest.parquet'), NAMED('QStringToUTF8Test')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; DATA value}, '/tmp/QStringTest.parquet'), NAMED('QStringToDataTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; INTEGER value}, '/tmp/UnicodeTest.parquet'), NAMED('UnicodeToIntegerTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; REAL value}, '/tmp/UnicodeTest.parquet'), NAMED('UnicodeToRealTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; DECIMAL value}, '/tmp/UnicodeTest.parquet'), NAMED('UnicodeToDecimalTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; STRING value}, '/tmp/UnicodeTest.parquet'), NAMED('UnicodeToStringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; QSTRING value}, '/tmp/UnicodeTest.parquet'), NAMED('UnicodeToQStringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; BOOLEAN value}, '/tmp/UnicodeTest.parquet'), NAMED('UnicodeToUnicodeTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; UTF8 value}, '/tmp/UnicodeTest.parquet'), NAMED('UnicodeToUTF8Test')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; DATA value}, '/tmp/UnicodeTest.parquet'), NAMED('UnicodeToDataTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; INTEGER value}, '/tmp/UTF8Test.parquet'), NAMED('UTF8ToIntegerTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; REAL value}, '/tmp/UTF8Test.parquet'), NAMED('UTF8ToRealTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; DECIMAL value}, '/tmp/UTF8Test.parquet'), NAMED('UTF8ToDecimalTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; STRING value}, '/tmp/UTF8Test.parquet'), NAMED('UTF8ToStringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; QSTRING value}, '/tmp/UTF8Test.parquet'), NAMED('UTF8ToQStringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; UNICODE value}, '/tmp/UTF8Test.parquet'), NAMED('UTF8ToUnicodeTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; BOOLEAN value}, '/tmp/UTF8Test.parquet'), NAMED('UTF8ToBooleanTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; DATA value}, '/tmp/UTF8Test.parquet'), NAMED('UTF8ToDataTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; INTEGER value}, '/tmp/DataTest.parquet'), NAMED('DataToIntegerTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; REAL value}, '/tmp/DataTest.parquet'), NAMED('DataToRealTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; DECIMAL value}, '/tmp/DataTest.parquet'), NAMED('DataToDecimalTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; STRING value}, '/tmp/DataTest.parquet'), NAMED('DataToStringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; QSTRING value}, '/tmp/DataTest.parquet'), NAMED('DataToQStringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; UNICODE value}, '/tmp/DataTest.parquet'), NAMED('DataToUnicodeTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; UTF8 value}, '/tmp/DataTest.parquet'), NAMED('DataToUTF8Test')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; BOOLEAN value}, '/tmp/DataTest.parquet'), NAMED('DataToBooleanTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; BOOLEAN value}, '/tmp/VarstringTest.parquet'), NAMED('VarstringToBooleanTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; INTEGER value}, '/tmp/VarstringTest.parquet'), NAMED('VarstringToIntegerTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; REAL value}, '/tmp/VarstringTest.parquet'), NAMED('VarstringToRealTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; DECIMAL value}, '/tmp/VarstringTest.parquet'), NAMED('VarstringToDecimalTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; STRING value}, '/tmp/VarstringTest.parquet'), NAMED('VarstringToStringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; QSTRING value}, '/tmp/VarstringTest.parquet'), NAMED('VarstringToQStringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; UNICODE value}, '/tmp/VarstringTest.parquet'), NAMED('VarstringToUnicodeTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; UTF8 value}, '/tmp/VarstringTest.parquet'), NAMED('VarstringToUTF8Test')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; DATA value}, '/tmp/VarstringTest.parquet'), NAMED('VarstringToDataTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; BOOLEAN value}, '/tmp/VarunicodeTest.parquet'), NAMED('VarunicodeToBooleanTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; INTEGER value}, '/tmp/VarunicodeTest.parquet'), NAMED('VarunicodeToIntegerTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; REAL value}, '/tmp/VarunicodeTest.parquet'), NAMED('VarunicodeToRealTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; DECIMAL value}, '/tmp/VarunicodeTest.parquet'), NAMED('VarunicodeToDecimalTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; STRING value}, '/tmp/VarunicodeTest.parquet'), NAMED('VarunicodeToStringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; QSTRING value}, '/tmp/VarunicodeTest.parquet'), NAMED('VarunicodeToQStringTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; UNICODE value}, '/tmp/VarunicodeTest.parquet'), NAMED('VarunicodeToUnicodeTest')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; UTF8 value}, '/tmp/VarunicodeTest.parquet'), NAMED('VarunicodeToUTF8Test')),
    OUTPUT(ParquetIO.read({UNSIGNED testid; STRING3 testname; DATA value}, '/tmp/VarunicodeTest.parquet'), NAMED('VarunicodeToDataTest'))
#ELSE
    OUTPUT(DATASET('~file::.::tmp::^Boolean^Test.parquet', {UNSIGNED testid; STRING3 testname; BOOLEAN value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('BooleanTest')),
    OUTPUT(DATASET('~file::.::tmp::^Integer^Test.parquet', {UNSIGNED testid; STRING3 testname; INTEGER value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('IntegerTest')),
    OUTPUT(DATASET('~file::.::tmp::^Real^Test.parquet', {UNSIGNED testid; STRING3 testname; REAL value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('RealTest')),
    OUTPUT(DATASET('~file::.::tmp::^Decimal^Test.parquet', {UNSIGNED testid; STRING3 testname; DECIMAL value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('DecimalTest')),
    OUTPUT(DATASET('~file::.::tmp::^String^Test.parquet', {UNSIGNED testid; STRING3 testname; STRING value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('StringTest')),
    OUTPUT(DATASET('~file::.::tmp::^Q^String^Test.parquet', {UNSIGNED testid; STRING3 testname; QSTRING value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('QStringTest')),
    OUTPUT(DATASET('~file::.::tmp::^Unicode^Test.parquet', {UNSIGNED testid; STRING3 testname; UNICODE value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('UnicodeTest')),
    OUTPUT(DATASET('~file::.::tmp::^U^T^F8^Test.parquet', {UNSIGNED testid; STRING3 testname; UTF8 value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('UTF8Test')),
    OUTPUT(DATASET('~file::.::tmp::^Data^Test.parquet', {UNSIGNED testid; STRING3 testname; DATA value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('DataTest')),
    OUTPUT(DATASET('~file::.::tmp::^Varstring^Test.parquet', {UNSIGNED testid; STRING3 testname; VARSTRING value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('VarstringTest')),
    OUTPUT(DATASET('~file::.::tmp::^Varunicode^Test.parquet', {UNSIGNED testid; STRING3 testname; VARUNICODE value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('VarunicodeTest')),
    OUTPUT(DATASET('~file::.::tmp::^Setof^Boolean^Test.parquet', {UNSIGNED testid; STRING3 testname; SET OF BOOLEAN value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('SetofBooleanTest')),
    OUTPUT(DATASET('~file::.::tmp::^Setof^Integer^Test.parquet', {UNSIGNED testid; STRING3 testname; SET OF INTEGER value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('SetofIntegerTest')),
    OUTPUT(DATASET('~file::.::tmp::^Setof^Real^Test.parquet', {UNSIGNED testid; STRING3 testname; SET OF REAL value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('SetofRealTest')),
    OUTPUT(DATASET('~file::.::tmp::^Setof^Decimal^Test.parquet', {UNSIGNED testid; STRING3 testname; SET OF DECIMAL value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('SetofDecimalTest')),
    OUTPUT(DATASET('~file::.::tmp::^Setof^String^Test.parquet', {UNSIGNED testid; STRING3 testname; SET OF STRING value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('SetofStringTest')),
    OUTPUT(DATASET('~file::.::tmp::^Setof^Q^String^Test.parquet', {UNSIGNED testid; STRING3 testname; SET OF QSTRING value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('SetofQStringTest')),
    OUTPUT(DATASET('~file::.::tmp::^Setof^Unicode^Test.parquet', {UNSIGNED testid; STRING3 testname; SET OF UNICODE value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('SetofUnicodeTest')),
    OUTPUT(DATASET('~file::.::tmp::^Setof^U^T^F8^Test.parquet', {UNSIGNED testid; STRING3 testname; SET OF UTF8 value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('SetofUTF8Test')),
    OUTPUT(DATASET('~file::.::tmp::^Setof^Data^Test.parquet', {UNSIGNED testid; STRING3 testname; SET OF DATA value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('SetofDataTest')),
    OUTPUT(DATASET('~file::.::tmp::^Setof^Varstring^Test.parquet', {UNSIGNED testid; STRING3 testname; SET OF VARSTRING value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('SetofVarstringTest')),
    OUTPUT(DATASET('~file::.::tmp::^Setof^Varunicode^Test.parquet', {UNSIGNED testid; STRING3 testname; SET OF VARUNICODE value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('SetofVarunicodeTest')),
    OUTPUT(DATASET('~file::.::tmp::^Child^Dataset^Test.parquet', {UNSIGNED testid; STRING3 testname; {BOOLEAN b; INTEGER i; REAL r; DECIMAL de; STRING s; QSTRING q; UNICODE u; UTF8 u8; DATA da; SET OF INTEGER soi} value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('ChildDatasetTest')),
    OUTPUT(DATASET('~file::.::tmp::xpath^Test1.parquet', {UNSIGNED testid; STRING3 testname; {BOOLEAN b {XPATH('B')}; INTEGER i {XPATH('I')}; REAL r {XPATH('R')}; DECIMAL de {XPATH('DE')}; STRING s {XPATH('S')}; QSTRING q {XPATH('Q')}; UNICODE u {XPATH('U')}; UTF8 u8 {XPATH('U8')}; DATA da {XPATH('DA')}; SET OF INTEGER soi {XPATH('SOI')}} value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('XPathTest1')),
    OUTPUT(DATASET('~file::.::tmp::xpath^Test2.parquet', {UNSIGNED testid; STRING3 testname; BOOLEAN b {XPATH('B')}; INTEGER i {XPATH('I')}; REAL r {XPATH('R')}; DECIMAL de {XPATH('DE')}; STRING s {XPATH('S')}; QSTRING q {XPATH('Q')}; UNICODE u {XPATH('U')}; UTF8 u8 {XPATH('U8')}; DATA da {XPATH('DA')}; SET OF INTEGER soi {XPATH('SOI')}}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('XPathTest2')),
    OUTPUT(DATASET('~file::.::tmp::^Boolean^Test.parquet', {UNSIGNED testid; STRING3 testname; INTEGER value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('BooleanToIntegerTest')),
    OUTPUT(DATASET('~file::.::tmp::^Boolean^Test.parquet', {UNSIGNED testid; STRING3 testname; REAL value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('BooleanToRealTest')),
    OUTPUT(DATASET('~file::.::tmp::^Boolean^Test.parquet', {UNSIGNED testid; STRING3 testname; DECIMAL value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('BooleanToDecimalTest')),
    OUTPUT(DATASET('~file::.::tmp::^Boolean^Test.parquet', {UNSIGNED testid; STRING3 testname; STRING value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('BooleanToStringTest')),
    OUTPUT(DATASET('~file::.::tmp::^Boolean^Test.parquet', {UNSIGNED testid; STRING3 testname; QSTRING value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('BooleanToQStringTest')),
    OUTPUT(DATASET('~file::.::tmp::^Boolean^Test.parquet', {UNSIGNED testid; STRING3 testname; UNICODE value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('BooleanToUnicodeTest')),
    OUTPUT(DATASET('~file::.::tmp::^Boolean^Test.parquet', {UNSIGNED testid; STRING3 testname; UTF8 value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('BooleanToUTF8Test')),
    OUTPUT(DATASET('~file::.::tmp::^Boolean^Test.parquet', {UNSIGNED testid; STRING3 testname; DATA value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('BooleanToDataTest')),
    OUTPUT(DATASET('~file::.::tmp::^Integer^Test.parquet', {UNSIGNED testid; STRING3 testname; BOOLEAN value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('IntegerToIntegerTest')),
    OUTPUT(DATASET('~file::.::tmp::^Integer^Test.parquet', {UNSIGNED testid; STRING3 testname; REAL value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('IntegerToRealTest')),
    OUTPUT(DATASET('~file::.::tmp::^Integer^Test.parquet', {UNSIGNED testid; STRING3 testname; DECIMAL value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('IntegerToDecimalTest')),
    OUTPUT(DATASET('~file::.::tmp::^Integer^Test.parquet', {UNSIGNED testid; STRING3 testname; STRING value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('IntegerToStringTest')),
    OUTPUT(DATASET('~file::.::tmp::^Integer^Test.parquet', {UNSIGNED testid; STRING3 testname; QSTRING value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('IntegerToQStringTest')),
    OUTPUT(DATASET('~file::.::tmp::^Integer^Test.parquet', {UNSIGNED testid; STRING3 testname; UNICODE value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('IntegerToUnicodeTest')),
    OUTPUT(DATASET('~file::.::tmp::^Integer^Test.parquet', {UNSIGNED testid; STRING3 testname; UTF8 value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('IntegerToUTF8Test')),
    OUTPUT(DATASET('~file::.::tmp::^Integer^Test.parquet', {UNSIGNED testid; STRING3 testname; DATA value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('IntegerToDataTest')),
    OUTPUT(DATASET('~file::.::tmp::^Real^Test.parquet', {UNSIGNED testid; STRING3 testname; INTEGER value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('RealToIntegerTest')),
    OUTPUT(DATASET('~file::.::tmp::^Real^Test.parquet', {UNSIGNED testid; STRING3 testname; BOOLEAN value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('RealToBooleanTest')),
    OUTPUT(DATASET('~file::.::tmp::^Real^Test.parquet', {UNSIGNED testid; STRING3 testname; DECIMAL value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('RealToDecimalTest')),
    OUTPUT(DATASET('~file::.::tmp::^Real^Test.parquet', {UNSIGNED testid; STRING3 testname; STRING value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('RealToStringTest')),
    OUTPUT(DATASET('~file::.::tmp::^Real^Test.parquet', {UNSIGNED testid; STRING3 testname; QSTRING value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('RealToQStringTest')),
    OUTPUT(DATASET('~file::.::tmp::^Real^Test.parquet', {UNSIGNED testid; STRING3 testname; UNICODE value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('RealToUnicodeTest')),
    OUTPUT(DATASET('~file::.::tmp::^Real^Test.parquet', {UNSIGNED testid; STRING3 testname; UTF8 value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('RealToUTF8Test')),
    OUTPUT(DATASET('~file::.::tmp::^Real^Test.parquet', {UNSIGNED testid; STRING3 testname; DATA value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('RealToDataTest')),
    OUTPUT(DATASET('~file::.::tmp::^Decimal^Test.parquet', {UNSIGNED testid; STRING3 testname; INTEGER value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('DecimalToIntegerTest')),
    OUTPUT(DATASET('~file::.::tmp::^Decimal^Test.parquet', {UNSIGNED testid; STRING3 testname; REAL value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('DecimalToRealTest')),
    OUTPUT(DATASET('~file::.::tmp::^Decimal^Test.parquet', {UNSIGNED testid; STRING3 testname; BOOLEAN value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('DecimalToBooleanTest')),
    OUTPUT(DATASET('~file::.::tmp::^Decimal^Test.parquet', {UNSIGNED testid; STRING3 testname; STRING value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('DecimalToStringTest')),
    OUTPUT(DATASET('~file::.::tmp::^Decimal^Test.parquet', {UNSIGNED testid; STRING3 testname; QSTRING value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('DecimalToQStringTest')),
    OUTPUT(DATASET('~file::.::tmp::^Decimal^Test.parquet', {UNSIGNED testid; STRING3 testname; UNICODE value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('DecimalToUnicodeTest')),
    OUTPUT(DATASET('~file::.::tmp::^Decimal^Test.parquet', {UNSIGNED testid; STRING3 testname; UTF8 value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('DecimalToUTF8Test')),
    OUTPUT(DATASET('~file::.::tmp::^Decimal^Test.parquet', {UNSIGNED testid; STRING3 testname; DATA value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('DecimalToDataTest')),
    OUTPUT(DATASET('~file::.::tmp::^String^Test.parquet', {UNSIGNED testid; STRING3 testname; INTEGER value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('StringToIntegerTest')),
    OUTPUT(DATASET('~file::.::tmp::^String^Test.parquet', {UNSIGNED testid; STRING3 testname; REAL value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('StringToRealTest')),
    OUTPUT(DATASET('~file::.::tmp::^String^Test.parquet', {UNSIGNED testid; STRING3 testname; DECIMAL value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('StringToDecimalTest')),
    OUTPUT(DATASET('~file::.::tmp::^String^Test.parquet', {UNSIGNED testid; STRING3 testname; BOOLEAN value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('StringToBooleanTest')),
    OUTPUT(DATASET('~file::.::tmp::^String^Test.parquet', {UNSIGNED testid; STRING3 testname; QSTRING value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('StringToQStringTest')),
    OUTPUT(DATASET('~file::.::tmp::^String^Test.parquet', {UNSIGNED testid; STRING3 testname; UNICODE value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('StringToUnicodeTest')),
    OUTPUT(DATASET('~file::.::tmp::^String^Test.parquet', {UNSIGNED testid; STRING3 testname; UTF8 value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('StringToUTF8Test')),
    OUTPUT(DATASET('~file::.::tmp::^String^Test.parquet', {UNSIGNED testid; STRING3 testname; DATA value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('StringToDataTest')),
    OUTPUT(DATASET('~file::.::tmp::^Q^String^Test.parquet', {UNSIGNED testid; STRING3 testname; INTEGER value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('QStringToIntegerTest')),
    OUTPUT(DATASET('~file::.::tmp::^Q^String^Test.parquet', {UNSIGNED testid; STRING3 testname; REAL value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('QStringToRealTest')),
    OUTPUT(DATASET('~file::.::tmp::^Q^String^Test.parquet', {UNSIGNED testid; STRING3 testname; DECIMAL value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('QStringToDecimalTest')),
    OUTPUT(DATASET('~file::.::tmp::^Q^String^Test.parquet', {UNSIGNED testid; STRING3 testname; STRING value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('QStringToStringTest')),
    OUTPUT(DATASET('~file::.::tmp::^Q^String^Test.parquet', {UNSIGNED testid; STRING3 testname; BOOLEAN value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('QStringToBooleanTest')),
    OUTPUT(DATASET('~file::.::tmp::^Q^String^Test.parquet', {UNSIGNED testid; STRING3 testname; UNICODE value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('QStringToUnicodeTest')),
    OUTPUT(DATASET('~file::.::tmp::^Q^String^Test.parquet', {UNSIGNED testid; STRING3 testname; UTF8 value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('QStringToUTF8Test')),
    OUTPUT(DATASET('~file::.::tmp::^Q^String^Test.parquet', {UNSIGNED testid; STRING3 testname; DATA value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('QStringToDataTest')),
    OUTPUT(DATASET('~file::.::tmp::^Unicode^Test.parquet', {UNSIGNED testid; STRING3 testname; INTEGER value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('UnicodeToIntegerTest')),
    OUTPUT(DATASET('~file::.::tmp::^Unicode^Test.parquet', {UNSIGNED testid; STRING3 testname; REAL value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('UnicodeToRealTest')),
    OUTPUT(DATASET('~file::.::tmp::^Unicode^Test.parquet', {UNSIGNED testid; STRING3 testname; DECIMAL value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('UnicodeToDecimalTest')),
    OUTPUT(DATASET('~file::.::tmp::^Unicode^Test.parquet', {UNSIGNED testid; STRING3 testname; STRING value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('UnicodeToStringTest')),
    OUTPUT(DATASET('~file::.::tmp::^Unicode^Test.parquet', {UNSIGNED testid; STRING3 testname; QSTRING value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('UnicodeToQStringTest')),
    OUTPUT(DATASET('~file::.::tmp::^Unicode^Test.parquet', {UNSIGNED testid; STRING3 testname; BOOLEAN value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('UnicodeToUnicodeTest')),
    OUTPUT(DATASET('~file::.::tmp::^Unicode^Test.parquet', {UNSIGNED testid; STRING3 testname; UTF8 value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('UnicodeToUTF8Test')),
    OUTPUT(DATASET('~file::.::tmp::^Unicode^Test.parquet', {UNSIGNED testid; STRING3 testname; DATA value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('UnicodeToDataTest')),
    OUTPUT(DATASET('~file::.::tmp::^U^T^F8^Test.parquet', {UNSIGNED testid; STRING3 testname; INTEGER value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('UTF8ToIntegerTest')),
    OUTPUT(DATASET('~file::.::tmp::^U^T^F8^Test.parquet', {UNSIGNED testid; STRING3 testname; REAL value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('UTF8ToRealTest')),
    OUTPUT(DATASET('~file::.::tmp::^U^T^F8^Test.parquet', {UNSIGNED testid; STRING3 testname; DECIMAL value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('UTF8ToDecimalTest')),
    OUTPUT(DATASET('~file::.::tmp::^U^T^F8^Test.parquet', {UNSIGNED testid; STRING3 testname; STRING value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('UTF8ToStringTest')),
    OUTPUT(DATASET('~file::.::tmp::^U^T^F8^Test.parquet', {UNSIGNED testid; STRING3 testname; QSTRING value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('UTF8ToQStringTest')),
    OUTPUT(DATASET('~file::.::tmp::^U^T^F8^Test.parquet', {UNSIGNED testid; STRING3 testname; UNICODE value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('UTF8ToUnicodeTest')),
    OUTPUT(DATASET('~file::.::tmp::^U^T^F8^Test.parquet', {UNSIGNED testid; STRING3 testname; BOOLEAN value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('UTF8ToBooleanTest')),
    OUTPUT(DATASET('~file::.::tmp::^U^T^F8^Test.parquet', {UNSIGNED testid; STRING3 testname; DATA value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('UTF8ToDataTest')),
    OUTPUT(DATASET('~file::.::tmp::^Data^Test.parquet', {UNSIGNED testid; STRING3 testname; INTEGER value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('DataToIntegerTest')),
    OUTPUT(DATASET('~file::.::tmp::^Data^Test.parquet', {UNSIGNED testid; STRING3 testname; REAL value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('DataToRealTest')),
    OUTPUT(DATASET('~file::.::tmp::^Data^Test.parquet', {UNSIGNED testid; STRING3 testname; DECIMAL value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('DataToDecimalTest')),
    OUTPUT(DATASET('~file::.::tmp::^Data^Test.parquet', {UNSIGNED testid; STRING3 testname; STRING value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('DataToStringTest')),
    OUTPUT(DATASET('~file::.::tmp::^Data^Test.parquet', {UNSIGNED testid; STRING3 testname; QSTRING value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('DataToQStringTest')),
    OUTPUT(DATASET('~file::.::tmp::^Data^Test.parquet', {UNSIGNED testid; STRING3 testname; UNICODE value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('DataToUnicodeTest')),
    OUTPUT(DATASET('~file::.::tmp::^Data^Test.parquet', {UNSIGNED testid; STRING3 testname; UTF8 value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('DataToUTF8Test')),
    OUTPUT(DATASET('~file::.::tmp::^Data^Test.parquet', {UNSIGNED testid; STRING3 testname; BOOLEAN value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('DataToBooleanTest')),
    OUTPUT(DATASET('~file::.::tmp::^Varstring^Test.parquet', {UNSIGNED testid; STRING3 testname; BOOLEAN value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('VarstringToBooleanTest')),
    OUTPUT(DATASET('~file::.::tmp::^Varstring^Test.parquet', {UNSIGNED testid; STRING3 testname; INTEGER value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('VarstringToIntegerTest')),
    OUTPUT(DATASET('~file::.::tmp::^Varstring^Test.parquet', {UNSIGNED testid; STRING3 testname; REAL value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('VarstringToRealTest')),
    OUTPUT(DATASET('~file::.::tmp::^Varstring^Test.parquet', {UNSIGNED testid; STRING3 testname; DECIMAL value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('VarstringToDecimalTest')),
    OUTPUT(DATASET('~file::.::tmp::^Varstring^Test.parquet', {UNSIGNED testid; STRING3 testname; STRING value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('VarstringToStringTest')),
    OUTPUT(DATASET('~file::.::tmp::^Varstring^Test.parquet', {UNSIGNED testid; STRING3 testname; QSTRING value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('VarstringToQStringTest')),
    OUTPUT(DATASET('~file::.::tmp::^Varstring^Test.parquet', {UNSIGNED testid; STRING3 testname; UNICODE value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('VarstringToUnicodeTest')),
    OUTPUT(DATASET('~file::.::tmp::^Varstring^Test.parquet', {UNSIGNED testid; STRING3 testname; UTF8 value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('VarstringToUTF8Test')),
    OUTPUT(DATASET('~file::.::tmp::^Varstring^Test.parquet', {UNSIGNED testid; STRING3 testname; DATA value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('VarstringToDataTest')),
    OUTPUT(DATASET('~file::.::tmp::^Varunicode^Test.parquet', {UNSIGNED testid; STRING3 testname; BOOLEAN value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('VarunicodeToBooleanTest')),
    OUTPUT(DATASET('~file::.::tmp::^Varunicode^Test.parquet', {UNSIGNED testid; STRING3 testname; INTEGER value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('VarunicodeToIntegerTest')),
    OUTPUT(DATASET('~file::.::tmp::^Varunicode^Test.parquet', {UNSIGNED testid; STRING3 testname; REAL value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('VarunicodeToRealTest')),
    OUTPUT(DATASET('~file::.::tmp::^Varunicode^Test.parquet', {UNSIGNED testid; STRING3 testname; DECIMAL value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('VarunicodeToDecimalTest')),
    OUTPUT(DATASET('~file::.::tmp::^Varunicode^Test.parquet', {UNSIGNED testid; STRING3 testname; STRING value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('VarunicodeToStringTest')),
    OUTPUT(DATASET('~file::.::tmp::^Varunicode^Test.parquet', {UNSIGNED testid; STRING3 testname; QSTRING value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('VarunicodeToQStringTest')),
    OUTPUT(DATASET('~file::.::tmp::^Varunicode^Test.parquet', {UNSIGNED testid; STRING3 testname; UNICODE value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('VarunicodeToUnicodeTest')),
    OUTPUT(DATASET('~file::.::tmp::^Varunicode^Test.parquet', {UNSIGNED testid; STRING3 testname; UTF8 value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('VarunicodeToUTF8Test')),
    OUTPUT(DATASET('~file::.::tmp::^Varunicode^Test.parquet', {UNSIGNED testid; STRING3 testname; DATA value}, TYPE(PARQUET: maxRowCountInTable(48800))), NAMED('VarunicodeToDataTest'))
#END
)
);

#!/usr/bin/env python3

'''
/*#############################################################################

    HPCC SYSTEMS software Copyright (C) 2012-2014 HPCC Systems(R).

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
############################################################################ */
'''
import logging
import os
import platform
import atexit
import traceback
import glob
import inspect
import signal
import argparse

from hpcc.regression.regress import Regression
from hpcc.util.util import checkClusters, checkHpccStatus
from hpcc.util.util import setConfig, checkPqParam, getVersionNumbers, checkXParam, convertPath, isPositiveIntNum
from hpcc.util.util import getEclRunArgs, isSudoer, getCodeInfo
from hpcc.util.expandcheck import ExpandCheck
from hpcc.common.error import Error
from hpcc.common.config import Config
from hpcc.common.logger import Logger

# For coverage
if ('coverage' in os.environ) and (os.environ['coverage'] == '1'):
    os.umask(0)

logger = logging.getLogger('RegressionTestEngine')

class RegressMain:

    def listClusters(self):
        if self.args.setup:
            print("Setup test cases: ")
            for engine in self.regress.config.Engines:
                cluster = self.regress.config.Clusters[engine]
                print(("Cluster: %s" % (cluster)))
                self.args.engine = engine
                self.args.cluster = cluster
                suite = self.regress.Setup(self.args)
                for test in suite.getSuite():
                    if self.args.createEclRunArg:
                        print("%s " % (getEclRunArgs(test, engine, cluster))), 
                        print(("%s/%s" % (test.dir_ec, test.getBaseEcl())))
                    else:
                        print((test.getBaseEclRealName()))
            pass
        elif self.args.runtests:
            print("Run test cases: ")
            for engine in self.regress.config.Engines:
                self.args.engine = engine
                cluster = self.regress.config.Clusters[engine]
                self.args.cluster = cluster
                self.regress.bootstrap(engine, cluster, self.args)
                print(("Cluster: %s" % (cluster)))
                suite = self.regress.suites[engine]
                for test in suite.getSuite():
                    if self.args.createEclRunArg:
                        print("%s " % (getEclRunArgs(test, engine, cluster))), 
                        print(("%s" % (test.getBaseEcl())))
                    else:
                        print((test.getBaseEclRealName()))
            pass
        else:
            Clusters = []
            for engine in self.regress.config.Engines:
                Clusters.append(str(self.regress.config.Clusters[engine]))
            print("Available Clusters: ")
            for i in Clusters:
                print(i)

    def query(self):
        if not self.args.query:
            print("\nMissing ECL query file!\n")
            self.parser_query.print_help()
            exit()
        eclfiles=[]   # List for ECL filenames to be executed
        eclfiles = self.processEclList(self.args.query)

        # Go through the cluster list
        for engine in self.targetEngines:
            self.args.engine = engine
            cluster = self.regress.config.Clusters[engine]
            self.args.cluster = cluster
            try:
                if len(eclfiles) :
                    #Execute multiple ECL files like RUN to generates summary results and diff report.
                    self.regress.bootstrap(engine, cluster, self.args,  eclfiles)
                    if (self.args.pq in (0, 1)) or (self.regress.maxtasks == 1):
                        self.regress.runSuite(engine, cluster, self.regress.suites[engine])
                    else:
                        self.regress.runSuiteP(engine, cluster, self.regress.suites[engine])
                else:
                    logging.error("%s. No ECL file match for cluster:'%s'!" % (1,  self.args.target))
                    raise Error("4001")
            except IOError:
                logging.error("%s. Some query does not exist!" % (0))
                exit()
            except Exception as e:
                logging.critical(e)
                logging.critical(traceback.format_exc())

    def setup(self):
        if len(self.args.setup) > 0:
            # List for setup ECL filenames to be executed
            self.args.setup = self.processEclList(self.args.setup,  True)
        # Go through the cluster list
        for engine in self.targetEngines:
            self.args.engine = engine
            cluster = self.regress.config.Clusters[engine]
            self.args.cluster = cluster
            if  self.args.pq in (0, 1):
                self.regress.runSuite(engine, cluster, self.regress.Setup(self.args))
            else:
                self.regress.runSuiteP(engine, cluster, self.regress.Setup(self.args))

    def run(self):
        # Go through the cluster list
        for engine in self.targetEngines:
            self.args.engine = engine
            cluster = self.regress.config.Clusters[engine]
            self.args.cluster = cluster
            self.regress.bootstrap(engine, cluster, self.args)
            self.args.target = cluster
            if  self.args.pq in (0, 1):
                self.regress.runSuite(engine, cluster, self.regress.suites[engine])
            else:
                self.regress.runSuiteP(engine, cluster, self.regress.suites[engine])

    def processEclList(self, eclItems,  isSetup = False):
        eclDir = self.regress.dir_ec
        if isSetup:
            eclDir = self.regress.setupDir
            
        eclFiles = []
        for ecl in eclItems:
            if  ('*' in ecl) or ('?' in ecl):
                # If there is any wildcard in ECL file name, resolve it
                eclwild = os.path.join(eclDir, ecl)
                eclFiles.extend( glob.glob(eclwild))
            else:
                # We have simple ECL file in parameter list, put it on the eclfile list
                eclPath = os.path.join(eclDir, ecl)
                if os.path.isfile(eclPath):
                    eclFiles.append(eclPath)
                else:
                    # Do not raise an error if file not exists
                    logger.debug("To be excluded ECL file '%s' not exists!" % ( eclPath))

        if len(eclFiles) > 1:
            # Remove duplicates
            tempList = list(set(eclFiles))
            eclFiles = tempList

            # Sort ECL filenames
            eclFiles.sort()

        return eclFiles

    def main(self):
        prog = "ecl-test"
        description = 'HPCC Regression Test Engine'
        pythonVer = getVersionNumbers()
        defaultConfigFile="ecl-test.json"
        self.log = Logger('info')

        if (pythonVer['main'] < 3) :
            print("\nError!")
            print("Your system has Python version: %s by default." %(platform.python_version()))
            print("To run this version of %s, you need version: 3.x!\n" % (description))
            print("If you have Python3 installed in your environment then try: \npython3 ./ecl-test ...\n")
            exit()

        atexit.register(logging.shutdown)

        helperParser=argparse.ArgumentParser(add_help=False)
        helperParser.add_argument('--config', help="Config file to use. Default: ecl-test.json",
                            nargs='?', default=defaultConfigFile)
        helperParser.add_argument('--loglevel', help="Set the log level. Use debug for more detailed logfile.",
                            nargs='?', default="info", choices=['info', 'debug'])

        commonParser=argparse.ArgumentParser(add_help=False)
        commonParser.add_argument('--suiteDir', '-s', help="SuiteDir to use. Default value is the current directory and it can handle relative path.",
                            nargs='?', default=".")
        commonParser.add_argument('--timeout', help="Timeout for query execution in sec. Use -1 to disable timeout. Default value defined in ecl-test.json config file.",
                            nargs='?', default="0")
        commonParser.add_argument('--keyDir', '-k', help="Key file directory to compare test output. Default value defined in ecl-test.json config file.",
                            nargs='?', default="ecl/key")
        commonParser.add_argument('--ignoreResult', '-i', help="Completely ignore the result.",
                            action='store_true')
        commonParser.add_argument('-X', help="Sets the stored input value (stored('name')).",
                            nargs=1, type=checkXParam,  default='None',  metavar="name1=value1[,name2=value2...]")
        commonParser.add_argument('-f', help="Set an ECL option (equivalent to #option and multiple -f can be use in a command line).", action="append",
                            metavar="optionA=valueA[,optionB=valueB...]")
        commonParser.add_argument('--pq', help="Parallel query execution with threadNumber threads. (If threadNumber is '-1' on a single node system then threadNumber = numberOfLocalCore * 2 )",
                                type=checkPqParam,  default = 0,   metavar="threadNumber")
        commonParser.add_argument('--noversion', help="Avoid version expansion of queries. Execute them as a standard test.",
                                action = 'store_true')
        commonParser.add_argument('--server', help="ESP server and optionally port address. Default value (espIp, espSocket) defined in ecl-test.json config file.",
                                nargs='?', default=None,  metavar="networkAddress[:port]")
        commonParser.add_argument('--username',  '-u', help="Specify a username. If this appears in command line and the STDIO is a TTY like device then, the test engine displays a prompt to get user's password. Pipe like 'echo \"<password>\" | ./elc-test run -u <username>  ...' can be used to provide user's password as well. The username and password overrides those stored in ecl-test.json config file.",
                                nargs='?', default=None,  metavar="username")

        executionParser=argparse.ArgumentParser(add_help=False)
        executionParser.add_argument('--runclass', '-r', help="Run subclass(es) of the suite. Default value is 'all'",
                                nargs=1,  default = ['all'],   metavar="class[,class,...]")
        executionParser.add_argument('--excludeclass', '-e', help="Exclude subclass(es) of the suite. Default value is 'none'",
                                nargs=1,  default = ['none'],   metavar="class[,class,...]")
        executionParser.add_argument('--jobnamesuffix', help="Specify workunit job name suffix.", default='',
                                metavar="suffix")
        executionParser.add_argument('--flushDiskCache', help="Flush OS (Linux) Disk Cache before execute ECL code (sudo privileges needed). Ignored when --pq <n>  > 1"
                                , action = 'store_true')
        executionParser.add_argument('--flushDiskCachePolicy', help="Set flush disk cache policy. The default is 1 to clear before firts run only. For 2 to clear before every runs.",
                                type=checkPqParam,  default = 1,   metavar="flushDiskCachePolicy")
        executionParser.add_argument('--runcount', help="Execute individual test case(s) in given times. Default value is 1",
                                type=checkPqParam,  default = 1,   metavar="runcount")
        executionParser.add_argument('--excludeFile', '--ef', help="Exclude files of suite. Wildcard is enabled. Default value is 'none'",
                                nargs=1,  default = ['none'],   metavar="filespec[,filespec,...]")
        executionParser.add_argument('--generateStackTrace', help="Generate stack trace of Thor components before kill a timeouted test case. Trace files are stored into Regression Engine Log directory (see 'LogDir' in ecl-test.json file)",
                                action = 'store_true')
        executionParser.add_argument('--createEclRunArg', help="Generate ECL tool command line.",
                                action='store_true')
        executionParser.add_argument('--preAbort', help="Execute an arbitrary command/script before aborting.",
                                default=None,  metavar='preAbortscriptName')


        parser = argparse.ArgumentParser(prog=prog, description=description,  parents=[helperParser, commonParser,  executionParser])

        subparsers = parser.add_subparsers(help='Sub-command help')

        parser_list = subparsers.add_parser('list', help='List help', parents=[helperParser, executionParser])
        parser_list.set_defaults(func='list')
        parser_list.add_argument('--clusters', help="Print target clusters from config (ecl-test.json by default).",
                                 action='store_true')
        parser_list.add_argument('--setup', help="Print testcases executed in setup.",
                                 action='store_true')
        parser_list.add_argument('--runtests', help="Print test cases executed in run.",
                                 action='store_true')
        parser_list.add_argument('--target', '-t', help="Provide target cluster(s) to list test cases. If target = 'all' then list test cases on all clusters. If not defined then default value(s) come from config (ecl-test.json by default).",
                                nargs='?', type=str,  default='', metavar="target_cluster_list | all")


        parser_setup = subparsers.add_parser('setup', help='Setup help',  parents=[helperParser, commonParser, executionParser])
        parser_setup.set_defaults(func='setup')
        parser_setup.add_argument('setup', help="One or more setup ECL file(s). It can contain wildcards.",
                                  nargs='*',  default=None, metavar="ECL_query")
        parser_setup.add_argument('--target', '-t', help="Run the setup on target cluster(s). If target = 'all' then run setup on all clusters. If not defined then default value(s) come from config (ecl-test.json by default).",
                                nargs='?', type=str,  default='', metavar="target_cluster_list | all")
        parser_setup.add_argument('--handleEclccWarningFile', '-w', help="Create/overwrite/delete ECLCC warning file.",
                                action='store_true')

        parser_run = subparsers.add_parser('run', help='Run help',  parents=[helperParser, commonParser, executionParser])
        parser_run.set_defaults(func='run')
        parser_run.add_argument('--target', '-t', help="Run the cluster(s) suite. If target = 'all' then run suite on all clusters. If not defined then default value(s) come from config (ecl-test.json by default).",
                                nargs='?', type=str,  default='', metavar="target_cluster_list | all")
        parser_run.add_argument('--publish', '-p', help="Publish compiled query instead of run.",
                                action='store_true')
        parser_run.add_argument('--handleEclccWarningFile', '-w', help="Create/overwrite/delete ECLCC warning file.",
                                action='store_true')


        self.parser_query = subparsers.add_parser('query', help='Query help',  parents=[helperParser, commonParser, executionParser])
        self.parser_query.set_defaults(func='query')
        self.parser_query.add_argument('query', help="One or more ECL file(s). It can contain wildcards. (mandatory).",
                                  nargs='+', metavar="ECL_query")
        self.parser_query.add_argument('--target', '-t', help="Target cluster(s) for query to run. If target = 'all' then run query on all clusters. If not defined then default value(s) come from config (ecl-test.json by default).",
                                nargs='?', default='', metavar="target_cluster_list | all")
        self.parser_query.add_argument('--publish', '-p', help="Publish compiled query instead of run.",
                                action='store_true')
        self.parser_query.add_argument('--handleEclccWarningFile', '-w', help="Create/overwrite/delete ECLCC warning file.",
                                action='store_true')


        try:
            self.args = parser.parse_args()
        except Error as e:
            logging.critical(e)
            exit(e.getErrorCode());

        if self.args.loglevel == 'info':
            logger.setLevel(logging.INFO)
        elif self.args.loglevel == 'debug':
            logger.setLevel(logging.DEBUG)
            
        regressionSuiteMainDir = os.path.dirname(__file__)
        regressionSuiteFullPath = os.path.realpath(regressionSuiteMainDir)

        if defaultConfigFile == self.args.config:
            # Resolve Regression Suite starting path for ecl-test.json config file
            # It is necessary when Regression Suite doesn't started from its home directory
            self.args.config = str(os.path.join(regressionSuiteFullPath, self.args.config))
        else:
            self.args.config = ExpandCheck.dirExists(self.args.config, True,  True)

        # Process config parameter
        self.config = Config(self.args.config).configObj
        if ('server' in self.args) and (self.args.server != None):
            if ':' in self.args.server:
                ip, port = self.args.server.split(':')
                if isPositiveIntNum(port):
                    self.config.set('espSocket', port)
                else:
                    err = Error("6008")
                    logging.error("%s. %s : '%s'." % (-1, err, port))
                    exit(err.getErrorCode())
            else:
                ip = self.args.server
            self.config.set('espIp', ip)
            pass

        if self.args.username != None:
            self.config.set('username',  self.args.username)
            import sys
            if sys.stdin.isatty():
                import getpass
                passw = getpass.getpass("Please enter %s's password:" % (self.args.username))
            else:
                # The pswDebugMode needs to me to debug/trace this code
                # Alternatively we can call it enablePipePassword if we need/want that feature
                pswDebugMode = True  
                if not pswDebugMode:
                    err = Error("8000")
                    logging.error("%s. Password error:%s" % (-1,  err))
                    exit(err.getErrorCode())
                else:
                    # Enable to pipe a password string to Test Engine like:
                    #   echo "<password>" | ./ecl-test..."
                    passw = sys.stdin.readline().rstrip()

            self.config.set('password',  passw)
            pass

        if self.args.flushDiskCache and not isSudoer():
            err = Error("7000")
            logging.error("%s. clearOSCache error:%s" % (-1,  err))
            exit(err.getErrorCode())

        # There is no sense to clear disk cache if same test runnnig parallel by versioning
        if self.args.pq > 1:
            self.args.flushDiskCache = False

        if self.args.generateStackTrace:
            if isSudoer():
                self.config.set('generateStackTrace', True)
            else:
                err = Error("7100")
                logging.error("%s. Generate Stack Trace error:%s" % (-1,  err))
                exit(err.getErrorCode())
        else:
            self.config.set('generateStackTrace', False)

        self.config.set('preAbort', self.args.preAbort)

        if not self.config.has('wuStatusTimeout'):
            self.config.set('wuStatusTimeout', "30")

        if not self.config.has('wuAbortTimeout'):
            self.config.set('wuAbortTimeout', "30")

        if not self.config.has('usePoll'):
            self.config.set('usePoll', "False")

        self.config.set('log',  self.log)
        setConfig(self.config)

        # Process target parameter
        self.targetEngines = []
        if 'target' in self.args:
            if '' == self.args.target:
                # Target not specified, use default from config
                try:
                    if self.args.func == 'setup':
                        defaultTargets = self.config.defaultSetupTargets
                        targetSet='defaultSetupTargets'
                    else:
                        defaultTargets = self.config.defaultTargets
                        targetSet='defaultTargets'

                    self.targetEngines = checkClusters(defaultTargets, targetSet)

                except AttributeError:
                    # It seems there is no defaultSetupTargets|defaultTargets array in the config file
                    # use the first one of cluster list in config file
                    self.targetEngines.append(self.config.Engines[0])
            elif 'all' == self.args.target:
                for engine in self.config.Engines:
                    self.targetEngines.append(str(engine))
            else:
                if ',' in self.args.target:
                    # target is a list, process it
                    targets = self.args.target.split(',')
                    self.targetEngines = checkClusters(targets, 'target')
                elif self.args.target in self.config.Engines:
                    self.targetEngines.append(self.args.target)
                else:
                    logging.error("%s. Unknown target cluster:'%s'!" % (1,  self.args.target))
                    raise Error("4000")

        try:
            checkHpccStatus()
        except Error as e:
            exit(e.getErrorCode());

        try:
            self.regress = None
            if self.args.X[0]== "5000":
                self.regress = None
                raise Error(self.args.X[0])

            # Generate global stored parameters
            self.regressionSuiteHpccMainOsDir = self.config.setupExtraParams['OriginalTextFilesOsPath']
            self.regressionSuiteHpccMainEclDir = convertPath(self.regressionSuiteHpccMainOsDir)+"::download"

            self.args.setupExtraX = []
            self.args.setupExtraX.append('OriginalTextFilesOsPath='+self.regressionSuiteHpccMainOsDir)
            self.args.setupExtraX.append('OriginalTextFilesEclPath='+self.regressionSuiteHpccMainEclDir)
            if 'OriginalTextFilesIp' in self.config.setupExtraParams:
                self.args.setupExtraX.append('OriginalTextFilesIp=' +self.config.setupExtraParams['OriginalTextFilesIp'] )
            
            try:
                self.args.setupExtraD = self.config.setupExtraDParams
            except AttributeError:
                pass

            self.args.setupExtraX.append('dropzoneIp=' + self.config.dropzoneIp )
            self.args.setupExtraX.append('dropzonePath=' + self.config.dropzonePath )
            espFileSprayUrl = "http://" + self.config.espIp + ":" + self.config.espSocket + "/" + self.config.espFileSprayService
            self.args.setupExtraX.append('espFileSprayUrl=' + espFileSprayUrl )
            self.args.setupExtraX.append('espIp=' + self.config.espIp )

            self.regress = Regression(self.args)
            logger.debug("Suite full path:%s",  regressionSuiteFullPath)

            # process file exclusion
            excludeItems = []
            # is it defined in config
            try:
                excludeItems = self.config.FileExclusion
                pass
            except:
                pass
                
            # is it added as parameter
            if self.args.excludeFile[0] != 'none':
                argIitems = self.args.excludeFile[0].split(',')
                excludeItems.extend(argIitems)
                
            if excludeItems != []:
                excludeFiles = self.processEclList(excludeItems)
                self.args.excludeFileSet = set(excludeFiles)
                pass
            else:
                self.args.excludeFileSet = set()


            if self.args.func == 'list':
                self.listClusters()
            elif self.args.func == 'query':
                self.query()
            elif self.args.func == 'setup':
                self.setup()
            elif self.args.func == 'run':
                self.run()
        except Error as e:
            logging.critical(e)
            logging.critical(traceback.format_exc())
            exit(e.getErrorCode())
        except Exception as e:
            err = Error("6007")
            logging.critical(" RegressMain error:%s" % (err))
            logging.critical(e)
            logging.critical(traceback.format_exc())
            exit(-1)
        except KeyboardInterrupt:
            logger.debug("%3d. Keyboard interrupt in %s." % (-1, getCodeInfo(inspect.currentframe()) ))
            logging.critical("Keyboard Interrupt Caught.")
        finally:
            if self.regress:
                self.regress.close()
                self.regress = None
        exit()


def signalHandler(signum, frame):
    logging.critical("Signal %d received" %(signum))
    raise KeyboardInterrupt
    
if __name__ == "__main__":
    signal.signal(signal.SIGINT, signalHandler)
    signal.signal(signal.SIGTERM, signalHandler)

    regressMain = RegressMain()
    regressMain.main()

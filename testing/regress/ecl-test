#!/usr/bin/env python

'''
/*#############################################################################

    HPCC SYSTEMS software Copyright (C) 2012-2014 HPCC Systems(R).

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
############################################################################ */
'''
import logging
import os
import platform
import atexit
import traceback
import glob

from hpcc.util import argparse
from hpcc.regression.regress import Regression
from hpcc.util.ecl.file import ECLFile
from hpcc.util.util import setConfig, checkPqParam, getVersionNumbers, checkXParam, convertPath, getRealIPAddress, parentPath, checkClusters, checkHpccStatus
from hpcc.common.error import Error
from hpcc.common.config import Config

# For coverage
if ('coverage' in os.environ) and (os.environ['coverage'] == '1'):
    os.umask(0)

class RegressMain:

    def listClusters(self):
        Clusters = []
        for cluster in self.regress.config.Clusters:
            Clusters.append(str(cluster))
        print "Avaliable Clusters: "
        for i in Clusters:
            print i

    def query(self):
        if not self.args.query:
            print "\nMissing ECL query file!\n"
            parser_query.print_help()
            exit()
        eclfiles=[]   # List for ECL filenames to be executed
        for ecl in self.args.query:
            if  ('*' in ecl) or ('?' in ecl):
                # If there is any wildcard in ECL file name, resolve it
                eclwild = os.path.join(self.regress.dir_ec, ecl)
                eclfiles.extend( glob.glob(eclwild))
            else:
                # We have simple ECL file in parameter list, put it on the eclfile list
                eclPath = os.path.join(self.regress.dir_ec, ecl)
                if os.path.isfile(eclPath):
                    eclfiles.append(eclPath)
                else:
                    logging.error("%s. ECL file '%s' doesn't exist!" % (1,  eclPath))
                    raise Error("4001")

        if len(eclfiles) > 1:
            # Remove duplicates
            tempList = list(set(eclfiles))
            eclfiles = tempList

            # Sort ECL filenames to ensure correct execution order
            eclfiles.sort()

        # Go through the cluster list
        for cluster in self.targetClusters:
            try:
                if len(eclfiles) :
                    #Execute multiple ECL files like RUN to generates summary results and diff report.
                    self.regress.bootstrap(cluster, self.args,  eclfiles)
                    if (self.args.pq in (0, 1)) or (len(eclfiles) == 1):
                        self.regress.runSuite(cluster, self.regress.suites[cluster])
                    else:
                        self.regress.runSuiteP(cluster, self.regress.suites[cluster])
                else:
                    logging.error("%s. No ECL file match for cluster:'%s'!" % (1,  self.args.target))
                    raise Error("4001")
            except IOError:
                logging.error("%s. Query %s does not exist!" % (1,  eclfile.getBaseEcl()))
                exit()

    def setup(self):
        # Go through the cluster list
        for cluster in self.targetClusters:
            self.args.target = cluster
            if  self.args.pq :
                self.regress.runSuiteP(cluster, self.regress.Setup(self.args))
            else:
                self.regress.runSuite(cluster, self.regress.Setup(self.args))

    def run(self):
        # Go through the cluster list
        for cluster in self.targetClusters:
            self.regress.bootstrap(cluster, self.args)
            self.args.target = cluster
            if  self.args.pq :
                self.regress.runSuiteP(cluster, self.regress.suites[cluster])
            else:
                self.regress.runSuite(cluster, self.regress.suites[cluster])

    def main(self):
        prog = "ecl-test"
        description = 'HPCC Platform Regression suite'
        pythonVer = getVersionNumbers()

        if (pythonVer['main'] <= 2) and (pythonVer['minor'] <=6) and (pythonVer['patch'] <6):
            print "\nError!"
            print "Your system has Python version "+platform.python_version()
            print "To run "+description+", you need version: 2.6.6 or higher, but less than 3.x!\n"
            exit()

        if pythonVer['main'] >= 3:
            print "\nError!"
            print "Your system has Python version "+platform.python_version()
            print "Actually "+description+", supports version >= 2.6.6 and <= 2.7.x\n"
            exit()

        if (pythonVer['main'] >= 2) and (pythonVer['minor'] >= 7):
            atexit.register(logging.shutdown)

        helperParser=argparse.ArgumentParser(add_help=False)
        helperParser.add_argument('--config', help="config file to use. Default: ecl-test.json",
                            nargs='?', default="ecl-test.json")
        helperParser.add_argument('--loglevel', help="set the log level. Use debug for more detailed logfile.",
                            nargs='?', default="info",
                            choices=['info', 'debug'])

        commonParser=argparse.ArgumentParser(add_help=False)
        commonParser.add_argument('--suiteDir', '-s', help="suiteDir to use. Default value is the current directory and it can handle relative path.",
                            nargs='?', default=".")
        commonParser.add_argument('--timeout', help="timeout for query execution in sec. Use -1 to disable timeout. Default value defined in ecl-test.json config file.",
                            nargs='?', default="0")
        commonParser.add_argument('--keyDir', '-k', help="key file directory to compare test output. Default value defined in ecl-test.json config file.",
                            nargs='?', default="ecl/key")
        commonParser.add_argument('--ignoreResult', '-i', help="completely ignore the result.",
                            action='store_true')
        commonParser.add_argument('-X', help="sets the stored input value (stored('name')).",
                            nargs=1, type=checkXParam,  default='None',  metavar="name1=value1[,name2=value2...]")
        commonParser.add_argument('-f', help="set an ECL option (equivalent to #option).",
                            nargs=1, type=checkXParam,  default='None',  metavar="optionA=valueA[,optionB=valueB...]")
        commonParser.add_argument('--pq', help="Parallel query execution with threadNumber threads. (If threadNumber is '-1' on a single node system then threadNumber = numberOfLocalCore * 2 )",
                                type=checkPqParam,  default = 0,   metavar="threadNumber")
        commonParser.add_argument('--noversion', help="Avoid version expansion of queries. Execute them as a standard test.",
                                action = 'store_true')

        executionParser=argparse.ArgumentParser(add_help=False)
        executionParser.add_argument('--runclass', '-r', help="run subclass(es) of the suite. Default value is 'all'",
                                nargs=1,  default = ['all'],   metavar="class[,class,...]")
        executionParser.add_argument('--excludeclass', '-e', help="exclude subclass(es) of the suite. Default value is 'none'",
                                nargs=1,  default = ['none'],   metavar="class[,class,...]")

        parser = argparse.ArgumentParser(prog=prog, description=description,  parents=[helperParser, commonParser,  executionParser])

        subparsers = parser.add_subparsers(help='sub-command help')

        parser_list = subparsers.add_parser('list', help='list help', parents=[helperParser])
        parser_list.set_defaults(func='list')
        parser_list.add_argument('targets', help="Print target clusters from config (ecl-test.json by default).",
                                 action='store_true')

        parser_setup = subparsers.add_parser('setup', help='setup help',  parents=[helperParser, commonParser, executionParser])
        parser_setup.set_defaults(func='setup')
        parser_setup.add_argument('--target', '-t', help="Run the setup on target cluster(s). If target = 'all' then run setup on all clusters. If not defined then default value(s) come from config (ecl-test.json by default).",
                                nargs='?', type=str,  default='', metavar="target_cluster_list | all")

        parser_run = subparsers.add_parser('run', help='run help',  parents=[helperParser, commonParser, executionParser])
        parser_run.set_defaults(func='run')
        parser_run.add_argument('--target', '-t', help="Run the cluster(s) suite. If target = 'all' then run suite on all clusters. If not defined then default value(s) come from config (ecl-test.json by default).",
                                nargs='?', type=str,  default='', metavar="target_cluster_list | all")
        parser_run.add_argument('--publish', '-p', help="Publish compiled query instead of run.",
                                action='store_true')

        parser_query = subparsers.add_parser('query', help='query help',  parents=[helperParser, commonParser, executionParser])
        parser_query.set_defaults(func='query')
        parser_query.add_argument('query', help="One or more ECL file(s). It can contain wildcards. (mandatory).",
                                  nargs='+', metavar="ECL_query")
        parser_query.add_argument('--target', '-t', help="Target cluster(s) for query to run. If target = 'all' then run query on all clusters. If not defined then default value(s) come from config (ecl-test.json by default).",
                                nargs='?', default='', metavar="target_cluster_list | all")
        parser_query.add_argument('--publish', '-p', help="Publish compiled query instead of run.",
                                action='store_true')

        self.args = parser.parse_args()

        # Process config parameter
        self.config = Config(self.args.config).configObj
        setConfig(self.config)

        # Process target parameter
        self.targetClusters = []
        if 'target' in self.args:
            if '' == self.args.target:
                # Target not specified, use default from config
                try:
                    if self.args.func == 'setup':
                        defaultTargets = self.config.defaultSetupClusters
                        targetSet='defaultSetupClusters'
                    else:
                        defaultTargets = self.config.defaultTargetClusters
                        targetSet='defaultTargetClusters'

                    self.targetClusters = checkClusters(defaultTargets, targetSet)

                except AttributeError:
                    # It seems there is no defaultSetupClusters|defaultTargetClusters array in the config file
                    # use the first one of cluster list in config file
                    self.targetClusters.append(self.config.Clusters[0])
            elif 'all' == self.args.target:
                for cluster in self.config.Clusters:
                    self.targetClusters.append(str(cluster))
            else:
                if ',' in self.args.target:
                    # target is a list, process it
                    targets = self.args.target.split(',')
                    self.targetClusters = checkClusters(targets, 'target')
                elif self.args.target in self.config.Clusters:
                    self.targetClusters.append(self.args.target)
                else:
                    logging.error("%s. Unknown target cluster:'%s'!" % (1,  self.args.target))
                    raise Error("4000")

        try:
            checkHpccStatus()
        except Error as e:
            exit(e.getErrorCode());

        try:
            self.regress = None
            if self.args.X[0]== "5000":
                self.regress = None
                raise Error(self.args.X[0])

            # Resolve Regression Suite starting path for ecl-test.json config file
            # It is necessary when Regression Suite doesn't started from its home directory
            regressionSuiteMainDir = os.path.dirname(__file__)
            regressionSuiteFullPath = os.path.realpath(regressionSuiteMainDir)
            self.args.config = str(os.path.join(regressionSuiteFullPath, self.args.config))

            self.regressionSuiteHpccMainOsDir = regressionSuiteFullPath
            self.regressionSuiteHpccMainEclDir = convertPath(regressionSuiteFullPath)+"::download"

            self.args.setupExtraX = []
            self.args.setupExtraX.append('OriginalTextFilesOsPath='+self.regressionSuiteHpccMainOsDir)
            self.args.setupExtraX.append('OriginalTextFilesEclPath='+self.regressionSuiteHpccMainEclDir)
            self.args.setupExtraX.append('OriginalTextFilesIp='+getRealIPAddress())

            self.regress = Regression(self.args)
            logging.debug("Suite full path:%s",  regressionSuiteFullPath)

            if self.args.func == 'list':
                self.listClusters()
            elif self.args.func == 'query':
                self.query()
            elif self.args.func == 'setup':
                self.setup()
            elif self.args.func == 'run':
                self.run()
        except Error as e:
            logging.critical(e)
            exit(e.getErrorCode());
        except Exception as e:
            logging.critical(e)
            logging.critical(traceback.format_exc())
        except KeyboardInterrupt:
            logging.critical("Keyboard Interrupt Caught.")
        finally:
            if self.regress:
                self.regress.StopTimeoutThread()
        exit()

if __name__ == "__main__":
    regressMain = RegressMain()
    regressMain.main()

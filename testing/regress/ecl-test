#!/usr/bin/env python

'''
/*#############################################################################

    HPCC SYSTEMS software Copyright (C) 2012 HPCC Systems.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
############################################################################ */
'''

import argparse
import logging
import os
import platform
import atexit
import traceback
import glob

from hpcc.regression.regress import Regression
from hpcc.util.ecl.file import ECLFile
from hpcc.util.util import checkPqParam,  getVersionNumbers

prog_version = "0.0.14"

if __name__ == "__main__":

    prog = "ecl-test"
    versionStr = prog+" v:"+prog_version
    description = 'HPCC Platform Regression suite'
    pythonVer = getVersionNumbers()

    if (pythonVer['main'] <= 2) and (pythonVer['minor'] <=6) and (pythonVer['patch'] <6):
        print "\nError!"
        print "Your system has Python version "+platform.python_version()
        print "To run "+description+", you need version: 2.6.6 or higher, but less than 3.x!\n"
        exit()

    if pythonVer['main'] >= 3:
        print "\nError!"
        print "Your system has Python version "+platform.python_version()
        print "Actually "+description+", supports version >= 2.6.6 and <= 2.7.x\n"
        exit()

    if (pythonVer['main'] >= 2) and (pythonVer['minor'] >= 7):
        atexit.register(logging.shutdown)

    parser = argparse.ArgumentParser(prog=prog, description=description)
    parser.add_argument('--version', '-v', action='version',
                        version=versionStr)
    parser.add_argument('--config', help="config file to use. Default: ecl-test.json",
                        nargs='?', default="ecl-test.json")
    parser.add_argument('--loglevel', help="set the log level. Use debug for more detailed logfile.",
                        nargs='?', default="info",
                        choices=['info', 'debug'])
    parser.add_argument('--suiteDir', '-s', help="suiteDir to use. Default value is the current directory and it can handle relative path.",
                        nargs='?', default=".")
    parser.add_argument('--timeout', '-t', help="timeout for query execution in sec. Use -1 to disable timeout. Default value defined in ecl-test.json config file.",
                        nargs='?', default="0")
    parser.add_argument('--keyDir', '-k', help="key file directory to compare test output. Default value defined in ecl-test.json config file.",
                        nargs='?', default="ecl/key")
    parser.add_argument('--ignoreResult', '-i', help="completely ignore the result.",
                        action='store_true')

    subparsers = parser.add_subparsers(help='sub-command help')
    parser_list = subparsers.add_parser('list', help='list help')
    parser_list.add_argument('clusters', help="Print clusters from config (ecl-test.json by default).",
                             action='store_true')

    parser_run = subparsers.add_parser('run', help='run help')
    parser_run.add_argument('cluster', help="Run the cluster suite. Default value is setup.",
                            nargs='?', type=str,  default='setup')
    parser_run.add_argument('--pq', help="Parallel query execution with threadNumber threads. (If threadNumber is '-1' on a single node system then threadNumer = numberOfLocalCore * 2 )",
                            type=checkPqParam,  default = 0,   metavar="threadNumber")

    parser_query = subparsers.add_parser('query', help='query help')
    parser_query.add_argument('query', help="One or more ECL file(s). It can contain wildcards. (mandatory).",
                              nargs='+', metavar="ECL query")
    parser_query.add_argument('--cluster', '-c', help="Cluster for query to run. If cluster = 'all' then run query on all clusters. Default value is thor.",
                            nargs='?', default='thor', metavar="target_cluster | all")
    parser_query.add_argument('--publish', '-p', help="Publish compiled query instead of run.",
                            action='store_true')
    parser_query.add_argument('--pq', help="Parallel query execution with threadNumber threads. (If threadNumber is '-1' on a single node system then threadNumer = numberOfLocalCore * 2 )",
                            type=checkPqParam,  default = 0,   metavar="threadNumber")

    args = parser.parse_args()

    # Resolve Regression Suite starting path for ecl-test.json config file
    # It is necessary when Regression Suite doesn't started from its home directory
    regressionSuiteMainDir = os.path.dirname(__file__)
    regressionSuiteFullPath = os.path.realpath(regressionSuiteMainDir)
    args.config = str(os.path.join(regressionSuiteFullPath, args.config))

    regress = Regression(args)
    logging.debug("Suite version:%s",  versionStr)
    logging.debug("Suite full path:%s",  regressionSuiteFullPath)

    try:
        if 'clusters' in args:
            Clusters = ['setup']
            for cluster in regress.config.Clusters:
                Clusters.append(str(cluster))
            print "Avaliable Clusters: "
            for i in Clusters:
                print i
        if 'query' in args:
            if not args.query:
                print "\nMissing ECL query file!\n"
                parser_query.print_help()
                exit()
            eclfiles=[]   # List for ECL filenames to be executed
            for ecl in args.query:
                if not ('.ecl' in ecl):
                    args.cluster = ecl
                elif  ('*' in ecl) or ('?' in ecl):
                    # If there is any wildcard in ECL file name, resolve it
                    eclwild = os.path.join(regress.dir_ec, ecl)
                    eclfiles.extend( glob.glob(eclwild))
                else:
                    # We have simple ECL file in parameter list, put it on the eclfile list
                    eclPath = os.path.join(regress.dir_ec, ecl)
                    eclfiles.append(eclPath)

            if len(eclfiles) > 1:
                # Remove duplicates
                tempList = list(set(eclfiles))
                eclfiles = tempList

                # Sort ECL filenames to ensure correct execution order
                eclfiles.sort()

            targetClusters = []
            if 'all' == args.cluster:
                for cluster in regress.config.Clusters:
                    targetClusters.append(str(cluster))
            else:
                if args.cluster in regress.config.Clusters:
                    targetClusters.append(args.cluster)
                else:
                    logging.error("%s. Unknown cluster:'%s'!" % (1,  args.cluster))
                    print "Abend."
                    exit()
            # Go through the cluster list
            for cluster in targetClusters:
                try:
                    if len(eclfiles) > 1:
                        #Execute multiple ECl files like RUN to generates summary results and diff report.
                        regress.bootstrap(cluster, eclfiles)
                        if  'pq' in args:
                            regress.runSuiteP(cluster, regress.suites[cluster])
                        else:
                            regress.runSuite(cluster, regress.suites[cluster])
                    else:
                        # Execute one ECL file on the cluster
                        for ecl in eclfiles:
                            eclfile = ECLFile(ecl, regress.dir_a, regress.dir_ex, regress.dir_r, cluster)
                            # Check if this query is not skip on this cluster and not part of setup
                            if (not eclfile.testSkip(cluster)['skip']) and (not eclfile.testSkip('setup')['skip'] ):
                                if not eclfile.testExclusion(cluster):
                                    regress.runSuiteQ(cluster, eclfile)
                                else:
                                    logging.warn("%s. %s excluded on %s cluster." % (1,  eclfile.getBaseEcl(), cluster))
                            else:
                                logging.warn("%s. %s skipped on %s cluster." % (1, eclfile.getBaseEcl(), cluster))
                except IOError:
                    logging.error("%s. Query %s does not exist!" % (1,  eclfile.getBaseEcl()))
                    exit()
            print("End.")
        elif 'cluster' in args:
            regress.bootstrap(args.cluster)
            if 'setup' in args.cluster:
                regress.runSuite('setup', regress.Setup())
            else:
                if  args.pq :
                    regress.runSuiteP(args.cluster, regress.suites[args.cluster])
                else:
                    regress.runSuite(args.cluster, regress.suites[args.cluster])
            print("End.")
    except Exception as e:
        logging.critical(e)
        logging.critical(traceback.format_exc())
        print "Abend."
    except KeyboardInterrupt:
        logging.critical("Keyboard Interrupt Caught.")
        regress.StopTimeoutThread()

    exit()

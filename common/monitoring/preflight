#!/bin/bash
################################################################################
#
#    Copyright (C) 2011 HPCC Systems.
#
#    All rights reserved. This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#################################################################################


declare -a arr0
declare -a arr1
declare -a arr2
declare -a arrPIDName
declare -a arrPIDPath
declare -a arrDep

if [ $# -lt 2 ]; then
echo usage: $0 -p=PIDPath[,PIDPath,...] -n=PIDName[,PIDName,...] [-d=dependency,dependency,...]
exit 1
fi

depAll=0
for (( i=1;$i<=$#;i=$i+1 ))
do
    case ${!i:0:3} in '-p=')
             IFS=, read -a arrPIDPath <<< "${!i:3}";;
        '-n=')
             IFS=, read -a arrPIDName <<< "${!i:3}";;
        '-d=')
if [ "${!i:3}" == 'ALL' ]; then
depAll=1
else
IFS=, read -a arrDep <<< "${!i:3}"
fi
;;
        *)
             echo "wrong augument:${!i}";;
    esac
done

lPath=${#arrPIDPath[*]}
if [ ${#arrPIDName[@]} -gt $lPath ]; then
lastPath=${arrPIDPath[lPath-1]}
for (( i = $lPath; i < ${#arrPIDName[@]}; i++)); do
arrPIDPath[i]=$lastPath
done
fi

#find machineInfo and output:

mem=`free | head -n 3 | tail -n 1 | awk '{print $3,$4}'`
cpu=`vmstat 1 2 | tail -n 1 | awk '{print $15}'`
echo CPU-Idle: $cpu%
cuptime=`uptime | cut -f 1,2 -d ','`
echo ComputerUpTime: $cuptime

echo ---SpaceUsedAndFree---
swap=`free | tail -n 1 | awk '{print $3,$4}'`
echo Physical Memory: $mem
echo Virtual Memory: $swap

i=0
for name in `df -l | tail -n +2 | awk '{if(NF>=4) print $NF}'`; do
arr0[i]=$name
i=$((i+1))
done
i=0
for used in `df -l | tail -n +2 | awk '{if(NF>=4) print $(NF-3)}'`; do
arr1[i]=$used
i=$((i+1))
done
i=0
for free in `df -l | tail -n +2 | awk '{if(NF>=4) print $(NF-2)}'`; do
arr2[i]=$free
i=$((i+1))
done
for j in $(seq 0 $((i-1))); do
echo ${arr0[$j]}: ${arr1[$j]} ${arr2[$j]}
done

# foreach PIDName in arrPIDName do: find process info and output
echo ---ProcessList1---

i=0
for (( i = 0; i < ${#arrPIDName[@]}; i++)); do
full=${arrPIDPath[i]}/${arrPIDName[i]}.pid
pid=`cat $full`
elapsed=`ps -o etime $pid | sed -e '1d' | tail -n 1`
echo Process ${arrPIDPath[i]}/${arrPIDName[i]}:  $pid $elapsed
done

#read other processes

echo ---ProcessList2---
if [[ $depAll -gt 0 ]]; then
ps -el | tail -n +1 | awk '{print $4,$14;}'
else
echo 'NAME:PID CMD'
for (( i = 0; i < ${#arrDep[@]}; i++)); do
aDep=${arrDep[i]}
aDepInit=init_$aDep
#depCHK=$(ps aux | grep $aDep | grep -v grep | grep -v $aDepInit | wc -l)
depCHK=$(ps -el | grep $aDep  | grep -v grep | grep -v $aDepInit | awk '{print $4,$14;}')
echo $aDep:$depCHK
done
fi

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<sect1 id="SET">
  <title>SET</title>

  <para><emphasis role="bold">SET<indexterm>
      <primary>SET</primary>
    </indexterm><indexterm>
      <primary>SET function</primary>
    </indexterm>(</emphasis><emphasis>recordset,field</emphasis><emphasis
  role="bold">)</emphasis></para>

  <para><informaltable colsep="1" frame="all" rowsep="1">
      <tgroup cols="2">
        <colspec colwidth="78.60pt" />

        <colspec />

        <tbody>
          <row>
            <entry><emphasis>recordset</emphasis></entry>

            <entry>The set of records from which to derive the SET of
            values.</entry>
          </row>

          <row>
            <entry><emphasis>field</emphasis></entry>

            <entry>The field in the recordset from which to obtain the
            values.</entry>
          </row>

          <row>
            <entry>Return:</entry>

            <entry>SET returns a SET of values of the same type as the
            field.</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable></para>

  <para>The <emphasis role="bold">SET </emphasis>function returns a SET for
  use in any set operation (such as the IN operator), similar to a sub-select
  in SQL when used with the IN operator. It does not remove duplicate elements
  and does not order the set.</para>

  <para>One common problem is the use of the SET function in a filter
  condition, like this:</para>

  <programlisting>MyDS := myDataset(myField IN SET(anotherDataset, someField));</programlisting>

  <para>The code generated for this is inefficient if "anotherDataset"
  contains a large number of elements, and may also cause a "Dataset too large
  to output to workunit" error. A better way to recode the expression would be
  this:</para>

  <programlisting>MyDS := JOIN(myDataset, anotherDataset, LEFT.myField = RIGHT.someField, TRANSFORM(LEFT), LOOKUP) ;</programlisting>

  <para>The end result is the same, the set of "myDataset" records where the
  "myField" value is one of the "someField" values from "anotherDataset," but
  the code is much more efficient in execution.</para>

  <para>Example:</para>

  <programlisting>ds := DATASET([{'X',1},{'B',3},{'C',2},{'B',5},
               {'C',4},{'D',6},{'E',2}],
              {STRING1 Ltr, INTEGER1 Val});

//a SET of just the Ltr field values:
s1 := SET(ds,Ltr);
COUNT(s1);  //results in 7
s1;         //results in ['X','B','C','B','C','D','E']

//a simple way to get just the unique elements 
//is to use a crosstab TABLE:
t := TABLE(ds,{Ltr},Ltr); //order indeterminant

s2 := SET(t,Ltr);
COUNT(s2);  //results in 5
s2;         //results in   ['D','X','C','E','B'] 

//sorted unique elements 
s3 := SET(SORT(t,Ltr),Ltr);
COUNT(s3);  //results in 5
s3;         //results in ['B','C','D','E','X']</programlisting>

  <para>See Also: <link linkend="Recordset_Filtering">Sets and Filters</link>,
  <link linkend="SET_OF">SET OF</link>, <link linkend="Set_Operators">Set
  Operators</link>, <link linkend="IN_Operator">IN Operator</link></para>
</sect1>

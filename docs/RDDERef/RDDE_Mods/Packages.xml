<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
"http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<chapter>
  <title><emphasis role="bold">Packages and Packagemaps</emphasis></title>

  <para>A Roxie query has one or more data files associated with it. At times,
  you may want to update data without changing the query.</para>

  <para>Packages are a way to separate the data definition from the
  query.</para>

  <para>A package defines a superkey that a query will use. A newer package
  that redefines the contents of that superkey can later be sent to a Roxie
  cluster without recompiling any queries. This allows you to refresh data and
  while ensuring that you are using identical code in your query. It also
  eliminates the need to recompile it and republish it.</para>

  <para>This simplifies change control and allows query developers to continue
  development without the risk of a query being deployed to production before
  it is ready while still allowing data to be updated.</para>

  <para>A packagemap provides a reference to the contents of a superkey used
  in queries that overrides the original definition . This affords greater
  flexibility and control over the data used by a query or a collection of
  queries.</para>

  <para>Roxie resolves data files at query load time. First, it will look for
  a package defining the superkey contents. If there is no package, it will
  look in the Dali Server's DFU (Distributed File Utility).</para>

  <para>The end result is quicker, more flexible process, without the need of
  recompiling complex queries. This allows you to update data without the
  chance of deploying new code that has not been approved for migration to
  production.</para>

  <para>Without packages, you would do one of the following:</para>

  <para>- Add new subfile(s) to the superkey via ECL code, ECLWatch, or
  DFUPlus, then reload the cluster.</para>

  <para>- Revise the query to use a different key file, compile it, and
  republish it.</para>

  <para>A packagemap file can contain one or more packages. The file is used
  to transfer the information to the Dali server. Once it is sent, the file is
  no longer used. It is a good idea to keep a copy as a backup, but it serves
  no other purpose.</para>

  <para>The definition of a superfile or superkey inside of a package file
  overrides the definition in Dali, but does NOT change the superfile or
  superkey definition in Dali Server's DFU.</para>

  <para>Package information is used as soon as it is added to Dali and the
  package is activated. This can be done using using <emphasis role="bold">ecl
  packagemap add --activate</emphasis> (or <emphasis role="bold">ecl
  packagemap add</emphasis> &amp; <emphasis role="bold">ecl packagemap
  activate</emphasis>).</para>

  <!--You should always validate or run the reporting step on the packages (NYI)-->

  <sect1>
    <title>Example</title>

    <para>In this example, we have a query named MyQuery which uses a superkey
    named MyDataKey that includes two subfiles:</para>

    <itemizedlist mark="bullet">
      <listitem>
        <para><emphasis role="bold">~thor::Mysubfile1</emphasis></para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">~thor::Mysubfile2</emphasis></para>
      </listitem>
    </itemizedlist>

    <para>If we wanted to add a third subfile, we can use a packagemap to
    redefine the MyDataKey superkey definition so it contains three
    files:</para>

    <itemizedlist mark="bullet">
      <listitem>
        <para><emphasis role="bold">~thor::Mysubfile1</emphasis></para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">~thor::Mysubfile2</emphasis></para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">~thor::Mysubfile3</emphasis></para>
      </listitem>
    </itemizedlist>

    <para><emphasis role="redbold"></emphasis></para>

    <para><emphasis role="bold">Example 1:</emphasis></para>

    <programlisting>&lt;RoxiePackages&gt;
 &lt;Package id="MyQuery"&gt;
  &lt;Base id="thor::MyData_Key"/&gt;
 &lt;/Package&gt;
 &lt;Package id="thor::MyData_Key"&gt;
  &lt;SuperFile id="~thor::MyData_Key"&gt;
   &lt;SubFile value="~thor::Mysubfile1"/&gt;
   &lt;SubFile value="~thor::Mysubfile2"/&gt;
  &lt;/SuperFile&gt;
 &lt;/Package&gt;
&lt;/RoxiePackages&gt;

</programlisting>

    <para><emphasis role="bold">Example 2:</emphasis></para>

    <para><programlisting>&lt;RoxiePackages&gt;
 &lt;Package id="MyQuery"&gt;
  &lt;Base id="thor::MyData_Key"/&gt;
 &lt;/Package&gt;
 &lt;Package id="thor::MyData_Key"&gt;
  &lt;SuperFile id="~thor::MyData_Key"&gt;
   &lt;SubFile value="~thor::Mysubfile1"/&gt;
   &lt;SubFile value="~thor::Mysubfile2"/&gt;
   &lt;SubFile value="~thor::Mysubfile3"/&gt;
  &lt;/SuperFile&gt;
 &lt;/Package&gt;
&lt;/RoxiePackages&gt;

</programlisting></para>
  </sect1>

  <sect1>
    <title><emphasis role="bold">Updating Data</emphasis></title>

    <para>This section details the typical steps a query developer and a data
    developer follow once a query is ready for production.</para>

    <itemizedlist mark="bullet">
      <listitem>
        <para>Prepare the data (in this workflow, the data is defined as a
        superkey)</para>
      </listitem>

      <listitem>
        <para>Write the query and test</para>
      </listitem>

      <listitem>
        <para>Publish a query using the data</para>
      </listitem>
    </itemizedlist>

    <para>Later when you want to update the data:</para>

    <para>Deploy the data in one of the following manners:</para>

    <itemizedlist mark="bullet">
      <listitem>
        <para>Create a packagemap containing a package redefining the contents
        of the superkey</para>
      </listitem>

      <listitem>
        <para>Add the packagemap(s) by associating the package information
        with a QuerySet.</para>

        <!--You should always validate or run the reporting step on the packages (NYI)-->
      </listitem>

      <listitem>
        <para>Activate the packagemap(s) with the pertinent package
        information targeting a QuerySet.</para>

        <para>Use the command:</para>
      </listitem>
    </itemizedlist>

    <para><programlisting role="bold">ecl packagemap add --activate</programlisting></para>

    <para></para>

    <para>Later when new data arrives, follow these steps to update the data
    using packages:</para>

    <itemizedlist mark="bullet">
      <listitem>
        <para>Prepare the data and create a new subfile</para>
      </listitem>
    </itemizedlist>

    <variablelist>
      <varlistentry>
        <term>Note:</term>

        <listitem>
          <para>We strongly recommend against reusing a file name. It is
          generally better to create new files. Roxie shares file handles so
          trying to change an existing file while it is loaded could cause
          issues.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <itemizedlist mark="bullet">
      <listitem>
        <para>Create a package with a superkey definition that includes the
        new subfile</para>
      </listitem>
    </itemizedlist>

    <itemizedlist mark="bullet">
      <listitem>
        <para>Add the packagemap redefining the contents of the superkey.
        </para>

        <para>Use the command:</para>

        <!--You should always validate or run the reporting step on the packages (NYI)-->
      </listitem>
    </itemizedlist>

    <para><programlisting role="bold">ecl packagemap add --activate</programlisting></para>

    <para></para>
  </sect1>

  <sect1>
    <title><emphasis role="bold">Package File Syntax</emphasis></title>

    <para>Package files are formatted in XML using the conventions detailed in
    this section.</para>

    <para>A Package file must begin with <emphasis
    role="bold">&lt;RoxiePackages&gt;</emphasis> and end with <emphasis
    role="bold">&lt;/RoxiePackages&gt;</emphasis>.</para>

    <para>Package tags have an <emphasis role="bold">id</emphasis> attribute
    that specifies what the package is referring to.</para>

    <para>Inside the <emphasis role="bold">&lt;Package&gt;</emphasis>
    structure, references are made either to superfiles or other named
    packages. This indirect naming convention allows you to group file
    definitions together and reference the package containing the
    group.</para>

    <para>The example shows query references first and file references
    following; however, this order is not required.</para>

    <para><emphasis role="bold">The lines are numbered only for reference
    purposes. The comments are included for clarity, but are not required.
    </emphasis></para>

    <para><emphasis role="bold">Example</emphasis>:</para>

    <para></para>

    <programlisting> 1.  &lt;RoxiePackages&gt;
 2.   &lt;!-- Begin Queries --&gt;
 3.     &lt;Package id="MyQuery"&gt;
 4.     &lt;Base id="thor::MyData_Key"/&gt;
 5.    &lt;/Package&gt;
 6.    &lt;!-- End Queries --&gt;
 7.    &lt;!-- Begin File references --&gt;
 8.    &lt;Package id="thor::MyData_Key"&gt;
 9.      &lt;SuperFile id="~thor::MyData_Key"&gt;
10.       &lt;SubFile value="~thor::Mysubfile1"/&gt;
11.       &lt;SubFile value="~thor::Mysubfile2"/&gt;
12.        &lt;SubFile value="~thor::Mysubfile3"/&gt;
13.      &lt;/SuperFile&gt;
14.    &lt;/Package&gt;
15.    &lt;!--End File references --&gt;
16.  &lt;/RoxiePackages&gt;
</programlisting>

    <para>In this example, we have a query: <emphasis
    role="bold">MyQuery</emphasis>. The query uses a superkey defined in a
    package named <emphasis role="bold">thor::MyData_Key</emphasis>. This is
    later defined on line 8. The <emphasis role="bold"><emphasis
    role="bold">thor::MyData_Key</emphasis></emphasis> package contains one
    superkey definition.</para>

    <para>The example shows query references first and file references
    following; however, this order is not required.</para>
  </sect1>

  <sect1>
    <title><emphasis role="bold">Working with Packages using the ecl command
    line tool</emphasis></title>

    <para>This section contains details about the actions and options used to
    work with packages. The ECL command line tool is fully documented in the
    Client Tools Manual.</para>

    <para></para>

    <para></para>

    <xi:include href="../../HPCCClientTools/CT_Mods/CT_ECL_CLI.xml"
                xpointer="eclpackageadd"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <xi:include href="../../HPCCClientTools/CT_Mods/CT_ECL_CLI.xml"
                xpointer="eclpackagedelete"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <xi:include href="../../HPCCClientTools/CT_Mods/CT_ECL_CLI.xml"
                xpointer="eclpackageactivate"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <xi:include href="../../HPCCClientTools/CT_Mods/CT_ECL_CLI.xml"
                xpointer="eclpackagedeactivate"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <xi:include href="../../HPCCClientTools/CT_Mods/CT_ECL_CLI.xml"
                xpointer="eclpackagelist"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <xi:include href="../../HPCCClientTools/CT_Mods/CT_ECL_CLI.xml"
                xpointer="eclpackageinfo"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <xi:include href="../../HPCCClientTools/CT_Mods/CT_ECL_CLI.xml"
                xpointer="eclpackagevalidate"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <sect2 role="brk">
      <title>Tips:</title>

      <itemizedlist mark="bullet">
        <listitem>
          <para>Always use superfiles or superkeys to take advantage of
          indirect naming and to allow the use of packages. Roxie does not
          require this, but it works best this way.</para>
        </listitem>

        <listitem>
          <para>Use unique filenames instead of overwriting existing files.
          This prevents accidental overwrites and provides an easy way to roll
          back.</para>
        </listitem>

        <listitem>
          <para>If you have a large collection of keys, it is easier to
          maintain if you use superkeys with a single subindex-file. Multiple
          subfiles are useful when you need to add data quickly, but if time
          allows, it is better to rebuild a new single key file.</para>
        </listitem>

        <listitem>
          <para>Before you delete a packagemap, make sure you have a backup
          copy.</para>

          <!--You should always validate or run the reporting step on the packages (NYI)-->
        </listitem>
      </itemizedlist>
    </sect2>
    
  </sect1>
                
</chapter>

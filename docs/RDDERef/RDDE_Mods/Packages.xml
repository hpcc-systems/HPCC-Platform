<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
"http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<chapter>
  <title><emphasis role="bold">Packages</emphasis></title>

  <para>Packages are used as a means to separate data from queries. Newer
  Packages can be sent to a Roxie cluster without recompiling queries. This
  allows you to refresh data and while ensuring that you are using identical
  code in your query.</para>

  <para>This simplifies change control and allows query developers to continue
  development without the risk of a query being deployed to production before
  it is ready while still allowing data to be updated.</para>

  <para>Packages provide a reference to data files used in queries that
  overrides the information originally provided in the query. This affords
  greater flexibility and control over the data used by a query or a
  collection of queries.</para>

  <para>The end result is quicker, more flexible process, without the need of
  recompiling complex queries. This allows you to update data without the
  chance of deploying new code that has not been approved for migration to
  production.</para>

  <para>A package file can contain one or more packages. The file is used to
  transfer the information to the Dali server. Once it is sent, the file is no
  longer used. It is a good idea to keep a copy as a backup, but it serves no
  other purpose.</para>

  <para>The definition of a superkey inside of a package file overrides the
  definition in Dali, but does NOT change the superkey definition in
  Dali.</para>

  <para><emphasis role="bold">Example1:</emphasis></para>

  <programlisting>&lt;RoxiePackages&gt;
 &lt;Package id="MyQuery"&gt;
  &lt;Base id="thor::MyData_Key"/&gt;
 &lt;/Package&gt;
 &lt;Package id="thor::MyData_Key"&gt;
  &lt;SuperFile id="~thor::MyData_Key"&gt;
   &lt;SubFile value="~thor::MysubfileMonday"/&gt;
   &lt;SubFile value="~thor::MysubfileTuesday"/&gt;
  &lt;/SuperFile&gt;
 &lt;/Package&gt;
&lt;/RoxiePackages&gt;

</programlisting>

  <para><emphasis role="bold">Example2:</emphasis></para>

  <para><programlisting>&lt;RoxiePackages&gt;
 &lt;Package id="MyQuery"&gt;
  &lt;Base id="thor::MyData_Key"/&gt;
 &lt;/Package&gt;
 &lt;Package id="thor::MyData_Key"&gt;
  &lt;SuperFile id="~thor::MyData_Key"&gt;
   &lt;SubFile value="~thor::MysubfileMonday"/&gt;
   &lt;SubFile value="~thor::MysubfileTuesday"/&gt;
   &lt;SubFile value="~thor::MysubfileWednesday"/&gt;
  &lt;/SuperFile&gt;
 &lt;/Package&gt;
&lt;/RoxiePackages&gt;

</programlisting></para>

  <para>In the examples above, using the package in Example 1, a query named
  MyQuery would use a superkey including two subfiles :</para>

  <itemizedlist mark="bullet">
    <listitem>
      <para><emphasis role="bold">~thor::MysubfileMonday</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="bold">~thor::MysubfileTuesday</emphasis>.</para>
    </listitem>
  </itemizedlist>

  <para>If we were to replace the package with the one in Example2, the query
  named MyQuery would use the superkey definition that contains three
  files:</para>

  <itemizedlist mark="bullet">
    <listitem>
      <para><emphasis role="bold">~thor::MysubfileMonday</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="bold">~thor::MysubfileTuesday</emphasis></para>
    </listitem>
  </itemizedlist>

  <para>and</para>

  <itemizedlist mark="bullet">
    <listitem>
      <para><emphasis role="bold">~thor::MysubfileWednesday</emphasis>.</para>
    </listitem>
  </itemizedlist>

  <para>Package information is active as soon as it is added to Dali and the
  package is activated (using <emphasis role="bold">ecl package add</emphasis>
  and <emphasis role="bold">ecl package activate</emphasis>).</para>

  <para></para>

  <para><emphasis role="bold">You should always validate packages before
  adding to a cluster.</emphasis></para>

  <para><emphasis role="redbold">(Note: This capability is not yet fully
  implemented)</emphasis></para>

  <para></para>

  <para></para>

  <sect1>
    <title><emphasis role="bold">Updating Data</emphasis></title>

    <para>This section details the typical steps a query developer and a data
    developer follow once a query is ready for production.</para>

    <itemizedlist mark="bullet">
      <listitem>
        <para>Prepare the data</para>
      </listitem>

      <listitem>
        <para>Write the query and test.</para>
      </listitem>

      <listitem>
        <para>Deploy the data in one of the following manners:</para>
      </listitem>

      <listitem>
        <para>Spray to Roxie using DFU</para>
      </listitem>

      <listitem>
        <para>Use the command</para>
      </listitem>
    </itemizedlist>

    <para><programlisting role="bold">ecl package copyFiles</programlisting></para>

    <itemizedlist mark="bullet">
      <listitem>
        <para>Publish a query using the data</para>
      </listitem>

      <listitem>
        <para>Validate package(s). <emphasis role="redbold">(Not yet fully
        implemented)</emphasis></para>
      </listitem>

      <listitem>
        <para>Add the Package(s) by associating the package information with a
        QuerySet.</para>
      </listitem>

      <listitem>
        <para>Use the command</para>
      </listitem>
    </itemizedlist>

    <para><programlisting role="bold">ecl package add</programlisting></para>

    <para></para>

    <para>Later when new data arrives, follow these steps to update:</para>

    <itemizedlist mark="bullet">
      <listitem>
        <para>Prepare the data and create a new sub file.</para>
      </listitem>
    </itemizedlist>

    <variablelist>
      <varlistentry>
        <term>Note:</term>

        <listitem>
          <para>We do not recommend reusing a file name. It is generally
          better to create new files. Roxie shares file handles so changing an
          existing file while it is loaded could cause issues.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <itemizedlist mark="bullet">
      <listitem>
        <para>Create a package with the new superfile/key definition including
        the new subfile.</para>
      </listitem>

      <listitem>
        <para>Deploy the new subfile in one of the following manners:</para>
      </listitem>

      <listitem>
        <para>Spray to Roxie using DFU</para>
      </listitem>

      <listitem>
        <para>Use the command</para>
      </listitem>
    </itemizedlist>

    <para><programlisting role="bold">ecl package copyFiles</programlisting></para>

    <itemizedlist mark="bullet">
      <listitem>
        <para>Validate package(s). <emphasis role="redbold">(Not yet fully
        implemented)</emphasis></para>
      </listitem>
    </itemizedlist>

    <para></para>

    <itemizedlist mark="bullet">
      <listitem>
        <para>Add the Package(s) by associating the package information with a
        QuerySet.</para>
      </listitem>

      <listitem>
        <para>Use the command</para>
      </listitem>
    </itemizedlist>

    <para><programlisting role="bold">ecl package add</programlisting></para>

    <para></para>
  </sect1>

  <sect1>
    <title><emphasis role="bold">Package File Syntax</emphasis></title>

    <para>Package files are formatted in XML using the conventions detailed in
    this section. A Package file must begin with <emphasis
    role="bold">&lt;RoxiePackages&gt;</emphasis> and end with <emphasis
    role="bold">&lt;/RoxiePackages&gt;</emphasis>. Package tags have an
    <emphasis role="bold">id</emphasis> attribute that specifies what the
    package is referring to. Inside the <emphasis
    role="bold">&lt;Package&gt;</emphasis> structure, references are made
    either to superfiles or other named packages. This indirect naming
    convention allows you to group file definitions together and reference the
    package containing the group. <emphasis role="bold">The lines are numbered
    only for reference purposes.</emphasis></para>

    <para><emphasis role="bold">Example</emphasis>:</para>

    <orderedlist numeration="arabic">
      <listitem>
        <para>&lt;RoxiePackages&gt;</para>
      </listitem>

      <listitem>
        <para>&lt;!-- Begin Queries --&gt;</para>
      </listitem>

      <listitem>
        <para>&lt;Package id="emily.FetchFromSuperfileService.1"&gt;</para>
      </listitem>

      <listitem>
        <para>&lt;Base id="emily::superfile::base"/&gt;</para>
      </listitem>

      <listitem>
        <para>&lt;/Package&gt;</para>
      </listitem>

      <listitem>
        <para>&lt;Package id="emily.JoinFromSuperfileService.1"&gt;</para>
      </listitem>

      <listitem>
        <para>&lt;Base id="emily::superfile::base"/&gt;</para>
      </listitem>

      <listitem>
        <para>&lt;Base id="emily::anothersuperfile::basefile"/&gt;</para>
      </listitem>

      <listitem>
        <para>&lt;/Package&gt;</para>
      </listitem>

      <listitem>
        <para>&lt;!-- End Queries --&gt;</para>
      </listitem>

      <listitem>
        <para>&lt;!â€”Begin File references --&gt;</para>
      </listitem>

      <listitem>
        <para>&lt;Package id="emily::superfile::base"&gt;</para>
      </listitem>

      <listitem>
        <para>&lt;SuperFile id="~emily::superfile::base"&gt;</para>
      </listitem>

      <listitem>
        <para>&lt;SubFile value="~emily::superfile::subfileA"/&gt;</para>
      </listitem>

      <listitem>
        <para>&lt;/SuperFile&gt;</para>
      </listitem>

      <listitem>
        <para>&lt;Package id="emily::anothersuperfile::basefile"&gt;</para>
      </listitem>

      <listitem>
        <para>&lt;SuperFile id="~emily::superfile::anotherbasefile"&gt;</para>
      </listitem>

      <listitem>
        <para>&lt;SubFile value="~emily::superfile::subfileB"/&gt;</para>
      </listitem>

      <listitem>
        <para>&lt;/SuperFile&gt;</para>
      </listitem>

      <listitem>
        <para>&lt;/Package&gt;</para>
      </listitem>

      <listitem>
        <para>&lt;!-- End File references --&gt;</para>
      </listitem>

      <listitem>
        <para>&lt;/RoxiePackages&gt;</para>
      </listitem>
    </orderedlist>

    <para>In this example, we have two queries: <emphasis
    role="bold">emily.FetchFromSuperfileService.1</emphasis> and <emphasis
    role="bold">emily.JoinFromSuperfileService.1</emphasis>.</para>

    <para>The first query uses a collection of file references defined in
    another package named <emphasis
    role="bold">emily::superfile::base</emphasis>. This collection is later
    defined on line 12. The <emphasis
    role="bold">emily::superfile::base</emphasis> package contains one
    superfile definition.</para>

    <para>The second query uses two collections of file references (packages)
    defined on line 12 and one line 16. Notice that one of these is the same
    one used by the first query.</para>

    <para>The example above shows queries references first and file references
    after; however, this order is not required. </para>
  </sect1>

  <sect1>
    <title><emphasis role="bold">Working with Packages using the ecl command
    line tool</emphasis></title>

    <para>This section contains details about the actions and options used to
    work with packages. The ECL command line tool is fully documented in the
    Client Tools Manual.</para>

    <para></para>

    <para></para>

    <xi:include href="../../HPCCClientTools/CT_Mods/CT_ECL_CLI.xml"
                xpointer="eclpackageadd"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <xi:include href="../../HPCCClientTools/CT_Mods/CT_ECL_CLI.xml"
                xpointer="eclpackagecopyfiles"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <xi:include href="../../HPCCClientTools/CT_Mods/CT_ECL_CLI.xml"
                xpointer="eclpackagedelete"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <xi:include href="../../HPCCClientTools/CT_Mods/CT_ECL_CLI.xml"
                xpointer="eclpackageactivate"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <xi:include href="../../HPCCClientTools/CT_Mods/CT_ECL_CLI.xml"
                xpointer="eclpackagedeactivate"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <xi:include href="../../HPCCClientTools/CT_Mods/CT_ECL_CLI.xml"
                xpointer="eclpackagelist"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <xi:include href="../../HPCCClientTools/CT_Mods/CT_ECL_CLI.xml"
                xpointer="eclpackageinfo"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <sect2>
      <title>Tips:</title>

      <itemizedlist mark="bullet">
        <listitem>
          <para>Always use superfiles or superkeys to take advantage of
          indirect naming and to allow the use of packages. Roxie does not
          require this, but it works best this way.</para>
        </listitem>

        <listitem>
          <para>Use unique filenames instead of overwriting existing files.
          This prevents accidental overwrites and provides an easy method to
          roll back.</para>
        </listitem>

        <listitem>
          <para>If you have a large collection of keys, it is easier to
          maintain if you use superkeys with a single subindex-file. Multiple
          subfiles are useful when you need to add data quickly, but if time
          allows, it is better to rebuild a new single key file.</para>
        </listitem>

        <listitem>
          <para>Before you delete a package, make sure you have a backup
          copy.</para>
        </listitem>
      </itemizedlist>
    </sect2>
  </sect1>
</chapter>

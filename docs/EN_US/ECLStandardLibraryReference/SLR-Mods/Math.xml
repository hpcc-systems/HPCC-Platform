<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="Math_Library">
  <!-- DNT-Start --><title><emphasis>Math Support</emphasis></title><!-- DNT-End -->

  <para>This section covers the common math functions in the Standard
  Library.</para>

  <para></para>

  <sect1 id="Infinity">
    <!-- DNT-Start --><title>Infinity</title><!-- DNT-End -->

    <!-- DNT-Start --><para><emphasis role="bold">STD.Math.Infinity<indexterm>
        <primary>STD.Math.Infinity</primary>
      </indexterm><indexterm>
        <primary>Math.Infinity</primary>
      </indexterm><indexterm>
        <primary>Infinity</primary>
      </indexterm>;</emphasis></para><!-- DNT-End -->

    <informaltable colsep="1" frame="all" rowsep="1">
      <tgroup cols="2">
        <colspec colwidth="80.50pt" />

        <colspec />

        <tbody>
          <row>
            <entry><!-- DNT-Start -->Return:<emphasis></emphasis><!-- DNT-End --></entry>

            <entry>Returns a <!-- DNT-Start -->REAL<!-- DNT-End --> "infinity" value.</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para><emphasis role="bold"><!-- DNT-Start -->Infinity<!-- DNT-End --> </emphasis>returns an "infinity"
    value.</para>

    <para>Example:</para>

    <!-- DNT-Start --><programlisting format="linespecific">IMPORT STD;
myValue := STD.Math.Infinity;
myValue;
</programlisting><!-- DNT-End -->

    <para>See Also: <link linkend="isInfinite"><!-- DNT-Start -->isInfinite<!-- DNT-End --></link></para>
  </sect1>

  <sect1 id="NaN">
    <!-- DNT-Start --><title>NaN</title><!-- DNT-End -->

    <para><emphasis role="bold"><!-- DNT-Start -->STD<!-- DNT-End -->.Math.<!-- DNT-Start -->NaN<!-- DNT-End --><indexterm>
        <primary><!-- DNT-Start -->STD<!-- DNT-End -->.Math.<!-- DNT-Start -->NaN<!-- DNT-End --></primary>
      </indexterm><indexterm>
        <primary>Math.<!-- DNT-Start -->NaN<!-- DNT-End --></primary>
      </indexterm><indexterm>
        <primary><!-- DNT-Start -->NaN<!-- DNT-End --></primary>
      </indexterm></emphasis><emphasis>;</emphasis>
    <emphasis></emphasis></para>

    <para></para>

    <informaltable colsep="1" frame="all" rowsep="1">
      <tgroup cols="2">
        <colspec colwidth="80.50pt" />

        <colspec />

        <tbody>
          <row>
            <entry><!-- DNT-Start -->Return:<emphasis></emphasis><!-- DNT-End --></entry>

            <entry>Returns a non-signalling <!-- DNT-Start -->NaN<!-- DNT-End --> (Not a Number)value.</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>The <emphasis role="bold"><!-- DNT-Start -->NaN<!-- DNT-End --> </emphasis>function returns a
    non-signalling <!-- DNT-Start -->NaN<!-- DNT-End --> (Not a Number) value..</para>

    <para>Example:</para>

    <!-- DNT-Start --><programlisting format="linespecific">IMPORT STD;
myValue := STD.Math.NaN;
myValue;
</programlisting><!-- DNT-End -->

    <para>See Also: <link linkend="isNaN">IsNan</link></para>
  </sect1>

  <sect1 id="isInfinite">
    <!-- DNT-Start --><title>isInfinite</title><!-- DNT-End -->

    <para><emphasis role="bold"><!-- DNT-Start -->STD<!-- DNT-End -->.Math.<!-- DNT-Start -->isInfinite<!-- DNT-End --><indexterm>
        <primary><!-- DNT-Start -->STD<!-- DNT-End -->.Math.<!-- DNT-Start -->isInfinite<!-- DNT-End --></primary>
      </indexterm><indexterm>
        <primary>Math.<!-- DNT-Start -->isInfinite<!-- DNT-End --></primary>
      </indexterm><indexterm>
        <primary><!-- DNT-Start -->isInfinite<!-- DNT-End --></primary>
      </indexterm>(</emphasis> <emphasis>val</emphasis><emphasis>);</emphasis>
    <emphasis></emphasis></para>

    <para></para>

    <informaltable colsep="1" frame="all" rowsep="1">
      <tgroup cols="2">
        <colspec colwidth="80.50pt" />

        <colspec />

        <tbody>
          <row>
            <entry><!-- DNT-Start --><emphasis>val</emphasis><!-- DNT-End --></entry>

            <entry>The value to test</entry>
          </row>

          <row>
            <entry><!-- DNT-Start -->Return:<emphasis></emphasis><!-- DNT-End --></entry>

            <entry>Returns a <!-- DNT-Start -->BOOLEAN<!-- DNT-End --> indicating whether a real value is
            infinite (positive or negative).</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>The <emphasis role="bold"><!-- DNT-Start -->isInfinite<!-- DNT-End --> </emphasis>function returns
    whether a real value is infinite (positive or negative).</para>

    <para>Example:</para>

    <!-- DNT-Start --><programlisting format="linespecific">IMPORT STD;
a := STD.Math.Infinity ;
b := 42.1;
STD.Math.isInfinite(a); //true
STD.Math.isInfinite(b); //false
</programlisting><!-- DNT-End -->

    <para>See Also: <link linkend="Infinity"><!-- DNT-Start -->Infinity<!-- DNT-End -->, </link><link
    linkend="isFinite"><!-- DNT-Start -->isFinite<!-- DNT-End --></link></para>
  </sect1>

  <sect1 id="isNaN">
    <!-- DNT-Start --><title>isNaN</title><!-- DNT-End -->

    <para><emphasis role="bold"><!-- DNT-Start -->STD<!-- DNT-End -->.Math.<!-- DNT-Start -->isNaN<!-- DNT-End --><indexterm>
        <primary><!-- DNT-Start -->STD<!-- DNT-End -->.Math.<!-- DNT-Start -->isNaN<!-- DNT-End --></primary>
      </indexterm><indexterm>
        <primary>Math.<!-- DNT-Start -->isNaN<!-- DNT-End --></primary>
      </indexterm><indexterm>
        <primary><!-- DNT-Start -->isNaN<!-- DNT-End --></primary>
      </indexterm>(</emphasis> <emphasis>val</emphasis><emphasis>);</emphasis>
    <emphasis></emphasis></para>

    <para></para>

    <informaltable colsep="1" frame="all" rowsep="1">
      <tgroup cols="2">
        <colspec colwidth="80.50pt" />

        <colspec />

        <tbody>
          <row>
            <entry><!-- DNT-Start --><emphasis>val</emphasis><!-- DNT-End --></entry>

            <entry>The value to test</entry>
          </row>

          <row>
            <entry><!-- DNT-Start -->Return:<emphasis></emphasis><!-- DNT-End --></entry>

            <entry>Returns a <!-- DNT-Start -->BOOLEAN<!-- DNT-End --> indicating whether a real value is a <!-- DNT-Start -->NaN<!-- DNT-End -->
            (not a number) value.</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>The <emphasis role="bold"><!-- DNT-Start -->isNaN<!-- DNT-End --> </emphasis>function returns whether
    a real value is a <!-- DNT-Start -->NaN<!-- DNT-End --> (not a number) value.</para>

    <para>Example:</para>

    <!-- DNT-Start --><programlisting format="linespecific">IMPORT STD;
a := STD.Math.NaN ;
b := 42.1;
STD.Math.isNaN(a); //true
STD.Math.isNaN(b); //false
</programlisting><!-- DNT-End -->

    <para>See Also: <link linkend="NaN"><!-- DNT-Start -->NaN<!-- DNT-End -->,</link><link linkend="isFinite">
    <!-- DNT-Start -->isFinite<!-- DNT-End --></link></para>
  </sect1>

  <sect1 id="isFinite">
    <!-- DNT-Start --><title>isFinite</title><!-- DNT-End -->

    <para><emphasis role="bold"><!-- DNT-Start -->STD<!-- DNT-End -->.Math.<!-- DNT-Start -->isFinite<!-- DNT-End --><indexterm>
        <primary><!-- DNT-Start -->STD<!-- DNT-End -->.Math.<!-- DNT-Start -->isFinite<!-- DNT-End --></primary>
      </indexterm><indexterm>
        <primary>Math.<!-- DNT-Start -->isFinite<!-- DNT-End --></primary>
      </indexterm><indexterm>
        <primary><!-- DNT-Start -->isFinite<!-- DNT-End --></primary>
      </indexterm>(</emphasis> <emphasis>val</emphasis><emphasis>);</emphasis>
    <emphasis></emphasis></para>

    <para></para>

    <informaltable colsep="1" frame="all" rowsep="1">
      <tgroup cols="2">
        <colspec colwidth="80.50pt" />

        <colspec />

        <tbody>
          <row>
            <entry><!-- DNT-Start --><emphasis>val</emphasis><!-- DNT-End --></entry>

            <entry>The value to test</entry>
          </row>

          <row>
            <entry><!-- DNT-Start -->Return:<emphasis></emphasis><!-- DNT-End --></entry>

            <entry>Returns a <!-- DNT-Start -->BOOLEAN<!-- DNT-End --> indicating whether a real value is a
            valid value (neither infinite not <!-- DNT-Start -->NaN<!-- DNT-End -->).</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>The <emphasis role="bold"><!-- DNT-Start -->isFinite<!-- DNT-End --> </emphasis>function returns
    whether a real value is a valid value (neither infinite not <!-- DNT-Start -->NaN<!-- DNT-End -->).</para>

    <para>Example:</para>

    <!-- DNT-Start --><programlisting format="linespecific">IMPORT STD;
a := STD.Math.Infinity ;
b := STD.Math.NaN;
c := 42.1;
STD.Math.isFinite(a); //false
STD.Math.isFinite(b); //false
STD.Math.isFinite(c); //true
</programlisting><!-- DNT-End -->

    <para>See Also: <link linkend="isNaN"><!-- DNT-Start -->isNaN<!-- DNT-End --> ,</link><link
    linkend="isInfinite"><!-- DNT-Start -->isInfinite<!-- DNT-End --></link></para>
  </sect1>

  <sect1 id="FMod">
    <!-- DNT-Start --><title>FMod</title><!-- DNT-End -->

    <para><emphasis role="bold"><!-- DNT-Start -->STD<!-- DNT-End -->.Math.<!-- DNT-Start -->FMod<!-- DNT-End --><indexterm>
        <primary><!-- DNT-Start -->STD<!-- DNT-End -->.Math.<!-- DNT-Start -->FMod<!-- DNT-End --></primary>
      </indexterm><indexterm>
        <primary>Math.<!-- DNT-Start -->FMod<!-- DNT-End --></primary>
      </indexterm><indexterm>
        <primary><!-- DNT-Start -->FMod<!-- DNT-End --></primary>
      </indexterm>(</emphasis> <emphasis>numer, denom);</emphasis>
    <emphasis></emphasis></para>

    <para></para>

    <informaltable colsep="1" frame="all" rowsep="1">
      <tgroup cols="2">
        <colspec colwidth="80.50pt" />

        <colspec />

        <tbody>
          <row>
            <entry><!-- DNT-Start --><emphasis>numer</emphasis><!-- DNT-End --></entry>

            <entry>The numerator</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis>denom</emphasis><!-- DNT-End --></entry>

            <entry>The denominator</entry>
          </row>

          <row>
            <entry><!-- DNT-Start -->Return:<emphasis></emphasis><!-- DNT-End --></entry>

            <entry>Returns the floating-point remainder of numer/denom
            (rounded towards zero).</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>The <emphasis role="bold"><!-- DNT-Start -->FMod<!-- DNT-End --></emphasis> function returns the
    floating-point remainder of numer/denom (rounded towards zero). </para>

    <para>If denom is zero, the result depends on the divideByZero flag:
    </para>

    <itemizedlist>
      <listitem>
        <para>If set to 'zero' or unset: returns zero. </para>
      </listitem>

      <listitem>
        <para>If set to 'nan': returns a non-signalling <!-- DNT-Start -->NaN<!-- DNT-End --> value.</para>
      </listitem>

      <listitem>
        <para>If set to 'fail': throws an exception.</para>
      </listitem>
    </itemizedlist>

    <para>Example:</para>

    <!-- DNT-Start --><programlisting format="linespecific">#OPTION ('divideByZero', 'nan'); //divide by zero creates a quiet NaN
IMPORT STD;
STD.Math.FMod(5.1, 3.0);  // 2.1
STD.Math.FMod(-5.1, 3.0); // -2.1
STD.Math.FMod(5.1, 0);    // NaN
</programlisting><!-- DNT-End -->

    <para></para>
  </sect1>

  <sect1 id="FMatch">
    <!-- DNT-Start --><title>FMatch</title><!-- DNT-End -->

    <para><emphasis role="bold"><!-- DNT-Start -->STD<!-- DNT-End -->.Math.<!-- DNT-Start -->FMatch<!-- DNT-End --><indexterm>
        <primary><!-- DNT-Start -->STD<!-- DNT-End -->.Math.<!-- DNT-Start -->FMatch<!-- DNT-End --></primary>
      </indexterm><indexterm>
        <primary>Math.<!-- DNT-Start -->FMatch<!-- DNT-End --></primary>
      </indexterm><indexterm>
        <primary><!-- DNT-Start -->FMatch<!-- DNT-End --></primary>
      </indexterm>(</emphasis> <emphasis>a, b, epsilon);</emphasis>
    <emphasis></emphasis></para>

    <para></para>

    <informaltable colsep="1" frame="all" rowsep="1">
      <tgroup cols="2">
        <colspec colwidth="80.50pt" />

        <colspec />

        <tbody>
          <row>
            <entry><!-- DNT-Start --><emphasis>a</emphasis><!-- DNT-End --></entry>

            <entry>The first value.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis>b</emphasis><!-- DNT-End --></entry>

            <entry>The second value.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis>epsilon</emphasis><!-- DNT-End --></entry>

            <entry>The allowable margin of error.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start -->Return:<emphasis></emphasis><!-- DNT-End --></entry>

            <entry>Returns whether two floating point values are the same,
            within margin of error epsilon.</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>The <emphasis role="bold"><!-- DNT-Start -->FMatch<!-- DNT-End --></emphasis> function returns whether
    two floating point values are the same, within margin of error
    epsilon.</para>

    <para>Example:</para>

    <!-- DNT-Start --><programlisting format="linespecific">IMPORT STD;
STD.Math.FMatch(2.6,2.2,0.5); //true
STD.Math.FMatch(2.6,2.2,0.3); //false</programlisting><!-- DNT-End -->

    <para></para>
  </sect1>
</chapter>

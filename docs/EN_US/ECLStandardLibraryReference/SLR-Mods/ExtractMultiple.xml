<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<sect1 id="ExtractMultiple">
  <title>ExtractMultiple</title>

  <para><emphasis role="bold">STD.Str.ExtractMultiple<indexterm>
      <primary>STD.Str.ExtractMultiple</primary>
    </indexterm><indexterm>
      <primary>Str.ExtractMultiple</primary>
    </indexterm><indexterm>
      <primary>ExtractMultiple</primary>
    </indexterm>(</emphasis> <emphasis>source, instance</emphasis> <emphasis
  role="bold">)</emphasis></para>

  <para><emphasis role="bold">STD.Uni.ExtractMultiple<indexterm>
      <primary>STD.Uni.ExtractMultiple</primary>
    </indexterm><indexterm>
      <primary>Uni.ExtractMultiple</primary>
    </indexterm><indexterm>
      <primary>ExtractMultiple</primary>
    </indexterm>(</emphasis> <emphasis>source, instance</emphasis> <emphasis
  role="bold">)</emphasis></para>

  <informaltable colsep="1" frame="all" rowsep="1">
    <tgroup cols="2">
      <colspec colwidth="80.50pt" />

      <colspec />

      <tbody>
        <row>
          <entry><emphasis>source</emphasis></entry>

          <entry>A string containing a comma-delimited list of data.</entry>
        </row>

        <row>
          <entry><emphasis>mask </emphasis></entry>

          <entry>A bitmask specifying the ordinal position of the data item
          within the <emphasis>source</emphasis> to return where bit 0 is item
          1, bit 1 is item 2, etc.. </entry>
        </row>

        <row>
          <entry>Return:<emphasis> </emphasis></entry>

          <entry>ExtractMultiple returns either a STRING or UNICODE value, as
          appropriate.</entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>

  <para>The <emphasis role="bold">ExtractMultiple </emphasis>function returns
  the data at the bitmask positions specified by the <emphasis>mask
  </emphasis>within the comma-delimited <emphasis>source</emphasis> string.,
  where bit 0 is item 1, bit 1 is item 2, etc.</para>

  <para>Example:</para>

  <programlisting format="linespecific">IMPORT STD;
MyTestString:= 'You, only, live, twice';
STD.Str.ExtractMultiple(MyTestString, 0b10011 ); //returns 'You, only'
</programlisting>
</sect1>

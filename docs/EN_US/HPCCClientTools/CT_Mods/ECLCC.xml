<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<book>
  <bookinfo>
    <!-- DNT-Start --><title>The ECL Compiler</title><!-- DNT-End -->

    <mediaobject>
      <imageobject>
        <imagedata fileref="../../images/redswooshWithLogo3.jpg" />
      </imageobject>
    </mediaobject>

    <author>
      <surname>Boca Raton Documentation Team</surname>
    </author>

    <legalnotice>
      <para>We welcome your comments and feedback about this document via
      email to <email>docfeedback@hpccsystems.com</email> Please include
      <emphasis role="bold">Documentation Feedback</emphasis> in the subject
      line and reference the document name, page numbers, and current Version
      Number in the text of the message.</para>

      <para>LexisNexis and the Knowledge Burst logo are registered trademarks
      of Reed Elsevier Properties Inc., used under license. Other products,
      logos, and services may be trademarks or registered trademarks of their
      respective companies. All names and example data used in this manual are
      fictitious. Any similarity to actual persons, living or dead, is purely
      coincidental.</para>

      <para></para>
    </legalnotice>

    <releaseinfo>© 2015 HPCC Systems<superscript>®</superscript>. All rights
    reserved</releaseinfo>

    <date><emphasis role="bold"></emphasis></date>

    <corpname>HPCC Systems<superscript>®</superscript></corpname>

    <copyright>
      <year>2015 HPCC Systems<superscript>®</superscript>. All rights
      reserved</year>
    </copyright>

    <mediaobject role="logo">
      <imageobject>
        <imagedata fileref="../../images/LN_Rightjustified.jpg" />
      </imageobject>
    </mediaobject>
  </bookinfo>

  <chapter id="ECL_Compiler">
    <!-- DNT-Start --><title>ECL Compiler</title><!-- DNT-End -->

    <para>The <!-- DNT-Start -->ECL<!-- DNT-End --> Compiler is the compiler component of the High Performance
    Computing Cluster (<!-- DNT-Start -->HPCC<!-- DNT-End -->). It is embedded and included when you install the
    <!-- DNT-Start -->HPCC<!-- DNT-End -->. The compiler is the component that actually compiles the <!-- DNT-Start -->ECL<!-- DNT-End -->
    code.</para>

    <para>The syntax and many of the compiler options implemented are similar
    to the gcc compiler. You can execute either the Linux or Windows version
    of eclcc, which, when run, load several of our shared objects (<!-- DNT-Start -->SO<!-- DNT-End --> files,
    on Linux) or DLLs (on Windows). The <!-- DNT-Start -->ECL<!-- DNT-End --> Compiler can process hThor, Thor,
    or Roxie targeted <!-- DNT-Start -->ECL<!-- DNT-End --> code.</para>

    <para><!-- DNT-Start --><!--*** Now ECLCC is actually embedded in the HPCC - delivered with the RPMs--><!-- DNT-End --><informaltable
        colsep="1" frame="all" rowsep="1">
        <?dbfo keep-together="always"?>

        <tgroup cols="2">
          <colspec colwidth="49.50pt" />

          <colspec />

          <tbody>
            <row>
              <entry><inlinegraphic
              fileref="../../images/OSSgr3.png" /></entry>

              <entry>To compile and run <!-- DNT-Start -->ECL<!-- DNT-End --> code locally on your Windows
              machine, you will need the Microsoft Visual Studio 2008 C++
              compiler (either Express or Professional edition). This is
              available from <ulink
              url="http://www.microsoft.com/express/Downloads/#2008-Visual-CPP">http://www.microsoft.com/express/Downloads/#2008-Visual-<!-- DNT-Start -->CPP<!-- DNT-End --></ulink></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable><!-- DNT-Start --><!--  ***this whole thing should be comment!
      /sect2 id="configuration-manager"/
        <title>Dependencies and packages</title>

        <para>Running eclcc depends on having these required component
        packages listed below installed on the system.</para>

        <itemizedlist mark="square">
          <listitem>
            <para>Microsoft Visual C++</para>
          </listitem>

          <listitem>
            <para>Visual Studio 9 (Visual Studio 10 requires to manually set
            the ENVIRONMENT VS90COMNTOOLS == C:\ProgramFiles\Microsoft Visual
            Studio 10.0\Common7\Tools)</para>

            <para>Can download from <ulink
            url="http://www.microsoft.com/express/Downloads/#2008-Visual-CPP">http://www.microsoft.com/express/Downloads/#2008-Visual-CPP</ulink></para>
          </listitem>

          <listitem>
            <para>Other Dependencies maybe required***
            </para>
              </listitem>
            </itemizedlist>
      //sect2/
         ***END OF COMMENT***   --><!-- DNT-End --></para>

    <sect1 id="Stand-Alone-ECL-Compiler">
      <!-- DNT-Start --><title>Using the ECL Compiler as a Stand Alone option</title><!-- DNT-End -->

      <para>The <!-- DNT-Start -->ECL<!-- DNT-End --> Compiler is normally used through the <!-- DNT-Start -->ECL<!-- DNT-End --> <!-- DNT-Start -->IDE<!-- DNT-End --> or Eclipse
      using the <!-- DNT-Start -->ECL<!-- DNT-End --> plugin for Eclipse, however, you can use the <!-- DNT-Start -->ECL<!-- DNT-End --> Compiler
      in a stand alone manner, to create stand alone programs, or workunits.
      The <!-- DNT-Start -->ECL<!-- DNT-End --> Compiler can read <!-- DNT-Start -->ECL<!-- DNT-End --> code from standard input, or can read it
      from a specified input file. It compiles the code into an executable
      program (Such as an âEXEâ file in Windows). The resulting program, when
      executed, runs the job, writing any output to standard output.
      Alternatively, you could redirect the output to a file or pipe into
      another process. With the <!-- DNT-Start -->ECL<!-- DNT-End --> Compiler, you do not need a supercomputer
      cluster to develop and run <!-- DNT-Start -->ECL<!-- DNT-End --> code.</para>

      <para>Running the <!-- DNT-Start -->ECL<!-- DNT-End --> Compiler without any options (or specifying âhelp)
      will display the syntax.</para>

      <para><programlisting>C:\eclcc&gt;eclcc -help
</programlisting></para>

      <para>Usage: eclcc &lt;options&gt; <!-- DNT-Start -->ECL<!-- DNT-End -->_file.ecl</para>

      <para>General options:</para>

      <para><informaltable colsep="1" frame="all" rowsep="1">
          <?dbfo keep-together="always"?>

          <tgroup cols="2">
            <colspec align="left" colwidth="125.55pt" />

            <colspec />

            <tbody>
              <row>
                <entry><!-- DNT-Start -->-I<emphasis> &lt;path&gt;</emphasis><!-- DNT-End --></entry>

                <entry>Add path to locations to search for ecl imports</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->-L &lt;<emphasis>path&gt;</emphasis><!-- DNT-End --></entry>

                <entry>Add path to locations to search for system
                libraries</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->-o<emphasis> &lt;file&gt;</emphasis><!-- DNT-End --></entry>

                <entry>Specify name of output file (default a.out if linking
                to executable, or stdout)</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->-manifest<!-- DNT-End --></entry>

                <entry>Specify path to manifest file listing resources to
                add</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->-foption[=value]<!-- DNT-End --></entry>

                <entry>Set an ecl option. See #<!-- DNT-Start -->OPTION<!-- DNT-End --> in the <emphasis><!-- DNT-Start -->ECL<!-- DNT-End -->
                Language Reference</emphasis> for details.</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->-main <emphasis>&lt;ref&gt;</emphasis><!-- DNT-End --></entry>

                <entry>Compile definition &lt;ref&gt; from the source
                collection</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->-syntax<!-- DNT-End --></entry>

                <entry>Perform a syntax check of the <!-- DNT-Start -->ECL<!-- DNT-End --></entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->-platform=hthor<!-- DNT-End --></entry>

                <entry>Generate code for hthor cluster</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->-platform=roxie<!-- DNT-End --></entry>

                <entry>Generate code for roxie cluster (default)</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->-platform=thor<!-- DNT-End --></entry>

                <entry>Generate code for thor cluster</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>

      <para><informaltable colsep="1" frame="all">
          <?dbfo keep-together="always"?>

          <tgroup cols="2">
            <colspec colwidth="49.50pt" />

            <colspec />

            <tbody>
              <row>
                <entry><inlinegraphic
                fileref="../../images/tip.jpg" /></entry>

                <entry><emphasis role="bold">NOTE: </emphasis>If there are
                spaces in the path you specify, put it in quotes. For example:
                -L"C:\Program Files"</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>

      <para>Output control options:</para>

      <para><informaltable colsep="1" frame="all" rowsep="1">
          <?dbfo keep-together="always"?>

          <tgroup cols="2">
            <colspec align="left" colwidth="125.55pt" />

            <colspec />

            <tbody>
              <row>
                <entry><!-- DNT-Start -->-E<!-- DNT-End --></entry>

                <entry>Output preprocessed <!-- DNT-Start -->ECL<!-- DNT-End --> in xml archive form</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->-M<!-- DNT-End --></entry>

                <entry>Output meta information for the ecl files</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->-Md<!-- DNT-End --></entry>

                <entry>Output dependency information</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->-Me<!-- DNT-End --></entry>

                <entry>eclcc should evaluate supplied ecl code rather than
                generating a workunit</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->-q<!-- DNT-End --></entry>

                <entry>Save <!-- DNT-Start -->ECL<!-- DNT-End --> query text as part of workunit</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->-qa<!-- DNT-End --></entry>

                <entry>Save <!-- DNT-Start -->ECL<!-- DNT-End --> query archive as part of workunit</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->-wu<!-- DNT-End --></entry>

                <entry>Only generate workunit information as xml file</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>

      <?hard-pagebreak ?>

      <para></para>

      <para>C++ options:</para>

      <para><informaltable colsep="1" frame="all" rowsep="1">
          <?dbfo keep-together="always"?>

          <tgroup cols="2">
            <colspec align="left" colwidth="125.55pt" />

            <colspec />

            <tbody>
              <row>
                <entry><!-- DNT-Start -->-S<!-- DNT-End --></entry>

                <entry>Generate c++ output, but don't compile</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->-c<!-- DNT-End --></entry>

                <entry>Compile only (don't link)</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->-g, --debug<!-- DNT-End --></entry>

                <entry>Enable debug symbols in generated code</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->-Wc,xx<!-- DNT-End --></entry>

                <entry>Pass option xx to the c++ compiler</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->-Wl,xx<!-- DNT-End --></entry>

                <entry>Pass option xx to the linker</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->-Wa,xx<!-- DNT-End --></entry>

                <entry>Pass straight through to c++ compiler</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->-Wp,xx<!-- DNT-End --></entry>

                <entry>Pass straight through to c++ compiler</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->-save-cpps<!-- DNT-End --></entry>

                <entry>Do not delete generated c++ files (implied if
                -g)</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->-save-temps<!-- DNT-End --></entry>

                <entry>Do not delete intermediate files</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->-shared<!-- DNT-End --></entry>

                <entry>Generate workunit shared object instead of a
                stand-alone executable</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>

      <?dbfo-need height="3in"?>

      <para>File resolution options:</para>

      <para><informaltable colsep="1" frame="all" rowsep="1">
          <?dbfo keep-together="always"?>

          <tgroup cols="2">
            <colspec align="left" colwidth="125.55pt" />

            <colspec />

            <tbody>
              <row>
                <entry><!-- DNT-Start -->-dfs=ip<!-- DNT-End --></entry>

                <entry>Use specified ip for <!-- DNT-Start -->DFS<!-- DNT-End --> filename resolution</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->-scope=prefix<!-- DNT-End --></entry>

                <entry>Use specified scope prefix in <!-- DNT-Start -->DFS<!-- DNT-End --> filename
                resolution</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->-user=id<!-- DNT-End --></entry>

                <entry>Use specified username in <!-- DNT-Start -->DFS<!-- DNT-End --> filename
                resolution</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->-password=xxx<!-- DNT-End --></entry>

                <entry>Use specified password in <!-- DNT-Start -->DFS<!-- DNT-End --> filename resolution
                (blank to prompt)</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>

      <?hard-pagebreak ?>

      <para>Other options (list is available using eclcc -help -v):</para>

      <para><informaltable colsep="1" frame="all" rowsep="1">
          <?dbfo keep-together="always"?>

          <tgroup cols="2">
            <colspec align="left" colwidth="125.55pt" />

            <colspec />

            <tbody>
              <row>
                <entry><!-- DNT-Start -->-aoption[=value]<!-- DNT-End --></entry>

                <entry>Set an application option</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->--allow=str<!-- DNT-End --></entry>

                <entry>Allow use of named feature. (e.g., cpp, pipe,
                all)<para><emphasis role="bold">cpp</emphasis>: Allow embedded
                code within <!-- DNT-Start -->ECL<!-- DNT-End --> (e.g., c++, <!-- DNT-Start -->JAVA<!-- DNT-End -->, Javascript, Python, R,
                etc.)</para><para><emphasis role="bold">pipe</emphasis>: Allow
                the <!-- DNT-Start -->PIPE<!-- DNT-End --> command to send data to an external
                program.</para><para><emphasis role="bold">userECL</emphasis>:
                Allow code that is not found via the ecl include
                paths</para><para><emphasis role="bold">datafile</emphasis>:
                Allow access to datafiles from <!-- DNT-Start -->ECL<!-- DNT-End -->. </para><para><emphasis
                role="bold">extern</emphasis>: Allow access to an external
                service function</para><para><emphasis
                role="bold">all</emphasis>: Allow all features</para></entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->-allowsigned<!-- DNT-End --></entry>

                <entry>Only allows access to a feature from signed
                code</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->-b<!-- DNT-End --></entry>

                <entry>Batch mode. Each source file is processed in turn.
                Output name depends on the input filename</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->-checkVersion<!-- DNT-End --></entry>

                <entry>Enable/disable ecl version checking from
                archives</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->-checkDirty<!-- DNT-End --></entry>

                <entry>Causes eclcc to generate a warning for any attribute
                that has been modified (according to the output of git
                status). Use of this function requires that git be installed
                and available on the path.</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->--component<!-- DNT-End --></entry>

                <entry>Set the name of the component this is executing on
                behalf of</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->-D<emphasis>name</emphasis>=<emphasis>value</emphasis><!-- DNT-End --></entry>

                <entry>Override the definition of a global attribute
                'name'</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->--deny=all<!-- DNT-End --></entry>

                <entry>Disallow use of all named features not specifically
                allowed using --allow</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->--deny=str<!-- DNT-End --></entry>

                <entry>Disallow use of named feature<para><emphasis
                role="bold">cpp</emphasis>: Disallow embedded code within <!-- DNT-Start -->ECL<!-- DNT-End -->
                (e.g., c++, <!-- DNT-Start -->JAVA<!-- DNT-End -->, Javascript, Python, R,
                etc.)</para><para><emphasis role="bold">pipe</emphasis>:
                Disallow the <!-- DNT-Start -->PIPE<!-- DNT-End --> command to send data to an external
                program.</para></entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->--fastsyntax<!-- DNT-End --></entry>

                <entry>Delay expanding functions when parsing. May speed up
                processing for some queries</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->-help, --help<!-- DNT-End --></entry>

                <entry>Display help message</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->--help -v<!-- DNT-End --></entry>

                <entry>Display verbose help message</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->--internal<!-- DNT-End --></entry>

                <entry>Run internal tests</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->--legacy<!-- DNT-End --></entry>

                <entry>Use legacy import semantics (deprecated)</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable> <?hard-pagebreak ?> <para>Other options
      (continued):</para> <informaltable colsep="1" frame="all" rowsep="1">
          <?dbfo keep-together="always"?>

          <tgroup cols="2">
            <colspec align="left" colwidth="125.55pt" />

            <colspec />

            <tbody>
              <row>
                <entry><!-- DNT-Start -->--leakcheck<!-- DNT-End --></entry>

                <entry>Clean up memory since checking for memory leaks</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->--keywords<!-- DNT-End --></entry>

                <entry>Outputs the lists of <!-- DNT-Start -->ECL<!-- DNT-End --> reserved words to stdout (<!-- DNT-Start -->XML<!-- DNT-End -->
                format)</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->-legacyimport<!-- DNT-End --></entry>

                <entry>Use legacy import semantics (deprecated)</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->-legacywhen<!-- DNT-End --></entry>

                <entry>Use legacy when/side-effects semantics
                (deprecated)</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->--logfile <emphasis>&lt;file&gt;</emphasis><!-- DNT-End --></entry>

                <entry>Write log to specified file</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->--logdetail=<emphasis>n</emphasis><!-- DNT-End --></entry>

                <entry>Set the level of detail in the log file</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->--maxErrors=&lt;n&gt;<!-- DNT-End --></entry>

                <entry>Limit the number of errors, aborting on the nth
                (default = 5)</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->--metacache=x<!-- DNT-End --></entry>

                <entry>Specify directory to store distributed meta
                information</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->--nologfile<!-- DNT-End --></entry>

                <entry>Do not write any log file</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->--nogpg<!-- DNT-End --></entry>

                <entry>Do not run gpg to check signatures on signed
                code</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->--nosourcepath<!-- DNT-End --></entry>

                <entry>Compile as if the source came from stdin</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->--nostdinc<!-- DNT-End --></entry>

                <entry>Do not include the current directory in -I</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->-pch<!-- DNT-End --></entry>

                <entry>Generate precompiled header for eclinclude4.hpp</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->-P &lt;path&gt;<!-- DNT-End --></entry>

                <entry>Specify the path of the output files (only with -b
                option)</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->-showpaths<!-- DNT-End --></entry>

                <entry>Print information about the search paths eclcc is
                using</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->-specs <emphasis>&lt;file&gt;</emphasis><!-- DNT-End --></entry>

                <entry>Read eclcc configuration from specified file</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->-split <emphasis>m:n</emphasis><!-- DNT-End --></entry>

                <entry>Process a subset m of n input files (only with -b
                option)</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->-v --verbose<!-- DNT-End --></entry>

                <entry>Output additional tracing information while
                compiling</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->-wxxxx=level<!-- DNT-End --></entry>

                <entry>Set the severity for a particular warning code or
                category. <para>Valid options for level are: all | ignore |
                log | warning | error | fail</para> <emphasis
                role="bold">-wall</emphasis> sets default severity for all
                warnings</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->--version<!-- DNT-End --></entry>

                <entry>Output version information</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->--timings<!-- DNT-End --></entry>

                <entry>Output additional timing information</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>

      <para></para>
    </sect1>

    <sect1 id="compiled_options">
      <!-- DNT-Start --><title>Compiled Options:</title><!-- DNT-End -->

      <para>After you have successfully compiled the code, it produces an
      executable file. There are a few additional options that can be used
      when running that executable.</para>

      <para>Usage: a.out &lt;options&gt;</para>

      <para><informaltable colsep="1" frame="all" rowsep="1">
          <?dbfo keep-together="always"?>

          <tgroup cols="2">
            <colspec align="left" colwidth="125.55pt" />

            <colspec />

            <tbody>
              <row>
                <entry><!-- DNT-Start -->-wu=&lt;file&gt;<!-- DNT-End --></entry>

                <entry>Write <!-- DNT-Start -->XML<!-- DNT-End --> formatted workunit to given filespec and
                exit</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->-xml<!-- DNT-End --></entry>

                <entry>Display output as <!-- DNT-Start -->XML<!-- DNT-End --></entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->-raw<!-- DNT-End --></entry>

                <entry>Display output as binary</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->-limit=x<!-- DNT-End --></entry>

                <entry>Limit number of output rows</entry>
              </row>

              <row>
                <entry><!-- DNT-Start -->--help<!-- DNT-End --></entry>

                <entry>Display help text</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>
    </sect1>

    <sect1 id="ECLCompiler_Examples">
      <!-- DNT-Start --><title>Examples</title><!-- DNT-End -->

      <para>The following example demonstrates what you can do once the <!-- DNT-Start -->ECL<!-- DNT-End -->
      Compiler is installed and operational.</para>

      <sect2 id="ECLCompiler_RunningABasicECLProg_CLI">
        <!-- DNT-Start --><title>Running a basic ECL program using the command line
        compiler</title><!-- DNT-End -->

        <para>Once the <!-- DNT-Start -->ECL<!-- DNT-End --> Compiler is installed, you can use the <!-- DNT-Start -->ECL<!-- DNT-End --> Compiler
        to run an <!-- DNT-Start -->ECL<!-- DNT-End --> program.</para>

        <itemizedlist>
          <listitem>
            <para>Create a file called hello.ecl, and type in the
            text<programlisting>Output('Hello world'); </programlisting></para>

            <para>(including the quotes) into the file.</para>

            <para>You can either use your favorite editor, or you can use the
            command line by typing the following (for Windows systems):</para>

            <para><programlisting>echo Output('Hello world'); &gt; hello.ecl</programlisting></para>

            <para>on a Linux system you would need to escape some characters
            as follows:</para>

            <para><programlisting>echo "Output('Hello world');" &gt; hello.ecl</programlisting></para>
          </listitem>

          <listitem>
            <para>Compile your program using the <!-- DNT-Start -->ECL<!-- DNT-End --> Compiler by issuing the
            following command:</para>

            <para><programlisting>eclcc hello.ecl</programlisting><!--*** Need to tell them where to run this  --></para>

            <!-- DNT-Start --><!--  ***COMMENTED OUT per authors discretion - this code is just messy when talking about multiple platforms! 
              If you prefer, you can pipe the source code directly into the
            compiler as shown in the following example:
            <para><programlisting>echo \'hello again\'| eclcc -</programlisting></para> --><!-- DNT-End -->
          </listitem>

          <listitem>
            <para>An executable file is created which you can run by typing
            the following:</para>

            <para>on Linux systems:</para>

            <para><programlisting>   ./a.out
</programlisting></para>

            <para>on Windows systems:</para>

            <para><programlisting>   a.out</programlisting>This will generate
            the output "Hello world" (excluding quotes), to the std output,
            your terminal window in this example. You can redirect or pipe the
            output to a file or program if you choose. This simple example
            will verify the compiler is working properly.</para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="Compile_with_options">
        <title role="brk">Compile with Options</title>

        <para>Once verified that the <!-- DNT-Start -->ECL<!-- DNT-End --> Compiler is working correctly, you
        can try using some of the options. One such variation might be to
        specify the -o option which allows us to input more meaningful output
        filename of Hello.</para>

        <para><programlisting>eclcc -oHello hello.ecl</programlisting>This
        produces a file called "Hello", which can now be run from the command
        line.</para>

        <para>on Linux systems:</para>

        <!-- DNT-Start --><programlisting>   ./Hello
</programlisting><!-- DNT-End -->

        <para>on Windows systems:</para>

        <para><programlisting>   Hello</programlisting>This will result in the
        output of the following.</para>

        <para><programlisting>Hello world</programlisting></para>

        <para>There are additional options that can be used when running the
        executable. Using our Hello program, as an example, we can execute it
        with an option to generate different output. One such option is the
        -xml option which generates the output in an <!-- DNT-Start -->XML<!-- DNT-End --> format.</para>

        <para>on Linux systems:</para>

        <!-- DNT-Start --><programlisting>   ./Hello -xml
</programlisting><!-- DNT-End -->

        <para>on Windows systems:</para>

        <para><programlisting>   Hello -xml</programlisting></para>

        <para>This would result in the output of the following:</para>

        <!-- DNT-Start --><programlisting>&lt;Dataset name="Result 1"&gt;&lt;Row&gt;&lt;Result_1&gt;Hello world&lt;/Result_1&gt;&lt;/Row&gt;&lt;/Dataset&gt;</programlisting><!-- DNT-End -->

        <para>The following example provides a defined value passed to the
        compiler:</para>

        <!-- DNT-Start --><programlisting>//file named hello2.ecl
IMPORT ^ as repo;
OUTPUT(repo.optionXX);</programlisting><!-- DNT-End -->

        <para><programlisting>eclcc -Doptionxx='HELLO' hello2.ecl</programlisting></para>

        <para>This would result in the output of the following:</para>

        <!-- DNT-Start --><programlisting>&lt;Dataset name="Result 1"&gt;&lt;Row&gt;&lt;Result_1&gt;HELLO&lt;/Result_1&gt;&lt;/Row&gt;&lt;/Dataset&gt;</programlisting><!-- DNT-End -->

        <para></para>
      </sect2>
    </sect1>
  </chapter>
</book>

<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<book lang="en_US" xml:base="../">
  <title>Installing &amp; Running the HPCC Platform</title>

  <bookinfo>
    <title>Installing &amp; Running the HPCC Platform</title>

    <mediaobject>
      <imageobject>
        <imagedata fileref="images/redswooshWithLogo3.jpg" />
      </imageobject>
    </mediaobject>

    <author>
      <surname>Boca Raton Documentation Team</surname>
    </author>

    <legalnotice>
      <para>We welcome your comments and feedback about this document via
      email to <email>docfeedback@hpccsystems.com</email></para>

      <para>Please include <emphasis role="bold">Documentation
      Feedback</emphasis> in the subject line and reference the document name,
      page numbers, and current Version Number in the text of the
      message.</para>

      <para>LexisNexis and the Knowledge Burst logo are registered trademarks
      of Reed Elsevier Properties Inc., used under license.</para>

      <para>HPCC Systems<superscript>®</superscript> is a registered trademark
      of LexisNexis Risk Data Management Inc.</para>

      <para>Other products, logos, and services may be trademarks or
      registered trademarks of their respective companies. All names and
      example data used in this manual are fictitious. Any similarity to
      actual persons, living or dead, is purely coincidental.</para>

      <para></para>
    </legalnotice>

    <xi:include href="common/Version.xml"
                xpointer="xpointer(//*[@id='FooterInfo'])"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <xi:include href="common/Version.xml"
                xpointer="xpointer(//*[@id='DateVer'])"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <corpname>HPCC Systems<superscript>®</superscript></corpname>

    <xi:include href="common/Version.xml"
                xpointer="xpointer(//*[@id='Copyright'])"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <mediaobject role="logo">
      <imageobject>
        <imagedata fileref="images/LN_Rightjustified.jpg" />
      </imageobject>
    </mediaobject>
  </bookinfo>

  <chapter id="Welcome">
    <title>Welcome</title>

    <para>These instructions will guide you through installing and running the
    HPCC<footnote>
        <para><emphasis role="bold">H</emphasis>igh <emphasis
        role="bold">P</emphasis>erformance <emphasis
        role="bold">C</emphasis>omputing <emphasis
        role="bold">C</emphasis>luster (HPCC) is a massively parallel
        processing computing platform that solves Big Data problems. See
        <ulink
        url="https://hpccsystems.com/Why-HPCC/How-it-works">https://hpccsystems.com/Why-HPCC/How-it-works</ulink>
        for more details.</para>
      </footnote> Community Edition on a single node to start and then
    optionally, expand it to a larger cluster of nodes.</para>

    <para>The HPCC Thor technology is designed to effectively process,
    analyze, and find links and associations within high volumes of complex
    data. This can detect non-obvious relationships, scale to support
    petabytes of data, and is significantly faster than competing technologies
    while requiring less hardware and resources.</para>

    <para>The HPCC Roxie technology - also known as the Rapid Data Delivery
    Engine or RDDE - uses a combination of technologies and techniques that
    produce extremely fast throughput for queries on indexed data.</para>

    <para>This translates into better quality answers in less time so that
    organizations can cope with massive data and efficiently turn information
    into knowledge.</para>

    <para><informaltable colsep="1" frame="all" rowsep="1">
        <?dbfo keep-together="always"?>

        <tgroup cols="2">
          <colspec colwidth="49.50pt" />

          <colspec />

          <tbody>
            <row>
              <entry><inlinegraphic fileref="images/OSSgr3.png" /></entry>

              <entry>We suggest reading this document in its entirety before
              beginning. The entire process can take an hour or two, depending
              on your download speed.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable></para>

    <sect1 id="Quick_Start">
      <title>Quick Start Guide</title>

      <para>We recommend taking the time to read this manual in its entirety;
      however, the following is a quick start summary of steps. There are many
      aspects of the HPCC System platform and this guide is intended to help
      you get the most out of your system. This section is not intended to
      replace the more comprehensive material in the remainder of this
      book.</para>

      <orderedlist>
        <listitem>
          <para>Install HPCC.</para>

          <para>Download the installation package from <ulink
          url="https://hpccsystems.com/download/free-community-edition">https://hpccsystems.com/download</ulink>
          and install.</para>

          <para>On CentOS/Red Hat:</para>

          <para><programlisting> sudo yum install hpccsystems-platform&lt;rpm_file_name&gt;</programlisting>On
          Ubuntu/Debian:</para>

          <programlisting> sudo dpkg -i &lt;deb filename&gt; &amp;&amp; sudo apt-get install -f </programlisting>
        </listitem>

        <listitem>
          <para>Start your HPCC System.</para>

          <para><programlisting> sudo /etc/init.d/hpcc-init start</programlisting><emphasis
          role="bold">NOTE</emphasis>: We provide sample scripts (see <link
          linkend="Example-Scripts">Appendix:Example Scripts</link>) to make
          starting larger multi-node systems easier.</para>
        </listitem>

        <listitem>
          <para>Run <emphasis role="bold">ECL Watch</emphasis>. Check out your
          system.</para>

          <para>Using a browser, go to <emphasis role="bold">ECL
          Watch</emphasis> running on port 8010 of your HPCC Node.</para>

          <para>For example, http://nnn.nnn.nnn.nnn:8010, where
          nnn.nnn.nnn.nnn is your node's IP address.</para>
        </listitem>

        <listitem>
          <para>Create and run some ECL.</para>

          <para>You can do this right from ECL Watch. In ECL Watch, click on
          the <emphasis role="bold">ECL</emphasis> icon then click on the
          <emphasis role="bold">Playground</emphasis> link.</para>
        </listitem>

        <listitem>
          <para>Go to <ulink
          url="https://hpccsystems.com/download/free-community-edition">https://hpccsystems.com/download</ulink>
          get and install the ECL IDE and Client tools.</para>
        </listitem>
      </orderedlist>

      <sect2 id="Installing_NowWhat">
        <title>Now What?</title>

        <para>Now that you have HPCC started and running, what do you want to
        do? Maybe evaluate your needs and proceed to develop a custom
        configuration suitable for those needs. Maybe you want to expand your
        system and add nodes. Those topics and several others are covered in
        the following sections.</para>

        <para>To familiarize yourself with what your system can do we
        recommend following the steps in:<itemizedlist spacing="compact">
            <listitem>
              <para>The <emphasis role="bold">HPCC Data
              Tutorial</emphasis></para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">The Six Degrees of Kevin
              Bacon</emphasis> example</para>
            </listitem>

            <listitem>
              <para>Read <emphasis role="bold">Using Config Manager</emphasis>
              to learn how to configure an HPCC platform using Advanced
              View.</para>
            </listitem>

            <listitem>
              <para>Use your new skills to process your own massive
              dataset!</para>
            </listitem>
          </itemizedlist></para>
      </sect2>
    </sect1>
  </chapter>

  <chapter id="HPCC-installation-and-startup">
    <title>HPCC Installation and Startup</title>

    <para>Follow these steps to install the packages and start components in a
    single-node configuration to begin. Once it is successfully installed, you
    will use the Configuration Manager to customize or expand your
    system.</para>

    <para>Configuration Manager is the utility with which we configure the
    HPCC platform. It is run on your Linux Server and you access its interface
    using a browser.<figure>
        <title>System Overview: Thor</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/GS-Thor01.jpg" />
          </imageobject>
        </mediaobject>
      </figure><figure>
        <title>System Overview: Roxie</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/GS-Roxie01.jpg" />
          </imageobject>
        </mediaobject>
      </figure></para>

    <sect1 id="initial-set-up-single-node">
      <title>Initial Setup-Single Node</title>

      <para>This section covers installing the HPCC on a single node. This
      will enable the HPCC system to operate successfully; however, the real
      strength of the HPCC is when it is run in a multi-node environment and
      can leverage the ability to perform operations using Massively Parallel
      Processing (MPP).</para>

      <para>In addition, on a production system, you would dedicate one or
      more nodes to each server process. See the <emphasis>Using Configruation
      Manager </emphasis>manual for more details.</para>

      <sect2 id="installing-the-Package">
        <title>Installing the Package</title>

        <para>The installation and package that you download is different
        depending on the operating system you plan to use. The installation
        packages will fail to install if their dependencies are missing from
        the target system.</para>

        <para>Packages are available from the HPCC
        Systems<superscript>®</superscript> website: <ulink
        url="https://hpccsystems.com/download/free-community-edition">https://hpccsystems.com/download/</ulink></para>

        <para>To install the package, follow the appropriate installation
        instructions:</para>

        <sect3 id="Installing_CentOS-RedHat-Suse">
          <title>CentOS/Red Hat</title>

          <para>To install the Platform you should have the appropriate
          permissions to install packages. If you have sudo rights, then you
          can install the platform using yum.</para>

          <programlisting>sudo yum install &lt;hpccsystems platform rpm package&gt;</programlisting>

          <para>Optionally you can install the package with rpm (recommended
          using the -Uvh options), however then you would have to negotiate
          installing any additional dependencies.</para>
        </sect3>

        <sect3 id="Installing_Ubuntu-Debian">
          <title>Ubuntu/Debian</title>

          <para>For Ubuntu installations a Debian package is provided. To
          install the package, use:</para>

          <programlisting>sudo dpkg -i &lt;deb filename&gt;</programlisting>

          <para>After installing the package, you should run the following to
          update any dependencies.</para>

          <para><programlisting>sudo apt-get install -f </programlisting>Alternatively
          you could combine the two:</para>

          <para><programlisting>sudo dpkg --i &lt;deb filename&gt; &amp;&amp; sudo apt-get install --f</programlisting></para>
        </sect3>

        <sect3 id="HPCC_Plug-Ins" role="brk">
          <title>Plugins</title>

          <para>There are several optional plugins that you could choose to
          add to your installation.</para>

          <para>For RPM based systems, you can install using yum.</para>

          <para><programlisting>sudo yum install &lt;hpccsystems plugin plugin_name&gt;  </programlisting></para>

          <para>To install the optional plug ins for a Ubuntu/Debian package,
          use:</para>

          <programlisting>sudo dpkg -i &lt;hpccsystems plugin plugin_name&gt;  </programlisting>

          <para>The optional plugins are:</para>

          <para><informaltable>
              <tgroup cols="2">
                <tbody>
                  <row>
                    <entry><itemizedlist>
                        <listitem>
                          <para>Python : pyembed</para>
                        </listitem>

                        <listitem>
                          <para>JAVA : javaembed</para>
                        </listitem>

                        <listitem>
                          <para>JavaScript : v8embed</para>
                        </listitem>

                        <listitem>
                          <para>R : rembed</para>
                        </listitem>

                        <listitem>
                          <para>MySql : mysqlembed</para>
                        </listitem>
                      </itemizedlist></entry>

                    <entry><itemizedlist>
                        <listitem>
                          <para>Kafka : kafka</para>
                        </listitem>

                        <listitem>
                          <para>MemCache : memcached</para>
                        </listitem>

                        <listitem>
                          <para>Redis : redis</para>
                        </listitem>

                        <listitem>
                          <para>SQL Lite : sqlite3embed</para>
                        </listitem>
                      </itemizedlist></entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable></para>

          <para>Some other technologies, such as Cassandra support are
          included in the platform package.</para>
        </sect3>
      </sect2>

      <sect2 id="initial-startup" role="brk">
        <title><emphasis>Initial Startup</emphasis></title>

        <orderedlist>
          <listitem>
            <para>Start the system using the default configuration.</para>

            <para><programlisting>sudo /etc/init.d/hpcc-init start</programlisting><graphic
            fileref="images/GS-InitStart.jpg" /><informaltable colsep="1"
                frame="all" rowsep="1">
                <?dbfo keep-together="always"?>

                <tgroup cols="2">
                  <colspec colwidth="49.50pt" />

                  <colspec />

                  <tbody>
                    <row>
                      <entry><inlinegraphic
                      fileref="images/OSSgr3.png" /></entry>

                      <entry>There are log files for each component in
                      directories below <emphasis
                      role="bold">/var/log/HPCCSystems</emphasis> (default
                      location) including an hpcc-init log for the start up
                      process. If any component fails to start, these logs can
                      help in troubleshooting.<para>*Additional information
                      about the hpcc-init system and logs in the <link
                      linkend="hpcc-init">hpcc-init</link> appendix.
                      </para></entry>
                    </row>
                  </tbody>
                </tgroup>
              </informaltable></para>

            <para><emphasis role="bold">Note:</emphasis> Many of our supported
            distributions of Linux are switching from system V to systemd. If
            your distribution is still using a system V init system, you may
            continue to use some system V commands such as, `<emphasis>service
            hpcc-init</emphasis>'. However on distributions utilizing systemd
            that output may not display in the same manner. We suggest calling
            hpcc-init directly instead of using a 'service' call.</para>
          </listitem>
        </orderedlist>
      </sect2>

      <sect2 id="ECL-on-a-single-node-system" role="brk">
        <title>Running an ECL Query on your Single-Node System</title>

        <para>The single node system is running, and you can now create and
        run some ECL<footnote>
            <para><emphasis role="bold">E</emphasis>nterprise <emphasis
            role="bold">C</emphasis>ontrol <emphasis
            role="bold">L</emphasis>anguage (ECL) is a declarative, data
            centric programming language used to manage all aspects of the
            massive data joins, sorts, and builds that truly differentiate
            HPCC (High Performance Computing Cluster) from other technologies
            in its ability to provide flexible data analysis on a massive
            scale.</para>
          </footnote> code using either ECL IDE, the command line ECL
        compiler, or the ECL Command line tool.</para>

        <sect3 id="InstallTheECLIDEandClientTools">
          <title>Install the ECL IDE and HPCC Client Tools</title>

          <para><orderedlist>
              <listitem>
                <para>In your browser, go to the <emphasis role="bold">ECL
                Watch</emphasis> URL. For example,
                http://nnn.nnn.nnn.nnn:8010, where nnn.nnn.nnn.nnn is your
                node's IP address.</para>

                <para><informaltable colsep="1" frame="all" rowsep="1">
                    <?dbfo keep-together="always"?>

                    <tgroup cols="2">
                      <colspec colwidth="49.50pt" />

                      <colspec />

                      <tbody>
                        <row>
                          <entry><inlinegraphic
                          fileref="images/caution.png" /></entry>

                          <entry>Your IP address could be different from the
                          ones provided in the example images. Please use the
                          IP address of <emphasis role="bold">your</emphasis>
                          node.</entry>
                        </row>
                      </tbody>
                    </tgroup>
                  </informaltable></para>
              </listitem>

              <listitem>
                <?dbfo keep-together="always"?>

                <para>From the ECL Watch Advanced menu, select on the
                <emphasis role="bold">Additional Resources
                </emphasis>link.</para>

                <para><figure>
                    <title>ECL Watch Resource Page</title>

                    <mediaobject>
                      <imageobject>
                        <imagedata fileref="images/GS_1311.jpg"
                                   vendor="eclwatchSS" />
                      </imageobject>
                    </mediaobject>
                  </figure></para>

                <para>Follow the link to the HPCC System's portal download
                page. </para>

                <para>Alternatively, you could use your browser to go directly
                to <ulink
                url="https://hpccsystems.com/download">https://hpccsystems.com/download</ulink></para>
              </listitem>

              <listitem>
                <para>Click on the <emphasis role="bold">ECL IDE
                </emphasis>link. (on the right hand side in the Download
                column, under the Free Community Edition heading)</para>
              </listitem>

              <listitem>
                <para>Follow the instructions on the web page to install the
                ECL IDE.</para>
              </listitem>

              <listitem>
                <para>Install the ECL IDE, following the prompts in the
                installation program. Once the ECL IDE is installed
                successfully, you can proceed.</para>
              </listitem>
            </orderedlist></para>
        </sect3>

        <sect3 id="RunningABasicECLProgram" role="brk">
          <title>Running a basic ECL program</title>

          <para>Now that the package is installed on your Linux node and ECL
          IDE is installed on your Windows workstation, you can run your first
          ECL program. ECL programs may be run locally or remotely. For larger
          ECL jobs, you will want to target a remote cluster of machines,
          which may not be running the same operating system as the machine
          you are working on.</para>

          <para>In this section we will use the <emphasis role="bold">ECL
          Command line interface</emphasis> to the compiler to compile and run
          ECL code locally.</para>

          <para>The ECL compiler (eclcc) installs on to the eclcc server node
          when a package is installed. :This should be in your path, so you
          can run it from anywhere on the server. It is also installed on a
          Windows machine when you install the ECL IDE. To compile and run on
          Windows, you also need the Visual Studio 2008 C++ compiler (see
          <emphasis>User Workstation Requirements </emphasis>for
          details).</para>

          <orderedlist>
            <listitem>
              <para>Create a file called hello.ecl and type in the following
              text (including the quotes): <programlisting>output('Hello world'); </programlisting></para>

              <para>You can either use your favorite editor, or you can use
              the command line by typing the following</para>

              <para><programlisting>echo "Output('Hello world');" &gt; hello.ecl</programlisting></para>
            </listitem>

            <listitem>
              <para>Compile your program using eclcc by typing the following
              command:<programlisting>eclcc hello.ecl</programlisting></para>

              <!--  ***       If you prefer, you can pipe the source code directly into the
            compiler as shown in the following example:
            <para><programlisting>echo \'hello again\'| eclcc -</programlisting></para> -->
            </listitem>

            <listitem>
              <para>An executable file is created which you can run as
              follows:</para>

              <para><programlisting># on a Linux machine:
   ./a.out
# on a Windows machine:
   a.out
</programlisting></para>

              <para>This generates the output "Hello world" (excluding
              quotes), to the std output, your terminal window in this
              example. You can redirect or pipe the output to a file or
              program if you choose. This verifies that the compiler is
              working properly.</para>
            </listitem>
          </orderedlist>
        </sect3>

        <sect3 id="RunningRemotelyUsingECLCmdLine">
          <title>Running remotely using ECL Command Line</title>

          <para>The <emphasis role="bold">ECL Command Line Interface (CLI)
          </emphasis>application accepts command line parameters to send
          directly to an ECL execution engine. You can use this utility to
          control the creation and execution of larger ECL jobs which target a
          remote system. To compile jobs on a remote system, eclcc is used to
          create an archive of the ECL code to be compiled, and the ecl CLI is
          used to submit it to a target cluster for compilation by the remote
          compiler server (eclccserver).</para>

          <para>To submit a job using the ecl CLI, make sure the HPCC has been
          started and use the following syntax: <programlisting>ecl run  hello.ecl --target=hthor --server=&lt;IP Address of the ESP node&gt;:8010</programlisting></para>

          <para>The workunit<footnote>
              <para>A Workunit is a record of a task submitted to an HPCC. It
              contains an identifier--workunit ID, the ECL code, results, and
              other information about the job.</para>
            </footnote> result is returned to the command line.</para>

          <para>View the full details of the workunit using the ECL Watch
          interface for your HPCC at this location
          http://nnn.nnn.nnn.nnn:8010, where nnn.nnn.nnn.nnn is the IP of your
          ESP server node. Either search for the workunit using the workunit
          ID or select ECL Workunits/Browse and find your workunit in the list
          provided.</para>

          <para>Setting up an <emphasis role="bold">ecl.ini</emphasis> file
          makes running a workunit a little easier when you want to use the
          same settings every time you submit a workunit in this way. See the
          <emphasis>HPCC Client Tools </emphasis>manual for details.</para>

          <para>If your ECL is more complex than a single source file, you can
          use the eclcc compiler locally to create an archive to be sent to
          the eclccServer:</para>

          <para><programlisting>eclcc hello.ecl hello2.ecl helloN.ecl -E | ecl run - --target=thor --server=&lt;IP Address of the ESP&gt;:8010</programlisting></para>

          <para>The target parameter must name a valid target cluster name as
          listed in your environment's topology section.</para>
        </sect3>

        <sect3 id="RunningABasicECLProgramFromtheIDE" role="brk">
          <title>Running a basic ECL program from the ECL IDE</title>

          <para><orderedlist>
              <listitem>
                <para>Open the ECL IDE on your Windows workstation, from your
                start menu. (Start <emphasis role="bold">&gt;&gt;</emphasis>
                All Programs <emphasis role="bold">&gt;&gt;</emphasis>
                HPCCSystems <emphasis role="bold">&gt;&gt;</emphasis> ECL IDE
                ).</para>

                <informaltable colsep="1" frame="all" rowsep="1">
                  <?dbfo keep-together="always"?>

                  <tgroup cols="2">
                    <colspec colwidth="49.50pt" />

                    <colspec />

                    <tbody>
                      <row>
                        <entry><inlinegraphic
                        fileref="images/OSSgr3.png" /></entry>

                        <entry>You can create a shortcut on your desktop to
                        provide quick access to the ECL IDE.</entry>
                      </row>
                    </tbody>
                  </tgroup>
                </informaltable>
              </listitem>

              <listitem>
                <?dbfo keep-together="always"?>

                <para>Enter the <emphasis role="bold">Login ID</emphasis> and
                <emphasis role="bold">Password</emphasis> provided in the
                Login dialog.</para>

                <informaltable colsep="1" rowsep="1">
                  <tgroup cols="2">
                    <colspec colwidth="80pt" />

                    <colspec colwidth="100pt" />

                    <tbody>
                      <row>
                        <entry>Login ID</entry>

                        <entry>hpccdemo</entry>
                      </row>

                      <row>
                        <entry>Password</entry>

                        <entry>hpccdemo</entry>
                      </row>
                    </tbody>
                  </tgroup>
                </informaltable>

                <figure>
                  <title>Login Window</title>

                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="images/vmimg06a.JPG" />
                    </imageobject>
                  </mediaobject>
                </figure>
              </listitem>

              <listitem>
                <para>Open a new <emphasis role="bold">Builder
                Window</emphasis> (CTRL+N) and write the following
                code:</para>

                <para><programlisting>OUTPUT('Hello World');
</programlisting></para>

                <para>This could also be written as:</para>

                <para><programlisting>'Hello World';
</programlisting>In the second program listing, the OUTPUT keyword is omitted.
                This is possible because the language is declarative and the
                OUTPUT action is implicit.</para>
              </listitem>

              <listitem>
                <?dbfo keep-together="always"?>

                <para>Select <emphasis role="bold">thor</emphasis> as your
                target cluster.</para>

                <para><emphasis role="bold">Thor</emphasis> is the Data
                Refinery component of your HPCC. It is a disk based massively
                parallel computer cluster, optimized for sorting,
                manipulating, and transforming massive data.</para>

                <para><figure>
                    <title>Select target</title>

                    <mediaobject>
                      <imageobject>
                        <imagedata fileref="images/vmimg10.JPG" />
                      </imageobject>
                    </mediaobject>
                  </figure></para>
              </listitem>

              <listitem>
                <?dbfo keep-together="always"?>

                <para>Press the syntax check button on the main toolbar (or
                press F7).</para>

                <para><figure>
                    <title>Syntax Check</title>

                    <mediaobject>
                      <imageobject>
                        <imagedata fileref="images/vmimg09.JPG" />
                      </imageobject>
                    </mediaobject>
                  </figure>A successful syntax check displays the "No Errors"
                message.</para>
              </listitem>

              <listitem>
                <?dbfo keep-together="always"?>

                <para>Press the <emphasis role="bold">Go</emphasis> button (or
                press ctrl+enter).</para>

                <para><figure>
                    <title>Completed job</title>

                    <mediaobject>
                      <imageobject>
                        <imagedata fileref="images/vmimg11.JPG" />
                      </imageobject>
                    </mediaobject>
                  </figure>The green check mark indicates successful
                completion.</para>
              </listitem>

              <listitem>
                <?dbfo keep-together="always"?>

                <para>Click on the workunit number tab and then on the Result
                1 tab to see the output.</para>

                <para><figure>
                    <title>Completed job output</title>

                    <mediaobject>
                      <imageobject>
                        <imagedata fileref="images/vmimg12.JPG" />
                      </imageobject>
                    </mediaobject>
                  </figure></para>
              </listitem>
            </orderedlist></para>
        </sect3>
      </sect2>
    </sect1>

    <sect1 id="Multi-Node-System">
      <title>Configuring a Multi-Node System</title>

      <para>While the single-node system is fully-functional, it does not take
      advantage of the true power of an HPCC--the ability to perform
      operations using Massively Parallel Processing (MPP). This section
      provides the steps to expand your single-node system into a multi-node
      system using the Configuration Manager Wizard.</para>

      <para>To run a multi-node system, ensure that you have exactly the same
      packages installed on every node. Follow the steps below to configure
      your multi-node system to leverage the full power of Massively Parallel
      Processing.</para>

      <sect2 id="configuring-a-multi-node-system">
        <title>Using the Configuration Manager Wizard</title>

        <para>This section details reconfiguring a system to use multiple
        nodes. Before you start this section, you must have already downloaded
        the correct packages for your distro from the HPCC
        Systems<superscript>®</superscript> website: <ulink
        url="https://hpccsystems.com/download/free-community-edition">https://hpccsystems.com/download/free-community-edition</ulink>.</para>

        <orderedlist>
          <listitem>
            <para>If it is running, stop the HPCC system, using this
            command:</para>

            <para><programlisting>sudo /etc/init.d/hpcc-init stop</programlisting></para>

            <para><informaltable colsep="1" frame="all" rowsep="1">
                <?dbfo keep-together="always"?>

                <tgroup cols="2">
                  <colspec colwidth="49.50pt" />

                  <colspec />

                  <tbody>
                    <row>
                      <entry><inlinegraphic
                      fileref="images/OSSgr3.png" /></entry>

                      <entry>You can use this command to confirm HPCC
                      processes are stopped:<para><programlisting>sudo /etc/init.d/hpcc-init status</programlisting></para></entry>
                    </row>
                  </tbody>
                </tgroup>
              </informaltable></para>
          </listitem>

          <listitem>
            <para>Start the Configuration Manager service.<programlisting>sudo /opt/HPCCSystems/sbin/configmgr
</programlisting></para>

            <para><graphic
            fileref="images/gs_img_configmgrStart.jpg" /></para>
          </listitem>

          <listitem>
            <para>Leave this window open. You can minimize it, if
            desired.</para>
          </listitem>

          <listitem>
            <para>Using a Web browser, go to the Configuration Manager's
            interface:</para>

            <programlisting>http://&lt;<emphasis>node ip </emphasis>&gt;:8015</programlisting>
          </listitem>

          <listitem>
            <para>The Configuration Manager startup wizard displays. To use
            the wizard, select the Generate new environment using wizard
            button.</para>

            <para><graphic fileref="images/GS_ConfigMgrWizStart.jpg" /></para>
          </listitem>

          <listitem>
            <para>Provide a name for the environment file.</para>

            <para>This will then be the name of the configuration xml. For
            example, we will name this
            <emphasis>NewEnvironment.xml</emphasis>.</para>
          </listitem>

          <listitem>
            <para>Press the <emphasis role="bold">Next</emphasis>
            button.</para>

            <para>Next you will need to define the IP addresses that your
            system will use.</para>
          </listitem>

          <listitem>
            <?dbfo keep-together="always"?>

            <para>Enter all the IP addresses you want to use for this HPCC.
            Alternatively, you could enter the hostname(s).</para>

            <para>The IP addresses do not need to be contiguous. In the image
            below, we specified the IP addresses nn.nnn.nnn.1-100 and
            nn.nnn.nnn.111. These are separated with a semi-colon.</para>

            <para>You can specify a range of IPs using a hyphen (for example,
            NNN.NNN.NNN.1-100). IP Addresses can be specified individually
            using semi-colon delimiters.</para>

            <para><graphic fileref="images/GS_ConfigMgrWiz002.jpg" /></para>
          </listitem>

          <listitem>
            <para>Press the <emphasis role="bold">Next</emphasis>
            button.</para>

            <para>Now you will define how many nodes to use for the Roxie and
            Thor clusters.</para>
          </listitem>

          <listitem>
            <?dbfo keep-together="always"?>

            <para>Enter the appropriate values as indicated.</para>

            <para><graphic fileref="images/GS_CMWiz003.jpg" /></para>

            <variablelist>
              <varlistentry>
                <term>Number of support nodes:</term>

                <listitem>
                  <para>Specify the number of nodes to use for support
                  components. The default is 1.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Number of nodes for Roxie cluster:</term>

                <listitem>
                  <para>Specify the number of nodes to use for your Roxie
                  cluster. Enter zero (0) if you do not want a Roxie
                  cluster.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Number of slave nodes for Thor cluster</term>

                <listitem>
                  <para>Specify the number of slave nodes to use in your Thor
                  cluster. A Thor master node will be added
                  automatically.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Number of Thor slaves per node (default 1)</term>

                <listitem>
                  <para>Specify the number of Thor slave processes to
                  instantiate on each slave node. Enter zero (0) if you do not
                  want a Thor cluster.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Enable Roxie on demand</term>

                <listitem>
                  <para>Specify whether or not to allow queries to be run
                  immediately on Roxie. This must be enabled to run the
                  debugger. (Default is true)</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>

          <listitem>
            <para>Press the Next button</para>

            <para>The Environment Summary displays.</para>
          </listitem>

          <listitem>
            <?dbfo keep-together="always"?>

            <para>Click on <emphasis role="bold">Finish</emphasis> to accept
            these values. This saves the file.</para>

            <para><informaltable colsep="1" frame="all" rowsep="1">
                <?dbfo keep-together="always"?>

                <tgroup cols="2">
                  <colspec colwidth="49.50pt" />

                  <colspec />

                  <tbody>
                    <row>
                      <entry><inlinegraphic
                      fileref="images/OSSgr3.png" /></entry>

                      <entry>Keep in mind, that your HPPC configuration may be
                      different depending on your needs. For example, you may
                      not need a Roxie or you may need several smaller Roxie
                      clusters. In addition, in a production [Thor] system,
                      you would ensure that Thor and Roxie nodes are dedicated
                      and have no other processes running on them. This
                      document is intended to show you how to use the
                      configuration tools. Capacity planning and system design
                      is covered in a training module.</entry>
                    </row>
                  </tbody>
                </tgroup>
              </informaltable></para>

            <graphic fileref="images/GS_ConfigMgrWiz004.jpg" />

            <para><informaltable colsep="1" frame="all" rowsep="1">
                <?dbfo keep-together="always"?>

                <tgroup cols="2">
                  <colspec colwidth="49.50pt" />

                  <colspec />

                  <tbody>
                    <row>
                      <entry><inlinegraphic
                      fileref="images/OSSgr3.png" /></entry>

                      <entry>You can resize the Environment Summary by
                      clicking and dragging the lower right corner.</entry>
                    </row>
                  </tbody>
                </tgroup>
              </informaltable></para>
          </listitem>

          <listitem>
            <para>You will now be notified that you have completed the
            wizard.</para>

            <para><graphic fileref="images/GS_ConfigMgrWiz005.jpg" /></para>

            <para>At this point the system has created a file named
            NewEnvironment.xml in the <emphasis
            role="bold">/etc/HPCCSystems/source</emphasis> directory</para>
          </listitem>

          <listitem>
            <?dbfo keep-together="always"?>

            <para>Stop the Configuration Manager in the terminal where you
            started it by pressing CTRL-C.</para>

            <para><informaltable colsep="1" frame="all" rowsep="1">
                <?dbfo keep-together="always"?>

                <tgroup cols="2">
                  <colspec colwidth="49.50pt" />

                  <colspec />

                  <tbody>
                    <row>
                      <entry><inlinegraphic
                      fileref="images/caution.png" /></entry>

                      <entry>Be sure system is stopped before attempting to
                      move the environment.xml file.</entry>
                    </row>
                  </tbody>
                </tgroup>
              </informaltable></para>
          </listitem>

          <listitem>
            <para>Copy the NewEnvironment.xml file from the source directory
            to the /etc/HPCCSystems and rename the file to
            environment.xml</para>

            <programlisting># for example
sudo cp /etc/HPCCSystems/source/NewEnvironment.xml /etc/HPCCSystems/environment.xml</programlisting>

            <para><informaltable colsep="1" frame="all" rowsep="1">
                <?dbfo keep-together="always"?>

                <tgroup cols="2">
                  <colspec colwidth="49.50pt" />

                  <colspec />

                  <tbody>
                    <row>
                      <entry><inlinegraphic
                      fileref="images/caution.png" /></entry>

                      <entry>Make sure that you have sufficient privileges to
                      write file(s) to the destination directory before
                      attempting to copy. If prompted to overwrite the
                      destination file, you should answer <emphasis
                      role="bold">yes</emphasis>.</entry>
                    </row>
                  </tbody>
                </tgroup>
              </informaltable></para>
          </listitem>

          <listitem>
            <para>If you have added new machines to the cluster, you need to
            copy and install the HPCC package onto all nodes, and generate and
            clone the SSH keys. This can be done using the install-cluster.sh
            script which is provided with HPCC. Use the following
            command:</para>

            <programlisting>/opt/HPCCSystems/sbin/install-cluster.sh -k &lt;package-file-name&gt;</programlisting>

            <para>Where &lt;package-file-name&gt; is the name of the package
            file that you want to install on every node - this will be in the
            form hpccsystems-platform-<emphasis>xxxx-n.n.nnnn</emphasis>.rpm
            (or .deb) depending on the version and distro. More details
            including other options that may be used with this command are
            included in the appendix.</para>
          </listitem>

          <listitem>
            <para>Copy the <emphasis
            role="bold">/etc/HPCCSystems/environment.xml</emphasis> to
            <emphasis role="bold">/etc/HPCCSystems/</emphasis> on <emphasis
            role="bold">every</emphasis> node.</para>

            <para>You may want to create a script to push out the XML file to
            all nodes. A sample script is provided with HPCC. The following
            command copies the XML files out to all nodes as required:</para>

            <para><programlisting>sudo /opt/HPCCSystems/sbin/hpcc-push.sh -s &lt;sourcefile&gt; -t &lt;destinationfile&gt;
</programlisting>Where the &lt;sourcefile&gt; is the absolute path to the file
            you want to copy, and the &lt;destinationfile&gt; is the absolute
            path to the file you want written out. See the appendix (<link
            linkend="Example-Scripts">Appendix:Example Scripts</link>) for
            more information on using this script.</para>
          </listitem>
        </orderedlist>

        <?hard-pagebreak ?>

        <orderedlist continuation="continues">
          <listitem>
            <para>Restart the HPCC system on <emphasis
            role="bold">every</emphasis> node. The following command starts
            the HPCC system on an individual node:</para>

            <programlisting>sudo /etc/init.d/hpcc-init start</programlisting>

            <informaltable colsep="1" frame="all" rowsep="1">
              <?dbfo keep-together="always"?>

              <tgroup cols="2">
                <colspec colwidth="49.50pt" />

                <colspec />

                <tbody>
                  <row>
                    <entry><inlinegraphic
                    fileref="images/OSSgr3.png" /></entry>

                    <entry><para>You may want to use a script to push this
                    command out to every node. A sample script is provided
                    with HPCC. Use the following command to start HPCC on all
                    nodes:</para><para><programlisting>sudo /opt/HPCCSystems/sbin/hpcc-run.sh -a hpcc-init start</programlisting></para></entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>

            <para>This script can also be used to stop HPCC on all nodes and
            to start and stop individual components on all nodes. See the
            appendix (<link linkend="Example-Scripts">Appendix:Example
            Scripts</link>) for more details.</para>
          </listitem>
        </orderedlist>
      </sect2>
    </sect1>

    <sect1 id="Starting-and-stopping">
      <title>Starting and Stopping</title>

      <sect2 id="Start-Stop-Reset">
        <title><emphasis>Start, Stop, Restart the System</emphasis></title>

        <para>Once you have your system environment established , the
        <emphasis role="bold">init </emphasis>system can be used to start,
        stop, or restart components.</para>

        <para>The following commands can be used:</para>

        <sect3 id="StartStop_ToStartSystem">
          <title>To start the system:</title>

          <programlisting>sudo /etc/init.d/hpcc-init start</programlisting>
        </sect3>

        <sect3 id="StartStop_StopTheSystem">
          <title>To stop the system:</title>

          <programlisting>sudo /etc/init.d/hpcc-init stop</programlisting>

          <para><informaltable colsep="1" frame="all" rowsep="1">
              <?dbfo keep-together="always"?>

              <tgroup cols="2">
                <colspec colwidth="49.50pt" />

                <colspec />

                <tbody>
                  <row>
                    <entry><inlinegraphic
                    fileref="images/OSSgr3.png" /></entry>

                    <entry>You can use a script to start or stop multiple
                    nodes in the system. See <emphasis><link
                    linkend="Example-Scripts">Example Scripts</link>
                    </emphasis>in the Appendix section.</entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable></para>
        </sect3>

        <sect3 id="StartStop_SingleComponents">
          <title>Start or Stop Single Components</title>

          <para>To start or stop a single component, you can use the -c flag
          in the init system as follows.</para>

          <programlisting>sudo /etc/init.d/hpcc-init -c &lt;component name&gt; &lt;command&gt;</programlisting>

          <para><informaltable colsep="1" frame="all" rowsep="1">
              <?dbfo keep-together="always"?>

              <tgroup cols="2">
                <colspec colwidth="49.50pt" />

                <colspec />

                <tbody>
                  <row>
                    <entry><inlinegraphic
                    fileref="images/OSSgr3.png" /></entry>

                    <entry>To stop dafilesrv (a helper application), you must
                    use this command: sudo /sbin/service dafilesrv stop. See
                    Helper Applications for details.</entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable></para>

          <para><variablelist>
              <varlistentry>
                <term>NOTE:</term>

                <listitem>
                  <para>Some system V init system 'service hpcc-init' calls
                  may still work and you can continue to use those. However,
                  most Linux distributions are deprecating the service calls.
                  We suggest calling hpcc-init directly instead of using a
                  'service' call.</para>
                </listitem>
              </varlistentry>
            </variablelist></para>
        </sect3>
      </sect2>

      <sect2 id="Starting-Stopping-Config-Manager">
        <title><emphasis>Start or Stop Configuration
        Manager</emphasis></title>

        <para>Configure the system as desired using Configuration
        Manager.</para>

        <orderedlist>
          <listitem>
            <para>If the system is running, stop the HPCC system, using this
            command on <emphasis role="bold">every</emphasis> node:</para>

            <programlisting>sudo /etc/init.d/hpcc-init stop
</programlisting>
          </listitem>

          <listitem>
            <para>Start the Configuration Manager service on one node (usually
            the first node is considered the head node and is used for this
            task, but this is up to you)</para>

            <programlisting>sudo /opt/HPCCSystems/sbin/configmgr</programlisting>
          </listitem>

          <listitem>
            <para>Using a web browser, go to the Configuration Manager's
            interface:</para>

            <programlisting>http://&lt;<emphasis>ip of installed system</emphasis>&gt;:8015</programlisting>
          </listitem>
        </orderedlist>
      </sect2>
    </sect1>

    <xi:include href="Installing_and_RunningTheHPCCPlatform/Inst-Mods/hpcc_ldap.xml"
                xpointer="element(/1)"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <xi:include href="Installing_and_RunningTheHPCCPlatform/Inst-Mods/UserSecurityMaint.xml"
                xpointer="element(/1)"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <!-- <xi:include href="Installing_and_RunningTheHPCCPlatform/Inst-Mods/ssl-esp.xml"
                xpointer="element(/1)"
                xmlns:xi="http://www.w3.org/2001/XInclude" />   -->

    <xi:include href="Installing_and_RunningTheHPCCPlatform/Inst-Mods/ssl-esp.xml"
                xpointer="xpointer(//*[@id='ssl4esp'])"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <xi:include href="Installing_and_RunningTheHPCCPlatform/Inst-Mods/ssl-esp.xml"
                xpointer="xpointer(//*[@id='ssl4Roxie'])"
                xmlns:xi="http://www.w3.org/2001/XInclude" />
  </chapter>

  <chapter id="Installing_MoreECLExamples">
    <title>More Examples</title>

    <para>This section contains additional ECL examples you can use on your
    HPCC cluster. You can run these on a single-node system or a larger
    multi-node cluster.</para>

    <sect1 id="IR_AnagramExamples" role="nobrk">
      <title>Anagram Examples</title>

      <para>The following examples display some of things that HPCC can do.
      Running through these examples will help your understanding of HPCC and
      ECL.</para>

      <xi:include href="Installing_and_RunningTheHPCCPlatform/Inst-Mods/anagram1.xml"
                  xpointer="xpointer(//*[@id='ECLExample_Anagram1'])"
                  xmlns:xi="http://www.w3.org/2001/XInclude" />

      <xi:include href="Installing_and_RunningTheHPCCPlatform/Inst-Mods/anagram2.xml"
                  xpointer="xpointer(//*[@id='ECLRoxieExample_Anagram2'])"
                  xmlns:xi="http://www.w3.org/2001/XInclude" />
    </sect1>
  </chapter>

  <chapter id="ExampleECL_NextSteps">
    <title>Next Steps</title>

    <para>Available from the menu in the ECL IDE there are several documents
    which provide details on various aspects of the HPCC.</para>

    <para>You can access them from the help menu: Help <emphasis
    role="bold">&gt;&gt;</emphasis> Documentation.</para>

    <para><figure>
        <title>Help Menu</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/vmimg07.JPG" />
          </imageobject>
        </mediaobject>
      </figure></para>

    <para>You can also find these from the <emphasis
    role="bold">Start</emphasis> menu :</para>

    <para>Start <emphasis role="bold">&gt;&gt;</emphasis> All Programs
    <emphasis role="bold">&gt;&gt;</emphasis> HPCC Systems <emphasis
    role="bold">&gt;&gt;</emphasis> ECL IDE <emphasis
    role="bold">&gt;&gt;</emphasis> Docs</para>

    <para>To familiarize yourself with what your system can do we recommend
    following the steps in<itemizedlist spacing="compact">
        <listitem>
          <para>The <emphasis role="bold">HPCC Data Tutorial</emphasis></para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">The Six Degrees of Kevin
          Bacon</emphasis> example</para>
        </listitem>

        <listitem>
          <para>Read <emphasis role="bold">Using Config Manager</emphasis> to
          learn how to configure an HPCC platform using Advanced View.</para>
        </listitem>

        <listitem>
          <para>Use your new skills to process your own massive
          dataset!</para>
        </listitem>
      </itemizedlist></para>

    <para>The HPCC Systems<superscript>®</superscript> Portal is also a
    valuable resource for more information including:</para>

    <itemizedlist spacing="compact">
      <listitem>
        <para>Video Tutorials</para>
      </listitem>

      <listitem>
        <para>Additional examples</para>
      </listitem>

      <listitem>
        <para>White Papers</para>
      </listitem>

      <listitem>
        <para>Documentation</para>
      </listitem>
    </itemizedlist>
  </chapter>

  <chapter id="Appendix">
    <title>Appendix</title>

    <sect1 id="Example-Scripts" role="nobrk">
      <title>Example Scripts</title>

      <para>For a multi-node configuration, you must install the packages on
      each node. You can install each one manually or use scripts to copy and
      install the packages. On a large system where you have many nodes
      copying and installing on every node is not practical, therefore we
      provide some scripts you can use or to serve as examples to give you a
      start in making your own.</para>

      <para>Scripts are installed to the<emphasis role="bold">
      /opt/HPCCSystems/sbin</emphasis> directory. Scripts should be run as
      sudo or as a user with appropriate privileges on all nodes. The scripts
      have the ability to multi-thread.</para>

      <para><informaltable colsep="1" frame="all" rowsep="1">
          <?dbfo keep-together="always"?>

          <tgroup cols="2">
            <colspec colwidth="49.50pt" />

            <colspec />

            <tbody>
              <row>
                <entry><inlinegraphic fileref="images/caution.png" /></entry>

                <entry>Make sure that you have the sufficient privileges to
                sudo as an administrator to use the install-cluster.sh script.
                To use the hpcc-push.sh or hpcc-run.sh scripts, you must sudo
                as user <emphasis role="bold">hpcc</emphasis>.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>

      <sect2 id="ExampleScripts_install-cluster.sh">
        <title>install-cluster.sh</title>

        <para><emphasis
        role="bold">install-cluster.sh</emphasis><emphasis><emphasis> [-k | -p
        &lt;directory&gt;] [-n &lt;value&gt;] &lt;package-name&gt;
        </emphasis></emphasis></para>

        <para><informaltable colsep="0" frame="none" rowsep="0">
            <tgroup cols="2">
              <colspec colwidth="150pt" />

              <colspec />

              <tbody>
                <row>
                  <entry>&lt;package-name&gt;</entry>

                  <entry>Name of the HPCC package to install. Required</entry>
                </row>

                <row>
                  <entry>-h</entry>

                  <entry>Help. Optional.</entry>
                </row>

                <row>
                  <entry>-k, --newkey</entry>

                  <entry>When specified, the script generates and distributes
                  ssh keys to all hosts. Optional.</entry>
                </row>

                <row>
                  <entry>-p, --pushkeydir</entry>

                  <entry>Push existing ssh key to remote machine. Optional.
                  Use either -k or -p, not both.</entry>
                </row>

                <row>
                  <entry>-n, --concurrent</entry>

                  <entry>When specified, denotes the number of concurrent
                  executions. Default is 5. Optional.</entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable></para>

        <para><emphasis role="bold">You can run this script as any user with
        sufficient permissions to execute it; however, when prompted for
        username/password, you must provide credentials for a user with
        sufficient sudo rights to run commands as an administrator on all
        nodes. </emphasis></para>

        <para>Before you can use this script, you must have already defined
        and generated an environment.xml file (using ConfigMgr's wizard or
        advanced mode). This script:</para>

        <itemizedlist>
          <listitem>
            <para>reads the active environment.xml file and gathers a list of
            nodes upon which to act.</para>
          </listitem>

          <listitem>
            <para>installs the HPCC platform package(s) on all nodes
            specified.</para>
          </listitem>

          <listitem>
            <para>pushes out and deploys the environment file
            (environment.xml) to all nodes specified.</para>
          </listitem>

          <listitem>
            <para>optionally, if you specify the -k option it also generates
            the required ssh keys and deploys them as required to all nodes
            specified.</para>
          </listitem>

          <listitem>
            <para>optionally, if you specify the -p option it pushes out the
            existing ssh keys to all nodes specified. Use either the -k or the
            -p option, but not both.</para>
          </listitem>

          <listitem>
            <para>optionally, if you specify the -n &lt;value&gt; option it
            spawns that many concurrent executions. Default is 5.</para>
          </listitem>
        </itemizedlist>

        <para><?hard-pagebreak ?><emphasis
        role="bold">Examples:</emphasis></para>

        <para>This example installs the HPCC Platform packages to remaining
        nodes and pushes out the active environment.xml file to those
        nodes.:</para>

        <para><programlisting>sudo /opt/HPCCSystems/sbin/install-cluster.sh hpccsystems-platform-xxxx-<emphasis>n.n.nnnn</emphasis> 
</programlisting></para>

        <para>(where <emphasis>n.n.nnnn</emphasis> is the build number)</para>

        <para>This example installs the HPCC Platform packages to all nodes
        and pushes out the active environment.xml file to those nodes. It also
        generates ssh keys and pushes them out to all nodes.</para>

        <para><programlisting>sudo /opt/HPCCSystems/sbin/install-cluster.sh -k hpccsystems-platform-xxxx-<emphasis>n.n.nnnn</emphasis> 
</programlisting></para>

        <para>(where <emphasis>n.n.nnnn</emphasis> is the build number)</para>

        <para>This example installs the HPCC Platform packages and pushes out
        the active environment.xml file to 8 concurrent nodes.:</para>

        <para><programlisting>sudo /opt/HPCCSystems/sbin/install-cluster.sh -n 8 hpccsystems-platform-xxxx-<emphasis>n.n.nnnn</emphasis> 
</programlisting></para>

        <para>(where <emphasis>n.n.nnnn</emphasis> is the build number)</para>
      </sect2>

      <sect2 id="ExampleScripts_deploy-java-files.sh" role="brk">
        <title>deploy-java-files.sh</title>

        <para><emphasis
        role="bold">deploy-java-files.sh</emphasis><emphasis><emphasis> [-c]
        [-e] [-H &lt;value&gt;] [-n &lt;value&gt;] [-r] [-s &lt;value&gt;] [-t
        &lt;value&gt;] [-u &lt;value&gt;] [-x] </emphasis></emphasis></para>

        <para><informaltable colsep="0" frame="none" rowsep="0">
            <tgroup cols="2">
              <colspec colwidth="100.50pt" />

              <colspec />

              <tbody>
                <row>
                  <entry>-c</entry>

                  <entry>When specified, this option adds the target directory
                  or jar file path to classpath in environment.conf.</entry>
                </row>

                <row>
                  <entry>-e</entry>

                  <entry>When specified, this denotes the target is to be
                  removed from the classpath.</entry>
                </row>

                <row>
                  <entry>-H</entry>

                  <entry>Host IP list. When specified, will target the IP
                  addresses specified, one IP address per line. If this option
                  is not used will run on the IP list generated from the
                  environment.xml</entry>
                </row>

                <row>
                  <entry>-n</entry>

                  <entry>When specified, denotes the number of concurrent
                  execution threads. Default is 5. You must have python
                  installed, otherwise this option will be ignored and the
                  action will run on each host sequentially.</entry>
                </row>

                <row>
                  <entry>-r</entry>

                  <entry>Reset classpath. When specified, will reset the
                  classpath to &lt;install_directory&gt;/classes. If used in
                  conjunction with the -t adds the new entries to the
                  classpath after reset.</entry>
                </row>

                <row>
                  <entry>-s</entry>

                  <entry>Source file or directory.</entry>
                </row>

                <row>
                  <entry>-t</entry>

                  <entry>Target directory. The default is
                  &lt;install_directory&gt;/classes. If it is only for adding
                  to classpath, the value can be the full path of the java jar
                  file.</entry>
                </row>

                <row>
                  <entry>-u</entry>

                  <entry>The username to use for ssh access to remote system.
                  Provide this option when the specified user does not use a
                  password to run ssh/scp. Without specifying this option you
                  will be prompted to supply a username and password. We
                  strongly recommend not using &lt;hpcc user&gt; to avoid
                  security issues.</entry>
                </row>

                <row>
                  <entry>-x</entry>

                  <entry>When specified, this option excludes execution on the
                  current host.</entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable></para>

        <para>The <emphasis role="bold">deploy-java-files.sh</emphasis>
        script, is used to deploy java files (source) to HPCC cluster hosts
        and update the classpath variable in environment.conf.</para>

        <para>This script runs a command on all IP addresses or host names in
        the active environment.xml. The IP addresses are defined when editing
        the environment in ConfigMgr.</para>

        <para>This script writes to a log file:</para>

        <para><emphasis
        role="bold">/var/log/HPCCSystems/cluster/se_&lt;action&gt;_&lt;commnd&gt;_&lt;pid&gt;_yyyymmdd_HHMMSS.log</emphasis></para>

        <para><emphasis role="bold">Examples:</emphasis></para>

        <para>To deploy java files from /home/hpcc/development/java/ on local
        system to /home/hpcc/java/ on all hosts in cluster and update
        classpath with 10 concurrent executions:</para>

        <para><programlisting>./deploy-java-files.sh -s /home/hpcc/development/java/* -t /home/hpcc/java/ -c -n 10
</programlisting></para>

        <para>To deploy java files from /home/hpcc/java/ on local system to
        /home/hpcc/java on all hosts in cluster except local system:</para>

        <para><programlisting>./deploy-java-files.sh -s /home/hpcc/java/* -t /home/hpcc/java -x
</programlisting>To update classpath for a cluster:</para>

        <para><programlisting>./deploy-java-files.sh -c -t /home/hpcc/develop/java:/home/hpcc/test/java/ 
</programlisting></para>

        <para>To To deploy java files to a list of hosts :</para>

        <para><programlisting>./deploy-java-files.sh -H /home/hpcc/hosts.txt -s /home/hpcc/java/* -t /home/hpcc/java/ </programlisting></para>
      </sect2>

      <sect2 id="ExampleScripts_hpcc-push.sh" role="brk">
        <title>hpcc-push.sh</title>

        <para><emphasis
        role="bold">hpcc-push.sh</emphasis><emphasis><emphasis> [-s
        &lt;source&gt;] [-t &lt;target&gt;] [-n &lt;concurrent&gt;] [-x]
        </emphasis></emphasis></para>

        <para><informaltable colsep="0" frame="none" rowsep="0">
            <tgroup cols="2">
              <colspec colwidth="150pt" />

              <colspec />

              <tbody>
                <row>
                  <entry>-s</entry>

                  <entry>Source file or directory.</entry>
                </row>

                <row>
                  <entry>-t</entry>

                  <entry>Target file or directory.</entry>
                </row>

                <row>
                  <entry>-n, --concurrent</entry>

                  <entry>When specified, denotes the number of concurrent
                  executions. Default is 5. Optional.</entry>
                </row>

                <row>
                  <entry>-x</entry>

                  <entry>When specified, this option excludes execution on the
                  current host.</entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable></para>

        <para><emphasis role="bold">This script "pushes" files from the source
        filename and path to the destination filename and path for all IP
        addresses in the active environment.xml. </emphasis></para>

        <para>To use this script, the ssh keys need to be properly configured
        on all nodes, and you must use sudo.</para>

        <para>The IP addresses were defined when editing the environment in
        ConfigMgr.</para>

        <para><programlisting>sudo /opt/HPCCSystems/sbin/hpcc-push.sh -s &lt;sourcefile&gt; -t &lt;destinationfile&gt;
</programlisting>For example:</para>

        <para><programlisting>sudo /opt/HPCCSystems/sbin/hpcc-push.sh -x \
     -s /etc/HPCCSystems/environment.xml -t /etc/HPCCSystems/environment.xml
</programlisting></para>
      </sect2>

      <sect2 id="ExampleScripts_hpcc-run.sh" role="brk">
        <title>hpcc-run.sh</title>

        <para><emphasis role="bold">hpcc-run.sh
        </emphasis><emphasis><emphasis>[-c component] [-a
        {hpcc-init|dafilesrv}] [-n &lt;value&gt;] [-s] [-S]
        {start|stop|restart|status|setup}</emphasis></emphasis></para>

        <para><informaltable colsep="0" frame="none" rowsep="0">
            <tgroup cols="2">
              <colspec colwidth="100.50pt" />

              <colspec />

              <tbody>
                <row>
                  <entry>-a</entry>

                  <entry>HPCC service name. Either hpcc-init (default) of
                  dafilesrv.</entry>
                </row>

                <row>
                  <entry>-c</entry>

                  <entry>HPCC component. For example, mydali, myroxie, mythor,
                  etc.</entry>
                </row>

                <row>
                  <entry>-n, --concurrent</entry>

                  <entry>When specified, denotes the number of concurrent
                  instances to run. The default is 5. Optional.</entry>
                </row>

                <row>
                  <entry>-S</entry>

                  <entry>When specified, the command runs sequentially, one
                  host at a time.</entry>
                </row>

                <row>
                  <entry>-s</entry>

                  <entry>When specified, saves the result to a file named
                  &lt;ip address&gt;.</entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable></para>

        <para>To use this script, the ssh keys need to be properly configured
        on all nodes, and you must sudo as user hpcc.</para>

        <para><emphasis role="bold">This script runs a command on all IP
        addresses in the active environment.xml. </emphasis></para>

        <para>The IP addresses were defined when editing the environment in
        ConfigMgr. This script supports all the parameters of hpcc-init and
        dafilesrv.</para>

        <para><emphasis role="bold">Examples:</emphasis></para>

        <para>This example starts all components on the nodes</para>

        <para><programlisting>sudo /opt/HPCCSystems/sbin/hpcc-run.sh -a hpcc-init start
</programlisting></para>

        <para>This example starts all components on all the nodes, using 8
        concurrent executions</para>

        <para><programlisting>sudo /opt/HPCCSystems/sbin/hpcc-run.sh -a hpcc-init start -n 8
</programlisting>This example starts all components of the esp type on the
        nodes</para>

        <para><programlisting>sudo /opt/HPCCSystems/sbin/hpcc-run.sh -c esp -a hpcc-init start 
</programlisting>This example starts all components with a component name
        myesp on the nodes</para>

        <para><programlisting>sudo /opt/HPCCSystems/sbin/hpcc-run.sh -c myesp -a hpcc-init start 
</programlisting>This example starts the dafilesrv helper application</para>

        <para><programlisting>sudo /opt/HPCCSystems/sbin/hpcc-run.sh -a dafilesrv start
</programlisting></para>
      </sect2>
    </sect1>

    <sect1 id="Uninstalling-the-HPCC">
      <title>Uninstalling the HPCC Platform</title>

      <para>To uninstall the HPCC platform, issue the appropriate commands for
      your system. If necessary, do so on each node that it is installed
      on.</para>

      <para><emphasis role="bold">Centos/Red Hat</emphasis></para>

      <programlisting>sudo yum remove hpccsystems-platform </programlisting>

      <para>Alternatively you can still use.</para>

      <para><emphasis role="bold">Ubuntu/Debian </emphasis></para>

      <programlisting>sudo dpkg -r hpccsystems-platform</programlisting>
    </sect1>

    <sect1 id="Helper-Applications">
      <title>Helper Applications</title>

      <para>There is a helper applications that runs on all nodes that you may
      need to stop or start manually.</para>

      <para>Normally, this process is started automatically the first time the
      hpcc-init service executes.</para>

      <para>Enter the following commands to stop or start the helper
      application:</para>

      <itemizedlist>
        <listitem>
          <para>dafilesrv</para>

          <para><programlisting>sudo /sbin/service dafilesrv stop

sudo /sbin/service dafilesrv start</programlisting><property><!--*** not for publication
cd /var/lib/HPCCSystems/mythor
...
init_stop_thor
init_start_thor--></property></para>
        </listitem>
      </itemizedlist>

      <para><?hard-pagebreak ?></para>
    </sect1>

    <sect1 id="hpcc-init">
      <title>hpcc-init</title>

      <para><emphasis role="bold"> service hpcc-init
      </emphasis><emphasis><emphasis>[</emphasis>option<emphasis>]</emphasis>
      command</emphasis></para>

      <para><informaltable colsep="0" frame="none" rowsep="0">
          <tgroup cols="2">
            <colspec colwidth="80.50pt" />

            <colspec />

            <tbody>
              <row>
                <entry>option</entry>

                <entry><itemizedlist>
                    <listitem>
                      <para>-c <emphasis>componentname</emphasis>,
                      --component=<emphasis>componentname</emphasis></para>

                      <para>Specifies the component upon which to execute the
                      command. If omitted, the default is <emphasis
                      role="bold">all</emphasis> components on the
                      machine.</para>

                      <para>-c <emphasis>componenttype</emphasis>,
                      --component=<emphasis>componenttype</emphasis></para>

                      <para>Specifies the component type upon which to execute
                      the command. If more than one of this type is
                      configured, all will be acted upon. If omitted, the
                      default is <emphasis role="bold">all</emphasis>
                      components on the machine.</para>
                    </listitem>

                    <listitem>
                      <para>--componentlist</para>

                      <para>Provides a list of all component names on the
                      current node as specified in the environment
                      file.</para>
                    </listitem>

                    <listitem>
                      <para>--typelist</para>

                      <para>Provides a list of all component types on the
                      current node as specified in the environment
                      file.</para>
                    </listitem>

                    <listitem>
                      <para>-h, --help</para>

                      <para>Displays a help page</para>
                    </listitem>
                  </itemizedlist></entry>
              </row>

              <row>
                <entry>command</entry>

                <entry><itemizedlist>
                    <listitem>
                      <para>start:</para>

                      <para>Starts component(s)</para>
                    </listitem>

                    <listitem>
                      <para>stop</para>

                      <para>Stops component(s)</para>
                    </listitem>

                    <listitem>
                      <para>status</para>

                      <para>Displays component(s) status</para>
                    </listitem>

                    <listitem>
                      <para>restart</para>

                      <para>Restarts component(s)</para>
                    </listitem>

                    <listitem>
                      <para>setup</para>

                      <para>Initializes component configuration files but does
                      not start the component(s).</para>
                    </listitem>
                  </itemizedlist></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>The <emphasis role="bold">hpcc-init
      </emphasis>function is used to start, stop, restart, setup, or check the
      status of any or all HPCC components.</para>

      <?hard-pagebreak ?>

      <para><emphasis role="bold">Examples:</emphasis></para>

      <programlisting>sudo /etc/init.d/hpcc-init start
sudo /etc/init.d/hpcc-init stop

sudo /etc/init.d/hpcc-init -c myeclserver start
sudo /etc/init.d/hpcc-init --component=myeclserver start

sudo /etc/init.d/hpcc-init -c esp start
</programlisting>

      <sect2 id="HPCC_systemd_svc">
        <title>HPCC systemd services</title>

        <para>There are two HPCC systemd services: hpcc-init and dafilesrv.
        While some hpcc-init systemd services are still developmental, users
        can use <emphasis>/etc/init.d/hpcc-init</emphasis> and
        <emphasis>/etc/init.d/dafilesrv</emphasis> directly. Invoking these
        services in this way provides status in the same manner as invoking
        them with a service command does for other HPCC processes.</para>

        <para>The hpcc-init system service will only support "start", "stop"
        and "restart" options. The other options, such as "status", "-c" are
        not supported.</para>

        <para>There are two sets of HPCC systemd service scripts:
        <emphasis>hpcc-init.service/dafilesrv.service</emphasis> and
        <emphasis>hpcc-init@.service/dafilesrv@.service</emphasis> installed
        under /lib/systemd/system.</para>

        <para>The first set does not have any output to STDOUT/STDERROR,
        instead it logs to /var/log/syslog. To view the output:</para>

        <programlisting>journalctl -u &lt;service&gt; -f  </programlisting>

        <para>The second set has the same output to STDOUT/STDERROR as
        directly invoking /etc/init.d/&lt;hpcc-init|dafilesrv&gt;</para>

        <para>Use either:</para>

        <programlisting>sudo service &lt;service&gt; &lt;start|stop|restart&gt;</programlisting>

        <para>or</para>

        <programlisting>sudo systemctl &lt;start|stop|restart&gt; &lt;full_service_name&gt; </programlisting>

        <para>The systemd displays the service status in it's own
        format.</para>

        <programlisting>sudo service &lt;service&gt; status </programlisting>

        <para>or</para>

        <programlisting>sudo systemctl status &lt;full_service_name&gt; </programlisting>

        <para>These are different than the output from</para>

        <programlisting>/etc/init.d/hpcc-init status</programlisting>

        <para>HPCC services started through systemd will be listed as active
        in systemd. They can be listed as "sudo systemctl list-units
        [PATTERN...]". To remove them from the systemd active service list,
        you must run the stop service from the "service" or "systemctl"
        commands (as shown above) even though it is already stopped by
        directly calling /etc/init.d/&lt;hpcc-init|dafilesrv&gt; stop.</para>

        <para>HPCC uninstall will automatically remove HPCC services from
        active list and /etc/systemd/system/ directory.</para>

        <sect3 id="hpcc-init_sysd_svc_usage">
          <title id="hpcc_systemd_usage">hpcc-init systemd service
          usage</title>

          <para>To start or stop HPCC with hpcc-init without STDOUT/STDERR
          output: <orderedlist>
              <listitem>
                <para>Start</para>

                <programlisting>sudo service hpcc-init start </programlisting>

                <para>or</para>

                <programlisting>sudo systemctl start hpcc-init.service</programlisting>
              </listitem>

              <listitem>
                <para>Check</para>

                <programlisting>sudo journalctl -u hpcc-init -f</programlisting>
              </listitem>

              <listitem>
                <para>Stop</para>

                <programlisting>sudo service hpcc-init stop </programlisting>

                <para>or</para>

                <programlisting>sudo systemctl stop hpcc-init.service</programlisting>
              </listitem>
            </orderedlist></para>

          <para>To start/stop HPCC with hpcc-init with STDOUT/STDERR output.
          Get current tty by running "tty". For example, tty -&gt; /dev/pts/1.
          "pts/1" will be used in following commands. <orderedlist>
              <listitem>
                <para>Start</para>

                <programlisting>sudo service hpcc-init@pts/1 start</programlisting>

                <para>or</para>

                <programlisting>sudo systemctl start hpcc-init@pts/1.service</programlisting>
              </listitem>

              <listitem>
                <para>Check</para>

                <programlisting>sudo journalctl -u hpcc-init -f</programlisting>
              </listitem>

              <listitem>
                <para>Stop</para>

                <programlisting>sudo service hpcc-init@pts/1 stop</programlisting>

                <para>or</para>

                <programlisting>sudo systemctl stop hpcc-init@pts/1.service</programlisting>
              </listitem>
            </orderedlist></para>
        </sect3>
      </sect2>
    </sect1>

    <xi:include href="Installing_and_RunningTheHPCCPlatform/Inst-Mods/UnityLauncher.xml"
                xpointer="element(/1)"
                xmlns:xi="http://www.w3.org/2001/XInclude" />

    <sect1 id="Running-HPCC-Tools-Under-WINE">
      <title>Running the ECL IDE under WINE</title>

      <para>To run the ECL IDE under WINE in Linux, follow these steps.</para>

      <orderedlist>
        <listitem>
          <para>Install wine1.2 (this corresponds to Wine version 1.1.31) and
          its dependencies.</para>
        </listitem>

        <listitem>
          <para>Download msxml3.msi from Microsoft (Service Pack 7 or
          later).</para>

          <para><emphasis role="underline"><ulink
          url="http://www.microsoft.com/en-us/download/details.aspx?id=3988">http://www.microsoft.com/en-us/download/details.aspx?id=3988</ulink></emphasis></para>
        </listitem>

        <listitem>
          <para>Install msxml3.msi in Wine (Double-click the msi file and Wine
          will install it).</para>
        </listitem>

        <listitem>
          <para>Open Configure Wine (Applications/Wine/Configure Wine):</para>
        </listitem>

        <listitem>
          <para>Select the Libraries tab.</para>
        </listitem>

        <listitem>
          <para>In the New override for library drop list, select
          <emphasis>msxml3</emphasis>, then press the add button.</para>
        </listitem>

        <listitem>
          <para>Select <emphasis> msxml3</emphasis> in the Existing overrides
          list and press Edit.</para>
        </listitem>

        <listitem>
          <para>Select the <emphasis>Native (Windows)</emphasis> option and
          press the OK button.</para>
        </listitem>

        <listitem>
          <para>Press the OK button to close the Wine Configuration
          window.</para>
        </listitem>

        <listitem>
          <para>Install the HPCC ECL IDE (Double-click the setup.msi file and
          Wine will install it).</para>
        </listitem>
      </orderedlist>
    </sect1>

    <sect1 id="ExternLang_Support">
      <title>External Language Support</title>

      <para>This section covers the steps to add external language support to
      the HPCC platform. HPCC offers support for several programming
      languages, some have additional dependencies that must be installed.
      External language support is included with the platform installation
      package, however there are RPM-based HPCC Platform installation packages
      that explicitly state <emphasis role="bold">with
      plugins</emphasis>.</para>

      <para><emphasis role="bold">RPM-based systems:</emphasis></para>

      <para>If you are interested in using external languages for RPM-based
      systems (CentOS/Red Hat), you need to download and install the
      appropriate platform installation distribution <emphasis
      role="bold">with plugins</emphasis> option from the downloads
      site.</para>

      <para>For RPM based systems, there are two different installation
      packages available. One package includes the optional plugins to support
      embedded code from other languages. If you want support for other
      languages, choose the package for your distro that begins with:</para>

      <programlisting>hpccsystems-platform_community-with-plugins- </programlisting>

      <para><emphasis role="bold">Debian-based systems:</emphasis></para>

      <para>Optional plugin downloads are NOT needed for the Debian-based
      systems (Ubuntu) installation package, as the plugins are included in
      all the Debian installation packages.</para>

      <para>The external languages currently supported include:</para>

      <itemizedlist>
        <listitem>
          <para>C++ (full support is already built-in)</para>
        </listitem>

        <listitem>
          <para>Java</para>
        </listitem>

        <listitem>
          <para>JavaScript</para>
        </listitem>

        <listitem>
          <para>Python</para>
        </listitem>

        <listitem>
          <para>R</para>
        </listitem>
      </itemizedlist>

      <para>The following sections detail what is required to utilize these
      languages in your HPCC platform.</para>

      <para>In addition to these languages, you can add support for additional
      languages by creating your own plugin. This is not very difficult to do.
      For example the JavaScript plugin is about 500 lines of C++ code. You
      can use that as a template to write your own and, if desired, you can
      contribute it back to the open source initiative.</para>

      <sect2 id="Add_On_Java" role="brk">
        <title>Java</title>

        <para>You can run external Java code on the HPCC platform. Compiled
        Java can be used either as a .class (or a .jar) and called from ECL
        just like any other ECL function.</para>

        <para>To extract the JNI signatures:</para>

        <programlisting>javap -s</programlisting>

        <para>To set up Java to integrate with the HPCC platform:</para>

        <orderedlist>
          <listitem>
            <para>Install a Java development package, such as OpenJDK or
            Oracle Java SE Development Kit (JDK) on the server.</para>
          </listitem>

          <listitem>
            <para>Set the Java CLASSPATH</para>

            <para>You can set the classpath several ways:<itemizedlist>
                <listitem>
                  <para>In your profile.</para>
                </listitem>

                <listitem>
                  <para>In your environment.</para>
                </listitem>

                <listitem>
                  <para>in your JVM Profile.</para>
                </listitem>

                <listitem>
                  <para>using classpath value in environment.conf</para>

                  <para>The default configuration file for the HPCC platform
                  is <emphasis
                  role="bold">/etc/HPCCSystems/environment.conf</emphasis> you
                  will need to edit this file to point to your Java build
                  directory.</para>

                  <para>For example (on a Linux system):</para>

                  <programlisting> classpath=/opt/HPCCSystems/classes:/home/username/workspace/StreamAPI/bin </programlisting>

                  <para>The classpath should point to your Java build
                  directory.</para>
                </listitem>
              </itemizedlist></para>
          </listitem>

          <listitem>
            <para>Start the HPCC Systems<superscript>®</superscript> platform
            (restart if it is already running) in order to read the new
            configuration.</para>

            <para>For example :</para>

            <programlisting> sudo service hpcc-init start </programlisting>

            <para>or</para>

            <programlisting>sudo service hpcc-init restart </programlisting>

            <para>For more information see the <link
            linkend="Starting-and-stopping">Starting-and-stopping</link> the
            HPCC System in the <emphasis>Installing and Running The HPCC
            Platform</emphasis> document.</para>
          </listitem>

          <listitem>
            <?dbfo keep-together="always"?>

            <para>Test the Java integration.</para>

            <para>The HPCC Systems<superscript>®</superscript> platform comes
            with a Java example class. You can execute some Java code either
            in your ECL IDE or the ECL Playground.</para>

            <para>For example:</para>

            <para><programlisting>IMPORT java;

integer add1(integer val) := IMPORT(java, 'JavaCat.add1:(I)I');

add1(10);
</programlisting>If this successfully executes, you have correctly set up Java
            to work with your HPCC platform.</para>

            <para>If you get a "unable to load libjvm.so" error you should
            reinstall or try a different Java package.</para>
          </listitem>
        </orderedlist>

        <para>You can call Java from ECL just like any other ECL function.
        Java static functions can be easily prototyped using ECL types.</para>

        <para>Additional examples of Java for HPCC can be found at:</para>

        <para><ulink
        url="https://github.com/hpcc-systems/HPCC-Platform/tree/master/testing/ecl/embedjava.ecl">https://github.com/hpcc-systems/HPCC-Platform/tree/master/testing/ecl/embedjava.ecl</ulink></para>
      </sect2>

      <sect2 id="Add_On_Javascript" role="brk">
        <title>JavaScript</title>

        <para>To enable JavaScript support within the HPCC
        Systems<superscript>®</superscript> Platform:</para>

        <orderedlist>
          <listitem>
            <para>Install the appropriate dependencies for your
            platform.</para>

            <para><emphasis role="bold">RPM-based systems:</emphasis></para>

            <para>JavaScript support is available for CentOS 6.x or later (not
            available for CentOS 5.x).</para>

            <para>On an RPM-based system (CentOS/Red Hat) install <emphasis
            role="bold">v8embed.</emphasis></para>

            <para><emphasis role="bold">Debian-based
            systems:</emphasis></para>

            <para>For a Debian-based system (Ubuntu) install the <emphasis
            role="bold">libv8-dev</emphasis> package.</para>
          </listitem>

          <listitem>
            <para>Test the JavaScript integration.</para>

            <para>JavaScript does multi-thread, as a result this can be the
            fastest of the currently supported embedded languages.</para>

            <para>You can now execute some JavaScript code either in your ECL
            IDE or the ECL Playground.</para>

            <para>For example:</para>

            <para><programlisting format="linespecific">//nothor

IMPORT javascript;

javascript.Language.syntaxcheck('1+2');

integer add1(integer val) := EMBED(javascript) val+1; ENDEMBED;

data testData(data val) := EMBED(javascript) val[0] = val[0] + 1; val; ENDEMBED;
set of integer testSet(set of integer val) := EMBED(javascript)
t = val [1];
val[1] = val[2];
val[2] = t;
val;
ENDEMBED;

add1(10);
</programlisting>If this successfully executes, you have correctly set up
            JavaScript to work with your HPCC platform.</para>

            <para>Additional examples of HPCC code can be found at:</para>

            <para><ulink
            url="https://github.com/hpcc-systems/HPCC-Platform/tree/master/testing/ecl/embedjava.ecl">https://github.com/hpcc-systems/HPCC-Platform/tree/master/testing/ecl/embedjava.ecl</ulink></para>
          </listitem>
        </orderedlist>
      </sect2>

      <sect2 id="Add_Python_support" role="brk">
        <title>Python</title>

        <para>HPCC supports Python2 by default. The HPCC platform includes
        plugins for both Python2 and Python3, but only one may be safely
        enabled at a time as the Python libraries export the same symbols for
        both versions. Enabling both may lead to unpredictable results
        including segmentation faults or undefined symbol errors.</para>

        <para>By default the Python3 plugin will be present but disabled, and
        the Python2 plugin will be present and enabled. If you want to use
        Python3 modify the your environment.conf file according to the example
        in the file. A cluster updated from an older version may not have the
        appropriate entries in the environment.conf file to support either
        version of Python.</para>

        <para>To enable Python support within the HPCC
        Systems<superscript>®</superscript> Platform:</para>

        <orderedlist>
          <listitem>
            <para>Install Python, if not already installed. Many distributions
            come with Python already installed.</para>

            <para>Python 2.6, 2.7, or Python3 depending on your distribution's
            default version and to coordinate with the enabled entry in the
            environment.conf.</para>
          </listitem>

          <listitem>
            <para>You can embed Python natively inside an ECL Program, much
            like BEGINC++</para>
          </listitem>

          <listitem>
            <para>Call Python from ECL as you would any other ECL
            function.</para>

            <para>Python does not multi-thread efficiently (Global Interpreter
            Lock). Effectively only one thread can be in the python code at
            once. Scripts are compiled every call (but with caching of most
            recent, per thread). The IMPORT case will avoid recompiles.</para>
          </listitem>

          <listitem>
            <para>Test the Python integration.</para>

            <para>You can now execute some Python code either in your ECL IDE
            or the ECL Playground.</para>

            <para>For example:</para>

            <para><programlisting>IMPORT Python;

SET OF STRING split_words(STRING val) := EMBED(Python)
  return val.split()
ENDEMBED;

split_words('Once upon a time');

</programlisting>If this successfully executes, you have correctly set up
            Python to work with your HPCC platform. You can now embed Python
            anywhere you would use ECL within with your HPCC System.</para>

            <para>Additional examples of HPCC code can be found at:</para>

            <para><ulink
            url="https://github.com/hpcc-systems/HPCC-Platform/tree/master/testing/regress/ecl">https://github.com/hpcc-systems/HPCC-Platform/tree/master/testing/regress/ecl/</ulink></para>
          </listitem>
        </orderedlist>

        <para>In order for Python to work properly it is important that the
        version of Python and the HPCC system are set up correctly to support
        using the installed version of Python. If you see "ld: cannot find
        --lpy2embed" error then your system is likely set up for Python3.
        Likewise, if you see "ld: cannot find --lpy3embed" then your system is
        set up for Python2.</para>

        <sect3>
          <title>Python Scope Options</title>

          <para><emphasis role="bold">GLOBALSCOPE</emphasis> - This option
          allows independent EMBED attributes to share globals with each other
          if they specify the same name for the GLOBALSCOPE parameter.</para>

          <para><emphasis role="bold">PERSIST</emphasis> - This option
          controls how long such a shared global scope will persist and
          exactly how far it will be shared.</para>

          <para>The value passed to GLOBALSCOPE can be any string you like,
          allowing you to share globals between related EMBED sections while
          keeping them distinct from unrelated ones.</para>

          <para>PERSIST can take one of the following values:</para>

          <para><emphasis role="bold">global</emphasis> - The values persist
          indefinitely (until the process terminates) and are shared with any
          other embeds using the same GLOBALSCOPE value, even in other
          workunits.</para>

          <para><emphasis role="bold">query</emphasis> - The values persist
          until the query is unloaded, and are shared with other instances of
          the query that might be running at the same time in Roxie, but not
          with other queries.</para>

          <para><emphasis role="bold">workunit</emphasis> - The values persist
          until the end of the current workunit or the current instance of a
          Roxie deployed query, and are not shared with other
          instances.</para>
        </sect3>
      </sect2>

      <sect2 id="R" role="brk">
        <title>R</title>

        <para>The HPCC Platform supports embedded R code. To enable R support
        within The HPCC Systems<superscript>®</superscript> Platform:</para>

        <orderedlist>
          <listitem>
            <para>Download the <emphasis role="bold">R Embed</emphasis> plugin
            available from the HPCC Systems portal.</para>

            <para><ulink
            url="https://hpccsystems.com/download/hpcc-platform">https://hpccsystems.com/download/hpcc-platform</ulink></para>

            <para>Choose the appropriate plugin for your distribution.</para>
          </listitem>

          <listitem>
            <para>Install the plugin.</para>

            <para><emphasis role="bold">RPM-based systems: </emphasis>Install
            using <emphasis>yum install</emphasis>.</para>

            <para><emphasis role="bold">Debian-based systems:
            </emphasis>Install using <emphasis>dkpg -i</emphasis> then
            <emphasis>apt-get</emphasis> <emphasis>install
            -f</emphasis></para>

            <para>If you use these methods to install the plugins, all the
            required libraries and dependencies will also be installed.</para>
          </listitem>
        </orderedlist>

        <orderedlist continuation="continues">
          <listitem>
            <para>Test the R integration.</para>

            <para>R is not multi-thread aware, so the plugin has to wrap all
            calls to R for critical sections. Scripts are compiled with every
            call to R. The default runs each embedded R call in a local
            environment. This environment can persist between embedded R calls
            in the same environment.</para>

            <para>You can now execute some R code either in your ECL IDE or
            the ECL Playground.</para>

            <para>For example:</para>

            <para><programlisting>IMPORT R;

integer add1(integer val) := EMBED(R)
val+1
ENDEMBED;

string cat(varstring what, string who) := EMBED(R)
paste(what,who)
ENDEMBED;

data testData(data val) := EMBED(R)
val[1] = val[2];
val;
ENDEMBED;

set of integer testSet(set of integer val) := EMBED(R)
t = val [1];
val[1] = val[2];
val[2] = t;
val;
ENDEMBED;

set of unsigned2 testSet0(set of unsigned2 val) := EMBED(R)
sort(val);
ENDEMBED;

set of string testSet2(set of string val) := EMBED(R)
t = val [1];
val[1] = val[2];
val[2] = t;
val;
ENDEMBED;

set of string testSet3(set of string8 val) := EMBED(R)
t = val [1];
val[1] = val[2];
val[2] = t;
val;
ENDEMBED;

set of varstring testSet4(set of varstring val) := EMBED(R)
t = val [1];
val[1] = val[2];
val[2] = t;
val;
ENDEMBED;

set of varstring8 testSet5(set of varstring8 val) := EMBED(R)
t = val [1];
val[1] = val[2];
val[2] = t;
val;
ENDEMBED;

set of boolean testSet6(set of boolean val) := EMBED(R)
t = val [1];
val[1] = val[2];
val[2] = t;
val;
ENDEMBED;

set of real4 testSet7(set of real4 val) := EMBED(R)
t = val [1];
val[1] = val[2];
val[2] = t;
val;
ENDEMBED;

set of real8 testSet8(set of real8 val) := EMBED(R)
t = val [1];
val[1] = val[2];
val[2] = t;
val;
ENDEMBED;

set of integer2 testSet9(set of integer2 val) := EMBED(R)
sort(val);
ENDEMBED;

add1(10);
cat('Hello', 'World');
testData(D'ab');
testSet([1,2,3]);
testSet0([30000,40000,50000]);
testSet2(['one','two','three']);
testSet3(['uno','dos','tre']);
testSet4(['un','deux','trois']);
testSet5(['ein','zwei','drei']);
testSet6([false,true,false,true]);
testSet7([1.1,2.2,3.3]);
testSet8([1.2,2.3,3.4]);
testSet9([-111,0,113]);

s1 :=DATASET(250000, TRANSFORM({ integer a }, SELF.a := add1(COUNTER)));
s2 :=DATASET(250000, TRANSFORM({ integer a }, SELF.a := add1(COUNTER/2)));
SUM(NOFOLD(s1 + s2), a);

s1b :=DATASET(250000, TRANSFORM({ integer a }, SELF.a := COUNTER+1));
s2b :=DATASET(250000, TRANSFORM({ integer a }, SELF.a := (COUNTER/2)+1));
SUM(NOFOLD(s1b + s2b), a); 
</programlisting>If this successfully executes, you have correctly set up R to
            work with your HPCC platform.</para>

            <para>Additional examples of HPCC code can be found at:</para>

            <para><ulink
            url="https://github.com/hpcc-systems/HPCC-Platform/tree/master/testing/ecl/regress/embedR.ecl">https://github.com/hpcc-systems/HPCC-Platform/tree/master/testing/regress/ecl/embedR.ecl</ulink></para>
          </listitem>
        </orderedlist>

        <para></para>

        <sect3 id="R_DataTypes">
          <title>Mapping Datatypes</title>

          <para>Some additional considerations for mapping data types in
          R.</para>

          <para>In HPCC the ECL <emphasis role="bold">RECORD</emphasis> maps
          to an R <emphasis>list</emphasis>.</para>

          <para>An ECL <emphasis role="bold">DATASET</emphasis> including a
          nested dataset is mapped to an R
          <emphasis>dataframe</emphasis>.</para>

          <para>An ECL <emphasis role="bold">SET</emphasis> is mapped to an R
          <emphasis>vector</emphasis>.</para>

          <para>These principals apply to passing data from HPCC to R or data
          returning to HPCC from R. There are usage examples of these concepts
          available at:</para>

          <para><ulink
          url="https://github.com/hpcc-systems/HPCC-Platform/tree/master/testing/ecl/regress/embedR2.ecl">https://github.com/hpcc-systems/HPCC-Platform/tree/master/testing/regress/ecl/embedR2.ecl</ulink></para>

          <para></para>
        </sect3>

        <sect3>
          <title>R Scope Options</title>

          <para><emphasis role="bold">GLOBALSCOPE</emphasis> - This option
          allows independent EMBED attributes to share globals with each other
          if they specify the same name for the GLOBALSCOPE parameter.</para>

          <para><emphasis role="bold">PERSIST</emphasis> - This option
          controls how long such a shared global scope will persist and
          exactly how far it will be shared.</para>

          <para>The value passed to GLOBALSCOPE can be any string you like,
          allowing you to share globals between related EMBED sections while
          keeping them distinct from unrelated ones.</para>

          <para>PERSIST can take one of the following values:</para>

          <para><emphasis role="bold">global</emphasis> - The values persist
          indefinitely (until the process terminates) and are shared with any
          other embeds using the same GLOBALSCOPE value, even in other
          workunits.</para>

          <para><emphasis role="bold">query</emphasis> - The values persist
          until the query is unloaded, and are shared with other instances of
          the query that might be running at the same time in Roxie, but not
          with other queries.</para>

          <para><emphasis role="bold">workunit</emphasis> - The values persist
          until the end of the current workunit or the current instance of a
          Roxie deployed query, and are not shared with other
          instances.</para>
        </sect3>
      </sect2>
    </sect1>
  </chapter>
</book>

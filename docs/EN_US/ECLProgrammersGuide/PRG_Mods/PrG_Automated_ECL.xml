<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<sect1 id="Automated_ECL">
  <!-- DNT-Start --><title>Automated ECL</title><!-- DNT-End -->

  <para>Once you have established standard <!-- DNT-Start -->ECL<!-- DNT-End --> processes that you know you
  need to perform regularly, you can begin to make those processes automated.
  Doing this eliminates the need to remember the order of processes, or their
  periodicity.</para>

  <para>One form of automation typically involves launching <!-- DNT-Start -->MACROs<!-- DNT-End --> with the
  ECLPlus application. By using <!-- DNT-Start -->MACROs<!-- DNT-End -->, you can have standard processes that
  operate on different input each time, but produce the same result. Since
  ECLPlus is a command-line application, its use can be automatically launched
  in many different ways â <!-- DNT-Start -->DOS<!-- DNT-End --> Batch files, from within another application,
  or ...</para>

  <para>Here's an example. This <!-- DNT-Start -->MACRO<!-- DNT-End --> (contained in DeclareData.<!-- DNT-Start -->ECL<!-- DNT-End -->) takes two
  parameters: the name of a file, and the name of a field in that file to
  produce a count of the unique values in that field and a crosstab report of
  the number of instances of each value.</para>

  <!-- DNT-Start --><programlisting>EXPORT MAC_CountFieldValues(infile,infield) := MACRO
  // Create the count of unique values in the infield
  COUNT(DEDUP(TABLE(infile,{infile.infield}),infield,ALL));

  // Create the crosstab report
  #UNIQUENAME(r_macro)
  %r_macro% := RECORD
    infile.infield;
    INTEGER cnt := COUNT(GROUP);
  END;
  #UNIQUENAME(y_macro)
  %y_macro% := TABLE(infile,%r_macro%,infield,FEW);
  OUTPUT(CHOOSEN(%y_macro%,50000));
ENDMACRO;
</programlisting><!-- DNT-End -->

  <para>By using #<!-- DNT-Start -->UNIQUENAME<!-- DNT-End --> to generate all the attribute names, this <!-- DNT-Start -->MACRO<!-- DNT-End -->
  can be used multiple times in the same workunit. You can test the <!-- DNT-Start -->MACRO<!-- DNT-End -->
  through the <!-- DNT-Start -->ECL<!-- DNT-End --> <!-- DNT-Start -->IDE<!-- DNT-End --> program by executing a query like this in the <!-- DNT-Start -->ECL<!-- DNT-End -->
  Builder window:</para>

  <!-- DNT-Start --><programlisting>IMPORT ProgrammersGuide AS PG;
PG.DeclareData.MAC_CountFieldValues(PG.DeclareData.Person.file,gender);
</programlisting><!-- DNT-End -->

  <para>Once you've throughly tested the <!-- DNT-Start -->MACRO<!-- DNT-End --> and are certain it works
  correctly, you can automate the process by using ECLplus.</para>

  <para>Install the ECLplus program in its own directory on the same <!-- DNT-Start -->PC<!-- DNT-End --> that
  runs the <!-- DNT-Start -->ECL<!-- DNT-End --> <!-- DNT-Start -->IDE<!-- DNT-End -->, and create an <!-- DNT-Start -->ECLPLUS<!-- DNT-End -->.<!-- DNT-Start -->INI<!-- DNT-End --> file in the same folder with the
  correct settings to access your cluster (see the <emphasis>Command Line
  <!-- DNT-Start -->ECL<!-- DNT-End --></emphasis> section of the <emphasis>Client Tools </emphasis><!-- DNT-Start -->PDF<!-- DNT-End -->). Then
  you can open a Command Prompt window and run the same query from the command
  line like this:</para>

  <!-- DNT-Start --><programlisting>C:\eclplus&gt;eclplus ecl=$ProgGuide.MAC_CountFieldValues(ProgrammersGuide.DeclareData.Person.File,gender)</programlisting><!-- DNT-End -->

  <para>Notice that you're using the <emphasis>ecl=</emphasis> command line
  option and not the <emphasis>$Module.Attribute</emphasis> option. This is
  the âproperâ way to make a <!-- DNT-Start -->MACRO<!-- DNT-End --> expand and execute through ECLplus. The
  <emphasis>$Module.Attribute</emphasis> option is only used to execute <!-- DNT-Start -->ECL<!-- DNT-End -->
  Builder window queries that have been saved as attributes in the repository
  (Builder Window Runnableâ<!-- DNT-Start -->BWR<!-- DNT-End --> code) and won't work with <!-- DNT-Start -->MACROs<!-- DNT-End -->.</para>

  <para>When the <!-- DNT-Start -->MACRO<!-- DNT-End --> expands and executes, you get a result that looks like
  this in your Command Prompt window:</para>

  <!-- DNT-Start --><programlisting>Workunit W20070118-145647 submitted
[Result 1]
Result_1
2
[Result_2]
gender     cnt
 F        500000
 M        500000
</programlisting><!-- DNT-End -->

  <para>You can re-direct this output to a file by using the
  <emphasis>output=âfilenameâ</emphasis> option on the command line, like
  this:</para>

  <!-- DNT-Start --><programlisting>C:\eclplus&gt;eclplus ecl=$ProgGuide.MAC_CountFieldValues( ProgrammersGuide.DeclareData.Person.File, gender) 
              output="MyFile.txt"</programlisting><!-- DNT-End -->

  <para>This will send the output to the âMyFile.txtâ file on your local <!-- DNT-Start -->PC<!-- DNT-End -->.
  For larger output files, you'll want to have the <!-- DNT-Start -->OUTPUT<!-- DNT-End --> action in your <!-- DNT-Start -->ECL<!-- DNT-End -->
  code write the result set to disk in the supercomputer then de-spray it to
  your landing zone (you can use the Standard Library's File.Despray function
  to do this from within your <!-- DNT-Start -->ECL<!-- DNT-End --> code).</para>

  <sect2 id="Using_Text_Files">
    <!-- DNT-Start --><title>Using Text Files</title><!-- DNT-End -->

    <para>Another automation option is to generate a text file containing the
    <!-- DNT-Start -->ECL<!-- DNT-End --> code to execute, then execute that code from the command line.</para>

    <para>For example, you could create a file containing this:</para>

    <!-- DNT-Start --><programlisting>IMPORT ProgrammersGuide AS PG;
PG.DeclareData.MAC_CountFieldValues(PG.DeclareData.Person.file,gender);
PG.DeclareData.MAC_CountFieldValues(PG.DeclareData.person.File,state)</programlisting><!-- DNT-End -->

    <para>These two <!-- DNT-Start -->MACRO<!-- DNT-End --> calls will generate the field ordinality count and
    crosstab report for two fields in the same file. You could then execute
    them like this (where âtest.ECLâ is the name of the file you
    created):</para>

    <!-- DNT-Start --><programlisting>C:\eclplus&gt;eclplus @test.ecl</programlisting><!-- DNT-End -->

    <para>This will generate similar results to that above.</para>

    <para>The advantage this method has is the ability to include any
    necessary âsetupâ <!-- DNT-Start -->ECL<!-- DNT-End --> code in the file before the <!-- DNT-Start -->MACRO<!-- DNT-End --> calls, like this
    (contained in RunText.<!-- DNT-Start -->ECL<!-- DNT-End -->):</para>

    <!-- DNT-Start --><programlisting>IMPORT ProgrammersGuide AS PG;
MyRec := RECORD
  STRING1 value1;
  STRING1 value2;
END;
D := DATASET([{'A','B'},
              {'B','C'},
              {'A','D'},
              {'B','B'},
              {'A','C'},
              {'B','D'},
              {'A','B'},
              {'C','C'},
              {'C','D'},
              {'A','A'}],MyRec);

PG.DeclareData.MAC_CountFieldValues(D,Value1)
PG.DeclareData.MAC_CountFieldValues(D,Value2)
</programlisting><!-- DNT-End -->

    <para>So that you get a result like this:</para>

    <!-- DNT-Start --><programlisting>C:\eclplus&gt;eclplus @test.ecl
Workunit W20070118-145647 submitted
[Result 1]
result_1
3
[Result 2]
value1  cnt
C        2
A        5
B        3
[Result 3]
result_3
4
[Result 4]
value2  cnt
D        3
C        3
A        1
B        3
</programlisting><!-- DNT-End -->

    <para>How you create this text file is up to you. To fully automate the
    process you may want to write a daemon application that watches a
    directory (such as your <!-- DNT-Start -->HPCC<!-- DNT-End --> environment's landing zone) to detect new
    files dropped in (by whatever means) and generate the appropriate <!-- DNT-Start -->ECL<!-- DNT-End --> code
    file to process that new file in some standard fashion (typically using
    <!-- DNT-Start -->MACRO<!-- DNT-End --> calls), then execute it from ECLplus command line as described
    above. The realm of possibilities is endless.</para>
  </sect2>
</sect1>

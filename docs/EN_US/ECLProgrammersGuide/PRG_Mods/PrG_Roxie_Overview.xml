<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<sect1 id="Roxie_Overview" role="nobrk">
  <!-- DNT-Start --><title>Roxie Overview</title><!-- DNT-End -->

  <para>Let's start with some definitions:</para>

  <para><informaltable colsep="0" frame="none" rowsep="0">
      <tgroup cols="2">
        <colspec align="left" colwidth="87.45pt" />

        <colspec />

        <tbody>
          <row>
            <entry><!-- DNT-Start --><emphasis role="bold">Thor</emphasis><!-- DNT-End --></entry>

            <entry>An <!-- DNT-Start -->HPCC<!-- DNT-End --> cluster specifically designed to perform massive
            data manipulation (<!-- DNT-Start -->ETL<!-- DNT-End -->) processes. This is a back-office data
            preparation tool and not meant for end-user production-level
            queries. See the <!-- DNT-Start -->HPCC<!-- DNT-End --> operational manuals for complete
            documentation.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis role="bold">Roxie</emphasis><!-- DNT-End --></entry>

            <entry>An <!-- DNT-Start -->HPCC<!-- DNT-End --> cluster specifically designed to service standard
            queries, providing a throughput rate of a thousand-plus responses
            per second (actual response rate for any given query is, of
            course, dependent on its complexity). This is a production-level
            tool designed for mission-critical application. See the <!-- DNT-Start -->HPCC<!-- DNT-End -->
            operational manuals for complete documentation.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis role="bold">hThor</emphasis><!-- DNT-End --></entry>

            <entry>An R&amp;D platform designed for iterative, interactive
            development and testing of <!-- DNT-Start -->Roxie<!-- DNT-End --> queries. This is not a separate
            cluster, but a âpiggybackâ implementation of <!-- DNT-Start -->ECL<!-- DNT-End --> Agent and <!-- DNT-Start -->Thor<!-- DNT-End -->.
            See the <!-- DNT-Start -->HPCC<!-- DNT-End --> operational manuals for complete
            documentation.</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable></para>

  <sect2 id="Thor">
    <!-- DNT-Start --><title>Thor</title><!-- DNT-End -->

    <para><!-- DNT-Start -->Thor<!-- DNT-End --> clusters are used to do all the âheavy liftingâ data
    preparation work to process raw data into standard formats. Once that
    process is complete, end-users can query that standardized data to glean
    real information. However, end-users typically want to see their results
    âimmediately or soonerââand usually more than one end-user wants their
    result at the same time. The <!-- DNT-Start -->Thor<!-- DNT-End --> platform only works on one query at a
    time, which makes it impractical for use by end-users, and that is why the
    <!-- DNT-Start -->Roxie<!-- DNT-End --> platform was created.</para>
  </sect2>

  <sect2 id="Roxie">
    <!-- DNT-Start --><title>Roxie</title><!-- DNT-End -->

    <para><!-- DNT-Start -->Roxie<!-- DNT-End --> clusters can handle thousands of simultaneous end-users and
    provide them all with the perception of âimmediately or soonerâ results.
    It does this by only allowing end-users to run standard, pre-compiled
    queries that have been developed specifically for end-user use on the
    <!-- DNT-Start -->Roxie<!-- DNT-End --> cluster. Typically, these queries use indexes and thus, provide
    extremely fast performance. However, the <!-- DNT-Start -->Roxie<!-- DNT-End --> cluster is impractical for
    use as a development tool, since all its queries must be pre-compiled and
    the data they use must have been previously deployed. Therefore, the
    iterative query development and testing process is performed using
    Doxie.</para>
  </sect2>

  <sect2 id="Doxie">
    <!-- DNT-Start --><title>hThor</title><!-- DNT-End -->

    <para><!-- DNT-Start -->hThor<!-- DNT-End --> is not a separate cluster on its own; it is an instance of <!-- DNT-Start -->ECL<!-- DNT-End -->
    Agent (which operates on a single server) that emulates the operation of a
    <!-- DNT-Start -->Roxie<!-- DNT-End --> cluster. Just as with <!-- DNT-Start -->Thor<!-- DNT-End --> queries, <!-- DNT-Start -->hThor<!-- DNT-End --> queries are compiled each
    time they are run. <!-- DNT-Start -->hThor<!-- DNT-End --> queries access data directly from an associated
    <!-- DNT-Start -->Thor<!-- DNT-End --> cluster's disk drives without interfering with any <!-- DNT-Start -->Thor<!-- DNT-End --> operations.
    This makes it an appropriate tool for developing queries that are destined
    for use on a <!-- DNT-Start -->Roxie<!-- DNT-End --> cluster.</para>
  </sect2>

  <sect2 id="How_to_Structure_Roxie_Queries">
    <!-- DNT-Start --><title>How to Structure Roxie Queries</title><!-- DNT-End -->

    <para>To begin developing queries for use on <!-- DNT-Start -->Roxie<!-- DNT-End --> clusters you must start
    by deciding what data to query and how to index that data so that
    end-users see their result in minimum time. The process of putting the
    data into its most useful form and indexing it is accomplished on a <!-- DNT-Start -->Thor<!-- DNT-End -->
    cluster. The previous articles on indexing and superfiles should guide you
    in the right direction for that.</para>

    <para>Once the data is ready to use, you can then write the query. Queries
    for <!-- DNT-Start -->Roxie<!-- DNT-End --> clusters always contain at least one actionâusually a simple
    <!-- DNT-Start -->OUTPUT<!-- DNT-End --> to return the result set.</para>

    <para><!-- DNT-Start -->Roxie<!-- DNT-End --> queries use either a <!-- DNT-Start -->SOAP<!-- DNT-End --> (Simple Object Access Protocol) or
    <!-- DNT-Start -->JSON<!-- DNT-End --> (JavaScript Object Notation) interface to âpass inâ data values. The
    values passed through the interface wind up in definitions with the <!-- DNT-Start -->STORED<!-- DNT-End -->
    workflow service. Your <!-- DNT-Start -->ECL<!-- DNT-End --> code then can use those definitions to
    determine the passed values and return the appropriate result to the
    end-user.</para>

    <para>Here is a simple example of the structure of a <!-- DNT-Start -->Roxie<!-- DNT-End --> query
    (contained in RoxieOverview1.<!-- DNT-Start -->ECL<!-- DNT-End -->):</para>

    <!-- DNT-Start --><programlisting>IMPORT $;

EXPORT RoxieOverview1 := FUNCTION

STRING30 lname_value := '' : STORED('LastName');
STRING30 fname_value := '' : STORED('FirstName');

IDX  := $.DeclareData.IDX__Person_LastName_FirstName;
Base := $.DeclareData.Person.FilePlus;

Fetched := IF(fname_value = '', 
              FETCH(Base, IDX(LastName=lname_value), RIGHT.RecPos),
              FETCH(Base, IDX(LastName=lname_value, FirstName=fname_value), RIGHT.RecPos));

RETURN OUTPUT(CHOOSEN(Fetched,2000));

END;</programlisting><!-- DNT-End -->

    <para>Notice that the <!-- DNT-Start -->FUNCTION<!-- DNT-End --> does not receive any parameters. Instead,
    the lname_value and fname_value definitions both have the <!-- DNT-Start -->STORED<!-- DNT-End --> workflow
    service that supply storage names. The <!-- DNT-Start -->SOAP<!-- DNT-End -->/<!-- DNT-Start -->JSON<!-- DNT-End --> interface uses the
    storage names to pass in values, because the <!-- DNT-Start -->STORED<!-- DNT-End --> option opens up a
    storage space in the workunit where the interface can place the values to
    pass to the service.</para>

    <para>This code uses <!-- DNT-Start -->FETCH<!-- DNT-End --> because it is the simplest example of using an
    <!-- DNT-Start -->INDEX<!-- DNT-End --> in <!-- DNT-Start -->ECL<!-- DNT-End -->. More typically, <!-- DNT-Start -->Roxie<!-- DNT-End --> queries use half-keyed <!-- DNT-Start -->JOIN<!-- DNT-End --> operations
    with payload keys (the <emphasis>Complex <!-- DNT-Start -->Roxie<!-- DNT-End --> Queries</emphasis> article
    addresses this issue). Note that the <!-- DNT-Start -->OUTPUT<!-- DNT-End --> contains a <!-- DNT-Start -->CHOOSEN<!-- DNT-End --> as a simple
    example of how to ensure you limit the maximum amount of data that can be
    returned from the query to some âreasonableâ amountâit doesn't make much
    sense to have a <!-- DNT-Start -->Roxie<!-- DNT-End --> query that could possibly return 10 billion records
    to an end-user's <!-- DNT-Start -->PC<!-- DNT-End --> (anybody actually needing that much data should be
    working in <!-- DNT-Start -->Thor<!-- DNT-End -->, not <!-- DNT-Start -->Roxie<!-- DNT-End -->).</para>
  </sect2>

  <sect2 id="Testing_Queries_with_Doxie">
    <!-- DNT-Start --><title>Testing Queries</title><!-- DNT-End -->

    <para>Once you have written your query you naturally need to test it.
    That's where <!-- DNT-Start -->hThor<!-- DNT-End --> comes into play. <!-- DNT-Start -->hThor<!-- DNT-End --> is an interactive test system
    that you can use before deploying your queries to <!-- DNT-Start -->Roxie<!-- DNT-End -->. The easiest way
    to describe the process is to walk through it using this simple example
    query.</para>

    <para>1. Open the Samples\ProgrammersGuide\RoxieOverview1.<!-- DNT-Start -->ECL<!-- DNT-End --> file</para>

    <para>Now you're ready to publish this query to <!-- DNT-Start -->hThor<!-- DNT-End -->.</para>

    <para>2. Select "hthor" on the Target drop list</para>

    <para>3. Click the down arrow on the Submit button and select
    Compile</para>

    <para>4. Open the compiled workunit and select the <!-- DNT-Start -->ECL<!-- DNT-End --> Watch tab</para>

    <para>5. Press the Publish button</para>

    <para>Open the <!-- DNT-Start -->ECL<!-- DNT-End --> Watch web page (not using the <!-- DNT-Start -->ECL<!-- DNT-End --> <!-- DNT-Start -->IDE<!-- DNT-End --> â open it in
    Internet Explorer). The <!-- DNT-Start -->IP<!-- DNT-End --> for <!-- DNT-Start -->ECL<!-- DNT-End --> Watch is the same as the <!-- DNT-Start -->IP<!-- DNT-End --> you used to
    configure the <!-- DNT-Start -->ECL<!-- DNT-End --> <!-- DNT-Start -->IDE<!-- DNT-End --> to access the environment you're working in. The
    Port is 8010.</para>

    <para>6. Click on <emphasis role="underline">System Servers</emphasis>
    (it's in the Topology section)</para>

    <para>7. Find the <emphasis role="bold"><!-- DNT-Start -->ESP<!-- DNT-End --> Servers</emphasis>
    section</para>

    <para>8. Click on the <!-- DNT-Start -->ESP<!-- DNT-End --> server's name link to display its list of
    services and their ports</para>

    <para>9. Note the port number beside the <emphasis
    role="bold">wsecl</emphasis> Service Type (this is usually 8002, but it
    could be set to something else)</para>

    <para>Once you've know the <!-- DNT-Start -->IP<!-- DNT-End --> and port for your wsecl service (the service
    that makes hthor "pretend" to be a <!-- DNT-Start -->Roxie<!-- DNT-End -->), you can go there and run the
    query.</para>

    <para>10. The easy way is to right-click on the wsecl link and open it in
    a new tab or window (or you can Edit Internet Explorer's address bar to
    point to the correct <!-- DNT-Start -->IP<!-- DNT-End -->:port</para>

    <para>11. Press the Enter key</para>

    <para>A login dialog may appearâyour login <!-- DNT-Start -->ID<!-- DNT-End --> and password are the same as
    the ones you use for the <!-- DNT-Start -->ECL<!-- DNT-End --> <!-- DNT-Start -->IDE<!-- DNT-End -->. After you've logged in, you'll see a
    tree list of QuerySets on the left.</para>

    <para>12. Click on the <emphasis role="underline">hthor</emphasis>
    branch</para>

    <para>A list of all the Queries published to your hthor appears in the
    tree. In this case, there's only the one.</para>

    <para>13. Click on the <emphasis
    role="underline">RoxieOverview1.1</emphasis> branch</para>

    <para>A web page containing two entry controls and a <emphasis
    role="bold">Submit</emphasis> button appears.</para>

    <para>14. Type in any last name from the set of last names that were used
    by the code in GenData.<!-- DNT-Start -->ECL<!-- DNT-End --> to generate the data files for this
    <emphasis>Programmer's Guide</emphasis></para>

    <para><!-- DNT-Start -->COOLING<!-- DNT-End --> is a good example to use. Note that, since this is an
    extremely simple example, you'll need to type it in <!-- DNT-Start -->ALL<!-- DNT-End --> <!-- DNT-Start -->CAPS<!-- DNT-End -->, otherwise
    the <!-- DNT-Start -->FETCH<!-- DNT-End --> will fail to find any matching records (this is only due to the
    simplicity of this <!-- DNT-Start -->ECL<!-- DNT-End --> code and not any inherent lack in the
    system).</para>

    <para>15. Press the <emphasis role="bold">Submit</emphasis> button</para>

    <para>Queries are pre-compiled when you Publish, so after a second you
    should see an <!-- DNT-Start -->XML<!-- DNT-End --> result with 1,000 records in it.</para>
  </sect2>

  <sect2 id="Deploying_Queries_to_Roxie">
    <!-- DNT-Start --><title>Deploying Queries to Roxie</title><!-- DNT-End -->

    <para>Once you've done enough testing on <!-- DNT-Start -->hThor<!-- DNT-End --> to be sure the query does
    what you expect it to do, the only step then required is to deploy it to
    <!-- DNT-Start -->Roxie<!-- DNT-End --> and test it there, too (just to be completely certain that
    everything operates the way it should). Once you've tested it on <!-- DNT-Start -->Roxie<!-- DNT-End -->,
    you can inform the users that the query is available for their use.</para>

    <para>The <!-- DNT-Start -->Roxie<!-- DNT-End --> deployment process is done the same way we just did for
    <!-- DNT-Start -->hThor<!-- DNT-End -->, except the Target drop list has to be set to <!-- DNT-Start -->Roxie<!-- DNT-End -->.</para>

    <para>Once you've deployed the query, you can test it the same way you
    tested it on <!-- DNT-Start -->hThor<!-- DNT-End -->, except the new service will appear under your <!-- DNT-Start -->Roxie<!-- DNT-End --> in
    the tree list.</para>
  </sect2>
</sect1>

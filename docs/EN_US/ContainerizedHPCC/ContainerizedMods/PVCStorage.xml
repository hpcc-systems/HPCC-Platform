<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="PVCStorage">
  <title>Storage</title>

  <sect1 id="PVCs" role="nobrk">
    <title>Persistent Storage for a Local Deployment</title>

    <para>When running on a single-node test system such as Docker Desktop,
    the default storage class normally means that all persistent volume claims
    (PVCs) map to temporary local directories on the host machine. These are
    typically removed when the cluster is stopped. This is fine for testing
    but for any real application, you want persistent storage.</para>

    <para>To persist data with Docker Desktop, the first step is to make sure
    the relevant directories exist:</para>

    <orderedlist>
      <listitem>
        <para>Create data directories using a terminal interface:</para>

        <para>For Windows, use this command:</para>

        <para><programlisting>mkdir c:\hpccdata
mkdir c:\hpccdata\dalistorage
mkdir c:\hpccdata\queries
mkdir c:\hpccdata\sasha
mkdir c:\hpccdata\hpcc-data
mkdir c:\hpccdata\mydropzone</programlisting></para>

        <para>For macOS, use this command:</para>

        <para><programlisting>mkdir -p /Users/myUser/hpccdata/{dalistorage,queries,sasha,hpcc-data,mydropzone}</programlisting></para>

        <para><emphasis role="bold">Note:</emphasis> If all of these folders
        do not exist, your cluster may not start. </para>
      </listitem>

      <listitem>
        <para>Download the HPCC Platform Helm charts.</para>

        <para>These are available in the HPCC Systems <emphasis
        role="strong">HPCC-Platform</emphasis> repository on GitHub
        (https://github.com/hpcc-systems/HPCC-Platform).</para>

        <para>If you want only the helm charts, the use the <emphasis
        role="strong">helm-chart</emphasis> repository
        (https://github.com/hpcc-systems/helm-chart).</para>
      </listitem>

      <listitem>
        <para>Open a terminal and navigate to the <emphasis
        role="bold">helm</emphasis> folder of the repository you just
        downloaded.</para>
      </listitem>

      <listitem>
        <para>Install the Helm chart from the <emphasis
        role="bold">examples/local</emphasis> directory in your local
        repository.</para>

        <para>This chart creates persistent volumes based on host directories
        you created earlier.<programlisting># for a WSL2 deployment:
helm install hpcc-localfile examples/local/hpcc-localfile 
           --set common.hostpath=/run/desktop/mnt/host/c/hpccdata

# for a Hyper-V deployment:
helm install hpcc-localfile examples/local/hpcc-localfile --set common.hostpath=/c/hpccdata

# for a macOS deployment:
helm install hpcc-localfile examples/local/hpcc-localfile --set common.hostpath=/Users/myUser/hpccdata
</programlisting></para>

        <para>The <emphasis role="bold">--set common.hostpath=
        </emphasis>option specifies the base directory:</para>

        <para>The path <emphasis
        role="bold">/run/desktop/mnt/host/c/hpccdata</emphasis> provides
        access to the host file system for WSL2.</para>

        <para>The path <emphasis role="bold">/c/hpccdata</emphasis> provides
        access to the host file system for Hyper-V.</para>

        <para>The path <emphasis role="bold">/Users/myUser/hpccdata</emphasis>
        provides access to the host file system for Mac OSX.</para>

        <para><emphasis role="bold">Note: </emphasis>The value passed to --set
        common-hostpath is case sensitive.</para>
      </listitem>

      <listitem>
        <para>If you are using Docker Desktop with Hyper-V, add the shared
        data folder (in this example, C:\hpccdata) in the Docker Desktop
        settings.</para>

        <para>This is <emphasis role="bold">not</emphasis> needed in a macOS
        or WSL 2 environment.</para>

        <graphic fileref="../../images/dockerFileShare.jpg" />
      </listitem>

      <listitem>
        <para>Finally, install the hpcc Helm chart, and provide a yaml file
        that provides storage information that uses the PVCs created by the
        previous step.</para>

        <para>The example directory contains a sample yaml file that can be
        used in this case:</para>

        <programlisting>helm install mycluster hpcc/ --version=8.2.2  
             -f examples/local/values-localfile.yaml</programlisting>

        <para><emphasis role="bold">The --version argument is optional, but
        recommended. It ensures that you know which version you are
        installing. If omitted, the latest non-development version is
        installed. This example uses 8.2.2, but you should use the version you
        want. </emphasis></para>
      </listitem>

      <listitem>
        <para>To test, create some data files and workunits by submitting to
        Thor some ECL code like the following:</para>

        <programlisting>LayoutPerson := RECORD
  UNSIGNED1 ID;
  STRING15  FirstName;
  STRING25  LastName;
END;
allPeople := DATASET([ {1,'Fred','Smith'},
                       {2,'Joe','Jones'},
                       {3,'Jane','Smith'}],LayoutPerson);
OUTPUT(allPeople,,'MyData::allPeople',THOR,OVERWRITE);
</programlisting>
      </listitem>

      <listitem>
        <para>Use the helm uninstall command to terminate your clusters, then
        restart.</para>
      </listitem>

      <listitem>
        <para>Open ECL Watch and notice your workunits and logical files are
        still there.</para>
      </listitem>
    </orderedlist>

    <para></para>
  </sect1>

  <sect1 id="StoragePlanes">
    <title>Import: Storage Planes and how to use them</title>

    <para>Storage planes provide the flexibility to configure where the data
    is stored within an HPCC Systems platform, but it doesn't directly address
    the question of how to get data onto the platform in the first
    place.</para>

    <para>Containerized platforms support importing data in two ways:</para>

    <itemizedlist>
      <listitem>
        <para>Upload to a Landing Zone and Spray (not yet implemented in the
        containerized version)</para>
      </listitem>

      <listitem>
        <para>Copy to a Storage Plane and access directly</para>
      </listitem>
    </itemizedlist>

    <para>Beginning with version 7.12.0, new ECL syntax was added to access
    files directly from a storage plane. This is similar to the <emphasis
    role="bold">file::</emphasis> syntax used to directly read files from a
    physical machine, typically a landing zone.</para>

    <para>The new syntax is:</para>

    <para><programlisting>~plane::&lt;storage-plane-name&gt;::&lt;path&gt;::&lt;filename&gt;</programlisting>Where
    the syntax of the path and filename are the same as used with the
    <emphasis role="strong">file::</emphasis> syntax. This includes requiring
    uppercase letters to be quoted with a ^ symbol. For more details, see the
    Landing Zone Files section of the <emphasis>ECL Language
    Reference.</emphasis></para>

    <para>If you have storage plane configured as in the previous section, and
    you copy the <emphasis role="strong">originalperson</emphasis> file to
    <emphasis role="strong">C:\hpccdata\hpcc-data\tutorial</emphasis>, you can
    then reference the file using this syntax:</para>

    <para><programlisting>'~plane::data::tutorial::originalperson'</programlisting></para>

    <para>Note: The <emphasis role="strong">originalperson</emphasis> file is
    available from the HPCC Systems Web site
    (https://cdn.hpccsystems.com/install/docs/3_8_0_8rc_CE/OriginalPerson)</para>

    <para></para>

    <para></para>

    <para></para>

    <para></para>
  </sect1>
</chapter>

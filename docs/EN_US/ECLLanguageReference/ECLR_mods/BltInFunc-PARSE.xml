<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<sect1 id="PARSE">
  <!-- DNT-Start --><title>PARSE</title><!-- DNT-End -->

  <para><emphasis role="bold"><!-- DNT-Start -->PARSE<!-- DNT-End --><indexterm>
      <primary><!-- DNT-Start -->PARSE<!-- DNT-End --></primary>
    </indexterm><indexterm>
      <primary><!-- DNT-Start -->PARSE<!-- DNT-End --> function</primary>
    </indexterm>(</emphasis><emphasis>dataset, data, pattern,
  result</emphasis><emphasis role="bold"> </emphasis><emphasis>, flags
  </emphasis><emphasis role="bold">[</emphasis>,<emphasis role="bold">
  <!-- DNT-Start -->MAXLENGTH<!-- DNT-End --><indexterm>
      <primary><!-- DNT-Start -->MAXLENGTH<!-- DNT-End --></primary>
    </indexterm>( </emphasis><emphasis>length </emphasis><emphasis
  role="bold">) ])</emphasis><emphasis role="bold"></emphasis></para>

  <para><emphasis role="bold"><!-- DNT-Start -->PARSE<!-- DNT-End -->(</emphasis><emphasis>dataset, data,
  result</emphasis><emphasis role="bold"> </emphasis><emphasis>,
  </emphasis><emphasis role="bold"><!-- DNT-Start -->XML<!-- DNT-End --><indexterm>
      <primary><!-- DNT-Start -->XML<!-- DNT-End --></primary>
    </indexterm>( </emphasis><emphasis>path </emphasis><emphasis role="bold">)
  </emphasis> <emphasis role="bold">[, <!-- DNT-Start -->UNORDERED<!-- DNT-End --> | <!-- DNT-Start -->ORDERED<!-- DNT-End -->(</emphasis>
  <emphasis>bool </emphasis><emphasis role="bold">) ] [, <!-- DNT-Start -->STABLE<!-- DNT-End --> | <!-- DNT-Start -->UNSTABLE<!-- DNT-End --> ]
  [, <!-- DNT-Start -->PARALLEL<!-- DNT-End --> [ (</emphasis> <emphasis>numthreads </emphasis><emphasis
  role="bold">) ] ] [, <!-- DNT-Start -->ALGORITHM<!-- DNT-End -->(</emphasis> <emphasis>name
  </emphasis><emphasis role="bold">) ] )</emphasis></para>

  <para><informaltable colsep="1" frame="all" rowsep="1">
      <tgroup cols="2">
        <colspec colwidth="91.55pt" />

        <colspec />

        <tbody>
          <row>
            <entry><!-- DNT-Start --><emphasis>dataset</emphasis><!-- DNT-End --></entry>

            <entry>The set of records to process.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis>data</emphasis><!-- DNT-End --></entry>

            <entry>An expression specifying the text to parse, typically the
            name of a field in the dataset.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis>pattern</emphasis><!-- DNT-End --></entry>

            <entry>The parsing pattern to match.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis>result</emphasis><!-- DNT-End --></entry>

            <entry>The name of either the <!-- DNT-Start -->RECORD<!-- DNT-End --> structure attribute that
            specifies the format of the output record set (like the <!-- DNT-Start -->TABLE<!-- DNT-End -->
            function), or the <!-- DNT-Start -->TRANSFORM<!-- DNT-End --> function that produces the output
            record set (like <!-- DNT-Start -->PROJECT<!-- DNT-End -->).</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis>flags</emphasis><!-- DNT-End --></entry>

            <entry>One or more parsing options, listed below.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis role="bold">MAXLENGTH</emphasis><!-- DNT-End --></entry>

            <entry>Specifies the the maximum length the pattern can match. If
            omitted, the default length is 4096.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis>length</emphasis><!-- DNT-End --></entry>

            <entry>An integer constant specifying the maximum number of
            matching characters.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis role="bold">XML</emphasis><!-- DNT-End --></entry>

            <entry>Specifies the dataset contains <!-- DNT-Start -->XML<!-- DNT-End --> data.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis>path</emphasis><!-- DNT-End --></entry>

            <entry>A string constant containing the <!-- DNT-Start -->XPATH<!-- DNT-End --> to the tag that
            delimits the <!-- DNT-Start -->XML<!-- DNT-End --> data in the dataset.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis role="bold">UNORDERED</emphasis><!-- DNT-End --></entry>

            <entry>Optional. Specifies the output record order is not
            significant.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis role="bold">ORDERED</emphasis><!-- DNT-End --></entry>

            <entry>Specifies the significance of the output record
            order.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis>bool</emphasis><!-- DNT-End --></entry>

            <entry>When False, specifies the output record order is not
            significant. When True, specifies the default output record
            order.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis role="bold">STABLE</emphasis><!-- DNT-End --></entry>

            <entry>Optional. Specifies the input record order is
            significant.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis role="bold">UNSTABLE</emphasis><!-- DNT-End --></entry>

            <entry>Optional. Specifies the input record order is not
            significant.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis role="bold">PARALLEL</emphasis><!-- DNT-End --></entry>

            <entry>Optional. Try to evaluate this activity in
            parallel.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis>numthreads</emphasis><!-- DNT-End --></entry>

            <entry>Optional. Try to evaluate this activity using
            <emphasis>numthreads</emphasis> threads.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis role="bold">ALGORITHM</emphasis><!-- DNT-End --></entry>

            <entry>Optional. Override the algorithm used for this
            activity.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis>name</emphasis><!-- DNT-End --></entry>

            <entry>The algorithm to use for this activity. Must be from the
            list of supported algorithms for the <!-- DNT-Start -->SORT<!-- DNT-End --> function's <!-- DNT-Start -->STABLE<!-- DNT-End --> and
            <!-- DNT-Start -->UNSTABLE<!-- DNT-End --> options.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start -->Return:<!-- DNT-End --></entry>

            <entry><!-- DNT-Start -->PARSE<!-- DNT-End --> returns a record set.</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable></para>

  <para>The <emphasis role="bold"><!-- DNT-Start -->PARSE<!-- DNT-End --> </emphasis>function performs a text or
  <!-- DNT-Start -->XML<!-- DNT-End --> parsing operation.</para>

  <sect2 id="PARSE_Text_Data">
    <!-- DNT-Start --><title>PARSE Text<indexterm>
        <primary>PARSE Text</primary>
      </indexterm> Data</title><!-- DNT-End -->

    <para>The first form operates on the <emphasis>dataset</emphasis>, finding
    records whose <emphasis>data</emphasis> contains a match for the
    <emphasis>pattern,</emphasis> producing a result set of those matches in
    the <emphasis>result </emphasis>format. If the
    <emphasis>pattern</emphasis> finds multiple matches in the
    <emphasis>data</emphasis>, then a result record is generated for each
    match. Each match for a <!-- DNT-Start -->PARSE<!-- DNT-End --> is effectively a single path through the
    <emphasis>pattern</emphasis>. If there is more than one path that matches,
    then the <emphasis>result</emphasis> transform is either called once for
    each path, or if the <!-- DNT-Start -->BEST<!-- DNT-End --> option is used, the path with the lowest penalty
    is selected.</para>

    <para>If the <emphasis>result</emphasis> names a <!-- DNT-Start -->RECORD<!-- DNT-End --> structure, then
    this form of <!-- DNT-Start -->PARSE<!-- DNT-End --> operates like the <!-- DNT-Start -->TABLE<!-- DNT-End --> function to generate the result
    set, but may also operate on variable length text. If the
    <emphasis>result</emphasis> names a <!-- DNT-Start -->TRANSFORM<!-- DNT-End --> function, then the transform
    generates the result set. The <!-- DNT-Start -->TRANSFORM<!-- DNT-End --> function must take at least one
    parameter: a <!-- DNT-Start -->LEFT<!-- DNT-End --> record of the same format as the
    <emphasis>dataset</emphasis>. The format of the resulting record set does
    not need to be the same as the input.</para>

    <para><emphasis>Flags</emphasis> can have the following values:</para>

    <para><informaltable colsep="1" frame="all" rowsep="1">
        <tgroup cols="2">
          <colspec colwidth="103.20pt" />

          <colspec />

          <tbody>
            <row>
              <entry><!-- DNT-Start --><emphasis role="bold">FIRST<indexterm>
                  <primary>FIRST</primary>
                </indexterm></emphasis><!-- DNT-End --></entry>

              <entry>Only return a row for the first match starting at a
              particular position.</entry>
            </row>

            <row>
              <entry><!-- DNT-Start --><emphasis role="bold">ALL<indexterm>
                  <primary>ALL</primary>
                </indexterm></emphasis><!-- DNT-End --></entry>

              <entry>Return a row for every possible match of the string at a
              particular position.</entry>
            </row>

            <row>
              <entry><!-- DNT-Start --><emphasis role="bold">WHOLE<indexterm>
                  <primary>WHOLE</primary>
                </indexterm></emphasis><!-- DNT-End --></entry>

              <entry>Only match the whole string.</entry>
            </row>

            <row>
              <entry><!-- DNT-Start --><emphasis role="bold">NOSCAN<indexterm>
                  <primary>NOSCAN</primary>
                </indexterm></emphasis><!-- DNT-End --></entry>

              <entry>If a position matches, don't continue searching for other
              matches.</entry>
            </row>

            <row>
              <entry><!-- DNT-Start --><emphasis role="bold">SCAN<indexterm>
                  <primary>SCAN</primary>
                </indexterm></emphasis><!-- DNT-End --></entry>

              <entry>If a position matches, continue searching from the end of
              the match, otherwise continue from the next position.</entry>
            </row>

            <row>
              <entry><!-- DNT-Start --><emphasis role="bold">SCAN ALL<indexterm>
                  <primary>SCAN ALL</primary>
                </indexterm></emphasis><!-- DNT-End --></entry>

              <entry>Return matches for every possible start position. Use the
              <!-- DNT-Start -->TRIM<!-- DNT-End --> function to eliminate parsing extraneous trailing
              blanks.</entry>
            </row>

            <row>
              <entry><!-- DNT-Start --><emphasis role="bold">NOCASE<indexterm>
                  <primary>NOCASE</primary>
                </indexterm></emphasis><!-- DNT-End --></entry>

              <entry>Perform a case insensitive comparison.</entry>
            </row>

            <row>
              <entry><!-- DNT-Start --><emphasis role="bold">CASE<indexterm>
                  <primary>CASE</primary>
                </indexterm></emphasis><!-- DNT-End --></entry>

              <entry>Perform a case sensitive comparison (this is the
              default).</entry>
            </row>

            <row>
              <entry><!-- DNT-Start --><emphasis role="bold">SKIP</emphasis><indexterm>
                  <primary>SKIP</primary>
                </indexterm>(<emphasis>separator-pattern</emphasis>)<!-- DNT-End --></entry>

              <entry>Specify a pattern that can be inserted after each token
              in a search pattern. For example, <!-- DNT-Start -->SKIP<!-- DNT-End --> ( [â â,'\t']*) skips
              spaces and tabs between tokens.</entry>
            </row>

            <row>
              <entry><!-- DNT-Start --><emphasis role="bold">KEEP</emphasis><indexterm>
                  <primary>KEEP</primary>
                </indexterm>(<emphasis>max</emphasis>)<!-- DNT-End --></entry>

              <entry>Only keep the first <emphasis>max</emphasis>
              matches.</entry>
            </row>

            <row>
              <entry><!-- DNT-Start --><emphasis role="bold">ATMOST</emphasis><indexterm>
                  <primary>ATMOST</primary>
                </indexterm>(<emphasis>max</emphasis>)<!-- DNT-End --></entry>

              <entry>Don't produce any matches if there are more than
              <emphasis>max</emphasis> matches.</entry>
            </row>

            <row>
              <entry><!-- DNT-Start --><emphasis role="bold">MAX<indexterm>
                  <primary>MAX</primary>
                </indexterm></emphasis><!-- DNT-End --></entry>

              <entry>Return a row for the result that matches the longest
              sequence of the input. Only one match is returned unless the
              <!-- DNT-Start -->MANY<!-- DNT-End --> option is also specified.</entry>
            </row>

            <row>
              <entry><!-- DNT-Start --><emphasis role="bold">MIN<indexterm>
                  <primary>MIN</primary>
                </indexterm></emphasis><!-- DNT-End --></entry>

              <entry>Return a row for the result that matches the shortest
              sequence of the input. Only one match is returned unless the
              <!-- DNT-Start -->MANY<!-- DNT-End --> option is also specified.</entry>
            </row>

            <row>
              <entry><!-- DNT-Start --><emphasis role="bold">MATCHED<indexterm>
                  <primary>MATCHED</primary>
                </indexterm></emphasis>( [ <emphasis>rule-reference</emphasis>
              ] )<!-- DNT-End --></entry>

              <entry>Used when <emphasis>rule-reference</emphasis> is used in
              a user-matching function. If a rule-reference is not specified,
              the matching information may not be preserved.</entry>
            </row>

            <row>
              <entry><!-- DNT-Start --><emphasis role="bold">MATCHED(ALL)<indexterm>
                  <primary>MATCHED ALL</primary>
                </indexterm></emphasis><!-- DNT-End --></entry>

              <entry>Retain all rule-names â if they are used by user match
              functions.</entry>
            </row>

            <row>
              <entry><!-- DNT-Start --><emphasis role="bold">NOT MATCHED<indexterm>
                  <primary>NOT MATCHED</primary>
                </indexterm></emphasis><!-- DNT-End --></entry>

              <entry>Generate a row if there were no matches on the input row.
              All calls to the <!-- DNT-Start -->MATCHED<!-- DNT-End -->() function return false inside the
              <emphasis>resultstructure</emphasis>.</entry>
            </row>

            <row>
              <entry><!-- DNT-Start --><emphasis role="bold">NOT MATCHED ONLY<indexterm>
                  <primary>NOT MATCHED ONLY</primary>
                </indexterm></emphasis><!-- DNT-End --></entry>

              <entry>Only generate a row if no matches were found.</entry>
            </row>

            <row>
              <entry><!-- DNT-Start --><emphasis role="bold">BEST<indexterm>
                  <primary>BEST</primary>
                </indexterm></emphasis><!-- DNT-End --></entry>

              <entry>Pick the match with the highest score (lowest penalty).
              If the <!-- DNT-Start -->MAX<!-- DNT-End --> or <!-- DNT-Start -->MIN<!-- DNT-End --> flags are also present, they are applied
              first. Only one match is returned unless the <!-- DNT-Start -->MANY<!-- DNT-End --> option is also
              specified.</entry>
            </row>

            <row>
              <entry><!-- DNT-Start --><emphasis role="bold">MANY<indexterm>
                  <primary>MANY</primary>
                </indexterm></emphasis><!-- DNT-End --></entry>

              <entry>Return multiple matches for <!-- DNT-Start -->BEST<!-- DNT-End -->, <!-- DNT-Start -->MAX<!-- DNT-End -->, or <!-- DNT-Start -->MIN<!-- DNT-End -->
              options.</entry>
            </row>

            <row>
              <entry><!-- DNT-Start --><emphasis role="bold">PARSE<indexterm>
                  <primary>PARSE</primary>
                </indexterm></emphasis><!-- DNT-End --></entry>

              <entry>Implements Tomita parsing<indexterm>
                  <primary>Tomita parsing</primary>
                </indexterm> instead of regular expression parsing
              technology.</entry>
            </row>

            <row>
              <entry><!-- DNT-Start --><emphasis role="bold">USE<indexterm>
                  <primary>USE</primary>
                </indexterm></emphasis>([ <emphasis>struct</emphasis>, ]
              x)<!-- DNT-End --></entry>

              <entry>Specifies using a <!-- DNT-Start -->RULE<!-- DNT-End --> pattern attribute defined further
              on in the code with the <!-- DNT-Start -->DEFINE<!-- DNT-End -->(x) function, introducing a
              recursive grammar (the only recursion allowed in <!-- DNT-Start -->ECL<!-- DNT-End -->). If the
              optional <emphasis>struct</emphasis> <!-- DNT-Start -->RECORD<!-- DNT-End --> structure<indexterm>
                  <primary><!-- DNT-Start -->RECORD<!-- DNT-End --> structure</primary>
                </indexterm> is specified, <!-- DNT-Start -->USE<!-- DNT-End --> specifies using a <!-- DNT-Start -->RULE<!-- DNT-End --> pattern
              attribute defined further on in the code with the <!-- DNT-Start -->DEFINE<!-- DNT-End -->(x)
              function that produces a row result in the
              <emphasis>struct</emphasis> <!-- DNT-Start -->RECORD<!-- DNT-End --> structure<indexterm>
                  <primary><!-- DNT-Start -->RECORD<!-- DNT-End --> structure</primary>
                </indexterm> format (valid only with the <!-- DNT-Start -->PARSE<!-- DNT-End --> option also
              present). <!-- DNT-Start -->USE<!-- DNT-End --> is required on <!-- DNT-Start -->PARSE<!-- DNT-End --> when any patterns cannot be
              found by walking the rules from the root down without following
              any USEs.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable></para>

    <para>Example:</para>

    <!-- DNT-Start --><programlisting>rec := {STRING10000 line};
datafile := DATASET([
    {'Ge 34:2 And when Shechem the son of Hamor the Hivite, prince of the country, saw her,'+
     ' he took her, and lay with her, and defiled her.'},
    {'Ge 36:10 These are the names of Esaus sons; Eliphaz the son of Adah the wife of Esau,'+
     ' Reuel the son of Bashemath the wife of Esau.'}],rec);
PATTERN ws1 := [' ','\t',','];
PATTERN ws := ws1 ws1?;
PATTERN patStart := FIRST | ws;
PATTERN patEnd := LAST | ws;
PATTERN article := ['A','The','Thou','a','the','thou'];

TOKEN patWord := PATTERN('[a-zA-Z]+');
TOKEN Name := PATTERN('[A-Z][a-zA-Z]+');

RULE Namet := name OPT(ws ['the','king of','prince of'] ws name);
PATTERN produced := OPT(article ws) ['begat','father of','mother of'];
PATTERN produced_by := OPT(article ws) ['son of','daughter of'];
PATTERN produces_with := OPT(article ws) ['wife of'];

RULE relationtype := ( produced | produced_by | produces_with);
RULE progeny := namet ws relationtype ws namet;

results := RECORD
  STRING60 Le := MATCHTEXT(Namet[1]);
  STRING60 Ri := MATCHTEXT(Namet[2]);
  STRING30 RelationPhrase := MatchText(relationtype);
END;
outfile1 := PARSE(datafile,line,progeny,results,SCAN ALL);
</programlisting><!-- DNT-End -->
  </sect2>

  <sect2 id="PARSE_XML_Data">
    <!-- DNT-Start --><title>PARSE XML<indexterm>
        <primary>PARSE XML</primary>
      </indexterm> Data</title><!-- DNT-End -->

    <para>The second form operates on an <!-- DNT-Start -->XML<!-- DNT-End --> <emphasis>dataset</emphasis>,
    parsing the <!-- DNT-Start -->XML<!-- DNT-End --> <emphasis>data </emphasis>and creating a result set using
    the <emphasis>result </emphasis>parameter, one output record per input.
    The expectation is that each row of <emphasis>data</emphasis> contains a
    complete block of <!-- DNT-Start -->XML<!-- DNT-End -->. If the <emphasis>result</emphasis> names a <!-- DNT-Start -->RECORD<!-- DNT-End -->
    structure, then this form of <!-- DNT-Start -->PARSE<!-- DNT-End --> operates like the <!-- DNT-Start -->TABLE<!-- DNT-End --> function to
    generate the result set.</para>

    <para>If the <emphasis>result</emphasis> names a <!-- DNT-Start -->TRANSFORM<!-- DNT-End --> function, then
    the transform generates the result set. The <!-- DNT-Start -->TRANSFORM<!-- DNT-End --> function must take
    at least one parameter: a <!-- DNT-Start -->LEFT<!-- DNT-End --> record of the same format as the
    <emphasis>dataset</emphasis>. The format of the resulting record set does
    not need to be the same as the input.</para>

    <para><emphasis role="bold">NOTE:</emphasis> <!-- DNT-Start -->XML<!-- DNT-End --> reading and parsing can
    consume a large amount of memory, depending on the usage. In particular,
    if the specified xpath matches a very large amount of data, then a large
    data structure will be provided to the transform. Therefore, the more you
    match, the more resources you consume per match. For example, if you have
    a very large document and you match an element near the root that
    virtually encompasses the whole thing, then the whole thing will be
    constructed as a referenceable structure that the <!-- DNT-Start -->ECL<!-- DNT-End --> can get at.</para>

    <para>Example:</para>

    <!-- DNT-Start --><programlisting>linerec := { STRING line };
in1 := DATASET([{
        '&lt;ENTITY eid="P101" type="PERSON" subtype="MILITARY"&gt;' +
        '  &lt;ATTRIBUTE name="fullname"&gt;JOHN SMITH&lt;/ATTRIBUTE&gt;' +
        '  &lt;ATTRIBUTE name="honorific"&gt;Mr.&lt;/ATTRIBUTE&gt;' +
        '  &lt;ATTRIBUTEGRP descriptor="passport"&gt;' +
        '     &lt;ATTRIBUTE name="idNumber"&gt;W12468&lt;/ATTRIBUTE&gt;' +
        '     &lt;ATTRIBUTE name="idType"&gt;pp&lt;/ATTRIBUTE&gt;' +
        '     &lt;ATTRIBUTE name="issuingAuthority"&gt;JAPAN PASSPORT AUTHORITY&lt;/ATTRIBUTE&gt;' +
        '     &lt;ATTRIBUTE name="country" value="L202"/&gt;' +
        '     &lt;ATTRIBUTE name="age" value="19"/&gt;' +
        '  &lt;/ATTRIBUTEGRP&gt;' +
        '&lt;/ENTITY&gt;'}],
     linerec);
passportRec := RECORD
  STRING id;
  STRING idType;
  STRING issuer;
  STRING country;
  INTEGER age;
END;
outrec := RECORD
  STRING id;
  UNICODE fullname;
  UNICODE title;
  passportRec passport;
  STRING line;
END;
outrec t(lineRec L) := TRANSFORM
  SELF.id := XMLTEXT('@eid');
  SELF.fullname := XMLUNICODE('ATTRIBUTE[@name="fullname"]');
  SELF.title := XMLUNICODE('ATTRIBUTE[@name="honorific"]');
  SELF.passport.id := XMLTEXT('ATTRIBUTEGRP[@descriptor="passport"]' 
                            + '/ATTRIBUTE[@name="idNumber"]');
  SELF.passport.idType := XMLTEXT('ATTRIBUTEGRP[@descriptor="passport"]'
                                + '/ATTRIBUTE[@name="idType"]');
  SELF.passport.issuer := XMLTEXT('ATTRIBUTEGRP[@descriptor="passport"]'
                                + '/ATTRIBUTE[@name="issuingAuthority"]');
  SELF.passport.country := XMLTEXT('ATTRIBUTEGRP[@descriptor="passport"]'
                                 + '/ATTRIBUTE[@name="country"]/@value');
  SELF.passport.age := (INTEGER)XMLTEXT('ATTRIBUTEGRP[@descriptor="passport"]'
                                      + '/ATTRIBUTE[@name="age"]/@value');
  SELF := L;
END;

textout := PARSE(in1, line, t(LEFT), XML('/ENTITY[@type="PERSON"]'));
</programlisting><!-- DNT-End -->

    <para>See Also: <link linkend="DATASET"><!-- DNT-Start -->DATASET<!-- DNT-End --></link>, <link
    linkend="OUTPUT"><!-- DNT-Start -->OUTPUT<!-- DNT-End --></link>, <link
    linkend="XMLENCODE"><!-- DNT-Start -->XMLENCODE<!-- DNT-End --></link>, <link
    linkend="XMLDECODE"><!-- DNT-Start -->XMLDECODE<!-- DNT-End --></link>, <link
    linkend="REGEXFIND"><!-- DNT-Start -->REGEXFIND<!-- DNT-End --></link>, <link
    linkend="REGEXREPLACE"><!-- DNT-Start -->REGEXREPLACE<!-- DNT-End --></link>, <link
    linkend="DEFINE"><!-- DNT-Start -->DEFINE<!-- DNT-End --></link></para>
  </sect2>

  <sect2 id="Extended_PARSE_Examples">
    <!-- DNT-Start --><title>Extended PARSE<indexterm>
        <primary>Extended PARSE</primary>
      </indexterm> Examples<indexterm>
        <primary>PARSE Examples</primary>
      </indexterm><indexterm>
        <primary>Extended PARSE Examples</primary>
      </indexterm></title><!-- DNT-End -->

    <para>This example parses raw phone numbers from a specific field in an
    input dataset into a single standard output containing just the numbers. A
    missing area code in the raw input results in three leading zeroes in the
    output.</para>

    <!-- DNT-Start --><programlisting>infile := DATASET([{'5619994581'},{'15619994581'},
                   {'(561) 999-4581'},{'(561)999-4581'},
                   {'561-999-4581'},{'561 999 4581'},
                   {'561.999.4581'},{'561/999/4581'},
                   {'561 999-4581'},{'9994581'},
                   {'999-4581'}],{STRING20 rawnumber});
  
            
PATTERN numbers := PATTERN('[0-9]')+;
PATTERN alpha := PATTERN('[A-Za-z]')+;
PATTERN ws := [' ','\t']*;
PATTERN sepchar := PATTERN('[-./ ]');
PATTERN Seperator := ws sepchar ws;

// Area Code
PATTERN OpenParen := ['[','(','{','&lt;'];
PATTERN CloseParen := [']',')','}','&gt;'];
PATTERN FrontDigit := ['1', '0'] OPT(Seperator);
PATTERN areacode := OPT(FrontDigit) OPT(OpenParen) numbers length(3) OPT(CloseParen);

// Last Seven digits
PATTERN exchange := numbers length(3);
PATTERN lastfour := numbers length(4);
PATTERN seven := exchange OPT(Seperator) lastfour;

// Extension
PATTERN extension := ws alpha ws numbers;

// Phone Number
PATTERN phonenumber := OPT(areacode) OPT(Seperator) seven
          opt(extension) ws;

layout_phone_append := RECORD
  infile;
  STRING10 clean_phone := MAP(NOT MATCHED(phonenumber) =&gt; '',
              NOT MATCHED(areacode) =&gt; '000' + MATCHTEXT(exchange) + MATCHTEXT(lastfour),
              MATCHTEXT(areacode/numbers) + MATCHTEXT(exchange) + MATCHTEXT(lastfour));
END;

outfile := 
  PARSE(infile, rawnumber, phonenumber, layout_phone_append,FIRST, NOT MATCHED, WHOLE);

OUTPUT(outfile);
</programlisting><!-- DNT-End -->

    <para>This example parses a small subset of raw movie data (freely
    available at <!-- DNT-Start -->IMDB<!-- DNT-End -->.com) into standard database fields:</para>

    <!-- DNT-Start --><programlisting>Layout_Actors_Raw := RECORD
STRING120 IMDB_Actor_Desc;
END;

File_Actors := DATASET([
{'A.V., Subba Rao Chenchu Lakshmi (1958/I) &lt;10&gt;'},
{' Jayabheri (1959) &lt;17&gt;'},
{' Madalasa (1948) &lt;3&gt;'},
{' Mangalya Balam (1958) &lt;12&gt;'},
{' Mohini Bhasmasura (1938) &lt;3&gt;'},
{' Palletoori Pilla (1950) [Kampanna Dora] &lt;4&gt;'},
{' Peddamanushulu (1954) &lt;6&gt;'},
{' Sarangadhara (1957) &lt;12&gt;'},
{' Sri Seetha Rama Kalyanam (1961) &lt;12&gt;'},
{' Sri Venkateswara Mahatmyam (1960) [Akasa Raju] &lt;5&gt;'},
{' Vara Vikrayam (1939) [Judge] &lt;12&gt;'},
{' Vindhyarani (1948) &lt;7&gt;'},
{''},
{'Aa, Brynjar Adjo solidaritet (1985) [Ponker] &lt;40&gt;'},
{''},
{'Aabel, Andreas Bor Borson Jr. (1938) [O.G. Hansen] &lt;9&gt;'},
{' Jeppe pa bjerget (1933) [En skomakerlaerling]'},
{' Kampen om tungtvannet (1948) &lt;8&gt;'},
{' Prinsessen som ingen kunne maqlbinde (1932) [Espen
          Askeladd] &lt;3&gt;'},
{' Spokelse forelsker seg, Et (1946) [Et spokelse] &lt;6&gt;'},
{''},
{'Aabel, Hauk (I) Alexander den store (1917) [Alexander Nyberg]'},
{' Du har lovet mig en kone! (1935) [Professoren] &lt;6&gt;'},
{' Glad gutt, En (1932) [Ola Nordistua] &lt;1&gt;'},
{' Jeppe pa bjerget (1933) [Jeppe] &lt;1&gt;'},
{' Morderen uten ansikt (1936)'},
{' Store barnedapen, Den (1931) [Evensen, kirketjener] &lt;5&gt;'},
{' Troll-Elgen (1927) [Piper, direktor] &lt;9&gt;'},
{' Ungen (1938) [Krestoffer] &lt;8&gt;'},
{' Valfangare (1939) [Jensen Sr.] &lt;4&gt;'},
{''},
{'Aabel, Per (I) Brudebuketten (1953) [Hoyland jr.] &lt;3&gt;'},
{' Cafajestes, Os (1962)'},
{' Farlige leken, Den (1942) [Fredrik Holm, doktor]'},
{' Herre med bart, En (1942) [Ole Grong, advokat] &lt;1&gt;'},
{' Kjaere Maren (1976) [Doktor]'},
{' Kjaerlighet og vennskap (1941) [Anton Schack] &lt;3&gt;'},
{' Ombyte fornojer (1939) [Gregor Ivanow] &lt;2&gt;'},
{' Portrettet (1954) [Per Haug, provisor] &lt;1&gt;'}],
Layout_Actors_Raw);

//Basic patterns:
PATTERN arb := PATTERN('[-!.,\t a-zA-Z0-9]')+;

//all alphanumeric &amp; certain special characters
PATTERN ws := [' ','\t']+; //word separators (space &amp; tab)
PATTERN number := PATTERN('[0-9]')+; //numbers

//extended patterns:
PATTERN age := '(' number OPT('/I') ')';

//movie year -- OPT('/I') required for first rec
PATTERN role := '[' arb ']'; //character played
PATTERN m_rank := '&lt;' number '&gt;'; //credit appearance number
PATTERN actor := arb OPT(ws '(I)' ws);
//actor's name -- OPT(ws '(I)' ws)
// required for last two actors

//extended pattern to parse the actual text:
PATTERN line := actor '\t' arb ws OPT(age) ws OPT(role) ws OPT(m_rank) ws;

//output record structure:
NLP_layout_actor_movie := RECORD
  STRING30 actor_name := Std.Str.filterout(MATCHTEXT(actor),'\t');
  STRING50 movie_name := MATCHTEXT(arb[2]);
  UNSIGNED2 movie_year := (UNSIGNED)MATCHTEXT(age/number);
  STRING20 movie_role := MATCHTEXT(role/arb);
  UNSIGNED1 cast_rank := (UNSIGNED)MATCHTEXT(m_rank/number);
END;

//and the actual parsing operation
Actor_Movie_Init := PARSE(File_Actors,
                          IMDB_Actor_Desc,
                          line,
                          NLP_layout_actor_movie,WHOLE,FIRST);

// then iterate to propagate actor name in each record
NLP_layout_actor_movie IterNames(NLP_layout_actor_movie L,
                                 NLP_layout_actor_movie R) := TRANSFORM
  SELF.actor_name := IF(R.actor_Name='',L.actor_Name,R.actor_name);
  SELF:= R;
END;

NLP_Actor_Movie := ITERATE(Actor_Movie_Init,IterNames(LEFT,RIGHT));

// and output the result set
OUTPUT(NLP_Actor_Movie);
</programlisting><!-- DNT-End -->
  </sect2>
</sect1>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<sect1 id="Constants">
  <!-- DNT-Start --><title>Constants</title><!-- DNT-End -->

  <sect2 id="Const_String">
    <!-- DNT-Start --><title>String</title><!-- DNT-End -->

    <para>All string literals must be contained within single quotation marks
    ( ' ' ). All <!-- DNT-Start -->ECL<!-- DNT-End --> code is <!-- DNT-Start -->UTF<!-- DNT-End -->-8 encoded, which means that all strings are
    also <!-- DNT-Start -->UTF<!-- DNT-End -->-8 encoded, whether Unicode or non-Unicode strings. Therefore, you
    must use a <!-- DNT-Start -->UTF<!-- DNT-End -->-8<indexterm>
        <primary><!-- DNT-Start -->UTF<!-- DNT-End -->-8</primary>
      </indexterm> editor (such as the <!-- DNT-Start -->ECL<!-- DNT-End --> <!-- DNT-Start -->IDE<!-- DNT-End --> <indexterm>
        <primary><!-- DNT-Start -->ECL<!-- DNT-End --> <!-- DNT-Start -->IDE<!-- DNT-End --></primary>
      </indexterm> program).</para>

    <para>To include the single quote character (apostrophe) in a constant
    string, prepend a backslash (\). To include the backslash character (\) in
    a constant string, use two backslashes (\\) together.</para>

    <!-- DNT-Start --><programlisting>STRING20 MyString2 := 'Fred\'s Place';
                     //evaluated as: "Fred's Place"
STRING20 MyString3 := 'Fred\\Ginger\'s Place';
                    //evaluated as: "Fred\Ginger's Place"</programlisting><!-- DNT-End -->

    <para>Other available escape characters are:</para>

    <para><informaltable colsep="1" frame="all" rowsep="1">
        <tgroup cols="2">
          <colspec colwidth="85.75pt" />

          <colspec />

          <tbody>
            <row>
              <entry><!-- DNT-Start --><emphasis role="code">\t</emphasis><!-- DNT-End --></entry>

              <entry>tab</entry>
            </row>

            <row>
              <entry><!-- DNT-Start --><emphasis role="code">\n</emphasis><!-- DNT-End --></entry>

              <entry>new line</entry>
            </row>

            <row>
              <entry><!-- DNT-Start --><emphasis role="code">\r</emphasis><!-- DNT-End --></entry>

              <entry>carriage return</entry>
            </row>

            <row>
              <entry><!-- DNT-Start --><emphasis role="code">\nnn</emphasis><!-- DNT-End --></entry>

              <entry>3 octal digits (for any other character)</entry>
            </row>

            <row>
              <entry><!-- DNT-Start --><emphasis role="code">\uhhhh</emphasis><!-- DNT-End --></entry>

              <entry>lowercase "u" followed by 4 hexadecimal digits (for any
              other <!-- DNT-Start -->UNICODE<!-- DNT-End -->-only character)</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable></para>

    <!-- DNT-Start --><programlisting>MyString1 := 'abcd'; 
MyString2 := U'abcd\353';    // becomes 'abcdÃ«'
</programlisting><!-- DNT-End -->

    <para><emphasis role="bold">Hexadecimal<indexterm>
        <primary>Hexadecimal</primary>
      </indexterm> string constants<indexterm>
        <primary>string constants</primary>
      </indexterm> </emphasis>must begin with a leading âxâ character. Only
    valid hexadecimal values (0-9, A-F) may be in the character string and
    there must be an even number of characters.</para>

    <!-- DNT-Start --><programlisting>DATA2 MyHexString := x'0D0A'; // a 2-byte hexadecimal string</programlisting><!-- DNT-End -->

    <para><emphasis role="bold">Data string<indexterm>
        <primary>Data string</primary>
      </indexterm> constants<indexterm>
        <primary>constants</primary>
      </indexterm> </emphasis>must begin with a leading âDâ character. This is
    directly equivalent to casting the string constant to <!-- DNT-Start -->DATA<!-- DNT-End -->.</para>

    <!-- DNT-Start --><programlisting>MyDataString := D'abcd'; // same as: (DATA)'abcd'</programlisting><!-- DNT-End -->

    <para><emphasis role="bold">Unicode string<indexterm>
        <primary>Unicode string</primary>
      </indexterm> constants </emphasis>must begin with a leading âUâ
    character. Characters between the quotes are utf8-encoded and the type of
    the constant is <!-- DNT-Start -->UNICODE<!-- DNT-End -->.</para>

    <!-- DNT-Start --><programlisting>MyUnicodeString1 := U'abcd';        // same as: (UNICODE)'abcd'
MyUnicodeString2 := U'abcd\353';    // becomes 'abcdÃ«'
MyUnicodeString3 := U'abcd\u00EB'; // becomes 'abcdÃ«'</programlisting><!-- DNT-End -->

    <para><emphasis role="bold"><!-- DNT-Start -->UTF<!-- DNT-End -->8 string<indexterm>
        <primary><!-- DNT-Start -->UTF<!-- DNT-End -->8 string</primary>
      </indexterm> constants </emphasis>must begin with leading âU8â
    characters. Characters between the quotes are utf8-encoded and the type of
    the constant is <!-- DNT-Start -->UTF<!-- DNT-End -->8.</para>

    <!-- DNT-Start --><programlisting>MyUTF8String := U8'abcd\353';</programlisting><!-- DNT-End -->

    <para><emphasis role="bold"><!-- DNT-Start -->VARSTRING<!-- DNT-End --> string constants<indexterm>
        <primary><!-- DNT-Start -->VARSTRING<!-- DNT-End --> string constants</primary>
      </indexterm> </emphasis>must begin with a leading âVâ character. The
    terminating null byte is implied and type of the constant is
    <!-- DNT-Start -->VARSTRING<!-- DNT-End -->.</para>

    <!-- DNT-Start --><programlisting>MyVarString := V'abcd'; // same as: (VARSTRING)'abcd'</programlisting><!-- DNT-End -->

    <para><emphasis role="bold"><!-- DNT-Start -->QSTRING<!-- DNT-End --> string constants<indexterm>
        <primary><!-- DNT-Start -->QSTRING<!-- DNT-End --> string constants</primary>
      </indexterm> </emphasis>must begin with a leading âQâ character. The
    terminating null byte is implied and type of the constant is
    <!-- DNT-Start -->VARSTRING<!-- DNT-End -->.</para>

    <!-- DNT-Start --><programlisting>MyQString := Q'ABCD'; // same as: (QSTRING)'ABCD'</programlisting><!-- DNT-End -->
  </sect2>

  <sect2 id="Numeric">
    <!-- DNT-Start --><title>Numeric</title><!-- DNT-End -->

    <para><!-- DNT-Start -->Numeric<!-- DNT-End --> constants containing a decimal portion are treated as <!-- DNT-Start -->REAL<!-- DNT-End -->
    values (scientific notation is allowed) and those without are treated as
    <!-- DNT-Start -->INTEGER<!-- DNT-End --><indexterm>
        <primary><!-- DNT-Start -->INTEGER<!-- DNT-End --></primary>
      </indexterm> (see <emphasis role="bold">Value Types</emphasis>). Integer
    constants may be decimal, hexadecimal, or binary values.
    Hexadecimal<indexterm>
        <primary>Hexadecimal</primary>
      </indexterm> values are specified with either a leading â0xâ or a
    trailing âxâ character. Binary values<indexterm>
        <primary>Binary values</primary>
      </indexterm> are specified with either a leading â0bâ or a trailing âbâ
    character.</para>

    <!-- DNT-Start --><programlisting>MyInt1  := 10;     // value of MyInt1 is the INTEGER value 10
MyInt2  := 0x0A;   // value of MyInt2 is the INTEGER value 10
MyInt3  := 0Ax;    // value of MyInt3 is the INTEGER value 10
MyInt4  := 0b1010; // value of MyInt4 is the INTEGER value 10
MyInt5  := 1010b;  // value of MyInt5 is the INTEGER value 10
MyReal1 := 10.0;   // value of MyReal1 is the REAL value 10.0
MyReal2 := 1.0e1;  // value of MyReal2 is the REAL value 10.0
</programlisting><!-- DNT-End -->
  </sect2>

  <sect2 id="CompileTimeConstants" role="brk">
    <!-- DNT-Start --><title>Compile Time Constants</title><!-- DNT-End -->

    <para>The following system constants <indexterm>
        <primary>constants</primary>
      </indexterm><indexterm>
        <primary>system constants</primary>
      </indexterm>are available at compile time. These can be useful in
    creating conditional code.</para>

    <para><informaltable colsep="1" frame="all" rowsep="1">
        <tgroup cols="2">
          <colspec colwidth="150pt" />

          <colspec />

          <tbody>
            <row>
              <entry><!-- DNT-Start --><emphasis>__ECL_VERSION__<indexterm>
                  <primary>__ECL_VERSION__</primary>
                </indexterm></emphasis><!-- DNT-End --></entry>

              <entry>A <!-- DNT-Start -->STRING<!-- DNT-End --> containing the value of the platform version.
              For example, '6.4.0'</entry>
            </row>

            <row>
              <entry><!-- DNT-Start --><emphasis>__ECL_VERSION_MAJOR__ <indexterm>
                  <primary>__ECL_VERSION_MAJOR__</primary>
                </indexterm></emphasis><!-- DNT-End --></entry>

              <entry>An <!-- DNT-Start -->INTEGER<!-- DNT-End --> containing the value of the major portion of
              the platform version. For example, '6'</entry>
            </row>

            <row>
              <entry><!-- DNT-Start --><emphasis>__ECL_VERSION_MINOR__<indexterm>
                  <primary>__ECL_VERSION_MINOR__</primary>
                </indexterm></emphasis><!-- DNT-End --></entry>

              <entry>An <!-- DNT-Start -->INTEGER<!-- DNT-End --> containing the value of the minor portion of
              the platform version. For example, '4'</entry>
            </row>

            <row>
              <entry><!-- DNT-Start --><emphasis>__ECL_LEGACY_MODE__<indexterm>
                  <primary>__ECL_LEGACY_MODE__</primary>
                </indexterm></emphasis><!-- DNT-End --></entry>

              <entry>A <!-- DNT-Start -->BOOLEAN<!-- DNT-End --> value indicating if it is being compiled with
              legacy <!-- DNT-Start -->IMPORT<!-- DNT-End --> semantics.</entry>
            </row>

            <row>
              <entry><!-- DNT-Start --><emphasis>__OS__<indexterm>
                  <primary>__OS__</primary>
                </indexterm></emphasis><!-- DNT-End --></entry>

              <entry>A <!-- DNT-Start -->STRING<!-- DNT-End --> indicating the operating system to which it is
              being compiled. (Available values are: 'windows' or
              'linux')</entry>
            </row>

            <row>
              <entry><!-- DNT-Start --><emphasis>__STAND_ALONE__<indexterm>
                  <primary>__STAND_ALONE__</primary>
                </indexterm></emphasis><!-- DNT-End --></entry>

              <entry>A <!-- DNT-Start -->BOOLEAN<!-- DNT-End --> value indicating if it is being compiled to a
              stand-alone executable.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>Example:</para>

    <para><programlisting>IMPORT STD;
  STRING14 fGetDateTimeString() :=
  #IF(__ECL_VERSION_MAJOR__ &gt; 5) or ((__ECL_VERSION_MAJOR__ = 5) AND (__ECL_VERSION_MINOR__ &gt;= 2))
    STD.Date.SecondsToString(STD.Date.CurrentSeconds(true), '%Y%m%d%H%M%S');
  #ELSE
    FUNCTION
      string14 fGetDimeTime():= // 14 characters returned
      BEGINC++
      #option action
      struct tm localt;         // localtime in "tm" structure
      time_t timeinsecs;        // variable to store time in secs
      time(&amp;timeinsecs);  
      localtime_r(&amp;timeinsecs,&amp;localt);
      char temp[15];
      strftime(temp , 15, "%Y%m%d%H%M%S",Â &amp;amp;localt); // Formats the localtime to YYYYMMDDhhmmss 
      strncpy(__result, temp, 14);
      ENDC++;
      RETURN fGetDimeTime();
    END;
  #END;
</programlisting></para>
  </sect2>
</sect1>

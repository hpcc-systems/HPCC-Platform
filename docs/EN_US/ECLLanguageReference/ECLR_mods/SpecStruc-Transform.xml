<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<sect1 id="TRANSFORM_Structure" role="nobrk">
  <!-- DNT-Start --><title>TRANSFORM Structure<indexterm>
      <primary>TRANSFORM structure</primary>
    </indexterm></title><!-- DNT-End -->

  <para><emphasis>resulttype funcname </emphasis><emphasis
  role="bold">(</emphasis><emphasis> parameterlist </emphasis><emphasis
  role="bold">) := <!-- DNT-Start -->TRANSFORM<!-- DNT-End --><indexterm>
      <primary><!-- DNT-Start -->TRANSFORM<!-- DNT-End --></primary>
    </indexterm> [, <!-- DNT-Start -->SKIP<!-- DNT-End --><indexterm>
      <primary><!-- DNT-Start -->SKIP<!-- DNT-End --></primary>
    </indexterm>( </emphasis><emphasis>condition</emphasis><emphasis
  role="bold"> )]</emphasis><emphasis role="bold"> </emphasis></para>

  <para><emphasis role="bold"> [ </emphasis><emphasis>locals</emphasis>
  <emphasis role="bold">]</emphasis></para>

  <para><emphasis role="bold"></emphasis><emphasis role="bold">
  <!-- DNT-Start -->SELF<!-- DNT-End --></emphasis><indexterm>
      <primary><!-- DNT-Start -->SELF<!-- DNT-End --></primary>
    </indexterm>.<emphasis>outfield</emphasis> :=
  <emphasis>transformation</emphasis>;<emphasis role="bold"></emphasis></para>

  <para><emphasis role="bold"><!-- DNT-Start -->END<!-- DNT-End -->;</emphasis><emphasis
  role="bold"></emphasis></para>

  <para><emphasis role="bold"></emphasis></para>

  <para><emphasis role="bold"><!-- DNT-Start -->TRANSFORM<!-- DNT-End -->( </emphasis><emphasis>resulttype,
  assignments </emphasis><emphasis role="bold"> )</emphasis><emphasis
  role="bold"></emphasis></para>

  <para><emphasis role="bold"></emphasis></para>

  <para><emphasis role="bold"><!-- DNT-Start -->TRANSFORM<!-- DNT-End -->( </emphasis><emphasis>datarow
  </emphasis><emphasis role="bold"> )</emphasis></para>

  <informaltable colsep="1" frame="all" rowsep="1">
    <tgroup cols="2">
      <colspec align="left" colwidth="122.40pt" />

      <colspec />

      <tbody>
        <row>
          <entry><!-- DNT-Start --><emphasis>resulttype</emphasis><!-- DNT-End --></entry>

          <entry>The name of a <!-- DNT-Start -->RECORD<!-- DNT-End --> structure Attribute that specifies the
          output format of the function. You may use <!-- DNT-Start -->TYPEOF<!-- DNT-End --> here to specify a
          dataset. Any implicit relationality of the input dataset is not
          inherited.</entry>
        </row>

        <row>
          <entry><!-- DNT-Start --><emphasis>funcname</emphasis><!-- DNT-End --></entry>

          <entry>The name of the function the <!-- DNT-Start -->TRANSFORM<!-- DNT-End --> structure
          defines.</entry>
        </row>

        <row>
          <entry><!-- DNT-Start --><emphasis>parameterlist</emphasis><!-- DNT-End --></entry>

          <entry>A comma separated list of the value types and labels of the
          parameters that will be passed to the <!-- DNT-Start -->TRANSFORM<!-- DNT-End --> function. These are
          usually the dataset records or <!-- DNT-Start -->COUNTER<!-- DNT-End --> parameters but are not
          limited to those.</entry>
        </row>

        <row>
          <entry><!-- DNT-Start --><emphasis role="bold">SKIP</emphasis><!-- DNT-End --></entry>

          <entry>Optional. Specifies the <emphasis>condition</emphasis> under
          which the <!-- DNT-Start -->TRANSFORM<!-- DNT-End --> function operation is skipped.</entry>
        </row>

        <row>
          <entry><!-- DNT-Start --><emphasis>condition</emphasis><!-- DNT-End --></entry>

          <entry>A logical expression defining under what circumstances the
          <!-- DNT-Start -->TRANSFORM<!-- DNT-End --> operation does not occur. This may use data from the
          <emphasis>parameterlist</emphasis> in the same manner as a
          <emphasis>transformation</emphasis> expression.</entry>
        </row>

        <row>
          <entry><!-- DNT-Start --><emphasis>locals</emphasis><!-- DNT-End --></entry>

          <entry>Optional. Definitions of local Attributes useful within the
          <!-- DNT-Start -->TRANSFORM<!-- DNT-End --> function. These may be defined to receive parameters and
          may use any parameters passed to the <!-- DNT-Start -->TRANSFORM<!-- DNT-End -->.</entry>
        </row>

        <row>
          <entry><!-- DNT-Start --><emphasis role="bold">SELF</emphasis><!-- DNT-End --></entry>

          <entry>Specifies the resulting output recordset from the
          <!-- DNT-Start -->TRANSFORM<!-- DNT-End -->.</entry>
        </row>

        <row>
          <entry><!-- DNT-Start --><emphasis>outfield</emphasis><!-- DNT-End --></entry>

          <entry>The name of a field in the <emphasis>resulttype</emphasis>
          structure.</entry>
        </row>

        <row>
          <entry><!-- DNT-Start --><emphasis>transformation</emphasis><!-- DNT-End --></entry>

          <entry>An expression specifying how to produce the value for the
          <emphasis>outfield</emphasis>. This may include other <!-- DNT-Start -->TRANSFORM<!-- DNT-End -->
          function operations (nested transforms).</entry>
        </row>

        <row>
          <entry><!-- DNT-Start --><emphasis>assignments</emphasis><!-- DNT-End --></entry>

          <entry>A semi-colon delimited list of
          <!-- DNT-Start -->SELF<!-- DNT-End -->.<emphasis>outfield</emphasis>:=
          <emphasis>transformation</emphasis> definitions.</entry>
        </row>

        <row>
          <entry><!-- DNT-Start --><emphasis>datarow</emphasis><!-- DNT-End --></entry>

          <entry>A single record to transform, typically the keyword
          <!-- DNT-Start -->LEFT<!-- DNT-End -->.</entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>

  <para>The <emphasis role="bold"><!-- DNT-Start -->TRANSFORM<!-- DNT-End --> </emphasis>structure makes
  operations that must be performed on entire datasets (such as a <!-- DNT-Start -->JOIN<!-- DNT-End -->) and
  any iterative type of record processing (<!-- DNT-Start -->PROJECT<!-- DNT-End -->, <!-- DNT-Start -->ITERATE<!-- DNT-End -->, etc.), possible.
  A <!-- DNT-Start -->TRANSFORM<!-- DNT-End --> defines the specific operations that must occur on a
  record-by-record basis. It defines the function that is called each time the
  operation that uses the <!-- DNT-Start -->TRANSFORM<!-- DNT-End --> needs to process record(s). One <!-- DNT-Start -->TRANSFORM<!-- DNT-End -->
  function may be defined in terms of another, and they may be nested.</para>

  <para>The <!-- DNT-Start -->TRANSFORM<!-- DNT-End --> structure specifies exactly how each field in the output
  record set is to receive its value. That result value may simply be the
  value of a field in an input record set, or it may be the result of some
  complex calculation or conditional expression evaluation.</para>

  <para>The <!-- DNT-Start -->TRANSFORM<!-- DNT-End --> structure itself is a generic tool; each operation that
  uses a <!-- DNT-Start -->TRANSFORM<!-- DNT-End --> function defines what its <!-- DNT-Start -->TRANSFORM<!-- DNT-End --> needs to receive and
  what basic functionality it should provide. Therefore, the real key to
  understanding <!-- DNT-Start -->TRANSFORM<!-- DNT-End --> structures is in understanding how it is used by the
  calling function -- each function that uses a <!-- DNT-Start -->TRANSFORM<!-- DNT-End --> documents the type
  of <!-- DNT-Start -->TRANSFORM<!-- DNT-End --> required to accomplish the goal, although the <!-- DNT-Start -->TRANSFORM<!-- DNT-End --> itself
  may also provide extra functionality and receive extra parameters beyond
  those required by the operation itself.</para>

  <para>The <!-- DNT-Start -->SKIP<!-- DNT-End --> option specifies the <emphasis>condition</emphasis> that
  results in no output from that iteration of the <!-- DNT-Start -->TRANSFORM<!-- DNT-End -->. However, <!-- DNT-Start -->COUNTER<!-- DNT-End -->
  values are incremented even when <!-- DNT-Start -->SKIP<!-- DNT-End --> eliminates generating the current
  record.</para>

  <sect2 id="Transformation_Attribute_Definitions">
    <!-- DNT-Start --><title>Transformation Attribute Definitions</title><!-- DNT-End -->

    <para>The attribute definitions inside the <!-- DNT-Start -->TRANSFORM<!-- DNT-End --> structure are used to
    convert the data passed in as parameters to the output
    <emphasis>resulttype</emphasis> format. Every field in the
    <emphasis>resulttype</emphasis> record layout must be fully defined in the
    <!-- DNT-Start -->TRANSFORM<!-- DNT-End -->. You can explicitly define each field, using the
    <emphasis><!-- DNT-Start -->SELF<!-- DNT-End -->.outfield</emphasis> := <emphasis>transformation;</emphasis>
    expression, or you can use one of these shortcuts:</para>

    <!-- DNT-Start --><programlisting>SELF := [ ];</programlisting><!-- DNT-End -->

    <para>clears all fields in the <emphasis>resulttype</emphasis> output that
    have not previously been defined in the transform function, while this
    form:</para>

    <!-- DNT-Start --><programlisting>SELF.<emphasis>outfield</emphasis> := [];   //the <emphasis>outfield</emphasis> names a child DATASET in
                       // the <emphasis>resulttype </emphasis>RECORD Structure</programlisting><!-- DNT-End -->

    <para>clears only the child fields in the <emphasis>outfield</emphasis>,
    and this form:</para>

    <!-- DNT-Start --><programlisting>SELF := <emphasis>label</emphasis>; //the <emphasis>label</emphasis> names a RECORD structure<indexterm>
        <primary>RECORD structure</primary>
      </indexterm> parameter
// in the <emphasis>parameterlist</emphasis></programlisting><!-- DNT-End -->

    <para>defines the output for each field in the
    <emphasis>resulttype</emphasis> output format that has not previously been
    defined as coming from the <emphasis>label</emphasis> parameter's matching
    named field.</para>

    <para>You may also define <emphasis>local</emphasis> attributes inside the
    <!-- DNT-Start -->TRANSFORM<!-- DNT-End --> structure to better organize the code. These
    <emphasis>local</emphasis> attributes may receive parameters.</para>
  </sect2>

  <sect2 id="TRANSFORM_Functions">
    <!-- DNT-Start --><title>TRANSFORM Functions</title><!-- DNT-End -->

    <para>This form of <!-- DNT-Start -->TRANSFORM<!-- DNT-End --> must be terminated by the <!-- DNT-Start -->END<!-- DNT-End --> keyword. The
    <emphasis>resulttype</emphasis> must be specified, and the function itself
    takes parameters in the <emphasis>parameterlist</emphasis>. These
    parameters are typically <!-- DNT-Start -->RECORD<!-- DNT-End --> structures, but may be any type of
    parameter depending upon the type of <!-- DNT-Start -->TRANSFORM<!-- DNT-End --> function the using function
    expects to call. The exact form a <!-- DNT-Start -->TRANSFORM<!-- DNT-End --> function must take is always
    directly associated with the operation that uses it.</para>

    <para>Example:</para>

    <!-- DNT-Start --><programlisting>Ages := RECORD
  AgedRecs.id;
  AgedRecs.id1;
  AgedRecs.id2;
END;
SequencedAges := RECORD
  Ages;
  INTEGER4 Sequence := 0;
END;

SequencedAges AddSequence(AgedRecs L, INTEGER C) :=
          TRANSFORM, SKIP(C % 2 = 0) //skip even recs
  INTEGER1 rangex(UNSIGNED4 divisor) := (l.id DIV divisor) % 100;
  SELF.id1 := rangex(10000);
  SELF.id2 := rangex(100);
  SELF.Sequence := C;
  SELF := L;
END;

SequencedAgedRecs := PROJECT(AgedRecs, AddSequence(LEFT,COUNTER<indexterm>
        <primary>COUNTER</primary>
      </indexterm>));
//Example of defining a TRANSFORM function in terms of another
namesIdRecord assignId(namesRecord l, UNSIGNED value) :=  TRANSFORM
  SELF.id := value;
  SELF := l;
END;

assignId1(namesRecord l) := assignId(l, 1);
         //creates an assignId1 TRANSFORM that uses assignId
assignId2(namesRecord l) := assignId(l, 2);
         //creates an assignId2 TRANSFORM that uses assignId</programlisting><!-- DNT-End -->
  </sect2>

  <sect2 id="Inline_TRANSFORMs">
    <!-- DNT-Start --><title>Inline TRANSFORMs<indexterm>
        <primary>Inline TRANSFORMs</primary>
      </indexterm></title><!-- DNT-End -->

    <para>This form of <!-- DNT-Start -->TRANSFORM<!-- DNT-End --> is used in-line within the operation that
    uses it. The <emphasis>resulttype</emphasis> must be specified along with
    all the <emphasis>assignments</emphasis>. This form is mainly for use
    where the transform <emphasis>assignments</emphasis> are trivial (such as
    <!-- DNT-Start -->SELF<!-- DNT-End --> := <!-- DNT-Start -->LEFT<!-- DNT-End -->;).</para>

    <para>Example:</para>

    <!-- DNT-Start --><programlisting>namesIdRecord assignId(namesRecord L) := TRANSFORM
  SELF := L; //more like-named fields across
  SELF := []; //clear all other fields
END;

projected1 := PROJECT(namesTable, assignId(LEFT));
projected2 := PROJECT(namesTable, TRANSFORM(namesIdRecord,
          SELF := LEFT;
          SELF := []));
//projected1 and projected2 do the same thing</programlisting><!-- DNT-End -->
  </sect2>

  <sect2 id="Shorthand_Inline_TRANSFORMs">
    <!-- DNT-Start --><title>Shorthand Inline TRANSFORMs<indexterm>
        <primary>Inline TRANSFORMs</primary>
      </indexterm></title><!-- DNT-End -->

    <para>This form of <!-- DNT-Start -->TRANSFORM<!-- DNT-End --> is a shorthand version of Inline <!-- DNT-Start -->TRANSFORMs<!-- DNT-End -->.
    In this form,</para>

    <!-- DNT-Start --><programlisting>TRANSFORM(LEFT)</programlisting><!-- DNT-End -->

    <para>is directly equivalent to</para>

    <!-- DNT-Start --><programlisting>TRANSFORM(RECORDOF(LEFT), SELF := LEFT)</programlisting><!-- DNT-End -->

    <para>Example:</para>

    <!-- DNT-Start --><programlisting>namesIdRecord assignId(namesRecord L) := TRANSFORM
  SELF := L; //move like-named fields across
END;
projected1 := PROJECT(namesTable, assignId(LEFT));
projected2 := PROJECT(namesTable, TRANSFORM(namesIdRecord,
              SELF := LEFT));
projected3 := PROJECT(namesTable, TRANSFORM(LEFT));
//projected1, projected2, and projected3 all do the same thing</programlisting><!-- DNT-End -->

    <para>See Also: <link linkend="RECORD_Structure"><!-- DNT-Start -->RECORD<!-- DNT-End --> Structure</link>,
    <link linkend="RECORDOF"><!-- DNT-Start -->RECORDOF<!-- DNT-End --></link>, <link
    linkend="TYPEOF"><!-- DNT-Start -->TYPEOF<!-- DNT-End --></link>, <link linkend="JOIN"><!-- DNT-Start -->JOIN<!-- DNT-End --></link>, <link
    linkend="PROJECT"><!-- DNT-Start -->PROJECT<!-- DNT-End --></link>, <link linkend="ITERATE"><!-- DNT-Start -->ITERATE<!-- DNT-End --></link>,
    <link linkend="ROLLUP"><!-- DNT-Start -->ROLLUP<!-- DNT-End --></link>, <link
    linkend="NORMALIZE"><!-- DNT-Start -->NORMALIZE<!-- DNT-End --></link>, <link
    linkend="DENORMALIZE"><!-- DNT-Start -->DENORMALIZE<!-- DNT-End --></link>, <link
    linkend="FETCH"><!-- DNT-Start -->FETCH<!-- DNT-End --></link>, <link linkend="PARSE"><!-- DNT-Start -->PARSE<!-- DNT-End --></link>, <link
    linkend="ROW"><!-- DNT-Start -->ROW<!-- DNT-End --></link></para>
  </sect2>
</sect1>

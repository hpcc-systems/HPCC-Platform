<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<sect1 id="Basic_Attribute_Types">
  <!-- DNT-Start --><title>Basic Definition Types<indexterm>
      <primary>Definition Types</primary>
    </indexterm></title><!-- DNT-End -->

  <para>The basic types of Definitions used most commonly throughout <!-- DNT-Start -->ECL<!-- DNT-End -->
  coding are: <emphasis role="bold">Boolean</emphasis><indexterm>
      <primary>Boolean</primary>
    </indexterm>, <emphasis role="bold">Value<indexterm>
      <primary>Value</primary>
    </indexterm></emphasis>, <emphasis role="bold">Set<indexterm>
      <primary>Set</primary>
    </indexterm></emphasis>, <emphasis role="bold">Record Set<indexterm>
      <primary>Record Set</primary>
    </indexterm></emphasis>, and <emphasis role="bold">TypeDef<indexterm>
      <primary>TypeDef</primary>
    </indexterm></emphasis>.</para>

  <sect2 id="Boolean_Attributes">
    <!-- DNT-Start --><title>Boolean Definition<indexterm>
        <primary>Boolean Definition</primary>
      </indexterm>s</title><!-- DNT-End -->

    <para>A Boolean Definition is defined as any Definition whose definition
    is a logical expression resulting in a <!-- DNT-Start -->TRUE<!-- DNT-End -->/<!-- DNT-Start -->FALSE<!-- DNT-End --> result. For example, the
    following are all Boolean Definitions:</para>

    <!-- DNT-Start --><programlisting>IsBoolTrue  := TRUE;
IsFloridian := Person.per_st = 'FL';
IsOldPerson := Person.Age &gt;= 65;</programlisting><!-- DNT-End -->
  </sect2>

  <sect2 id="Value_Attributes">
    <!-- DNT-Start --><title>Value Definition<indexterm>
        <primary>Value Definition</primary>
      </indexterm>s</title><!-- DNT-End -->

    <para>A Value Definition is defined as any Definition whose expression is
    an arithmetic or string expression with a single-valued result. For
    example, the following are all Value Definitions:</para>

    <!-- DNT-Start --><programlisting>ValueTrue      := 1;
FloridianCount := COUNT(Person(Person.per_st = 'FL'));
OldAgeSum     := SUM(Person(Person.Age &gt;= 65),Person.Age);</programlisting><!-- DNT-End -->
  </sect2>

  <sect2 id="Set_Attributes">
    <!-- DNT-Start --><title>Set Definitions</title><!-- DNT-End -->

    <para>A Set Definition<indexterm>
        <primary>Set Definition</primary>
      </indexterm> is defined as any Definition whose expression is a set of
    values, defined within square brackets<indexterm>
        <primary>square brackets</primary>
      </indexterm>. Constant set<indexterm>
        <primary>Constant set</primary>
      </indexterm>s are created as a set of explicitly declared constant
    values<indexterm>
        <primary>constant values</primary>
      </indexterm> that must be declared within square brackets, whether that
    set is defined as a separate definition or simply included in-line in
    another expression. All the constants must be of the same type.</para>

    <!-- DNT-Start --><programlisting>SetInts  := [1,2,3,4,5]; // an INTEGER set with 5 elements
SetReals := [1.5,2.0,3.3,4.2,5.0];
            // a REAL set with 5 elements
SetStatusCodes := ['A','B','C','D','E'];
            // a STRING set with 5 elements</programlisting><!-- DNT-End -->

    <para>The elements in any explicitly declared set can also be composed of
    arbitrary expressions. All the expressions must result in the same type
    and must be constant expressions.</para>

    <!-- DNT-Start --><programlisting>SetExp := [1,2+3,45,SomeIntegerDefinition,7*3];
                        // an INTEGER set with 5 elements</programlisting><!-- DNT-End -->

    <para>Declared Sets can contain definitions and expressions<indexterm>
        <primary>Sets can contain definitions and expressions</primary>
      </indexterm> as well as constants as long as all the elements are of the
    same result type. For example:</para>

    <!-- DNT-Start --><programlisting>StateCapitol(STRING2 state) :=
          CASE(state, 'FL' =&gt; 'Tallahassee', 'Unknown');
SetFloridaCities := ['Orlando', StateCapitol('FL'), 'Boca '+'Raton',
          person[1].per_full_city];</programlisting><!-- DNT-End -->

    <para>Set Definition<indexterm>
        <primary>Set Definition</primary>
      </indexterm>s can also be defined using the <!-- DNT-Start -->SET<!-- DNT-End --> function<indexterm>
        <primary><!-- DNT-Start -->SET<!-- DNT-End --> function</primary>
      </indexterm> (which see). Sets defined this way may be used like any
    other set.</para>

    <!-- DNT-Start --><programlisting>SetSomeField := SET(SomeFile, SomeField);
          // a set of SomeField values</programlisting><!-- DNT-End -->

    <para>Sets can also contain datasets for use with those functions (such
    as: <!-- DNT-Start -->MERGE<!-- DNT-End -->, <!-- DNT-Start -->JOIN<!-- DNT-End -->, <!-- DNT-Start -->MERGEJOIN<!-- DNT-End -->, or <!-- DNT-Start -->GRAPH<!-- DNT-End -->) that require sets of datsets as
    input parameters.</para>

    <!-- DNT-Start --><programlisting>SetDS := [ds1, ds2, ds3]; // a set of datasets</programlisting><!-- DNT-End -->
  </sect2>

  <sect2 id="Set_Ordering_and_Indexing">
    <!-- DNT-Start --><title>Set Ordering and Indexing <indexterm>
        <primary>Set Ordering</primary>
      </indexterm><indexterm>
        <primary>Indexing</primary>
      </indexterm></title><!-- DNT-End -->

    <para>Sets are implicitly ordered and you may index into them to access
    individual elements. Square brackets are used to specify the element
    number to access. The first element is number one (1).</para>

    <!-- DNT-Start --><programlisting>MySet := [5,4,3,2,1];
ReverseNum := MySet[2]; //indexing to MySet's element number 2,
                       //so ReverseNum contains the value 4</programlisting><!-- DNT-End -->

    <para>String<indexterm>
        <primary>String</primary>
      </indexterm>s (Character Sets<indexterm>
        <primary>Character Sets</primary>
      </indexterm>) may also be indexed to access individual or multiple
    contiguous elements within the set of characters (a string is treated as
    though it were a set of 1-character strings). An element number within
    square brackets specifies an individual character to extract.</para>

    <!-- DNT-Start --><programlisting>MyString := 'ABCDE';
MySubString := MyString[2]; // MySubString is 'B'</programlisting><!-- DNT-End -->

    <para>Substrings may be extracted by using two periods to separate the
    beginning and ending element numbers within the square brackets to specify
    the substring<indexterm>
        <primary>substring</primary>
      </indexterm> (string slice<indexterm>
        <primary>string slice</primary>
      </indexterm>) to extract. Either the beginning or ending element number
    may be omitted to indicate a substring from the beginning to the specified
    element, or from the specified element through to the end.</para>

    <!-- DNT-Start --><programlisting>MyString := 'ABCDE';
MySubString1 := MyString[2..4]; // MySubString1 is 'BCD'
MySubString2 := MyString[ ..4]; // MySubString2 is 'ABCD'
MySubString3 := MyString[2.. ]; // MySubString3 is 'BCDE'</programlisting><!-- DNT-End -->
  </sect2>

  <sect2 id="Record_Set_Attributes">
    <!-- DNT-Start --><title>Record Set Definitions</title><!-- DNT-End -->

    <para>The term âDatasetâ<indexterm>
        <primary>Dataset</primary>
      </indexterm> in <!-- DNT-Start -->ECL<!-- DNT-End --> explicitly means a âphysicalâ data file in the
    supercomputer (on disk or in memory), while the term âRecord
    Setâ<indexterm>
        <primary>Record Set</primary>
      </indexterm> indicates any set of records derived from a Dataset (or
    another Record Set), usually based on some filter condition to limit the
    result set to a subset of records. Record sets are also created as the
    return result from one of the built-in functions that return result
    sets.</para>

    <para>A Record Set Definition<indexterm>
        <primary>Record Set Definition</primary>
      </indexterm> is defined as any Definition whose expression is a filtered
    dataset or record set, or any function that returns a record set. For
    example, the following are all Record Set Definitions:</para>

    <!-- DNT-Start --><programlisting>FloridaPersons    := Person(Person.per_st = 'FL');
OldFloridaPersons := FloridaPersons(Person.Age &gt;= 65);</programlisting><!-- DNT-End -->
  </sect2>

  <sect2 id="Record_Set_Ordering_and_Indexing">
    <!-- DNT-Start --><title>Record Set Ordering and Indexing</title><!-- DNT-End -->

    <para>All Datasets and Record Sets are implicitly ordered and may be
    indexed to access individual records within the set. Square brackets are
    used to specify the element number to access, and the first element in any
    set is number one (1).</para>

    <para>Datasets (including child datasets) and Record Sets may use the same
    method as described above for strings to access individual or multiple
    contiguous records.</para>

    <!-- DNT-Start --><programlisting>MyRec1 := Person[1];     // first rec in dataset
MyRec2 := Person[1..10]; // first ten recs in dataset
MyRec4 := Person[2..];   // all recs except the first</programlisting><!-- DNT-End -->

    <para><emphasis role="bold">Note:</emphasis> ds[1] and ds[1..1] are not
    the same thingâds[1..1] is a recordset (may be used in recordset context)
    while ds[1] is a single row (may be used to reference single
    fields).</para>

    <para>And you can also access individual fields in a specified record with
    a single index:</para>

    <!-- DNT-Start --><programlisting>MyField := Person[1].per_last_name; // last name in first rec</programlisting><!-- DNT-End -->

    <para>Indexing a record set with a value that is out of bounds is defined
    to return a row where all the fields contain blank/zero values. It is
    often more efficient to index an out of bound value rather than writing
    code that handles the special case of an out of bounds index value.</para>

    <para>For example, the expression:</para>

    <!-- DNT-Start --><programlisting>IF(COUNT(ds) &gt; 0, ds[1].x, 0); </programlisting><!-- DNT-End -->

    <para>is simpler as:</para>

    <!-- DNT-Start --><programlisting>ds[1].x    //note that this returns 0 if ds contains no records.
</programlisting><!-- DNT-End -->

    <para></para>
  </sect2>

  <sect2 id="TypeDef_Attributes">
    <!-- DNT-Start --><title>TypeDef Definitions</title><!-- DNT-End -->

    <para>A TypeDef Definition<indexterm>
        <primary>TypeDef Definition</primary>
      </indexterm> is defined as any Definition whose definition is a value
    type, whether built-in or user-defined. For example, the following are all
    TypeDef Definitions (except GetXLen):</para>

    <!-- DNT-Start --><programlisting>GetXLen(DATA x,UNSIGNED len) := TRANSFER(((DATA4)(x[1..len])),UNSIGNED4);

EXPORT xstring(UNSIGNED len) := TYPE
  EXPORT INTEGER PHYSICALLENGTH(DATA x) := GetXLen(x,len) + len;
  EXPORT STRING LOAD(DATA x) := (STRING)x[(len+1)..GetXLen(x,len) + len];
  EXPORT DATA STORE(STRING x):= TRANSFER(LENGTH(x),DATA4)[1..len] + (DATA)x;
END;

pstr := xstring(1); // typedef for user defined type
pppstr := xstring(3);
nameStr := STRING20; // typedef of a system type

namesRecord := RECORD
  pstr surname;
  nameStr forename;
  pppStr addr;
  
END;
//A RECORD structure is also a typedef definition (user-defined)</programlisting><!-- DNT-End -->
  </sect2>
</sect1>

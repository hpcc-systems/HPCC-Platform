<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<sect1 id="PARSE_Pattern_Value_Types">
  <!-- DNT-Start --><title>PARSE Pattern Value Types</title><!-- DNT-End -->

  <para><emphasis>There are three value types specifically designed and
  required to define parsing pattern attributes:</emphasis></para>

  <para><emphasis role="bold"><!-- DNT-Start -->PATTERN<!-- DNT-End --> </emphasis><indexterm>
      <primary><!-- DNT-Start -->PATTERN<!-- DNT-End --></primary>
    </indexterm><emphasis>patternid </emphasis><emphasis role="bold">:=
  </emphasis><emphasis>parsepattern</emphasis><emphasis
  role="bold">;</emphasis></para>

  <informaltable colsep="1" frame="all" rowsep="1">
    <tgroup cols="2">
      <colspec align="left" colwidth="122.40pt" />

      <colspec />

      <tbody>
        <row>
          <entry><!-- DNT-Start --><emphasis>patternid</emphasis><!-- DNT-End --></entry>

          <entry>The attribute name of the pattern.</entry>
        </row>

        <row>
          <entry><!-- DNT-Start --><emphasis>parsepattern</emphasis><!-- DNT-End --></entry>

          <entry>The pattern, very similar to regular expressions. This may
          contain other previously defined <!-- DNT-Start -->PATTERN<!-- DNT-End --> attributes. See <emphasis
          role="bold">ParsePattern Definitions</emphasis> below.</entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>

  <para>The <emphasis role="bold"><!-- DNT-Start -->PATTERN<!-- DNT-End --> </emphasis>value type defines a
  parsing expression very similar to regular expression<indexterm>
      <primary>regular expression</primary>
    </indexterm> patterns.</para>

  <para><emphasis role="bold"><!-- DNT-Start -->TOKEN<!-- DNT-End --> </emphasis><indexterm>
      <primary><!-- DNT-Start -->TOKEN<!-- DNT-End --></primary>
    </indexterm><emphasis>tokenid </emphasis><emphasis role="bold">:=
  </emphasis><emphasis>parsepattern</emphasis><emphasis
  role="bold">;</emphasis></para>

  <informaltable colsep="1" frame="all" rowsep="1">
    <tgroup cols="2">
      <colspec align="left" colwidth="122.40pt" />

      <colspec />

      <tbody>
        <row>
          <entry><!-- DNT-Start --><emphasis>tokenid</emphasis><!-- DNT-End --></entry>

          <entry>The attribute name of the token.</entry>
        </row>

        <row>
          <entry><!-- DNT-Start --><emphasis>parsepattern</emphasis><!-- DNT-End --></entry>

          <entry>The token pattern, very similar to regular expressions. This
          may contain <!-- DNT-Start -->PATTERN<!-- DNT-End --> attributes but no <!-- DNT-Start -->TOKEN<!-- DNT-End --> or <!-- DNT-Start -->RULE<!-- DNT-End --> attributes. See
          <emphasis role="bold">ParsePattern Definitions</emphasis>
          below.</entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>

  <para>The <emphasis role="bold"><!-- DNT-Start -->TOKEN<!-- DNT-End --> </emphasis>value type defines a
  parsing expression very similar to a <!-- DNT-Start -->PATTERN<!-- DNT-End -->, but once matched, the parser
  doesnât backtrack to find alternative matches as it would with
  <!-- DNT-Start -->PATTERN<!-- DNT-End -->.</para>

  <para><emphasis role="bold"><!-- DNT-Start -->RULE<!-- DNT-End --> </emphasis><indexterm>
      <primary><!-- DNT-Start -->RULE<!-- DNT-End --></primary>
    </indexterm><emphasis> </emphasis><emphasis role="bold">[
  (</emphasis><emphasis> recstruct </emphasis><emphasis role="bold">)
  ]</emphasis><emphasis> ruleid </emphasis><emphasis role="bold">:=
  </emphasis><emphasis>rulePattern</emphasis><emphasis
  role="bold">;</emphasis></para>

  <informaltable colsep="1" frame="all" rowsep="1">
    <tgroup cols="2">
      <colspec align="left" colwidth="122.40pt" />

      <colspec />

      <tbody>
        <row>
          <entry><!-- DNT-Start --><emphasis>recstruct</emphasis><!-- DNT-End --></entry>

          <entry>Optional. The attribute name of a <!-- DNT-Start -->RECORD<!-- DNT-End --> structure attribute
          (valid only when the <!-- DNT-Start -->PARSE<!-- DNT-End --> option is used on the <!-- DNT-Start -->PARSE<!-- DNT-End -->
          function).</entry>
        </row>

        <row>
          <entry><!-- DNT-Start --><emphasis>ruleid</emphasis><!-- DNT-End --></entry>

          <entry>The attribute name of the rule.</entry>
        </row>

        <row>
          <entry><!-- DNT-Start --><emphasis>rulePattern</emphasis><!-- DNT-End --></entry>

          <entry>The rule pattern, very similar to regular expressions. This
          may contain <!-- DNT-Start -->PATTERN<!-- DNT-End --> attributes, <!-- DNT-Start -->TOKEN<!-- DNT-End --> attributes, or <!-- DNT-Start -->RULE<!-- DNT-End -->
          attributes. See <emphasis role="bold">ParsePattern
          Definitions</emphasis> below.</entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>

  <para>The <emphasis role="bold"><!-- DNT-Start -->RULE<!-- DNT-End --> </emphasis>value type defines a parsing
  expression containing combinations of <!-- DNT-Start -->TOKENs<!-- DNT-End -->. If a <!-- DNT-Start -->RULE<!-- DNT-End --> definition contains
  a <!-- DNT-Start -->PATTERN<!-- DNT-End --> it is implicitly converted to a <!-- DNT-Start -->TOKEN<!-- DNT-End -->. Like <!-- DNT-Start -->PATTERN<!-- DNT-End -->, once matched,
  the parser backtracks to find alternative <!-- DNT-Start -->RULE<!-- DNT-End --> matches.</para>

  <para>If the <!-- DNT-Start -->PARSE<!-- DNT-End --> option is present on the <!-- DNT-Start -->PARSE<!-- DNT-End --> function (thereby
  implementing tomita parsing for the operation), each alternative <!-- DNT-Start -->RULE<!-- DNT-End -->
  <emphasis>rulePattern</emphasis> may have an associated <!-- DNT-Start -->TRANSFORM<!-- DNT-End --> function.
  The different input patterns can be referred to using $1, $2 etc. If the
  pattern has an associated <emphasis>recstruct</emphasis> then $1 is a row,
  otherwise it is a string. Default <!-- DNT-Start -->TRANSFORM<!-- DNT-End --> functions are created in two
  circumstances:</para>

  <blockquote>
    <para>1. If there are no patterns, the default transform clears the row.
    For example:</para>

    <!-- DNT-Start --><programlisting>RULE(myRecord) := ; //empty expression = cleared row</programlisting><!-- DNT-End -->

    <para>2. If there is only a single pattern with an associated record, and
    that record matches the type of the rule being defined. For
    example:</para>

    <!-- DNT-Start --><programlisting>RULE(myRecord) e0 := '(' USE(myRecord, 'expression') ')';</programlisting><!-- DNT-End -->
  </blockquote>

  <sect2 id="ParsePattern_Definitions">
    <!-- DNT-Start --><title>ParsePattern Definitions</title><!-- DNT-End -->

    <!-- DNT-Start --><para>A <emphasis>parsepattern </emphasis>may contain any combination of
    the following elements:</para><!-- DNT-End -->

    <informaltable colsep="1" frame="all" rowsep="1">
      <tgroup cols="2">
        <colspec align="left" colwidth="125.50pt" />

        <colspec />

        <tbody>
          <row>
            <entry><!-- DNT-Start --><emphasis>pattern-name</emphasis><!-- DNT-End --></entry>

            <entry>The name of any previously defined <!-- DNT-Start -->PATTERN<!-- DNT-End -->
            attribute.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start -->(<emphasis>pattern</emphasis>)<!-- DNT-End --></entry>

            <entry>Parentheses may be used for grouping.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis>pattern1 pattern2</emphasis><!-- DNT-End --></entry>

            <entry><emphasis>Pattern1</emphasis> followed by
            <emphasis>pattern2</emphasis>.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start -->'<emphasis>string</emphasis>'<!-- DNT-End --></entry>

            <entry>A fixed text <emphasis>string, </emphasis>which may contain
            escaped octal string control characters (for example, CtrlZ is
            â\032â).</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis role="bold">FIRST</emphasis><!-- DNT-End --></entry>

            <entry>Matches the start of the string to search. This is similar
            to the regular expression ^ token, which is <emphasis
            role="underline">not</emphasis> supported.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis role="bold">LAST</emphasis><!-- DNT-End --></entry>

            <entry>Matches the end of the string to search. This is similar to
            the regular expression $ token, which is <emphasis
            role="underline">not</emphasis> supported.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis role="bold">ANY</emphasis><!-- DNT-End --></entry>

            <entry>Matches any character.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis
            role="bold">REPEAT</emphasis>(<emphasis>pattern</emphasis>)<!-- DNT-End --></entry>

            <entry>Repeat the <emphasis>pattern</emphasis> any number of
            times. The regular expression syntax <emphasis>pattern</emphasis>*
            is supported as a shorthand for
            <!-- DNT-Start -->REPEAT<!-- DNT-End -->(<emphasis>pattern</emphasis>).</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis
            role="bold">REPEAT</emphasis>(<emphasis>pattern</emphasis>,<emphasis>
            expression</emphasis>)<!-- DNT-End --></entry>

            <entry>Repeat the <emphasis>pattern expression</emphasis> times.
            The regular expression syntax
            <emphasis>pattern</emphasis>*&lt;count&gt; is supported as a
            shorthand for
            <!-- DNT-Start -->REPEAT<!-- DNT-End -->(<emphasis>pattern</emphasis>,<emphasis>expression</emphasis>),
            but the regular expression bounded repeats syntax
            <emphasis>pattern</emphasis>{<emphasis>expression</emphasis>} is
            <emphasis role="underline">not</emphasis>.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis
            role="bold">REPEAT</emphasis>(<emphasis>pattern</emphasis>,<emphasis>
            low</emphasis>, ANY [,MIN])<!-- DNT-End --></entry>

            <entry>Repeat the <emphasis>pattern</emphasis>
            <emphasis>low</emphasis> or more times (with the <!-- DNT-Start -->MIN<!-- DNT-End --> option making
            it a minimal match). The regular expression syntax
            <emphasis>pattern</emphasis>+ is supported as a shorthand for
            <!-- DNT-Start -->REPEAT<!-- DNT-End -->(<emphasis>pattern</emphasis>,<emphasis>low</emphasis>,<!-- DNT-Start -->ANY<!-- DNT-End -->),
            but the regular expression bounded repeats syntax
            <emphasis>pattern</emphasis>{<emphasis>expression ,</emphasis>} is
            <emphasis role="underline">not</emphasis>.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis
            role="bold">REPEAT</emphasis>(<emphasis>pattern</emphasis>,<emphasis>
            low</emphasis>,<emphasis> high</emphasis>)<!-- DNT-End --></entry>

            <entry>Repeat the <emphasis>pattern</emphasis> from <emphasis>low
            </emphasis>to <emphasis>high </emphasis>times. The regular
            expression bounded repeats syntax
            <emphasis>pattern</emphasis>{<emphasis>low</emphasis>,<emphasis>high</emphasis>}
            is <emphasis role="underline">not</emphasis> supported.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis
            role="bold">OPT</emphasis>(<emphasis>pattern</emphasis>)<!-- DNT-End --></entry>

            <entry>An optional <emphasis>pattern</emphasis>. The regular
            expression syntax <emphasis>pattern</emphasis>? is supported as a
            shorthand for <!-- DNT-Start -->OPT<!-- DNT-End -->(<emphasis>pattern</emphasis>).</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis>pattern1</emphasis> <emphasis
            role="bold">OR</emphasis> <emphasis>pattern2</emphasis><!-- DNT-End --></entry>

            <entry>Either <emphasis>pattern1</emphasis> or
            <emphasis>pattern2</emphasis>. The regular expression syntax
            <emphasis>pattern1</emphasis> | <emphasis>pattern2</emphasis> is
            supported as a shorthand for <!-- DNT-Start -->OR<!-- DNT-End -->.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start -->[<emphasis>list-of-patterns</emphasis>]<!-- DNT-End --></entry>

            <entry>A comma-delimited list of alternative
            <emphasis>patterns</emphasis>, useful for string sets. This is the
            same as <!-- DNT-Start -->OR<!-- DNT-End -->.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis>pattern1</emphasis> <emphasis role="bold">[NOT]
            IN</emphasis> <emphasis>pattern2</emphasis><!-- DNT-End --></entry>

            <entry>Does the text matched with <emphasis>pattern1</emphasis>
            also match <emphasis>pattern2</emphasis>?
            <emphasis>Pattern1</emphasis> [<!-- DNT-Start -->NOT<!-- DNT-End -->] =
            <emphasis>pattern2</emphasis> and <emphasis>pattern1</emphasis> !=
            <emphasis>pattern2 </emphasis>are the same as using <!-- DNT-Start -->IN<!-- DNT-End -->, but may
            make more sense in some situations.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis>pattern1</emphasis> <emphasis role="bold">[NOT]
            BEFORE</emphasis> <emphasis>pattern2</emphasis><!-- DNT-End --></entry>

            <entry>Check if the given <emphasis>pattern2</emphasis> does [not]
            follow <emphasis>pattern1</emphasis>.
            <emphasis>Pattern2</emphasis> is not consumed from the
            input.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis>pattern1</emphasis> <emphasis role="bold">[NOT]
            AFTER</emphasis> <emphasis>pattern2</emphasis><!-- DNT-End --></entry>

            <entry>Check if the given <emphasis>pattern2</emphasis> does [not]
            precede <emphasis>pattern1</emphasis>.
            <emphasis>Pattern2</emphasis> does not consume any input. It must
            also be a fixed length.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis>pattern</emphasis> <emphasis
            role="bold">LENGTH</emphasis>(<emphasis>range</emphasis>)<!-- DNT-End --></entry>

            <entry>Check whether the length of a <emphasis>pattern</emphasis>
            is in the <emphasis>range</emphasis>. <emphasis>Range
            </emphasis>can have the form
            &lt;value&gt;,&lt;min&gt;..&lt;max&gt;,&lt;min&gt;.. or
            ..&lt;max&gt; So âdigit*3 <!-- DNT-Start -->NOT<!-- DNT-End --> <!-- DNT-Start -->BEFORE<!-- DNT-End --> digitâ could be represented
            as âdigit* <!-- DNT-Start -->LENGTH<!-- DNT-End -->(3).â This is more efficient, and digit* can be
            defined as a token. âdigit* <!-- DNT-Start -->LENGTH<!-- DNT-End -->(4..6)â matches 4,5 and 6 digit
            sequences.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis
            role="bold">VALIDATE</emphasis>(<emphasis>pattern</emphasis>,
            <emphasis>isValidExpression</emphasis>)<!-- DNT-End --></entry>

            <entry>Evaluate <emphasis>isValidExpression </emphasis>to check if
            the <emphasis>pattern</emphasis> is valid or not.
            <emphasis>isValidExpression </emphasis>should use <!-- DNT-Start -->MATCHTEXT<!-- DNT-End --> or
            <!-- DNT-Start -->MATCHUNICODE<!-- DNT-End --> to refer to the text that matched the
            <emphasis>pattern</emphasis>. For example, <!-- DNT-Start -->VALIDATE<!-- DNT-End -->(alpha*,
            <!-- DNT-Start -->MATCHTEXT<!-- DNT-End -->[4]=âQâ) is equivalent to alpha* = <!-- DNT-Start -->ANY<!-- DNT-End -->*3 âQâ <!-- DNT-Start -->ANY<!-- DNT-End -->* or more
            usefully: <!-- DNT-Start -->VALIDATE<!-- DNT-End -->(alpha*,isSurnameService(<!-- DNT-Start -->MATCHTEXT<!-- DNT-End -->));</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis
            role="bold">VALIDATE</emphasis>(<emphasis>pattern</emphasis>,
            <emphasis>isValidAsciiExpression</emphasis>,
            <emphasis>isValidUnicodeExpression</emphasis>)<!-- DNT-End --></entry>

            <entry>A two parameter variant. Use the first
            <emphasis>isValidAsciiExpression</emphasis> if the string being
            searched is <!-- DNT-Start -->ASCII<!-- DNT-End -->; use the second if it is Unicode.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis
            role="bold">NOCASE</emphasis>(<emphasis>pattern</emphasis>)<!-- DNT-End --></entry>

            <entry>Matches the <emphasis>pattern</emphasis> case
            insensitively, overriding the <!-- DNT-Start -->CASE<!-- DNT-End --> option on the <!-- DNT-Start -->PARSE<!-- DNT-End --> function.
            This may be nested within a <!-- DNT-Start -->CASE<!-- DNT-End --> pattern.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis
            role="bold">CASE</emphasis>(<emphasis>pattern</emphasis>)<!-- DNT-End --></entry>

            <entry>Matches the <emphasis>pattern</emphasis> case sensitively,
            overriding the <!-- DNT-Start -->NOCASE<!-- DNT-End --> option on the <!-- DNT-Start -->PARSE<!-- DNT-End --> function. This may be
            nested within a <!-- DNT-Start -->NOCASE<!-- DNT-End --> pattern.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis>pattern</emphasis> <emphasis
            role="bold">PENALTY</emphasis>(<emphasis>cost</emphasis>)<!-- DNT-End --></entry>

            <entry>Associate a penalty <emphasis>cost</emphasis> with this
            match of the <emphasis>pattern</emphasis>. This can be used to
            recover from grammars with unknown words. This requires use of the
            <!-- DNT-Start -->BEST<!-- DNT-End --> option on the <!-- DNT-Start -->PARSE<!-- DNT-End --> operation.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis
            role="bold">TOKEN</emphasis>(<emphasis>pattern</emphasis>)<!-- DNT-End --></entry>

            <entry>Treat the <emphasis>pattern </emphasis>as a token.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis role="bold">PATTERN</emphasis>('<emphasis>regular
            expression</emphasis>')<!-- DNT-End --></entry>

            <entry><programlisting role="tab">Define a pattern using a <emphasis>regular expression </emphasis>built from
the following supported syntax elements:
 (x)                Grouping (not used for matching)
 x|y                Alteratives x or y
 xy                 Concatenation of x and y.
 x* x*?           Zero or more. Greedy and minimal versions.
 x+ x+?           One or more. Greedy and minimal versions.
 x? x??            Zero or one. Greedy and minimal versions.
 x{m} x{m,} x{m,n}   Bounded repeats, also minimal versions
 [0-9abcdef]    A set of characters
                        (may use ^ for exclusion list)
 (?=â¦) (?!...)     Look ahead assertion
 (?&lt;=â¦) (?&lt;!...)   Look behind assertion

Escape sequences can be used to define <!-- DNT-Start -->UNICODE<!-- DNT-End --> Character ranges. 
The encoding is <!-- DNT-Start -->UTF<!-- DNT-End -->-16 Big Endian.  
For example:
<!-- DNT-Start -->PATTERN<!-- DNT-End --> AnyChar    := <!-- DNT-Start -->PATTERN<!-- DNT-End -->(U'[\u0001-\u7fff]');
</programlisting><!--*** Note this and the following row entries have been monospace optimized for PDF/HTML*** --></entry>
          </row>

          <row>
            <entry></entry>

            <entry><programlisting role="tab">The following character class expressions are supported
(inside sets):
[:alnum:]  [:cntrl:]  [:lower:]  [:upper:]  [:space:]
[:alpha:]  [:digit:]  [:print:]  [:blank:]  [:graph:]
[:punct:]  [:xdigit:]</programlisting></entry>
          </row>

          <row>
            <entry></entry>

            <entry><programlisting role="tab"><emphasis>Regular expressions</emphasis> do <emphasis
                  role="underline">not</emphasis> support:
    ^ $ to mark the beginning/end of the string 
    Collating symbols      [.ch.] 
    Equivalence<indexterm>
                  <primary>Equivalence</primary>
                </indexterm> class       [=e=]</programlisting></entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis role="bold">USE</emphasis>(<emphasis>
            </emphasis><emphasis role="bold">[</emphasis><emphasis> recstruct
            , </emphasis><emphasis role="bold">]
            </emphasis>'<emphasis>symbolname</emphasis>' )<!-- DNT-End --></entry>

            <entry>Specifies using a pattern defined later with the
            <!-- DNT-Start -->DEFINE<!-- DNT-End -->(<emphasis role="bold">
            </emphasis>'<emphasis>symbolname</emphasis>') function. This
            creates a forward reference<indexterm>
                <primary>forward reference</primary>
              </indexterm>, practical only on <!-- DNT-Start -->RULE<!-- DNT-End --> patterns for tomita parsing
            (the <!-- DNT-Start -->PARSE<!-- DNT-End --> option is present on the <!-- DNT-Start -->PARSE<!-- DNT-End --> function).</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis role="bold">SELF </emphasis><!-- DNT-End --></entry>

            <entry>References the pattern being defined (recursive). This is
            practical only in <!-- DNT-Start -->RULE<!-- DNT-End --> patterns for tomita parsing (the <!-- DNT-Start -->PARSE<!-- DNT-End -->
            option is present on the <!-- DNT-Start -->PARSE<!-- DNT-End --> function).</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>Examples:</para>

    <!-- DNT-Start --><programlisting>rs := RECORD
STRING100 line;
END;
ds := DATASET([{'the fox; and the hen'}], rs);


PATTERN ws := PATTERN('[ \t\r\n]');
PATTERN Alpha := PATTERN('[A-Za-z]');
PATTERN Word := Alpha+;
PATTERN Article := ['the', 'A'];
PATTERN JustAWord := Word PENALTY(1);
PATTERN notHen := VALIDATE(Word, MATCHTEXT != 'hen');
PATTERN NoHenWord := notHen PENALTY(1);
RULE NounPhraseComponent1 := JustAWord | Article ws Word;
RULE NounPhraseComponent2 := NoHenWord | Article ws Word;
ps1 := RECORD
          out1 := MATCHTEXT(NounPhraseComponent1);
END;

ps2 := RECORD
          out2 := MATCHTEXT(NounPhraseComponent2);
END;

p1 := PARSE(ds, line, NounPhraseComponent1, ps1, BEST, MANY, NOCASE);
p2 := PARSE(ds, line, NounPhraseComponent2, ps2, BEST, MANY, NOCASE);
OUTPUT(p1);
OUTPUT(p2);</programlisting><!-- DNT-End -->

    <para>See Also: <link linkend="PARSE"><!-- DNT-Start -->PARSE<!-- DNT-End --></link>, <link
    linkend="RECORD_Structure"><!-- DNT-Start -->RECORD<!-- DNT-End --> Structure</link>, <link
    linkend="TRANSFORM_Structure"><!-- DNT-Start -->TRANSFORM<!-- DNT-End --> Structure</link>, <link
    linkend="DATASET"><!-- DNT-Start -->DATASET<!-- DNT-End --></link></para>
  </sect2>
</sect1>

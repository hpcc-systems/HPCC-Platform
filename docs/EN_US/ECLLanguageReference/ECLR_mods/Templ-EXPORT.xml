<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<sect1 id="_EXPORT">
  <!-- DNT-Start --><title>#EXPORT</title><!-- DNT-End -->

  <para><emphasis role="bold">#<!-- DNT-Start -->EXPORT<!-- DNT-End -->( </emphasis><emphasis>symbol,
  data</emphasis> <emphasis role="bold">);</emphasis></para>

  <para><informaltable colsep="1" frame="all" rowsep="1">
      <tgroup cols="2">
        <colspec colwidth="76.35pt" />

        <colspec colwidth="276.45pt" />

        <tbody>
          <row>
            <entry><!-- DNT-Start --><emphasis>symbol</emphasis><!-- DNT-End --></entry>

            <entry>The name of a previously declared template
            variable.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis>data</emphasis><!-- DNT-End --></entry>

            <entry>The name of a field, <!-- DNT-Start -->RECORD<!-- DNT-End --> structure, or dataset.</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable></para>

  <para>The <emphasis role="bold">#<!-- DNT-Start -->EXPORT<!-- DNT-End --> </emphasis><indexterm>
      <primary>#<!-- DNT-Start -->EXPORT<!-- DNT-End --></primary>
    </indexterm>statement produces <!-- DNT-Start -->XML<!-- DNT-End --> text from the specified
  <emphasis>data</emphasis> and places it in the <emphasis>symbol</emphasis>.
  This allows the <!-- DNT-Start -->LOADXML<!-- DNT-End -->(symbol,name) form to instantiate an <!-- DNT-Start -->XML<!-- DNT-End --> scope on the
  information from the <emphasis>data</emphasis> to process.</para>

  <para>The <!-- DNT-Start -->XML<!-- DNT-End --> output is generated with the following format:</para>

  <!-- DNT-Start --><programlisting>  &lt;Data&gt;
    &lt;Field label="&lt;label-of-field&gt;"
           name="&lt;name-of-field&gt;"
           position="&lt;n&gt;"
           rawtype="&lt;n&gt;"
           size="&lt;n&gt;"
           type="&lt;ecl-type-without-size&gt;" /&gt;
    ...
  &lt;/Data&gt;
</programlisting><!-- DNT-End -->

  <para><!-- DNT-Start -->IFBLOCKs<!-- DNT-End --> are simply expanded out in the <!-- DNT-Start -->XML<!-- DNT-End -->. Nested <!-- DNT-Start -->RECORD<!-- DNT-End --> types have
  an isRecord attribute that is set to 1, and are followed by the fields they
  contain, and then a Field tag with no name and the isEnd attribute set to 1.
  This representation is used rather than nested objects so it can be
  processed by a #<!-- DNT-Start -->FOR<!-- DNT-End --> statement. Child dataset types are also expanded out in
  a similar way, and have an isDataset attribute set to 1 on the field.</para>

  <para>Example:</para>

  <!-- DNT-Start --><programlisting>  NamesRecord := RECORD
    STRING10 first;
    STRING20 last;
  END;
  r := RECORD
    UNSIGNED4 dg_parentid;
    STRING10 dg_firstname;
    STRING dg_lastname;
    UNSIGNED1 dg_prange;
    IFBLOCK(SELF.dg_prange % 2 = 0)
      STRING20 extrafield;
    END;
    NamesRecord namerec;
    DATASET(NamesRecord) childNames;
  END;
  
  ds := DATASET('~RTTEST::OUT::ds', r, thor);
  
  #DECLARE(out);
  #EXPORT(out, r);
  OUTPUT(%'out'%);
  /* produces this result:
  &lt;Data&gt;
    &lt;Field label="DG_ParentID"
        name="DG_ParentID"
        position="0"
        rawtype="262401"
        size="4"
        type="unsigned integer"/&gt;
    &lt;Field label="DG_firstname"
        name="DG_firstname"
        position="1"
        rawtype="655364"
        size="10"
        type="string"/&gt;
    &lt;Field label="DG_lastname"
        name="DG_lastname"
        position="2"
        rawtype="-983036"
        size="-15"
        type="string"/&gt;
    &lt;Field label="DG_Prange"
        name="DG_Prange"
        position="3"
        rawtype="65793"
        size="1"
        type="unsigned integer"/&gt;
    &lt;Field label="ExtraField"
        name="ExtraField"
        position="4"
        rawtype="1310724"
        size="20"
        type="string"/&gt;
    &lt;Field isRecord="1"
        label="namerec"
        name="namerec"
        position="5"
        rawtype="13"
        size="30"
        type="namesRecord"/&gt;
    &lt;Field label="first"
        name="first"
        position="6"
        rawtype="655364"
        size="10"
        type="string"/&gt;
    &lt;Field label="last"
        name="last"
        position="7"
        rawtype="1310724"
        size="20"
        type="string"/&gt;
    &lt;Field isEnd="1" name="namerec"/&gt;
    &lt;Field isDataset="1"
        label="childNames"
        name="childNames"
        position="8"
        rawtype="-983020"
        size="30"
        type="table of &amp;lt;unnamed&amp;gt;"/&gt;
    &lt;Field label="first"
        name="first"
        position="9"
        rawtype="655364"
        size="10"
        type="string"/&gt;
    &lt;Field label="last"
        name="last"
        position="10"
        rawtype="1310724"
        size="20"
        type="string"/&gt;
    &lt;Field isEnd="1" name="childNames"/&gt;
  &lt;/Data&gt;
  */
  
  //which you can then process ;ike this:
  LOADXML(%'out'%, 'Fred');
  #FOR (Fred)
   #FOR (Field)
    #IF (%'{@isEnd}'% &lt;&gt; '')
  OUTPUT('END');
    #ELSE
  OUTPUT(%'{@type}'%
    #IF (%'{@size}'% &lt;&gt; '-15' AND
         %'{@isRecord}'%='' AND
         %'{@isDataset}'%='')
  + %'{@size}'%
     #END
  + ' ' + %'{@label}'% + ';');
    #END
   #END
  #END
  OUTPUT('Done');
</programlisting><!-- DNT-End -->

  <para>See Also: <link linkend="LOADXML"><!-- DNT-Start -->LOADXML<!-- DNT-End --></link>, <link
  linkend="_EXPORTXML">#<!-- DNT-Start -->EXPORTXML<!-- DNT-End --></link>, <link
  linkend="_DECLARE">#<!-- DNT-Start -->DECLARE<!-- DNT-End --></link></para>
</sect1>

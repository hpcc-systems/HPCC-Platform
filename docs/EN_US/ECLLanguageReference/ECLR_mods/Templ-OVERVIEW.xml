<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<sect1 id="Template_Language_Overview" role="nobrk">
  <title>Template Language<indexterm>
      <primary>Template Language</primary>
    </indexterm> Overview</title>

  <para>ECL was created to be the programming language for all of our HPCC
  technology. Therefore, it must be able to meet all the demands of a complete
  business solution: from data ingest, through querying and processing, and
  all the way to fulfillment and customer output.</para>

  <para>In most every business solution that we create, the end-users will be
  using some kind of a custom Graphical User Interface (GUI) application
  specific to their business (typically created for them by us) to specify
  their queries into the data and set up processing jobs for the
  supercomputer. These custom GUI applications can generate for the user the
  ECL that will actually perform the query or process. The task of generating
  that ECL can be daunting if approached through a hard-coding perspective
  when you consider the exponential curve of all possible sets of choices the
  user could make in any moderately-complex system, and as the system grows
  more complex the problem becomes even worse. That means that a hard-coding
  solution is out of the question.</para>

  <para>ECL's Template language provides the solution to this problem. The
  Template language is a Meta-language that takes standard XML input,
  typically generated from an end-user GUI application (thereby vastly
  simplifying the coding problem in the GUI) and in turn generating the
  appropriate ECL code to implement the user's choices.</para>

  <sect2 id="Template_Language_Statements">
    <title>Template Language Statements</title>

    <para>Template Language statements all begin with # to clearly
    differentiate them from the ECL code that will be generated by the
    template. Most statements take parameters that determine their specific
    action in each instance.</para>

    <para>The required statement terminator is the semi-colon (just as in ECL)
    and there are multi-line structures that terminate with the #END
    statement. These structures may be nested within each other.</para>
  </sect2>

  <sect2 id="Template_Symbols">
    <title>Template Symbols</title>

    <para>Template Language uses user-defined symbols as variables. These
    symbols must be explicitly declared before use (see #DECLARE). <emphasis
    role="bold">The tag names in the XML text being processed are also treated
    like user-defined symbols.</emphasis></para>

    <para>A user-defined symbol or XML tag is referenced by surrounding the
    name of the symbol or tag with percent signs. An XML tag used as a
    template <emphasis>symbol</emphasis> may be a simple tag name, or an xpath
    to the XML data to retrieve (see the RECORD structure documentation for a
    description of the supported xpath syntax). If an xpath is used, then the
    <emphasis>symbol</emphasis> used must be the full xpath to the data
    expressed inside curly braces ({}). This syntax takes several
    forms:</para>

    <para><informaltable colsep="1" frame="all" rowsep="1">
        <tgroup cols="2">
          <colspec colwidth="147.60pt" />

          <colspec colwidth="285.30pt" />

          <tbody>
            <row>
              <entry><emphasis>%symbol%</emphasis></entry>

              <entry>returns the value of the symbol</entry>
            </row>

            <row>
              <entry><emphasis>%'symbol'%.</emphasis></entry>

              <entry>returns value of the symbol as a string</entry>
            </row>

            <row>
              <entry><emphasis>%'' %</emphasis></entry>

              <entry>(an empty string) returns the contents of the current XML
              tag</entry>
            </row>

            <row>
              <entry><emphasis>%{xpath}%</emphasis></entry>

              <entry>returns the value of the data pointed to by the
              xpath</entry>
            </row>

            <row>
              <entry><emphasis>%'{xpath}'%.</emphasis></entry>

              <entry>returns value of the data pointed to by the xpath as a
              string</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable></para>
  </sect2>
</sect1>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<sect1 id="IMPORT_function">
  <title>IMPORT</title>

  <para><emphasis>resulttype funcname</emphasis> <emphasis
  role="bold">(</emphasis> <emphasis>parameterlist</emphasis> <emphasis
  role="bold">) := IMPORT(</emphasis> <emphasis>language, function</emphasis>
  <emphasis role="bold">[:TIME</emphasis>
  [(<emphasis>label</emphasis>)]<emphasis role="bold"> ]</emphasis><emphasis
  role="bold">)</emphasis>;</para>

  <informaltable colsep="1" frame="all" rowsep="1">
    <tgroup cols="2">
      <colspec colwidth="110"/>

      <tbody>
        <row>
          <entry><emphasis>resulttype</emphasis></entry>

          <entry>The ECL return value type of the
          <emphasis>function</emphasis>.</entry>
        </row>

        <row>
          <entry><emphasis>funcname</emphasis></entry>

          <entry><para>The ECL definition name of the
          <emphasis>function</emphasis>.</para></entry>
        </row>

        <row>
          <entry><emphasis>parameterlist</emphasis></entry>

          <entry>A comma separated list of the parameters to pass to the
          <emphasis>function</emphasis>.</entry>
        </row>

        <row>
          <entry><emphasis>language</emphasis></entry>

          <entry>Specifies the name of the external programming language whose
          code you wish to embed in your ECL. A language support module for
          that language must have been installed in your plugins directory.
          Modules are provided for languages such as Java and Python. You can
          write your own pluggable language support module for any language
          not already supported by using the supplied ones as examples or
          starting points.</entry>
        </row>

        <row>
          <entry><emphasis>function</emphasis></entry>

          <entry>A string constant containing the name of the function to
          include.</entry>
        </row>

        <row>
          <entry><emphasis role="bold">TIME</emphasis></entry>

          <entry>Tracks timing of an external function call or embedded source
          code and reports them back as metrics to the user.</entry>
        </row>

        <row>
          <entry><emphasis>label</emphasis></entry>

          <entry>Optional. A string constant containing the name to associate
          with the timer. If omitted, the default is used.</entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>

  <para>The <emphasis role="bold">IMPORT</emphasis> declaration allows you to
  call existing code written in the external <emphasis>language</emphasis>.
  Java code must be placed in a .java file and compiled using the javac
  compiler in the usual way. All Java classes used must be thread safe.</para>

  <para><emphasis role="bold">WARNING: This feature could create memory
  corruption and/or security issues, so great care and forethought are
  advised--consult with Technical Support before using.</emphasis></para>

  <para>Example:</para>

  <programlisting lang="mixed" role="NOTrunnable">IMPORT JAVA;
INTEGER jadd(INTEGER a, INTEGER b) := IMPORT(java, 'JavaCat.add:(II)I': TIME('MyTime'));
jadd (22,23);
</programlisting>

  <para>See Also: <link linkend="IMPORT">IMPORT</link>, <link
  linkend="EMBED_Structure">EMBED Structure</link></para>
</sect1>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<sect1 id="INTERFACE_Structure">
  <!-- DNT-Start --><title>INTERFACE Structure<indexterm>
      <primary>INTERFACE Structure</primary>
    </indexterm></title><!-- DNT-End -->

  <para><emphasis>interfacename </emphasis><emphasis role="bold">[
  (</emphasis><emphasis> parameters </emphasis><emphasis role="bold">) ] :=
  <!-- DNT-Start -->INTERFACE<!-- DNT-End --><indexterm>
      <primary><!-- DNT-Start -->INTERFACE<!-- DNT-End --></primary>
    </indexterm> [ (</emphasis><emphasis> inherit </emphasis><emphasis
  role="bold">) ]</emphasis><emphasis role="bold"> </emphasis></para>

  <para><emphasis>members;</emphasis></para>

  <para><emphasis role="bold"><!-- DNT-Start -->END<!-- DNT-End -->;</emphasis></para>

  <informaltable colsep="1" frame="all" rowsep="1">
    <tgroup cols="2">
      <colspec align="left" colwidth="122.40pt" />

      <colspec />

      <tbody>
        <row>
          <entry><!-- DNT-Start --><emphasis>interfacename</emphasis><!-- DNT-End --></entry>

          <entry>The <!-- DNT-Start -->ECL<!-- DNT-End --> definition name of the interface.</entry>
        </row>

        <row>
          <entry><!-- DNT-Start --><emphasis>parameters</emphasis><!-- DNT-End --></entry>

          <entry><para>Optional. The input parameters to the
          interface.</para></entry>
        </row>

        <row>
          <entry><!-- DNT-Start --><emphasis>inherit</emphasis><!-- DNT-End --></entry>

          <entry>Optional. A comma-delimited list of <!-- DNT-Start -->INTERFACE<!-- DNT-End --> structures
          whose <emphasis>members</emphasis> to inherit. This may not be a
          passed parameter. Multiple <emphasis>inherited</emphasis> interfaces
          may contain attributes with the same name if they are the same type
          and receive the same parameters, but if those
          <emphasis>inherited</emphasis> <emphasis>members</emphasis> have
          different values defined for them, the conflict must be resolved by
          overriding that <emphasis>member</emphasis> in the current
          instance.</entry>
        </row>

        <row>
          <entry><!-- DNT-Start --><emphasis>members</emphasis><!-- DNT-End --></entry>

          <entry>Definitions, which may be <!-- DNT-Start -->EXPORTed<!-- DNT-End --> or <!-- DNT-Start -->SHARED<!-- DNT-End -->. These may be
          similar to fields defined in a <!-- DNT-Start -->RECORD<!-- DNT-End --> structure where only the type
          and name are definedâthe expression that defines the value may be
          left off (except in some cases where the expression itself defines
          the type of definition, like <!-- DNT-Start -->TRANSFORM<!-- DNT-End --> structures). If no default
          value is defined for a <emphasis>member</emphasis>, any <!-- DNT-Start -->MODULE<!-- DNT-End -->
          derived from the <!-- DNT-Start -->INTERFACE<!-- DNT-End --> must define a value for that
          <emphasis>member</emphasis> before that <!-- DNT-Start -->MODULE<!-- DNT-End --> can be used. These
          may not include other <!-- DNT-Start -->INTERFACE<!-- DNT-End --> or abstract <!-- DNT-Start -->MODULE<!-- DNT-End -->
          structures.</entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>

  <para>The <emphasis role="bold"><!-- DNT-Start -->INTERFACE<!-- DNT-End --> </emphasis>structure defines a
  structured block of related <emphasis>members</emphasis> that may be passed
  as a single parameter to complex queries, instead of passing each attribute
  individually. It is similar to a <!-- DNT-Start -->MODULE<!-- DNT-End --> structure with the <!-- DNT-Start -->VIRTUAL<!-- DNT-End --> option,
  except errors are given for private (not <!-- DNT-Start -->SHARED<!-- DNT-End --> or <!-- DNT-Start -->EXPORTed<!-- DNT-End -->)
  <emphasis>member</emphasis> definitions.</para>

  <para>An <!-- DNT-Start -->INTERFACE<!-- DNT-End --> is an abstract structureâa concrete instance must be
  defined before it can be used in a query. A <!-- DNT-Start -->MODULE<!-- DNT-End --> structure that inherits
  the <!-- DNT-Start -->INTERFACE<!-- DNT-End --> and defines the values for the <emphasis>members</emphasis>
  creates the concrete instance for use by the query.</para>

  <para>Example:</para>

  <!-- DNT-Start --><programlisting>HeaderRec := RECORD
  UNSIGNED4 RecID;
  STRING20  company;
  STRING25  address;
  STRING25  city;
  STRING2   state;
  STRING5   zip;
END;
HeaderFile := DATASET([{1,'ABC Co','123 Main','Boca Raton','FL','33487'},
                       {2,'XYZ Co','456 High','Jackson','MI','49202'},
                       {3,'ABC Co','619 Eaton','Jackson','MI','49202'},
                       {4,'XYZ Co','999 Yamato','Boca Raton','FL','33487'},
                       {5,'Joes Eats','666 Slippery Lane','Nether','SC','12345'}
                      ],HeaderRec);

//define an interface
IHeaderFileSearch := INTERFACE
  EXPORT STRING20 company_val;
  EXPORT STRING2   state_val;
  EXPORT STRING25  city_val := '';
END;

//define a function that uses that interface
FetchAddress(IHeaderFileSearch opts) := FUNCTION
        
  //define passed values tests
  CompanyPassed := opts.company_val &lt;&gt; '';
  StatePassed := opts.state_val &lt;&gt; '';
  CityPassed := opts.city_val &lt;&gt; '';

   //define passed value filters
   NFilter := HeaderFile.Company = opts.company_val;
   SFilter := HeaderFile.State = opts.state_val;
   CFilter := HeaderFile.City = opts.city_val;

   //define the actual filter to use based on the passed values
   filter := MAP(CompanyPassed AND StatePassed AND CityPassed
                    =&gt; NFilter AND SFilter AND CFilter,
            CompanyPassed AND StatePassed
                    =&gt; NFilter AND SFilter ,
            CompanyPassed AND CityPassed
                    =&gt; NFilter AND CFilter,
            StatePassed AND CityPassed
                    =&gt; SFilter AND CFilter,
            CompanyPassed =&gt; NFilter ,
            StatePassed =&gt; SFilter ,
            CityPassed =&gt; CFilter,
            TRUE);
   RETURN HeaderFile(filter);
END;
        
//*****************************************************************
//then you can use the interface

InRec  := {HeaderRec AND NOT [RecID,Address,Zip]};

//this MODULE creates a concrete instance
BatchHeaderSearch(InRec l) := MODULE(IHeaderFileSearch)
  EXPORT STRING120 company_val := l.company;
  EXPORT STRING2 state_val := l.state;
  EXPORT STRING25 city_val := l.city;
END;

//that can be used like this       
FetchAddress(BatchHeaderSearch(ROW({'ABC Co','',''},InRec))); 
 
//or we can define an input dataset
InFile := DATASET([{'ABC Co','Boca Raton','FL'},
                   {'XYZ Co','Jackson','MI'},
                   {'ABC Co','',''},
                   {'XYZ Co','',''},
                   {'Joes Eats','',''}
                  ],InRec);

//and an output nested child structure
HeaderRecs := RECORD
  UNSIGNED4 Pass;
  DATASET(HeaderRec) Headers;
END;

//and allow PROJECT to run the query once for each record in InFile
HeaderRecs XF(InRec L, INTEGER C) :=  TRANSFORM
  SELF.Pass := C;
  SELF.Headers := FetchAddress(BatchHeaderSearch(L));
END;
batchHeaderLookup := PROJECT(InFile,XF(LEFT,COUNTER));
batchHeaderLookup;</programlisting><!-- DNT-End -->

  <para>See Also: <link linkend="MODULE_Structure"><!-- DNT-Start -->MODULE<!-- DNT-End --> Structure</link>,
  <link linkend="LIBRARY"><!-- DNT-Start -->LIBRARY<!-- DNT-End --></link></para>
</sect1>

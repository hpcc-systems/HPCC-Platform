<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<sect1 id="DENORMALIZE">
  <!-- DNT-Start --><title>DENORMALIZE<indexterm>
      <primary>DENORMALIZE</primary>
    </indexterm></title><!-- DNT-End -->

  <para><emphasis role="bold"><!-- DNT-Start -->DENORMALIZE<!-- DNT-End --><indexterm>
      <primary><!-- DNT-Start -->DENORMALIZE<!-- DNT-End --> function</primary>
    </indexterm>(</emphasis><emphasis>parentrecset, childrecset, condition,
  transform </emphasis><emphasis role="bold"> [,<!-- DNT-Start -->LOCAL<!-- DNT-End --><indexterm>
      <primary><!-- DNT-Start -->LOCAL<!-- DNT-End --></primary>
    </indexterm>] [,<!-- DNT-Start -->NOSORT<!-- DNT-End --><indexterm>
      <primary><!-- DNT-Start -->NOSORT<!-- DNT-End --></primary>
    </indexterm>] </emphasis><emphasis role="bold">[, <!-- DNT-Start -->UNORDERED<!-- DNT-End --> |
  <!-- DNT-Start -->ORDERED<!-- DNT-End -->(</emphasis> <emphasis>bool </emphasis><emphasis role="bold">) ] [,
  <!-- DNT-Start -->STABLE<!-- DNT-End --> | <!-- DNT-Start -->UNSTABLE<!-- DNT-End --> ] [, <!-- DNT-Start -->PARALLEL<!-- DNT-End --> [ (</emphasis> <emphasis>numthreads
  </emphasis><emphasis role="bold">) ] ] [, <!-- DNT-Start -->ALGORITHM<!-- DNT-End -->(</emphasis>
  <emphasis>name </emphasis><emphasis role="bold">) ] )</emphasis></para>

  <para><emphasis role="bold"><!-- DNT-Start -->DENORMALIZE<!-- DNT-End -->(</emphasis><emphasis>parentrecset,
  childrecset, condition, </emphasis><emphasis
  role="bold"><!-- DNT-Start -->GROUP<!-- DNT-End --></emphasis><emphasis><indexterm>
      <primary><!-- DNT-Start -->GROUP<!-- DNT-End --></primary>
    </indexterm>, transform </emphasis><emphasis role="bold"> [,<!-- DNT-Start -->LOCAL<!-- DNT-End -->]
  [,<!-- DNT-Start -->NOSORT<!-- DNT-End -->] </emphasis><emphasis role="bold">[, <!-- DNT-Start -->UNORDERED<!-- DNT-End --> |
  <!-- DNT-Start -->ORDERED<!-- DNT-End -->(</emphasis> <emphasis>bool </emphasis><emphasis role="bold">) ] [,
  <!-- DNT-Start -->STABLE<!-- DNT-End --> | <!-- DNT-Start -->UNSTABLE<!-- DNT-End --> ] [, <!-- DNT-Start -->PARALLEL<!-- DNT-End --> [ (</emphasis> <emphasis>numthreads
  </emphasis><emphasis role="bold">) ] ] [, <!-- DNT-Start -->ALGORITHM<!-- DNT-End -->(</emphasis>
  <emphasis>name </emphasis><emphasis role="bold">) ] )</emphasis></para>

  <para><informaltable colsep="1" frame="all" rowsep="1">
      <tgroup cols="2">
        <colspec colwidth="82.25pt" />

        <colspec />

        <tbody>
          <row>
            <entry><!-- DNT-Start --><emphasis>parentrecset</emphasis><!-- DNT-End --></entry>

            <entry>The set of parent records to process, already in the format
            that will contain the denormalized parent and child
            records.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis>childrecset</emphasis><!-- DNT-End --></entry>

            <entry>The set of child records to process.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis>condition</emphasis><!-- DNT-End --></entry>

            <entry>An expression that specifies how to match records between
            the <emphasis>parentrecset</emphasis> and
            <emphasis>childrecset</emphasis>.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis>transform</emphasis><!-- DNT-End --></entry>

            <entry>The <!-- DNT-Start -->TRANSFORM<!-- DNT-End --> function to call.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis role="bold">LOCAL</emphasis><!-- DNT-End --></entry>

            <entry>Optional. Specifies the operation is performed on each
            supercomputer node independently, without requiring interaction
            with all other nodes to acquire data; the operation maintains the
            distribution of any previous <!-- DNT-Start -->DISTRIBUTE<!-- DNT-End -->.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis role="bold">NOSORT</emphasis><!-- DNT-End --></entry>

            <entry>Optional. Specifies the operation is performed without
            sorting the <emphasis>parentrecset</emphasis> or
            <emphasis>childrecset</emphasis> âboth must already be sorted so
            matching records in both are in order. This allows programmer
            control of the order of the child records.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis role="bold">GROUP</emphasis><!-- DNT-End --></entry>

            <entry>Specifies grouping the <emphasis>childrecset</emphasis>
            records based on the join condition so all the related child
            records are passed as a dataset parameter to the
            transform.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis role="bold">UNORDERED</emphasis><!-- DNT-End --></entry>

            <entry>Optional. Specifies the output record order is not
            significant.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis role="bold">ORDERED</emphasis><!-- DNT-End --></entry>

            <entry>Specifies the significance of the output record
            order.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis>bool</emphasis><!-- DNT-End --></entry>

            <entry>When False, specifies the output record order is not
            significant. When True, specifies the default output record
            order.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis role="bold">STABLE</emphasis><!-- DNT-End --></entry>

            <entry>Optional. Specifies the input record order is
            significant.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis role="bold">UNSTABLE</emphasis><!-- DNT-End --></entry>

            <entry>Optional. Specifies the input record order is not
            significant.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis role="bold">PARALLEL</emphasis><!-- DNT-End --></entry>

            <entry>Optional. Try to evaluate this activity in
            parallel.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis>numthreads</emphasis><!-- DNT-End --></entry>

            <entry>Optional. Try to evaluate this activity using
            <emphasis>numthreads</emphasis> threads.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis role="bold">ALGORITHM</emphasis><!-- DNT-End --></entry>

            <entry>Optional. Override the algorithm used for this
            activity.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis>name</emphasis><!-- DNT-End --></entry>

            <entry>The algorithm to use for this activity. Must be from the
            list of supported algorithms for the <!-- DNT-Start -->SORT<!-- DNT-End --> function's <!-- DNT-Start -->STABLE<!-- DNT-End --> and
            <!-- DNT-Start -->UNSTABLE<!-- DNT-End --> options.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start -->Return:<!-- DNT-End --></entry>

            <entry><!-- DNT-Start -->DENORMALIZE<!-- DNT-End --> returns a record set.</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable></para>

  <para>The <emphasis role="bold"><!-- DNT-Start -->DENORMALIZE<!-- DNT-End --> </emphasis>function is used to
  form a combined record out of a parent and any number of children. It acts
  very similar to a <!-- DNT-Start -->JOIN<!-- DNT-End --> except that where <!-- DNT-Start -->JOIN<!-- DNT-End --> with one parent and three
  children would call the <emphasis>transform</emphasis> three times and
  produce three outputs, <!-- DNT-Start -->DENORMALIZE<!-- DNT-End --> calls the <emphasis>transform</emphasis>
  three times where the input to the first <emphasis>transform</emphasis> is
  the parent and one child, the input to the second
  <emphasis>transform</emphasis> is the output of the first
  <emphasis>transform</emphasis> and another child, and the input to the third
  <emphasis>transform</emphasis> is the output from the second
  <emphasis>transform</emphasis> and the remaining child. Also like <!-- DNT-Start -->JOIN<!-- DNT-End -->, the
  order in which the <emphasis>childrecset</emphasis> records are sent to the
  <emphasis>transform</emphasis> is undefined.</para>

  <para>Because <!-- DNT-Start -->DENORMALIZE<!-- DNT-End --> is basically a specialized form of <!-- DNT-Start -->JOIN<!-- DNT-End -->, the
  various join types (<!-- DNT-Start -->LEFT<!-- DNT-End --> <!-- DNT-Start -->OUTER<!-- DNT-End -->, <!-- DNT-Start -->RIGHT<!-- DNT-End --> <!-- DNT-Start -->OUTER<!-- DNT-End -->, <!-- DNT-Start -->FULL<!-- DNT-End --> <!-- DNT-Start -->OUTER<!-- DNT-End -->, <!-- DNT-Start -->LEFT<!-- DNT-End --> <!-- DNT-Start -->ONLY<!-- DNT-End -->, <!-- DNT-Start -->RIGHT<!-- DNT-End -->
  <!-- DNT-Start -->ONLY<!-- DNT-End -->, <!-- DNT-Start -->FULL<!-- DNT-End --> <!-- DNT-Start -->ONLY<!-- DNT-End -->) are also available for use on <!-- DNT-Start -->DENORMALIZE<!-- DNT-End --> and act just as
  they do with <!-- DNT-Start -->JOIN<!-- DNT-End -->. </para>

  <para>All <!-- DNT-Start -->JOIN<!-- DNT-End --> options are available for <!-- DNT-Start -->DENORMALIZE<!-- DNT-End -->. See <link
  linkend="JoinOptions">Join Options</link> for details. </para>

  <sect2 id="TRANSFORM_Function_Requirements_Denormalize">
    <!-- DNT-Start --><title>DENORMALIZE TRANSFORM Function Requirements</title><!-- DNT-End -->

    <para>For form one, the <emphasis>transform</emphasis> function must take
    at least two parameters: a <!-- DNT-Start -->LEFT<!-- DNT-End --><indexterm>
        <primary><!-- DNT-Start -->LEFT<!-- DNT-End --></primary>
      </indexterm> record of the same format as the combined
    <emphasis>parentrecset</emphasis> and <emphasis>childrecset</emphasis>
    (the resulting de-normalized record structure), and a <!-- DNT-Start -->RIGHT<!-- DNT-End --><indexterm>
        <primary><!-- DNT-Start -->RIGHT<!-- DNT-End --></primary>
      </indexterm> record of the same format as the
    <emphasis>childrecset</emphasis>. An optional third parameter may be
    specified: an integer <!-- DNT-Start -->COUNTER<!-- DNT-End --><indexterm>
        <primary><!-- DNT-Start -->COUNTER<!-- DNT-End --></primary>
      </indexterm> specifying the number of times the
    <emphasis>transform</emphasis> has been called for the current set of
    parent/child pairs (defined by the <emphasis>condition</emphasis> values).
    The result of the <emphasis>transform</emphasis> function must be a record
    set of the same format as the <!-- DNT-Start -->LEFT<!-- DNT-End --> record.</para>

    <para>For form two, the <emphasis>transform</emphasis> function must take
    at least two parameters: a <!-- DNT-Start -->LEFT<!-- DNT-End --> record of the same format as the combined
    <emphasis>parentrecset</emphasis> and <emphasis>childrecset</emphasis>
    (the resulting de-normalized record structure), and <!-- DNT-Start -->ROWS<!-- DNT-End -->(<!-- DNT-Start -->RIGHT<!-- DNT-End -->) dataset of
    the same format as the <emphasis>childrecset</emphasis>. The result of the
    <emphasis>transform</emphasis> function must be a record set of the same
    format as the <!-- DNT-Start -->LEFT<!-- DNT-End --> record.</para>

    <para><emphasis role="bold">Example:</emphasis></para>

    <para>Form 1 example:</para>

    <!-- DNT-Start --><programlisting>NormRec := RECORD
  STRING20  thename;
  STRING20  addr;
END;
NamesRec := RECORD
  UNSIGNED1  numRows;
  STRING20  thename; 
  STRING20  addr1 := '';
  STRING20  addr2 := '';
  STRING20  addr3 := '';
  STRING20  addr4 := '';
END;
NamesTable := DATASET([ {0,'Kevin'},{0,'Liz'},{0,'Mr Nobody'},
                        {0,'Anywhere'}], NamesRec);
NormAddrs := DATASET([{'Kevin','10 Malt Lane'},
                      {'Liz','10 Malt Lane'},
                      {'Liz','3 The cottages'},
                      {'Anywhere','Here'},
                      {'Anywhere','There'},
                      {'Anywhere','Near'},
                      {'Anywhere','Far'}],NormRec);
NamesRec DeNormThem(NamesRec L, NormRec R, INTEGER C) := TRANSFORM
    SELF.NumRows := C;
    SELF.addr1 := IF (C=1, R.addr, L.addr1);
    SELF.addr2 := IF (C=2, R.addr, L.addr2);
    SELF.addr3 := IF (C=3, R.addr, L.addr3);
    SELF.addr4 := IF (C=4, R.addr, L.addr4);
    SELF := L;
END;
DeNormedRecs := DENORMALIZE(NamesTable, NormAddrs,
                            LEFT.thename = RIGHT.thename,
                            DeNormThem(LEFT,RIGHT,COUNTER));
OUTPUT(DeNormedRecs);
</programlisting><!-- DNT-End -->

    <para>Form 2 example:</para>

    <!-- DNT-Start --><programlisting>NormRec := RECORD
  STRING20  thename;
  STRING20  addr;
END;
NamesRec := RECORD
  UNSIGNED1  numRows;
  STRING20  thename;
  DATASET(NormRec) addresses;
END;
NamesTable := DATASET([ {0,'Kevin',[]},{0,'Liz',[]},
                        {0,'Mr Nobody',[]},{0,'Anywhere',[]}],
                      NamesRec);
NormAddrs := DATASET([{'Kevin','10 Malt Lane'},
                      {'Liz','10 Malt Lane'},
                      {'Liz','3 The cottages'},
                      {'Anywhere','Here'},
                      {'Anywhere','There'},
                      {'Anywhere','Near'},
                      {'Anywhere','Far'}],NormRec);
NamesRec DeNormThem(NamesRec L, DATASET(NormRec) R) := TRANSFORM
    SELF.NumRows := COUNT(R);
    SELF.addresses := R;
    SELF := L;
END;
DeNormedRecs := DENORMALIZE(NamesTable, NormAddrs,
                           LEFT.thename = RIGHT.thename,
                           GROUP,
                           DeNormThem(LEFT,ROWS(RIGHT)));
OUTPUT(DeNormedRecs);
</programlisting><!-- DNT-End -->

    <para><!-- DNT-Start -->NOSORT<!-- DNT-End --> example:</para>

    <!-- DNT-Start --><programlisting>MyRec := RECORD
  STRING1 Value1;
  STRING1 Value2;
END;
ParentFile := DATASET([{'A','C'},{'B','B'},{'C','A'}],MyRec);
ChildFile  := DATASET([{'A','Z'},{'A','T'},{'B','S'},{'B','Y'},
                       {'C','X'},{'C','W'}],MyRec);
MyOutRec := RECORD
  ParentFile.Value1;
  ParentFile.Value2;
  STRING1 CVal2_1 := '';
  STRING1 CVal2_2 := '';
END;
P_Recs := TABLE(ParentFile, MyOutRec);
MyOutRec DeNormThem(MyOutRec L, MyRec R, INTEGER C) := TRANSFORM
 SELF.CVal2_1 := IF(C = 1, R.Value2, L.CVal2_1);
 SELF.CVal2_2 := IF(C = 2, R.Value2, L.CVal2_2);
 SELF := L;
END;
DeNormedRecs := DENORMALIZE(P_Recs, ChildFile,
                            LEFT.Value1 = RIGHT.Value1,
                            DeNormThem(LEFT,RIGHT,COUNTER),NOSORT);
OUTPUT(DeNormedRecs);
/* DeNormedRecs result set is:
 Rec#  Value1 PVal2  CVal2_1  CVal2_2
 1       A      C      Z         T
 2       B      B      S         Y
 3       C      A      X         W
 */
</programlisting><!-- DNT-End -->

    <para>See Also: <link linkend="JOIN"><!-- DNT-Start -->JOIN<!-- DNT-End --></link>, <link
    linkend="TRANSFORM_Structure"><!-- DNT-Start -->TRANSFORM<!-- DNT-End --> Structure</link>, <link
    linkend="RECORD_Structure"><!-- DNT-Start -->RECORD<!-- DNT-End --> Structure</link>, <link
    linkend="NORMALIZE"><!-- DNT-Start -->NORMALIZE<!-- DNT-End --></link></para>
  </sect2>
</sect1>

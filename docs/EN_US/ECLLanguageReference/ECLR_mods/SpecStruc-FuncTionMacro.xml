<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<sect1 id="FUNCTIONMACRO_Structure">
  <title>FUNCTIONMACRO Structure<indexterm>
      <primary>FUNCTIONMACRO Structure</primary>
    </indexterm></title>

  <para><emphasis>[</emphasis><emphasis>resulttype</emphasis><emphasis
  role="bold">]</emphasis><emphasis> funcname </emphasis><emphasis
  role="bold">(</emphasis><emphasis> parameterlist </emphasis><emphasis
  role="bold">) := FUNCTIONMACRO<indexterm>
      <primary>FUNCTIONMACRO</primary>
    </indexterm></emphasis><emphasis role="bold"> </emphasis></para>

  <para><emphasis role="bold"></emphasis><emphasis>code</emphasis> <emphasis
  role="bold"></emphasis></para>

  <para><emphasis role="bold"> RETURN</emphasis>
  <emphasis>retval</emphasis>;</para>

  <para><emphasis role="bold">ENDMACRO;</emphasis></para>

  <informaltable colsep="1" frame="all" rowsep="1">
    <tgroup cols="2">
      <colspec align="left" colwidth="122.40pt" />

      <colspec />

      <tbody>
        <row>
          <entry><emphasis>resulttype</emphasis></entry>

          <entry>The return value type of the function. If omitted, the type
          is implicit from the <emphasis>retval</emphasis> expression.</entry>
        </row>

        <row>
          <entry><emphasis>funcname</emphasis></entry>

          <entry><para>The ECL definition name of the
          function/macro.</para></entry>
        </row>

        <row>
          <entry><emphasis>parameterlist</emphasis></entry>

          <entry>A comma separated list of names (tokens) of the parameters
          that will be passed to the function/macro. These names are used in
          the <emphasis>code</emphasis> and <emphasis>retval</emphasis> to
          indicate where the passed parameter values are substituted when the
          function/macro is used. Value types for these parameters are not
          allowed, but default values may be specified as string
          constants.</entry>
        </row>

        <row>
          <entry><emphasis>code</emphasis></entry>

          <entry>The local definitions that comprise the function. These may
          not be EXPORT or SHARED, but may include actions (like
          OUTPUT).</entry>
        </row>

        <row>
          <entry><emphasis role="bold">RETURN<indexterm>
              <primary>RETURN</primary>
            </indexterm></emphasis></entry>

          <entry>Specifies the return value expressionâ€”the
          <emphasis>retval</emphasis>.</entry>
        </row>

        <row>
          <entry><emphasis>retval</emphasis></entry>

          <entry>The value, expression, recordset, row (record), or action to
          return.</entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>

  <para>The <emphasis role="bold">FUNCTIONMACRO </emphasis>structure is a code
  generation tool, like the MACRO structure, coupled with the code
  encapsulation benefits of the FUNCTION structure. One advantage the
  FUNCTIONMACRO has over the MACRO structure is that it may be called in an
  expression context, just like a FUNCTION would be.</para>

  <para>Unlike the MACRO structure, #UNIQUENAME is not necessary to prevent
  internal definition name clashes when the FUNCTIONMACRO is used multiple
  times within the same visibility scope. However, the <emphasis
  role="bold">LOCAL</emphasis> keyword must be explicitly used within the
  FUNCTIONMACRO if a definition name in its <emphasis>code</emphasis> may also
  have been defined outside the FUNCTIONMACRO and within the same visibility
  scope -- LOCAL clearly identifies that the definition is limited to the
  <emphasis>code</emphasis> within the FUNCTIONMACRO.</para>

  <para><emphasis role="bold">Example:</emphasis></para>

  <para>This example demonstrates the FUNCTIONMACRO used in an expression
  context. It also shows how the FUNCTIONMACRO may be called multiple times
  without name clashes from its internal definitions:</para>

  <programlisting>EXPORT Field_Population(infile,infield,compareval) := FUNCTIONMACRO
  c1 := COUNT(infile(infield=compareval));
  c2 := COUNT(infile);
  RETURN DATASET([{'Total Records',c2},
                  {'Recs=' + #TEXT(compareval),c1},
                  {'Population Pct',(INTEGER)(((c2-c1)/c2)* 100.0)}],
                 {STRING15 valuetype,INTEGER val});
ENDMACRO;

ds1 := dataset([{'M'},{'M'},{'M'},{''},{''},{'M'},{''},{'M'},{'M'},{''}],{STRING1 Gender});
ds2 := dataset([{''},{'M'},{'M'},{''},{''},{'M'},{''},{''},{'M'},{''}],{STRING1 Gender});

OUTPUT(Field_Population(ds1,Gender,''));
OUTPUT(Field_Population(ds2,Gender,''));</programlisting>

  <para>This example demonstrates use of the LOCAL keyword to prevent name
  clashes with external definitions within the same visibility scope as the
  FUNCTIONMACRO:</para>

  <programlisting>numPlus := 'this creates a syntax error without LOCAL in the FUNCTIONMACRO';
AddOne(num) := FUNCTIONMACRO
  LOCAL numPlus := num + 1;   //LOCAL required here
  RETURN numPlus;
ENDMACRO;

AddTwo(num) := FUNCTIONMACRO
  LOCAL numPlus := num + 2;   //LOCAL required here
  RETURN numPlus;
ENDMACRO;

numPlus;
AddOne(5);
AddTwo(8);</programlisting>

  <para>See Also: <link linkend="FUNCTION_Structure">FUNCTION
  Structure</link>, <link linkend="MACRO_Structure">MACRO
  Structure</link></para>
</sect1>

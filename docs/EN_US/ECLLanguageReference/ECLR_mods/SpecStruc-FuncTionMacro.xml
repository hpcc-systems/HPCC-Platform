<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<sect1 id="FUNCTIONMACRO_Structure">
  <!-- DNT-Start --><title>FUNCTIONMACRO Structure<indexterm>
      <primary>FUNCTIONMACRO Structure</primary>
    </indexterm></title><!-- DNT-End -->

  <para><emphasis>[</emphasis><emphasis>resulttype</emphasis><emphasis
  role="bold">]</emphasis><emphasis> funcname </emphasis><emphasis
  role="bold">(</emphasis><emphasis> parameterlist </emphasis><emphasis
  role="bold">) := <!-- DNT-Start -->FUNCTIONMACRO<!-- DNT-End --><indexterm>
      <primary><!-- DNT-Start -->FUNCTIONMACRO<!-- DNT-End --></primary>
    </indexterm></emphasis><emphasis role="bold"> </emphasis></para>

  <para><emphasis role="bold"></emphasis><emphasis>code</emphasis> <emphasis
  role="bold"></emphasis></para>

  <para><emphasis role="bold"> <!-- DNT-Start -->RETURN<!-- DNT-End --></emphasis>
  <emphasis>retval</emphasis>;</para>

  <para><emphasis role="bold"><!-- DNT-Start -->ENDMACRO<!-- DNT-End -->;</emphasis></para>

  <informaltable colsep="1" frame="all" rowsep="1">
    <tgroup cols="2">
      <colspec align="left" colwidth="122.40pt" />

      <colspec />

      <tbody>
        <row>
          <entry><!-- DNT-Start --><emphasis>resulttype</emphasis><!-- DNT-End --></entry>

          <entry>The return value type of the function. If omitted, the type
          is implicit from the <emphasis>retval</emphasis> expression.</entry>
        </row>

        <row>
          <entry><!-- DNT-Start --><emphasis>funcname</emphasis><!-- DNT-End --></entry>

          <entry><para>The <!-- DNT-Start -->ECL<!-- DNT-End --> definition name of the
          function/macro.</para></entry>
        </row>

        <row>
          <entry><!-- DNT-Start --><emphasis>parameterlist</emphasis><!-- DNT-End --></entry>

          <entry>A comma separated list of names (tokens) of the parameters
          that will be passed to the function/macro. These names are used in
          the <emphasis>code</emphasis> and <emphasis>retval</emphasis> to
          indicate where the passed parameter values are substituted when the
          function/macro is used. Value types for these parameters are not
          allowed, but default values may be specified as string
          constants.</entry>
        </row>

        <row>
          <entry><!-- DNT-Start --><emphasis>code</emphasis><!-- DNT-End --></entry>

          <entry>The local definitions that comprise the function. These may
          not be <!-- DNT-Start -->EXPORT<!-- DNT-End --> or <!-- DNT-Start -->SHARED<!-- DNT-End -->, but may include actions (like
          <!-- DNT-Start -->OUTPUT<!-- DNT-End -->).</entry>
        </row>

        <row>
          <entry><!-- DNT-Start --><emphasis role="bold">RETURN<indexterm>
              <primary>RETURN</primary>
            </indexterm></emphasis><!-- DNT-End --></entry>

          <entry>Specifies the return value expressionâthe
          <emphasis>retval</emphasis>.</entry>
        </row>

        <row>
          <entry><!-- DNT-Start --><emphasis>retval</emphasis><!-- DNT-End --></entry>

          <entry>The value, expression, recordset, row (record), or action to
          return.</entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>

  <para>The <emphasis role="bold"><!-- DNT-Start -->FUNCTIONMACRO<!-- DNT-End --> </emphasis>structure is a code
  generation tool, like the <!-- DNT-Start -->MACRO<!-- DNT-End --> structure, coupled with the code
  encapsulation benefits of the <!-- DNT-Start -->FUNCTION<!-- DNT-End --> structure. One advantage the
  <!-- DNT-Start -->FUNCTIONMACRO<!-- DNT-End --> has over the <!-- DNT-Start -->MACRO<!-- DNT-End --> structure is that it may be called in an
  expression context, just like a <!-- DNT-Start -->FUNCTION<!-- DNT-End --> would be.</para>

  <para>Unlike the <!-- DNT-Start -->MACRO<!-- DNT-End --> structure, #<!-- DNT-Start -->UNIQUENAME<!-- DNT-End --> is not necessary to prevent
  internal definition name clashes when the <!-- DNT-Start -->FUNCTIONMACRO<!-- DNT-End --> is used multiple
  times within the same visibility scope. However, the <emphasis
  role="bold"><!-- DNT-Start -->LOCAL<!-- DNT-End --></emphasis> keyword must be explicitly used within the
  <!-- DNT-Start -->FUNCTIONMACRO<!-- DNT-End --> if a definition name in its <emphasis>code</emphasis> may also
  have been defined outside the <!-- DNT-Start -->FUNCTIONMACRO<!-- DNT-End --> and within the same visibility
  scope -- <!-- DNT-Start -->LOCAL<!-- DNT-End --> clearly identifies that the definition is limited to the
  <emphasis>code</emphasis> within the <!-- DNT-Start -->FUNCTIONMACRO<!-- DNT-End -->.</para>

  <para><emphasis role="bold">Example:</emphasis></para>

  <para>This example demonstrates the <!-- DNT-Start -->FUNCTIONMACRO<!-- DNT-End --> used in an expression
  context. It also shows how the <!-- DNT-Start -->FUNCTIONMACRO<!-- DNT-End --> may be called multiple times
  without name clashes from its internal definitions:</para>

  <!-- DNT-Start --><programlisting>EXPORT Field_Population(infile,infield,compareval) := FUNCTIONMACRO
  c1 := COUNT(infile(infield=compareval));
  c2 := COUNT(infile);
  RETURN DATASET([{'Total Records',c2},
                  {'Recs=' + #TEXT(compareval),c1},
                  {'Population Pct',(INTEGER)(((c2-c1)/c2)* 100.0)}],
                 {STRING15 valuetype,INTEGER val});
ENDMACRO;

ds1 := dataset([{'M'},{'M'},{'M'},{''},{''},{'M'},{''},{'M'},{'M'},{''}],{STRING1 Gender});
ds2 := dataset([{''},{'M'},{'M'},{''},{''},{'M'},{''},{''},{'M'},{''}],{STRING1 Gender});

OUTPUT(Field_Population(ds1,Gender,''));
OUTPUT(Field_Population(ds2,Gender,''));</programlisting><!-- DNT-End -->

  <para>This example demonstrates use of the <!-- DNT-Start -->LOCAL<!-- DNT-End --> keyword to prevent name
  clashes with external definitions within the same visibility scope as the
  <!-- DNT-Start -->FUNCTIONMACRO<!-- DNT-End -->:</para>

  <!-- DNT-Start --><programlisting>numPlus := 'this creates a syntax error without LOCAL in the FUNCTIONMACRO';
AddOne(num) := FUNCTIONMACRO
  LOCAL numPlus := num + 1;   //LOCAL required here
  RETURN numPlus;
ENDMACRO;

AddTwo(num) := FUNCTIONMACRO
  LOCAL numPlus := num + 2;   //LOCAL required here
  RETURN numPlus;
ENDMACRO;

numPlus;
AddOne(5);
AddTwo(8);</programlisting><!-- DNT-End -->

  <para>See Also: <link linkend="FUNCTION_Structure"><!-- DNT-Start -->FUNCTION<!-- DNT-End -->
  Structure</link>, <link linkend="MACRO_Structure"><!-- DNT-Start -->MACRO<!-- DNT-End -->
  Structure</link></para>
</sect1>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<sect1 id="_UNIQUENAME">
  <!-- DNT-Start --><title>#UNIQUENAME</title><!-- DNT-End -->

  <para><emphasis role="bold">#<!-- DNT-Start -->UNIQUENAME<!-- DNT-End --><indexterm>
      <primary>#<!-- DNT-Start -->UNIQUENAME<!-- DNT-End --></primary>
    </indexterm>( </emphasis><emphasis>namevar</emphasis><emphasis
  role="bold"> [ </emphasis><emphasis>,pattern</emphasis><emphasis
  role="bold">]);</emphasis></para>

  <para><informaltable colsep="1" frame="all" rowsep="1">
      <tgroup cols="2">
        <colspec colwidth="76.20pt" />

        <colspec />

        <tbody>
          <row>
            <entry><!-- DNT-Start --><emphasis>namevar</emphasis><!-- DNT-End --></entry>

            <entry>The label of the template variable (without the percent
            signs) to use in subsequent statements (with the percent signs)
            that need the generated unique name.</entry>
          </row>

          <row>
            <entry><!-- DNT-Start --><emphasis>pattern</emphasis><!-- DNT-End --></entry>

            <entry>Optional. A template for unique name construction. It
            should contain a dollar sign ($) to indicate the position at which
            a unique number is generated, and may contain a pound sign (#) to
            include the namevar. This is useful for situations where
            #<!-- DNT-Start -->UNIQUENAME<!-- DNT-End --> is being used to generate field names and the result
            is meant to be viewed in the <!-- DNT-Start -->ECL<!-- DNT-End --> <!-- DNT-Start -->IDE<!-- DNT-End --> program, since by default
            #<!-- DNT-Start -->UNIQUENAME<!-- DNT-End --> generates identifiers that begin with a double
            underscore (__) and the <!-- DNT-Start -->ECL<!-- DNT-End --> <!-- DNT-Start -->IDE<!-- DNT-End --> treats them as hidden fields. If
            omitted, the default pattern is __#__$__.</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable></para>

  <para>The <emphasis role="bold">#<!-- DNT-Start -->UNIQUENAME<!-- DNT-End --> </emphasis>statement creates a
  valid unique <!-- DNT-Start -->ECL<!-- DNT-End --> identifier within the context of the current scope limit.
  This is particularly useful in <!-- DNT-Start -->MACRO<!-- DNT-End --> structures as it allows the macro to be
  used multiple times in the same scope without creating duplicate attribute
  name errors from the attribute definitions within the macro. This statement
  may be used outside an <!-- DNT-Start -->XML<!-- DNT-End --> scope and does not require a previous <!-- DNT-Start -->LOADXML<!-- DNT-End --> to
  instantiate an <!-- DNT-Start -->XML<!-- DNT-End --> scope.</para>

  <para>Example:</para>

  <!-- DNT-Start --><programlisting>  IMPORT Training_Compare;
  EXPORT MAC_Compare_Result(module_name, attribute_name) := MACRO
  
  #UNIQUENAME(compare_file);
  %compare_file% := Training_Compare.File_Compare_Master;
  
  #UNIQUENAME(layout_per_attr);
  #UNIQUENAME(compare_attr, _MyField_$_);
       //the compare_attr fieldname is generated like: _MyField_1_
  %layout_per_attr% := RECORD
       person.per_cid;
       %compare_attr% := module_name.attribute_name;
  END;
  
  #UNIQUENAME(person_attr_out);
  %person_attr_out% := TABLE(person, %layout_per_attr%);
  
  #UNIQUENAME(person_attr_out_dist);
  %person_attr_out_dist% := DISTRIBUTE(%person_attr_out%,HASH(per_cid));
  
  #UNIQUENAME(layout_match_out);
  %layout_match_out% := RECORD
       data9 per_cid;
       boolean ValuesMatchFlag;
       TYPEOF(module_name.attribute_name) MyValue;
       TYPEOF(%compare_file%.attribute_name) CompareValue;
  END;
  
  #UNIQUENAME(layout_compare);
  %layout_compare% := RECORD
       %compare_file%.per_cid;
       %compare_file%.attribute_name;
  END;
  
  #UNIQUENAME(compare_table);
  %compare_table% := TABLE(%compare_file%, %layout_compare%);
  #UNIQUENAME(compare_table_dist);
  %compare_table_dist% := DISTRIBUTE(%compare_table%, HASH(per_cid));
  #UNIQUENAME(compare_attr_to_field);
  %layout_match_out% %compare_attr_to_field%(%person_attr_out% L,
  %compare_table% R) := TRANSFORM
       SELF.ValuesMatchFlag := (L.%compare_attr% = R.attribute_name);
       SELF.MyValue := L.%compare_attr%;
       SELF.CompareValue := R.attribute_name;
       SELF := L;
  END;
  
  #UNIQUENAME(compare_out);
  %compare_out% := JOIN(%person_attr_out_dist%,
            %compare_table_dist%,
            LEFT.per_cid = RIGHT.per_cid,
            %compare_attr_to_field%(LEFT, RIGHT),
            LOCAL);
  
  #UNIQUENAME(match_out);
  #UNIQUENAME(nomatch_out);
  %match_out% := %compare_out%(ValuesMatchFlag);
  %nomatch_out% := %compare_out%(~ValuesMatchFlag);
  
  COUNT(%match_out%);
  OUTPUT(CHOOSEN(%match_out%, 50));
  COUNT(%nomatch_out%);
  OUTPUT(CHOOSEN(%nomatch_out%, 50));
  
  ENDMACRO;
</programlisting><!-- DNT-End -->

  <para>See Also: <link linkend="MACRO_Structure"><!-- DNT-Start -->MACRO<!-- DNT-End --></link></para>
</sect1>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<sect1 id="Type_Casting">
  <!-- DNT-Start --><title>Type Casting<indexterm>
      <primary>Type Casting</primary>
    </indexterm></title><!-- DNT-End -->

  <sect2 id="Explicit_Casting">
    <!-- DNT-Start --><title>Explicit Casting<indexterm>
        <primary>Explicit Casting</primary>
      </indexterm></title><!-- DNT-End -->

    <para>The most common use of value types is to explicitly cast from one
    type to another in expressions. To do this, you simply place the value
    type to cast to within parentheses. That creates a casting
    operator.<indexterm>
        <primary>casting operator</primary>
      </indexterm> Then place that casting operator immediately to the left of
    the expression to cast.</para>

    <para>This converts the data from its original form to the new form (to
    keep the same bit-pattern, see the <emphasis
    role="bold"><!-- DNT-Start -->TRANSFER<!-- DNT-End --></emphasis> built-in function).</para>

    <!-- DNT-Start --><programlisting>MyBoolean := (BOOLEAN) IF(SomeAttribute &gt; 10,1,0);
          // casts the INTEGER values 1 and 0 to a BOOLEAN TRUE or FALSE
MyString := (STRING1) IF(SomeAttribute &gt; 10,1,0);
          // casts the INTEGER values 1 and 0 to a 1-character string
          // containing '1' or '0'
MyValue := (INTEGER) MAP(MyString = '1' =&gt; MyString, '0');
          // casts the STRING values '1' and '0' to an INTEGER 1 or 0
MySet := (SET OF INTEGER1) [1,2,3,4,5,6,7,8,9,10];
          //casts from a SET OF INTEGER8 (the default) to SET OF INTEGER1</programlisting><!-- DNT-End -->
  </sect2>

  <sect2 id="Implicit_Casting">
    <!-- DNT-Start --><title>Implicit Casting<indexterm>
        <primary>Implicit Casting</primary>
      </indexterm></title><!-- DNT-End -->

    <para>During expression evaluation, different value types may be
    implicitly cast in order to properly evaluate the expression. Implicit
    casting always means promoting one value type to another: <!-- DNT-Start -->INTEGER<!-- DNT-End --> to
    <!-- DNT-Start -->STRING<!-- DNT-End --> or <!-- DNT-Start -->INTEGER<!-- DNT-End --> to <!-- DNT-Start -->REAL<!-- DNT-End -->. <!-- DNT-Start -->BOOLEAN<!-- DNT-End --> types may not be involved in mixed mode
    expressions. For example, when evaluating an expression using both <!-- DNT-Start -->INTEGER<!-- DNT-End -->
    and <!-- DNT-Start -->REAL<!-- DNT-End --> values, the <!-- DNT-Start -->INTEGER<!-- DNT-End --> is promoted to <!-- DNT-Start -->REAL<!-- DNT-End --> at the point where the
    two mix, and the result is a <!-- DNT-Start -->REAL<!-- DNT-End --> value.</para>

    <para><!-- DNT-Start -->INTEGER<!-- DNT-End --> and <!-- DNT-Start -->REAL<!-- DNT-End --> may be freely mixed in expressions. At the point of
    contact between them the expression is treated as <!-- DNT-Start -->REAL<!-- DNT-End -->.
    <emphasis>Until</emphasis> that point of contact the expression may be
    evaluated at <!-- DNT-Start -->INTEGER<!-- DNT-End --> width. Division on <!-- DNT-Start -->INTEGER<!-- DNT-End --> values implicitly promotes
    both operands to <!-- DNT-Start -->REAL<!-- DNT-End --> before performing the division.</para>

    <para>The following expression: (1+2+3+4)*(1.0*5)</para>

    <para>evaluates as:
    (<!-- DNT-Start -->REAL<!-- DNT-End -->)((<!-- DNT-Start -->INTEGER<!-- DNT-End -->)1+(<!-- DNT-Start -->INTEGER<!-- DNT-End -->)2+(<!-- DNT-Start -->INTEGER<!-- DNT-End -->)3+(<!-- DNT-Start -->INTEGER<!-- DNT-End -->)4)*(1.0*(<!-- DNT-Start -->REAL<!-- DNT-End -->)5)</para>

    <para>and: 5/2+4+5 evaluates as: (<!-- DNT-Start -->REAL<!-- DNT-End -->)5/(<!-- DNT-Start -->REAL<!-- DNT-End -->)2+(<!-- DNT-Start -->REAL<!-- DNT-End -->)4+(<!-- DNT-Start -->REAL<!-- DNT-End -->)5</para>

    <para>while: '5' + 4 evaluates as: 5 + (<!-- DNT-Start -->STRING<!-- DNT-End -->)4 //concatenation</para>

    <para>Comparison operators are treated as any other mixed mode expression.
    Built-in Functions that take multiple values, any of which may be returned
    (such as <!-- DNT-Start -->MAP<!-- DNT-End --> or <!-- DNT-Start -->IF<!-- DNT-End -->), are treated as mixed mode expressions and will return
    the common base type. This common type must be reachable by standard
    implicit conversions.</para>
  </sect2>

  <sect2 id="Type_Transfer">
    <!-- DNT-Start --><title>Type Transfer<indexterm>
        <primary>Type Transfer</primary>
      </indexterm></title><!-- DNT-End -->

    <para>Type casting converts data from its original form to the new form.
    To keep the same bit-pattern you must use either the <emphasis
    role="bold"><!-- DNT-Start -->TRANSFER<!-- DNT-End --></emphasis> built-in function or the type transfer
    syntax, which is similar to type casting syntax with the addition of angle
    brackets (&gt;<emphasis>valuetype</emphasis>&lt;).</para>

    <!-- DNT-Start --><programlisting>INTEGER1 MyInt := 65; //MyInt is an integer value 65
STRING1 MyVal := (&gt;STRING1&lt;) MyInt; //MyVal is "A" (ASCII 65)</programlisting><!-- DNT-End -->
  </sect2>

  <sect2 id="Casting_Rules">
    <!-- DNT-Start --><title>Casting Rules<indexterm>
        <primary>Casting Rules</primary>
      </indexterm></title><!-- DNT-End -->

    <informaltable colsep="1" frame="all" rowsep="1">
      <tgroup cols="3">
        <colspec colwidth="90pt" />

        <colspec colwidth="95.00pt" />

        <colspec />

        <tbody>
          <row>
            <entry><!-- DNT-Start --><emphasis role="bold">From</emphasis><!-- DNT-End --></entry>

            <entry><emphasis role="bold">To</emphasis></entry>

            <entry><emphasis role="bold">Results in</emphasis></entry>
          </row>

          <row>
            <entry><!-- DNT-Start -->INTEGER<!-- DNT-End --></entry>

            <entry><!-- DNT-Start -->STRING<!-- DNT-End --></entry>

            <entry><!-- DNT-Start -->ASCII<!-- DNT-End --> or <!-- DNT-Start -->EBCDIC<!-- DNT-End --> representation of the value</entry>
          </row>

          <row>
            <entry><!-- DNT-Start -->DECIMAL<!-- DNT-End --></entry>

            <entry><!-- DNT-Start -->STRING<!-- DNT-End --></entry>

            <entry><!-- DNT-Start -->ASCII<!-- DNT-End --> or <!-- DNT-Start -->EBCDIC<!-- DNT-End --> representation of the value, including
            decimal and sign</entry>
          </row>

          <row>
            <entry><!-- DNT-Start -->REAL<!-- DNT-End --></entry>

            <entry><!-- DNT-Start -->STRING<!-- DNT-End --></entry>

            <entry><!-- DNT-Start -->ASCII<!-- DNT-End --> or <!-- DNT-Start -->EBCDIC<!-- DNT-End --> representation of the value, including
            decimal and signâmay be expressed in scientific notation</entry>
          </row>

          <row>
            <entry><!-- DNT-Start -->UNICODE<!-- DNT-End --></entry>

            <entry><!-- DNT-Start -->STRING<!-- DNT-End --></entry>

            <entry><!-- DNT-Start -->ASCII<!-- DNT-End --> or <!-- DNT-Start -->EBCDIC<!-- DNT-End --> representation with any non-existent
            characters appearing as the SUBstitute control code (0x1A in <!-- DNT-Start -->ASCII<!-- DNT-End -->
            or 0x3F in <!-- DNT-Start -->EBCDIC<!-- DNT-End -->) and any non-valid <!-- DNT-Start -->ASCII<!-- DNT-End --> or <!-- DNT-Start -->EBCDIC<!-- DNT-End --> characters
            appearing as the substitution codepoint (0xFFFD)</entry>
          </row>

          <row>
            <entry><!-- DNT-Start -->UTF8<!-- DNT-End --></entry>

            <entry><!-- DNT-Start -->STRING<!-- DNT-End --></entry>

            <entry><!-- DNT-Start -->ASCII<!-- DNT-End --> or <!-- DNT-Start -->EBCDIC<!-- DNT-End --> representation with any non-existent
            characters appearing as the SUBstitute control code (0x1A in <!-- DNT-Start -->ASCII<!-- DNT-End -->
            or 0x3F in <!-- DNT-Start -->EBCDIC<!-- DNT-End -->) and any non-valid <!-- DNT-Start -->ASCII<!-- DNT-End --> or <!-- DNT-Start -->EBCDIC<!-- DNT-End --> characters
            appearing as the substitution codepoint (0xFFFD)</entry>
          </row>

          <row>
            <entry><!-- DNT-Start -->STRING<!-- DNT-End --></entry>

            <entry><!-- DNT-Start -->QSTRING<!-- DNT-End --></entry>

            <entry>Uppercase <!-- DNT-Start -->ASCII<!-- DNT-End --> representation</entry>
          </row>

          <row>
            <entry><!-- DNT-Start -->INTEGER<!-- DNT-End --></entry>

            <entry><!-- DNT-Start -->UNICODE<!-- DNT-End --></entry>

            <entry><!-- DNT-Start -->UNICODE<!-- DNT-End --> representation of the value</entry>
          </row>

          <row>
            <entry><!-- DNT-Start -->DECIMAL<!-- DNT-End --></entry>

            <entry><!-- DNT-Start -->UNICODE<!-- DNT-End --></entry>

            <entry><!-- DNT-Start -->UNICODE<!-- DNT-End --> representation of the value, including decimal and
            sign</entry>
          </row>

          <row>
            <entry><!-- DNT-Start -->REAL<!-- DNT-End --></entry>

            <entry><!-- DNT-Start -->UNICODE<!-- DNT-End --></entry>

            <entry><!-- DNT-Start -->UNICODE<!-- DNT-End --> representation of the value, including decimal and
            signâmay be expressed in scientific notation</entry>
          </row>

          <row>
            <entry><!-- DNT-Start -->INTEGER<!-- DNT-End --></entry>

            <entry><!-- DNT-Start -->UTF<!-- DNT-End -->8</entry>

            <entry><!-- DNT-Start -->UTF<!-- DNT-End -->8 representation of the value</entry>
          </row>

          <row>
            <entry><!-- DNT-Start -->DECIMAL<!-- DNT-End --></entry>

            <entry><!-- DNT-Start -->UTF<!-- DNT-End -->8</entry>

            <entry><!-- DNT-Start -->UTF<!-- DNT-End -->8 representation of the value, including decimal and
            sign</entry>
          </row>

          <row>
            <entry><!-- DNT-Start -->REAL<!-- DNT-End --></entry>

            <entry><!-- DNT-Start -->UTF<!-- DNT-End -->8</entry>

            <entry><!-- DNT-Start -->UTF<!-- DNT-End -->8 representation of the value, including decimal and
            signâmay be expressed in scientific notation</entry>
          </row>

          <row>
            <entry><!-- DNT-Start -->INTEGER<!-- DNT-End --></entry>

            <entry><!-- DNT-Start -->REAL<!-- DNT-End --></entry>

            <entry>Value is cast with loss of precision when the value is
            greater than 15 significant digits</entry>
          </row>

          <row>
            <entry><!-- DNT-Start -->INTEGER<!-- DNT-End --></entry>

            <entry><!-- DNT-Start -->REAL<!-- DNT-End -->4</entry>

            <entry>Value is cast with loss of precision when the value is
            greater than 7 significant digits</entry>
          </row>

          <row>
            <entry><!-- DNT-Start -->STRING<!-- DNT-End --></entry>

            <entry><!-- DNT-Start -->REAL<!-- DNT-End --></entry>

            <entry>Sign, integer, and decimal portion of the string
            value</entry>
          </row>

          <row>
            <entry><!-- DNT-Start -->DECIMAL<!-- DNT-End --></entry>

            <entry><!-- DNT-Start -->REAL<!-- DNT-End --></entry>

            <entry>Value is cast with loss of precision when the value is
            greater than 15 significant digits</entry>
          </row>

          <row>
            <entry><!-- DNT-Start -->DECIMAL<!-- DNT-End --></entry>

            <entry><!-- DNT-Start -->REAL<!-- DNT-End -->4</entry>

            <entry>Value is cast with loss of precision when the value is
            greater than 7 significant digits</entry>
          </row>

          <row>
            <entry><!-- DNT-Start -->INTEGER<!-- DNT-End --></entry>

            <entry><!-- DNT-Start -->DECIMAL<!-- DNT-End --></entry>

            <entry>Loss of precision if the <!-- DNT-Start -->DECIMAL<!-- DNT-End --> is too small</entry>
          </row>

          <row>
            <entry><!-- DNT-Start -->REAL<!-- DNT-End --></entry>

            <entry><!-- DNT-Start -->DECIMAL<!-- DNT-End --></entry>

            <entry>Loss of precision if the <!-- DNT-Start -->DECIMAL<!-- DNT-End --> is too small</entry>
          </row>

          <row>
            <entry><!-- DNT-Start -->STRING<!-- DNT-End --></entry>

            <entry><!-- DNT-Start -->DECIMAL<!-- DNT-End --></entry>

            <entry>Sign, integer, and decimal portion of the string
            value</entry>
          </row>

          <row>
            <entry><!-- DNT-Start -->STRING<!-- DNT-End --></entry>

            <entry><!-- DNT-Start -->INTEGER<!-- DNT-End --></entry>

            <entry>Sign and integer portions of the string value</entry>
          </row>

          <row>
            <entry><!-- DNT-Start -->REAL<!-- DNT-End --></entry>

            <entry><!-- DNT-Start -->INTEGER<!-- DNT-End --></entry>

            <entry>Integer value, onlyâdecimal portion is truncated</entry>
          </row>

          <row>
            <entry><!-- DNT-Start -->DECIMAL<!-- DNT-End --></entry>

            <entry><!-- DNT-Start -->INTEGER<!-- DNT-End --></entry>

            <entry>Integer value, onlyâdecimal portion is truncated</entry>
          </row>

          <row>
            <entry><!-- DNT-Start -->INTEGER<!-- DNT-End --></entry>

            <entry><!-- DNT-Start -->BOOLEAN<!-- DNT-End --></entry>

            <entry>0 = <!-- DNT-Start -->FALSE<!-- DNT-End -->, anything else = <!-- DNT-Start -->TRUE<!-- DNT-End --></entry>
          </row>

          <row>
            <entry><!-- DNT-Start -->BOOLEAN<!-- DNT-End --></entry>

            <entry><!-- DNT-Start -->INTEGER<!-- DNT-End --></entry>

            <entry><!-- DNT-Start -->FALSE<!-- DNT-End --> = 0, <!-- DNT-Start -->TRUE<!-- DNT-End --> = 1</entry>
          </row>

          <row>
            <entry><!-- DNT-Start -->STRING<!-- DNT-End --></entry>

            <entry><!-- DNT-Start -->BOOLEAN<!-- DNT-End --></entry>

            <entry>'' = <!-- DNT-Start -->FALSE<!-- DNT-End -->, anything else = <!-- DNT-Start -->TRUE<!-- DNT-End --></entry>
          </row>

          <row>
            <entry><!-- DNT-Start -->BOOLEAN<!-- DNT-End --></entry>

            <entry><!-- DNT-Start -->STRING<!-- DNT-End --></entry>

            <entry><!-- DNT-Start -->FALSE<!-- DNT-End --> = '', <!-- DNT-Start -->TRUE<!-- DNT-End --> = '1'</entry>
          </row>

          <row>
            <entry><!-- DNT-Start -->DATA<!-- DNT-End --></entry>

            <entry><!-- DNT-Start -->STRING<!-- DNT-End --></entry>

            <entry>Value is cast with no translation</entry>
          </row>

          <row>
            <entry><!-- DNT-Start -->STRING<!-- DNT-End --></entry>

            <entry><!-- DNT-Start -->DATA<!-- DNT-End --></entry>

            <entry>Value is cast with no translation</entry>
          </row>

          <row>
            <entry><!-- DNT-Start -->DATA<!-- DNT-End --></entry>

            <entry><!-- DNT-Start -->UNICODE<!-- DNT-End --></entry>

            <entry>Value is cast with no translation</entry>
          </row>

          <row>
            <entry><!-- DNT-Start -->UNICODE<!-- DNT-End --></entry>

            <entry><!-- DNT-Start -->DATA<!-- DNT-End --></entry>

            <entry>Value is cast with no translation</entry>
          </row>

          <row>
            <entry><!-- DNT-Start -->DATA<!-- DNT-End --></entry>

            <entry><!-- DNT-Start -->UTF<!-- DNT-End -->8</entry>

            <entry>Value is cast with no translation</entry>
          </row>

          <row>
            <entry><!-- DNT-Start -->UTF8<!-- DNT-End --></entry>

            <entry><!-- DNT-Start -->DATA<!-- DNT-End --></entry>

            <entry>Value is cast with no translation</entry>
          </row>

          <row>
            <entry><!-- DNT-Start -->UTF8<!-- DNT-End --></entry>

            <entry><!-- DNT-Start -->UNICODE<!-- DNT-End --></entry>

            <entry>Value is cast with no translation</entry>
          </row>

          <row>
            <entry><!-- DNT-Start -->UNICODE<!-- DNT-End --></entry>

            <entry><!-- DNT-Start -->UTF<!-- DNT-End -->8</entry>

            <entry>Value is cast with no translation</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para><emphasis role="bold"> </emphasis>The casting rules for <!-- DNT-Start -->STRING<!-- DNT-End --> to
    and from any numeric type apply equally to all string types, also. All
    casting rules apply equally to sets (using the <!-- DNT-Start -->SET<!-- DNT-End --> <!-- DNT-Start -->OF<!-- DNT-End -->
    <emphasis>type</emphasis> syntax).</para>
  </sect2>
</sect1>

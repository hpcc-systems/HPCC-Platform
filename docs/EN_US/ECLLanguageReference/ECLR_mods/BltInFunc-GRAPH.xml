<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<sect1 id="GRAPH">
  <title>GRAPH</title>

  <para><emphasis role="bold">GRAPH<indexterm>
      <primary>GRAPH</primary>
    </indexterm><indexterm>
      <primary>GRAPH function</primary>
    </indexterm>( </emphasis><emphasis>recordset , iterations
  </emphasis><emphasis role="bold">, </emphasis><emphasis>
  processor</emphasis> <emphasis role="bold">[, UNORDERED |
  ORDERED(</emphasis> <emphasis>bool </emphasis><emphasis role="bold">) ] [,
  STABLE | UNSTABLE ] [, PARALLEL [ (</emphasis> <emphasis>numthreads
  </emphasis><emphasis role="bold">) ] ] [, ALGORITHM(</emphasis>
  <emphasis>name </emphasis><emphasis role="bold">) ] )</emphasis></para>

  <para><informaltable colsep="1" frame="all" rowsep="1">
      <tgroup cols="2">
        <colspec colwidth="79.60pt" />

        <colspec />

        <tbody>
          <row>
            <entry><emphasis>recordset</emphasis></entry>

            <entry>The initial set of records to process.</entry>
          </row>

          <row>
            <entry><emphasis>iterations</emphasis></entry>

            <entry>The number of times to call the processor function.</entry>
          </row>

          <row>
            <entry><emphasis>processor</emphasis></entry>

            <entry>The function attribute to process the input. This function
            may use the following as arguments:</entry>
          </row>

          <row>
            <entry></entry>

            <entry><programlisting lang="text" role="tab"><emphasis
                  role="bold">ROWSET<indexterm>
                    <primary>ROWSET</primary>
                  </indexterm>(LEFT)<indexterm>
                    <primary>ROWSET(LEFT)</primary>
                  </indexterm>   </emphasis>Specifies the set of input datasets, which may be indexed 
                                  to specify the result set from any specific iteration -- 
                                  ROWSET(LEFT)[0] indicates the initial input <emphasis>recordset</emphasis> while
                                  ROWSET(LEFT)[1] indicates the result set from the first 
                                  iteration. This may also be used as the first parameter 
                                  to the RANGE function to specify a set of datasets 
                                  (allowing the graph to efficiently process N-ary merge/join<indexterm>
                  <primary>N-ary merge/join</primary>
                </indexterm> 
                                  arguments).

<emphasis role="bold">COUNTER</emphasis><indexterm>
                  <primary>COUNTER</primary>
                </indexterm>             Specifies an INTEGER parameter for the graph iteration number.
</programlisting></entry>
          </row>

          <row>
            <entry><emphasis role="bold">UNORDERED</emphasis></entry>

            <entry>Optional. Specifies the output record order is not
            significant.</entry>
          </row>

          <row>
            <entry><emphasis role="bold">ORDERED</emphasis></entry>

            <entry>Specifies the significance of the output record
            order.</entry>
          </row>

          <row>
            <entry><emphasis>bool</emphasis></entry>

            <entry>When False, specifies the output record order is not
            significant. When True, specifies the default output record
            order.</entry>
          </row>

          <row>
            <entry><emphasis role="bold">STABLE</emphasis></entry>

            <entry>Optional. Specifies the input record order is
            significant.</entry>
          </row>

          <row>
            <entry><emphasis role="bold">UNSTABLE</emphasis></entry>

            <entry>Optional. Specifies the input record order is not
            significant.</entry>
          </row>

          <row>
            <entry><emphasis role="bold">PARALLEL</emphasis></entry>

            <entry>Optional. Try to evaluate this activity in
            parallel.</entry>
          </row>

          <row>
            <entry><emphasis>numthreads</emphasis></entry>

            <entry>Optional. Try to evaluate this activity using
            <emphasis>numthreads</emphasis> threads.</entry>
          </row>

          <row>
            <entry><emphasis role="bold">ALGORITHM</emphasis></entry>

            <entry>Optional. Override the algorithm used for this
            activity.</entry>
          </row>

          <row>
            <entry><emphasis>name</emphasis></entry>

            <entry>The algorithm to use for this activity. Must be from the
            list of supported algorithms for the SORT function's STABLE and
            UNSTABLE options.</entry>
          </row>

          <row>
            <entry>Return:</entry>

            <entry>GRAPH returns the record set result of the last of the
            <emphasis>iterations</emphasis>.</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable></para>

  <para>The <emphasis role="bold">GRAPH </emphasis>function is similar to the
  LOOP function<indexterm>
      <primary>LOOP function</primary>
    </indexterm>, but it executes as though all the
  <emphasis>iterations</emphasis> of the <emphasis>processor</emphasis> call
  were expanded out, removing any branches that can't be executed, and then
  joined together. The resulting graph is as efficient as if the graph had
  been expanded out by hand.</para>

  <para>This function is named GRAPH because it creates an execution graph at
  runtime (typically used in ROXIE queries) from a collection of compile-time
  components. The ROWSET(LEFT) keyword indicates that each iteration adds its
  result to the SET OF DATASETs passed to the next iteration. That means the
  result of each iteration must be a dataset in the same format as the initial
  input <emphasis>recordset</emphasis> parameter. Typical use of the GRAPH()
  function would be in queries for which each subsequent iteration requires
  access to any/all previous iterations' results.</para>

  <para>Example:</para>

  <programlisting lang="ECL" role="runnable">//This simple example demonstrates text searching 
// for a variable number of search terms.
//For simplicity's sake this example uses sets,
// whereas in a production query you would most likely
// use inverted indexes into your huge datasets.

IMPORT Std;
//layout of the dataset containing text to search:
Rec := {UNSIGNED1 RecID, STRING line};
//The text search function:
SearchText(STRING SearchFor, DATASET(Rec) SearchIn) := FUNCTION
  //uppercase  and clean the data:
  Ltrs := 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  Upper(STRING s) := Std.Str.toUpperCase(s);
  LosePunc(STRING s) := STD.Str.SubstituteExcluded(Upper(s),Ltrs,' ');

  //create a set of words:
  SetWords(STRING s) := Std.Str.SplitWords(s,' ');

  //the set of words to search for:
  SearchWords := SetWords(LosePunc(SearchFor));

  //split the text lines to search into sets of words:
  LineWords :=
    PROJECT(SearchIn,
            TRANSFORM({UNSIGNED1 RecID,SET OF STRING wordset},
                      SELF.wordset := SetWords(LosePunc(LEFT.line)),
                      SELF := LEFT));

  //the graph processor function:
  GraphWork(SET OF DATASET(RECORDOF(LineWords)) ds, UNSIGNED4 C) := FUNCTION
    //find all matches for the current iteration's word:
    NewMatches := LineWords(SearchWords[C] IN wordset);
    //return only those lines that were also in
    // the previous iteration's result:
    RETURN JOIN(ds[C-1],NewMatches,LEFT.RecID = RIGHT.RecID);
  END;      
  GraphRes := GRAPH(LineWords,
                    COUNT(SearchWords),
                    GraphWork(ROWSET(LEFT),COUNTER));

  //Return original records where all search terms were found:

  RETURN SearchIn(RecID IN SET(GraphRes,RecID));
END;

ds1 := DATASET([{1,'It is a truth universally acknowledged, that a single man' +
                   ' in possession of a good fortune, must be in want of a wife.'},
                {2,'"My dear Mr. Bennet," said his lady to him one day,' +
                   ' "have you heard that Netherfield Park is let at last?"'},
                {3,'Mr. Bennet replied that he had not.'},
                {4,'"But it is," returned she; "for Mrs. Long has just been here,' +
                   ' and she told me all about it."'},
                {5,'Mr. Bennet made no answer.'},
                {6,'"Do you not want to know who has taken it?" cried his' +
                   ' wife impatiently.'},
                {7,'"You want to tell me, and I have no objection to hearing it."'}],Rec);

SearchText('Mr. Bennet',ds1);       //returns 2, 3, 5
SearchText('Mr. Bennet said',ds1);  //returns 2
</programlisting>

  <para>See Also: <link linkend="LOOP">LOOP</link>, <link
  linkend="RANGE">RANGE</link></para>
</sect1>

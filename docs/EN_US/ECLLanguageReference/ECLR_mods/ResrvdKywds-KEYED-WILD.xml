<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<sect1 id="KEYED-WILD">
  <title>KEYED<indexterm>
      <primary>KEYED</primary>
    </indexterm> and WILD<indexterm>
      <primary>WILD index filter</primary>
    </indexterm></title>

  <para><emphasis role="bold">KEYED( </emphasis><emphasis>expression
  </emphasis><emphasis role="bold">[, OPT<indexterm>
      <primary>OPT</primary>
    </indexterm> ] )</emphasis><emphasis role="bold"> </emphasis></para>

  <para><emphasis role="bold">WILD<indexterm>
      <primary>WILD</primary>
    </indexterm>( </emphasis><emphasis>field </emphasis><emphasis
  role="bold">)</emphasis></para>

  <informaltable colsep="1" frame="all" rowsep="1">
    <tgroup cols="2">
      <colspec align="left" colwidth="122.40pt" />

      <colspec />

      <tbody>
        <row>
          <entry><emphasis>expression</emphasis></entry>

          <entry>An INDEX filter condition.</entry>
        </row>

        <row>
          <entry><emphasis role="bold">OPT</emphasis></entry>

          <entry>Only generate An INDEX filter condition.</entry>
        </row>

        <row>
          <entry><emphasis>field</emphasis></entry>

          <entry>A single field in an INDEX.</entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>

  <para>The <emphasis role="bold">KEYED</emphasis><indexterm>
      <primary>KEYED Keyword</primary>
    </indexterm> and <emphasis role="bold">WILD<indexterm>
      <primary>WILD Keyword</primary>
    </indexterm></emphasis> keywords are valid only for filters on INDEX
  attributes (which also qualifies as part of the
  <emphasis>joincondition</emphasis><indexterm>
      <primary>joincondition</primary>
    </indexterm> for a "half-keyed" JOIN). They indicate to the compiler which
  of the leading index fields are used as filters (KEYED) or wildcarded (WILD)
  so that the compiler can warn you if you've gotten it wrong. Trailing fields
  not used in the filter are ignored (always treated as wildcards).</para>

  <para>The rules for their use are as follows (the term "segmonitor" refers
  to an internal object created to represent the possible match conditions for
  a single keyable field):</para>

  <para>1. KEYED generates a segmonitor. The segmonitor may be a wild one if
  the <emphasis>expression</emphasis> can never be false, such as:</para>

  <programlisting>   KEYED(inputval = '' OR field = inputval)</programlisting>

  <para>2. WILD generates a wild segmonitor, unless there is also a KEYED()
  filter on the same field.</para>

  <para>3. KEYED, OPT generates a non-wild segmonitor only if the preceding
  field did.</para>

  <para>4. Any field that is both KEYED and KEYED OPT creates a compile time
  error.</para>

  <para>5. If WILD or KEYED are not specified for any fields, segmonitors are
  generated for all keyable conditions.</para>

  <para>6. An INDEX filter condition with no KEYED specified generates a wild
  segmonitor (except as specified by 5).</para>

  <para>7. KEYED limits are based upon all non-wild segmonitors.</para>

  <para>8. Conditions that do not generate segmonitors are
  post-filtered.</para>

  <para>Example:</para>

  <programlisting>ds := DATASET('~local::rkc::person',
        { STRING15 f1, STRING15 f2, STRING15 f3, STRING15 f4,
        UNSIGNED8 filepos{VIRTUAL(fileposition)} }, FLAT);
ix := INDEX(ds, { ds },'\\lexis\\person.name_first.key');

/*** Valid examples ****/

COUNT(ix(KEYED(f1='Kevin1')));
        // legal because only f1 is used.

COUNT(ix(KEYED(f1='Kevin2' and f2='Halliday')));
        // legal because both f1 and f2 are used

COUNT(ix(KEYED(f2='Kevin3') and WILD(f1)));
        // keyed f2, but ok because f1 is marked as wild.

COUNT(ix(f2='Halliday'));
        // ok - if keyed isn't used then it doesn't have to have
        // a wild on f1

COUNT(ix(KEYED(f1='Kevin3') and KEYED(f2='Kevin4') and WILD(f1)));
        // it is ok to mark as wild and keyed otherwise you can get
        // in a mess with compound queries.

COUNT(ix(f1='Kevin3' and KEYED(f2='Kevin4') and WILD(f1)));
        // can also be wild and a general expression.

/***Error examples ***/

COUNT(ix(KEYED(f3='Kevin3' and f2='Halliday')));
        // missing WILD(f1) before keyed

COUNT(ix(KEYED(f3='Kevin3') and f2='Halliday'));
        // missing WILD(f1) before keyed after valid field

COUNT(ix(KEYED(f3='Kevin3') and WILD(f2)));
        // missing WILD(f1) before a wild

COUNT(ix(WILD(f3) and f2='Halliday'));
        // missing WILD(f1) before wild after valid field

COUNT(ds(KEYED(f1='Kevin')));
        //KEYED not valid in DATASET filters</programlisting>

  <para>See Also: <link linkend="INDEX_record_structure">INDEX</link>, <link
  linkend="JOIN">JOIN</link>, <link linkend="FETCH">FETCH</link></para>
</sect1>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<sect1 id="CleanSpaces">
  <title><emphasis role="bold">CleanSpaces</emphasis></title>

  <para><emphasis role="bold">STD.Str.CleanSpaces<indexterm>
      <primary>STD.Str.CleanSpaces</primary>
    </indexterm><indexterm>
      <primary>Str.CleanSpaces</primary>
    </indexterm><indexterm>
      <primary>CleanSpaces</primary>
    </indexterm>(</emphasis> <emphasis>source</emphasis> <emphasis
  role="bold">)</emphasis></para>

  <para><emphasis role="bold">STD.Uni.CleanSpaces<indexterm>
      <primary>STD.Uni.CleanSpaces</primary>
    </indexterm><indexterm>
      <primary>Uni.CleanSpaces</primary>
    </indexterm>(</emphasis> <emphasis>source</emphasis> <emphasis
  role="bold">)</emphasis></para>

  <informaltable colsep="0" frame="none" rowsep="0">
    <tgroup cols="2">
      <colspec colwidth="80.50pt" />

      <colspec />

      <tbody>
        <row>
          <entry><emphasis>source</emphasis></entry>

          <entry>A string containing the data to clean.</entry>
        </row>

        <row>
          <entry>Return:</entry>

          <entry>CleanSpaces returns either a STRING or UNICODE value, as
          appropriate.</entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>

  <para>All variations of the <emphasis role="bold">CleanSpaces
  </emphasis>function return the <emphasis>source</emphasis> string with all
  instances of multiple adjacent space characters (2 or more spaces together,
  or a tab character) reduced to a single space character. It also trims off
  all leading and trailing spaces.</para>

  <para>Example:</para>

  <programlisting format="linespecific">A := STD.Str.CleanSpaces('ABCDE  ABCDE');
  //A contains 'ABCDE ABCDE'
UNICODE C := STD.Uni.CleanSpaces(U'ABCDE ABCDE');   //C contains U'ABCDE ABCDE'
</programlisting>

  <para></para>
</sect1>

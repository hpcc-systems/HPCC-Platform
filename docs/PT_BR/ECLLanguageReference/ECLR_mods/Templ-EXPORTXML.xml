<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<sect1 id="_EXPORTXML">
  <title>#EXPORTXML</title>

  <para><emphasis role="bold">#EXPORTXML<indexterm>
      <primary>#EXPORTXML</primary>
    </indexterm>( </emphasis><emphasis>symbol, data</emphasis> <emphasis
  role="bold">);</emphasis></para>

  <para><informaltable colsep="1" frame="all" rowsep="1">
      <tgroup cols="2">
        <colspec colwidth="76.35pt" />

        <colspec />

        <tbody>
          <row>
            <entry><emphasis>symbol</emphasis></entry>

            <entry>O nome de uma variável de modelo que não foi declarada 
	    previamente.</entry>
          </row>

          <row>
            <entry><emphasis>data</emphasis></entry>

            <entry>O nome de um campo, estrutura RECORD ou dataset.</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable></para>

  <para>A declaração  <emphasis role="bold">#EXPORTXML </emphasis> produz o 
  mesmo XML que #EXPORT dos  <emphasis>dados</emphasis>  especificados e a 
  coloca no  <emphasis>símbolo</emphasis>, em seguida, faz um LOADXML 
  (<emphasis>símbolo, </emphasis> 'label') nos dados.</para>

  <para>Exemplo:</para>

  <programlisting>  NamesRecord := RECORD
    STRING10 first;
    STRING20 last;
  END;
  
  r := RECORD
    UNSIGNED4 dg_parentid;
    STRING10 dg_firstname;
    STRING dg_lastname;
    UNSIGNED1 dg_prange;
    IFBLOCK(SELF.dg_prange % 2 = 0)
      STRING20 extrafield;
    END;
    NamesRecord namerec;
    DATASET(NamesRecord) childNames;
  END;
  
  ds := DATASET('~RTTEST::OUT::ds', r, THOR);
  
  //This example produces the same result as the example for #EXPORT.
  //Notice the lack of #DECLARE and LOADXML in this version:
  #EXPORTXML(Fred,r);
  
  #FOR (Fred)
   #FOR (Field) 
    #IF (%'{@isEnd}'% &lt;&gt; '')
  OUTPUT('END');
    #ELSE
  OUTPUT(%'{@type}'%
     #IF (%'{@size}'% &lt;&gt; '-15' AND
          %'{@isRecord}'%='' AND
          %'{@isDataset}'%='')
  + %'{@size}'%
     #END
  + ' ' + %'{@label}'% + ';');
    #END
   #END
  #END
  OUTPUT('Done');
  //**********************************************************
  //These examples show some other possible uses of #EXPORTXML:
  
  //This could be greatly simplified as
  // (%'{IsAStringMetaInfo/Field[1]/@type}'%='string')
  isAString(inputField) := MACRO
  #EXPORTXML(IsAStringMetaInfo, inputField);
  #IF (%'IsAString'%='')
   #DECLARE(IsAString);
  #END;
  #SET(IsAString, false);
  #FOR (IsAStringMetaInfo)
   #FOR (Field)
    #IF (%'{@type}'% = 'string')
     #SET (IsAString, true);
    #END
    #BREAK
   #END
  #END
  %IsAString%
  ENDMACRO;
  
  getFieldName(inputField) := MACRO
    #EXPORTXML(GetFieldNameMetaInfo, inputField);
    %'{GetFieldNameMetaInfo/Field[1]/@name}'%
  ENDMACRO;
  displayIsAString(inputField) := MACRO
    OUTPUT(getFieldName(inputField)
        + TRIM(IF(isAString(inputField), ' is', ' is not'))
        + ' a string.')
  ENDMACRO;
  
  SIZEOF(r.dg_firstname);
  isAString(r.dg_firstname);
  getFieldName(r.dg_firstname);
  OUTPUT('ds.dg_firstname isAString? '
        + (STRING)isAString(ds.dg_firstname));
  isAString(ds.namerec);
  
  displayIsAString(ds.namerec);
  displayIsAString(r.dg_firstname);
</programlisting>

  <para>Ver também: <link linkend="LOADXML">LOADXML</link>, <link
  linkend="_EXPORT">#EXPORT</link></para>
</sect1>

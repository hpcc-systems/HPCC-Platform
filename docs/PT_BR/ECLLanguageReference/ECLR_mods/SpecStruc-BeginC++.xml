<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<sect1 id="BEGINCplus_Structure">
  <title>Estrutura BEGINC++<indexterm>
      <primary>Estrutura BEGINC++</primary>
    </indexterm></title>

  <para><emphasis>resulttype funcname </emphasis><emphasis
  role="bold">(</emphasis><emphasis> parameterlist </emphasis><emphasis
  role="bold">) := BEGINC++<indexterm>
      <primary>BEGINC++</primary>
    </indexterm></emphasis><emphasis role="bold">
  </emphasis><emphasis></emphasis></para>

  <para><emphasis> code</emphasis><emphasis role="bold"> </emphasis></para>

  <para><emphasis role="bold">ENDC++<indexterm>
      <primary>ENDC++</primary>
    </indexterm>;</emphasis></para>

  <informaltable colsep="1" frame="all" rowsep="1">
    <tgroup cols="2">
      <colspec align="left" colwidth="122.40pt" />

      <colspec />

      <tbody>
        <row>
          <entry><emphasis>resulttype</emphasis></entry>

          <entry>O tipo do valor de retorno da ECL para a função C++.</entry>
        </row>

        <row>
          <entry><emphasis>funcname</emphasis></entry>

          <entry><para>O nome da definição ECL da função.</para></entry>
        </row>

        <row>
          <entry><emphasis>parameterlist</emphasis></entry>

          <entry>Uma lista separada por vírgulas com os parâmetros a serem 
	  passados para a <emphasis>função</emphasis>.</entry>
        </row>

        <row>
          <entry><emphasis>code</emphasis></entry>

          <entry>O código fonte da função C++.</entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>

  <para>A estrutura  <emphasis role="bold">BEGINC++ </emphasis>possibilita a 
  adição de código C++ em linha à sua ECL. Isso é útil quando o processamento 
  de strings ou bits seria complicado na ECL e mais fácil em C++. Normalmente, 
  é usado para código que será executado uma única vez. Para código C++ usado 
  mais frequentemente, uma melhor solução seria criar um plugin (consulte a 
  discussão  <emphasis role="bold">Implementação de serviços 
  externos</emphasis> ).</para>

  <para>A implementação deve ser codificada como segura para linha de execução 
  (thread). Todas as chamadas para bibliotecas externas devem ser feitas para 
  as versões dessas bibliotecas que são seguras para linha de execução.</para>

  <para>Utilizando este form, você pode usar EMBED ao invés de BEGINC++ para
  incorporar código C++ e especificar opções adicionais (por exemplo,
  DISTRIBUTED):</para>

  <para><programlisting>myFunction(string name) := EMBED(C++ [: options]) 
  ... text 
  ENDEMBED</programlisting></para>

  <para><emphasis role="bold">ATENÇÃO: Esse recurso pode criar corrupção de 
  memória e/ou problemas de segurança, por isso é necessário muito cuidado e 
  prudência - Consulte o Suporte Técnico antes de 
  usar.</emphasis></para>

  <sect2 id="ECL_to_Cplus_Mapping">
    <title>ECL para C++ Mapping</title>

    <para>Os tipos são passados da seguinte forma:</para>

    <programlisting>//The following typedefs are used below:
typedef unsigned size32_t;
typedef wchar_t UChar; [ unsigned short in linux ]</programlisting>

    <para>A lista a seguir descreve os mapeamentos da ECL para o C++. Para C++ 
    incorporado, os parâmetros são sempre convertidos em minúsculas, com 
    maiúsculas nas conjunções (veja abaixo).</para>

    <programlisting><emphasis role="bold">ECL                  C++ [Linux in brackets]</emphasis>
BOOOLEAN xyz         bool xyz
INTEGER1 xyz         signed char xyz
INTEGER2 xyz         int16_t xyz
INTEGER4 xyz         int32_t xyz
INTEGER8 xyz         signed __int64 xyz [ long long ]
UNSIGNED1 xyz        unsigned char xyz
UNSIGNED2 xyz        uint16_t xyz
UNSIGNED4 xyz        uint32_t xyz
UNSIGNED8 xyz        unsigned __int64 xyz [ unsigned long long xyz ]
REAL4 xyz            float xyz
REAL/REAL8 xyz       double xyz
DATA xyz             size32_t lenXyz, void * xyz
STRING xyz           size32_t lenXyz, char * xyz
VARSTRING xyz        char * xyz;
QSTRING xyz          size32_t lenXyz, char * xyz
UNICODE xyz          size32_t lenXyz, UChar * xyz
VARUNICODE xyz       UChar * xyz
DATA&lt;nn&gt; xyz         void * xyz
STRING&lt;nn&gt; xyz       char * xyz
QSTRING&lt;nn&gt; xyz      char * xyz
UNICODE&lt;nn&gt; xyz      UChar * xyz
SET OF ... xyz       bool isAllXyz, size32_t lenXyz, void *  xyz</programlisting>

    <para>Observe que strings de comprimento desconhecido são passadas de 
    forma diferente das que têm tamanho conhecido. Uma string de comprimento 
    variável é passada como um número de caracteres e não como tamanho (ou 
    seja, qstring/unicode), seguido por um pointer para os dados, desta forma 
    (size32_t é um UNSIGNED4):</para>
    <programlisting>STRING  ABC -&gt; size32_t lenAbc, const char * abc;
UNICODE ABC -&gt; size32_t lenABC, const UChar * abc;</programlisting>

    <para>Um dataset é passado como um par tamanho/pointer. O comprimento
    determina o tamanho do seguinte dataset em bytes. A mesma convenção de
    nomenclatura é usada:</para>

    <programlisting>DATASET(r)              ABC -&gt; size32_t lenAbc, const void * abc
  The rows are accessed as x+0, x + length(row1), x + length(row1) + length(row2)

LINKCOUNTED DATASET(r)  ABC -&gt; size32_t countAbc, const byte * * abc
  The rows are accessed as x[0], x[1], x[2]
</programlisting>

    <para>OBSERVAÇÃO: strings de comprimento variável em um registro são 
    armazenadas como um número de 4 bytes de caracteres, seguido pelos dados 
    da string.</para>

    <para>Os conjuntos são passados como um conjunto de parâmetros (all, size, 
    pointer):</para>

    <programlisting>SET OF UNSIGNED4 ABC -&gt; bool isAllAbc, size32_t lenAbc, const void * abc</programlisting>

    <para>Os tipos de retorno são processados como funções C++ retornando os 
    mesmos tipos, com algumas exceções. As exceções têm alguns parâmetros 
    iniciais adicionais onde os resultados serão retornados:</para>

    <programlisting><emphasis role="bold">ECL                C++ [Linux in brackets]</emphasis>
DATA xyz           size32_t &amp; __lenResult, void * &amp; __result
STRING xyz         size32_t &amp; __lenResult, char * &amp; __result
CONST STRING xyz   size32_t lenXyz, const char * xyz
QSTRING xyz        size32_t &amp; __lenResult, char * &amp; __result
UNICODE xyz        size32_t &amp; __lenResult, UChar * &amp; __result
CONST UNICODE xyz  size32_t &amp; __lenResult, const UChar * &amp; __result
DATA&lt;nn&gt; xyz       void * __result
STRING&lt;nn&gt; xyz     char * __result
QSTRING&lt;nn&gt; xyz    char * __result
UNICODE&lt;nn&gt; xyz    UChar * __result
SET OF ... xyz     bool __isAllResult, size32_t &amp;  __lenResult, void * &amp; __result

DATASET(r)         size32_t &amp; __lenResult, void * &amp; __result

LINKCOUNTED DATASET(r)
                   size32_t &amp; __countResult, byte * * &amp; __result

STREAMED DATASET(r) 
                   returns a pointer to an IRowStream interface 
                   (see the eclhelper.hpp include file for the definition)</programlisting>
    <para>Por exemplo,</para>

    <programlisting>STRING process(STRING value, INTEGER4 len)</programlisting>

    <para>tem o protótipo:</para>

    <programlisting>void process(size32_t &amp; __lenResult, char * &amp; __result,
             size32_t lenValue, char * value, int len);</programlisting>

    <para>Uma função que recebe parâmetros de string também deve ter o tipo
    prefixado por <emphasis role="bold">const</emphasis> no código da ECL para
    que compiladores modernos não relatem erros quando strings constantes são
    passadas à função.</para>

    <programlisting>BOOLEAN isUpper(const string mystring) := BEGINC++
  size_t i=0;
  while (i &lt; lenMystring)
  {
    if (!isupper((byte)mystring[i]))
        return false;
    i++;
  }
  return true;
ENDC++;
isUpper('JIM');

</programlisting>
  </sect2>

  <sect2 id="BeginCPP_Available_Options">
    <title>Opções disponíveis:</title>

    <informaltable colsep="1" frame="all" rowsep="1">
      <tgroup cols="2">
        <colspec align="left" colwidth="122.40pt" />

        <colspec />

        <tbody>
          <row>
            <entry><emphasis role="bold">#option pure</emphasis></entry>

            <entry>Por padrão, supõe-se que as funções C++ incorporadas tenham 
	    efeitos colaterais. Isso significa que o código gerado não será 
	    tão eficiente como poderia, pois as chamadas não serão 
	    compartilhadas. A adição de #option dentro do 
	    <emphasis>code</emphasis>  C++ incorporado faz como que ele seja
	    tratado como uma função pura, sem efeitos colaterais.</entry>
          </row>

          <row>
            <entry><emphasis role="bold">#option once</emphasis></entry>

            <entry>Indica que a função não tem efeitos colaterais e é avaliada 
	    no tempo de execução da query, mesmo se os parâmetros forem 
	    constantes, o que permite que o otimizador faça chamadas mais 
	    eficientes à função em alguns casos</entry>
          </row>

          <row>
            <entry><emphasis role="bold">#option action</emphasis></entry>

            <entry>Indica efeitos colaterais, o que exige que o otimizador 
	    mantenha todas as chamadas à função.</entry>
          </row>

          <row>
            <entry><emphasis role="bold">#body</emphasis></entry>

            <entry>Delimita o início do código executável. Todo o 
            <emphasis>code</emphasis>  que precede #body (como #include) é 
	    gerado fora da definição da função. Todo o código subsequente é 
	    gerado dentro da definição da função.
	    </entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>Exemplo:</para>

    <programlisting>//static int add(int x,int y) {
INTEGER4 add(INTEGER4 x, INTEGER4 y) := BEGINC++
  #option pure
  return x + y;
ENDC++;
         
OUTPUT(add(10,20));
          
//static void reverseString(size32_t &amp; __lenResult,char *  &amp; __result,
// size32_t lenValue,char * value) {
STRING reverseString(STRING value) := BEGINC++
   size32_t len = lenValue;
   char * out = (char *)rtlMalloc(len);
   for (unsigned i= 0; i &lt; len; i++)
        out[i] = value[len-1-i];
   __lenResult = len;
   __result = out;
ENDC++;
OUTPUT(reverseString('Kevin'));
// This is a function returning an unknown length string via the
// special reference parameters __lenResult and  __result
         
//this function demonstrates #body, allowing #include to be  used
BOOLEAN nocaseInList(STRING search,
          SET OF STRING values) := BEGINC++
#include &lt;string.h&gt;
#body 
  if (isAllValues)
    return true; 
  const byte * cur = (const byte *)values; 
  const byte * end = cur + lenValues; 
  while (cur != end) 
  { 
  unsigned len = *(unsigned *)cur; 
  cur += sizeof(unsigned); 
  if (lenSearch == len &amp;&amp; memicmp(search, cur, len) == 0) 
      return true; 
  cur += len; 
  } 
  return false;
ENDC++;
          
//and another example, generating a variable number of Xes
STRING buildString(INTEGER4 value) := BEGINC++
   char * out = (char *)rtlMalloc(value);
   for (unsigned i= 0; i &lt; value; i++)
     out[i] = 'X';
     __lenResult = value;
     __result = out;
ENDC++;

//examples of embedded, LINKCOUNTED, and STREAMED DATASETs
inRec := { unsigned id };
doneRec := { unsigned4 execid };
out1rec := { unsigned id; };
out2rec := { real id; };

DATASET(doneRec) doSomethingNasty(DATASET(inRec) input) := BEGINC++
  __lenResult = 4;
  __result = rtlMalloc(8);
  *(unsigned *)__result = 91823;
ENDC++;

DATASET(out1Rec) extractResult1(doneRec done) := BEGINC++
   const unsigned id = *(unsigned *)done;
   const unsigned cnt = 10;
   __lenResult = cnt * sizeof(unsigned __int64);
   __result = rtlMalloc(__lenResult);
   for (unsigned i=0; i &lt; cnt; i++)
       ((unsigned __int64 *)__result)[i] = id + i + 1;
ENDC++;

LINKCOUNTED DATASET(out2Rec) extractResult2(doneRec done) := BEGINC++
   const unsigned id = *(unsigned *)done;   
   const unsigned cnt = 10;
   __countResult = cnt;
   __result = _resultAllocator-&gt;createRowset(cnt);
   for (unsigned i=0; i &lt; cnt; i++)
   {
       size32_t allocSize;
        void * row = _resultAllocator-&gt;createRow(allocSize);
        *(double *)row = id + i + 1;
        __result[i] =  (byte *)_resultAllocator-&gt;finalizeRow(allocSize, row, allocSize);
   }
ENDC++;

STREAMED DATASET(out1Rec) extractResult3(doneRec done) := BEGINC++
   class myStream : public IRowStream, public RtlCInterface
   {
    public:
        myStream(IEngineRowAllocator * _allocator, unsigned _id) : 
        allocator(_allocator), id(_id), idx(0) {}
        RTLIMPLEMENT_IINTERFACE

        virtual const void *nextRow()
        {
            if (idx &gt;= 10)
               return NULL;
            size32_t allocSize;
            void * row = allocator-&gt;createRow(allocSize);
            *(unsigned __int64 *)row = id + ++idx;
            return allocator-&gt;finalizeRow(allocSize, row, allocSize);
        }
        virtual void stop() {}
    private:
        unsigned id;
        unsigned idx;
        Linked&lt;IEngineRowAllocator&gt; allocator;
    };
    #body
    const unsigned id = *(unsigned *)done;
    return new myStream(_resultAllocator, id);
ENDC++;

ds := DATASET([1,2,3,4], inRec);

processed := doSomethingNasty(ds);

out1 := NORMALIZE(processed, extractResult1(LEFT), TRANSFORM(RIGHT));
out2 := NORMALIZE(processed, extractResult2(LEFT), TRANSFORM(RIGHT));
out3 := NORMALIZE(processed, extractResult3(LEFT), TRANSFORM(RIGHT));

SEQUENTIAL(OUTPUT(out1),OUTPUT(out2),OUTPUT(out3));
</programlisting>

    <para>Ver também: <link linkend="External_Service_Implementation">
    Implementação de Serviços Externos</link>, 
    <link linkend="EMBED_Structure">Estrutura EMBED</link></para>
  </sect2>
</sect1>

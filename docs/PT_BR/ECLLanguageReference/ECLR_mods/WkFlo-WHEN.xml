<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<sect1 id="WHEN">
  <title>WHEN</title>

  <para><emphasis>action </emphasis><emphasis role="bold">: WHEN<indexterm>
      <primary>WHEN</primary>
    </indexterm>(</emphasis><emphasis> event </emphasis><emphasis
  role="bold">[</emphasis><emphasis> ,</emphasis><emphasis
  role="bold">COUNT<indexterm>
      <primary>COUNT</primary>
    </indexterm>(</emphasis><emphasis> repeat </emphasis><emphasis
  role="bold">) ] ) </emphasis><indexterm>
      <primary>WHEN workflow service</primary>
    </indexterm>;</para>

  <para><informaltable colsep="1" frame="all" rowsep="1">
      <tgroup cols="2">
        <colspec colwidth="79.45pt" />

        <colspec />

        <tbody>
          <row>
            <entry><emphasis>action</emphasis></entry>

            <entry>Qualquer ação ECL válida a ser executada.</entry>
          </row>

          <row>
            <entry><emphasis>event</emphasis></entry>

            <entry>O evento disparador da execução da ação. Pode ser as 
	    funções EVENT ou CRON, EVENTNAME ou o nome de um EVENTO EVENT 
	    (como um atalho para EVENT(event,'*')), ou qualquer atributo 
	    definido com essas funções.</entry>
          </row>

          <row>
            <entry><emphasis>COUNT</emphasis></entry>

            <entry>Opcional. Especifica o número de eventos que acionarão as 
	    instâncias da ação. Se omitido, o padrão é ilimitado 
	    (continuamente aguardando outro evento acionar outra instância da 
	    ação), até que a tarefa seja manualmente removida da lista das 
	    tarefas que estão sendo monitoradas pelo agendador.</entry>
          </row>

          <row>
            <entry><emphasis>repeat</emphasis></entry>

            <entry>Uma expressão de valor inteiro.</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable></para>

  <para>O serviço  <emphasis role="bold">WHEN  </emphasis> executa a 
  <emphasis>ação </emphasis> sempre que o  <emphasis>evento</emphasis> for 
  acionado. </para>

  <para>Exemplo:</para>

  <programlisting>IMPORT STD;
IF (STD.File.FileExists('test::myfile'),
     STD.File.DeleteLogicalFile('test::myfile'));
     //deletes the file if it already exists
  STD.File.MonitorLogicalFileName('MyFileEvent','test::myfile');
     //sets up monitoring and the event name
     //to fire when the file is found
  OUTPUT('File Created') : WHEN(EVENT('MyFileEvent','*'));
     //this OUTPUT occurs only after the event has fired
     //may also be coded in this shorthand form:
     // OUTPUT('File Created') : WHEN('MyFileEvent');
  afile := DATASET([{ 'A', '0'}], {STRING10 key,STRING10 val});
  OUTPUT(afile,,'test::myfile');
     //this creates a file that the DFU file monitor will find
     //when it periodically polls
     //**********************************
  EXPORT events := MODULE
    EXPORT dailyAtMidnight := CRON('0 0 * * *');
    EXPORT dailyAt( INTEGER hour,
                    INTEGER minute=0) :=
          EVENT('CRON',
               (STRING)minute + ' ' + (STRING)hour + ' * * *');
    EXPORT dailyAtMidday := dailyAt(12, 0);
  END;
  BUILD(teenagers) : WHEN(events.dailyAtMidnight);
  BUILD(oldies) : WHEN(events.dailyAt(6));
  BUILD(oldies) : WHEN(EVENT('FileDropped', 'x'));
</programlisting>

  <para>Ver também: <link linkend="EVENT">EVENT</link>, <link
  linkend="CRON">CRON</link>, <link linkend="NOTIFY">NOTIFY</link>, <link
  linkend="WAIT">WAIT</link></para>
</sect1>

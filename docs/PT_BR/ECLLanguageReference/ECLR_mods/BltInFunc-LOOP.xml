<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<sect1 id="LOOP">
  <title>LOOP</title>

  <para role="syntax"><emphasis role="bold">LOOP<indexterm>
      <primary>LOOP</primary>
    </indexterm><indexterm>
      <primary>LOOP function</primary>
    </indexterm>(</emphasis><emphasis> dataset</emphasis><emphasis role="bold"> </emphasis> <emphasis 
    role="bold"> [ </emphasis> <emphasis> ,loopcount</emphasis> <emphasis role="bold"> 
    ][</emphasis> <emphasis> ,loopfilter</emphasis> <emphasis role="bold"> ][
     </emphasis> <emphasis> ,loopcondition</emphasis> <emphasis role="bold"> ] 
     </emphasis> <emphasis>, loopbody </emphasis><emphasis role="bold">[, 
     UNORDERED | ORDERED(</emphasis> <emphasis>bool </emphasis><emphasis 
     role="bold">) ] [, STABLE | UNSTABLE ] [,ALGORITHM(</emphasis> 
     <emphasis>name </emphasis><emphasis role="bold">) ][, FEW] )</emphasis></para>

  <informaltable colsep="1" frame="all" rowsep="1">
    <tgroup cols="2">
      <colspec colwidth="85.50pt" />

      <colspec />

      <tbody>
        <row>
          <entry><emphasis>dataset</emphasis></entry>

          <entry>O conjunto de registros a ser processado.</entry>
        </row>

        <row>
          <entry><emphasis>loopcount<indexterm>
              <primary>loopcount</primary>
            </indexterm></emphasis></entry>

          <entry>Opcional. Uma expressão de número inteiro que especifica o número de 
	  vezes a iterar.</entry>
        </row>

        <row>
          <entry><emphasis>loopfilter<indexterm>
              <primary>loopfilter</primary>
            </indexterm></emphasis></entry>

          <entry>Opcional. Uma expressão booleana que deve ser um filtro de 
	  <emphasis>dataset</emphasis>  para o conjunto de dados que 
	  identifica registros cujo processamento ainda não está completo. Os 
	  registros filtrados estão completos, portanto, imediatamente 
	  colocados no conjunto de resultados final. Essa avaliação 
	  ocorre antes de cada iteração do 
          <emphasis>loopbody</emphasis>.</entry>
        </row>

        <row>
          <entry><emphasis>loopcondition<indexterm>
              <primary>loopcondition</primary>
            </indexterm></emphasis></entry>

          <entry>Opcional. Uma expressão booleana que continua
          <emphasis>loopbody</emphasis> iteração enquanto TRUE. 
	  Isso pode ser qualquer expressão lógica.</entry>
        </row>

        <row>
          <entry><emphasis>loopbody<indexterm>
              <primary>loopbody</primary>
            </indexterm></emphasis></entry>

          <entry>A operação a ser executada iterativamente. Isso pode ser um PROJETO, 
	  JOIN, uma função ou qualquer outra operação desse tipo. ROWS 
	  (ESQUERDA) é sempre usado como um parâmetro para o  <emphasis>loopbody</emphasis>
          , passando a forma atual do 
          <emphasis>dataset</emphasis> s como o parâmetro de entrada para cada iteração.</entry>
        </row>

        <row>
          <entry><emphasis role="bold">UNORDERED</emphasis></entry>

          <entry>Opcional. Especifica que a ordem do registro de resultado não 
	  é importante.</entry>
        </row>

        <row>
          <entry><emphasis role="bold">ORDERED</emphasis></entry>

          <entry>Especifica a importância da ordem do registro de 
	  resultado.</entry>
        </row>

        <row>
          <entry><emphasis>bool</emphasis></entry>

          <entry>Quando for “False” (Falso), especifica que a ordem do 
	  registro de resultado não é importante. Quando for “True’ 
	  (Verdadeiro), especifica a ordem padrão do registro de 
	  resultado.</entry>
        </row>

        <row>
          <entry><emphasis role="bold">STABLE</emphasis></entry>

          <entry>Opcional. Especifica que a ordem do registro de entrada é 
	  importante.</entry>
        </row>

        <row>
          <entry><emphasis role="bold">UNSTABLE</emphasis></entry>

          <entry>Opcional. Especifica que a ordem do registro de entrada não é 
	  importante.</entry>
        </row>

        <row>
          <entry><emphasis role="bold">ALGORITHM</emphasis></entry>

          <entry>Opcional. Substitui o algoritmo usado para essa
	   atividade.</entry>
        </row>

        <row>
          <entry><emphasis>name</emphasis></entry>

          <entry>O algoritmo a ser usado para essa atividade. Precisa fazer 
	  parte da lista de algoritmos compatíveis com as opções STABLE e 
	  UNSTABLE da função SORT.</entry>
        </row>

        <row>
          <entry><emphasis role="bold">FEW</emphasis></entry>

          <entry>Opcional. Indica que as atividades não exigirão uma grande 
	  quantidade de memória. Isso pode reduzir o número de subgráficos 
	  gerados em um LOOP, que diminui a sobrecarga. Usar apenas em 
	  consultas Thor.</entry>
        </row>

        <row>
          <entry>Return:</entry>

          <entry>LOOP retorna um conjunto de registros.</entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>

  <para>A função  <emphasis role="bold">LOOP</emphasis>  executa iterativamente 
  a operação  <emphasis>loopbody</emphasis>. A palavra-chave COUNTER <indexterm>
      <primary>COUNTER</primary>
    </indexterm>  está implicitamente disponível para uso para retornar a iteração atual.</para>

  <para>Os parâmetros  <emphasis>loopcount</emphasis>,  <emphasis>loopfilter</emphasis> e  
  <emphasis>loopcondition</emphasis>  são todos opcionais, mas pelo menos um dos
   três deve estar presente.</para>

  <para>Para cada iteração sucessiva, o conjunto de  <emphasis>dataset</emphasis>
   (expresso como ROWS (LEFT) como o parâmetro para o 
  <emphasis>loopfilter</emphasis>) é o conjunto de resultados da iteração 
  anterior após a aplicação de qualquer  <emphasis>loopfilter</emphasis>. O resultado 
  final do LOOP retorna todos os registros que concluíram o processamento, 
  independentemente da iteração em que a conclusão ocorreu (não apenas o 
  conjunto de resultados da iteração final).</para>

  <para>Exemplo:</para>

  <para><programlisting>namesRec := RECORD 
STRING20 lname;
STRING10 fname;
  UNSIGNED2 age := 25;
  UNSIGNED2 ctr := 0;
END;
namesTable2 := DATASET([{'Flintstone','Fred',35},
    {'Flintstone','Wilma',33},
    {'Jetson','Georgie',10},
    {'Mr. T','Z-man'}], namesRec);
loopBody(DATASET(namesRec) ds, unsigned4 c) :=
 PROJECT(ds,
    TRANSFORM(namesRec,
    SELF.age := LEFT.age*c;
    SELF.ctr := COUNTER ;
    SELF := LEFT));
//Form 1:
OUTPUT(LOOP(namesTable2,
  COUNTER &lt;= 10,
            PROJECT(ROWS(LEFT),
     TRANSFORM(namesRec,
     SELF.age := LEFT.age*2;
     SELF.ctr := LEFT.ctr + COUNTER ;
     SELF := LEFT))));
OUTPUT(LOOP(namesTable2, 4, ROWS(LEFT) &amp; ROWS(LEFT)));
//Form 2:
OUTPUT(LOOP(namesTable2,
  10,
  LEFT.age * COUNTER &lt;= 200,
            PROJECT(ROWS(LEFT),
     TRANSFORM(namesRec,
     SELF.age := LEFT.age*2;
     SELF := LEFT))));
//Form 3:
OUTPUT(LOOP(namesTable2,
  LEFT.age &lt; 100,
  loopBody(ROWS(LEFT), COUNTER)));
//Form 4:
OUTPUT(LOOP(namesTable2,
  SUM(ROWS(LEFT), age) &lt; 1000 * COUNTER,
            PROJECT(ROWS(LEFT),
     TRANSFORM(namesRec,
     SELF.age := LEFT.age*2;
     SELF := LEFT))));
//Form 5:
OUTPUT(LOOP(namesTable2,
  LEFT.age &lt; 100,
  EXISTS(ROWS(LEFT)) and SUM(ROWS(LEFT), age) &lt; 1000,
  loopBody(ROWS(LEFT), COUNTER)));
</programlisting>
  </sect2>
</sect1>

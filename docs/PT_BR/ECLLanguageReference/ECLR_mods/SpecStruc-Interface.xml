<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<sect1 id="INTERFACE_Structure">
  <title>Estrutura INTERFACE<indexterm>
      <primary>INTERFACE Structure</primary>
    </indexterm></title>

  <para><emphasis>interfacename </emphasis><emphasis role="bold">[ 
  (</emphasis><emphasis> parameters </emphasis><emphasis role="bold">) ] := 
  INTERFACE<indexterm>
      <primary>INTERFACE</primary>
    </indexterm> [ (</emphasis><emphasis> inherit </emphasis><emphasis
  role="bold">) ]</emphasis><emphasis role="bold"> </emphasis></para>

  <para><emphasis>members;</emphasis></para>

  <para><emphasis role="bold">END;</emphasis></para>

  <informaltable colsep="1" frame="all" rowsep="1">
    <tgroup cols="2">
      <colspec align="left" colwidth="122.40pt" />

      <colspec />

      <tbody>
        <row>
          <entry><emphasis>interfacename</emphasis></entry>

          <entry>O nome de definição ECL da interface.</entry>
        </row>

        <row>
          <entry><emphasis>parameters</emphasis></entry>

          <entry><para>Opcional. Os parâmetros de entrada da 
	  interface.</para></entry>
        </row>

        <row>
          <entry><emphasis>inherit</emphasis></entry>

          <entry>Opcional. Uma lista separada por vírgula das estruturas da 
	  INTERFACE cujos  <emphasis>membros</emphasis>  devem ser herdados. 
	  Esse pode não ser um parâmetro especificado. Várias  
	  <emphasis>interfaces</emphasis> herdadas podem conter definições de 
	  mesmo nome se forem do mesmo tipo e receberem os mesmos parâmetros; 
	  porém, se esses <emphasis>membros </emphasis> 
	  <emphasis>herdados</emphasis> possuem valores definidos, o conflito 
	  é solucionado pela substituição daquele <emphasis>membro</emphasis>  
	  na instância atual.</entry>
        </row>

        <row>
          <entry><emphasis>members</emphasis></entry>

          <entry>Definições, que podem ser EXPORTed ou SHARED. Estes podem ser 
	  semelhantes aos campos definidos em uma estrutura RECORD onde apenas 
          o tipo e o nome são definidos – a expressão que define o valor não
          deve ser incluída (exceto em alguns casos onde a própria expressão
          define o tipo da definição, como as estruturas TRANSFORM). Caso
	   nenhum valor padrão seja definido para o 
	   <emphasis>membro</emphasis>, qualquer MODULE (MÓDULO) derivado da 
	   INTERFACE deve definir o valor para aquele 
	   <emphasis>membro</emphasis> antes que o MODULE (MÓDULO) possa ser 
	   usado. Isso não inclui outra INTERFACE ou estruturas MODULE (MÓDULO) 
	   abstratas.</entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>

  <para>A estrutura  <emphasis role="bold">INTERFACE </emphasis>define um bloco 
  estruturado de  <emphasis>membros</emphasis>  relacionados que pode ter sido 
  especificado como um parâmetro único para consultas complexas – em vez de 
  especificar cada atributo individualmente. Isso é semelhante a uma estrutura 
  MODULE (MÓDULO) com a opção VIRTUAL , exceto que erros são fornecidos para 
  definições de <emphasis>membros</emphasis>  privados (não SHARED ou 
   EXPORTed).</para>

  <para>Uma INTERFACE é uma estrutura abstrata - uma instância concreta que 
  deve ser definida antes de ser usada em uma consulta. Uma estrutura MODULE 
  (MÓDULO) que herda a INTERFACE e define os valores para os  
  <emphasis>membros</emphasis> cria a instância concreta para ser usada pela 
  consulta.</para>

  <para>Exemplo:</para>

  <programlisting>HeaderRec := RECORD
  UNSIGNED4 RecID;
  STRING20  company;
  STRING25  address;
  STRING25  city;
  STRING2   state;
  STRING5   zip;
END;
HeaderFile := DATASET([{1,'ABC Co','123 Main','Boca Raton','FL','33487'},
                       {2,'XYZ Co','456 High','Jackson','MI','49202'},
                       {3,'ABC Co','619 Eaton','Jackson','MI','49202'},
                       {4,'XYZ Co','999 Yamato','Boca Raton','FL','33487'},
                       {5,'Joes Eats','666 Slippery Lane','Nether','SC','12345'}
                      ],HeaderRec);

//define an interface
IHeaderFileSearch := INTERFACE
  EXPORT STRING20 company_val;
  EXPORT STRING2   state_val;
  EXPORT STRING25  city_val := '';
END;

//define a function that uses that interface
FetchAddress(IHeaderFileSearch opts) := FUNCTION
        
  //define passed values tests
  CompanyPassed := opts.company_val &lt;&gt; '';
  StatePassed := opts.state_val &lt;&gt; '';
  CityPassed := opts.city_val &lt;&gt; '';

   //define passed value filters
   NFilter := HeaderFile.Company = opts.company_val;
   SFilter := HeaderFile.State = opts.state_val;
   CFilter := HeaderFile.City = opts.city_val;

   //define the actual filter to use based on the passed values
   filter := MAP(CompanyPassed AND StatePassed AND CityPassed
                    =&gt; NFilter AND SFilter AND CFilter,
            CompanyPassed AND StatePassed
                    =&gt; NFilter AND SFilter ,
            CompanyPassed AND CityPassed
                    =&gt; NFilter AND CFilter,
            StatePassed AND CityPassed
                    =&gt; SFilter AND CFilter,
            CompanyPassed =&gt; NFilter ,
            StatePassed =&gt; SFilter ,
            CityPassed =&gt; CFilter,
            TRUE);
   RETURN HeaderFile(filter);
END;
        
//*****************************************************************
//then you can use the interface

InRec  := {HeaderRec AND NOT [RecID,Address,Zip]};

//this MODULE creates a concrete instance
BatchHeaderSearch(InRec l) := MODULE(IHeaderFileSearch)
  EXPORT STRING120 company_val := l.company;
  EXPORT STRING2 state_val := l.state;
  EXPORT STRING25 city_val := l.city;
END;

//that can be used like this       
FetchAddress(BatchHeaderSearch(ROW({'ABC Co','',''},InRec))); 
 
//or we can define an input dataset
InFile := DATASET([{'ABC Co','Boca Raton','FL'},
                   {'XYZ Co','Jackson','MI'},
                   {'ABC Co','',''},
                   {'XYZ Co','',''},
                   {'Joes Eats','',''}
                  ],InRec);

//and an output nested child structure
HeaderRecs := RECORD
  UNSIGNED4 Pass;
  DATASET(HeaderRec) Headers;
END;

//and allow PROJECT to run the query once for each record in InFile
HeaderRecs XF(InRec L, INTEGER C) :=  TRANSFORM
  SELF.Pass := C;
  SELF.Headers := FetchAddress(BatchHeaderSearch(L));
END;
batchHeaderLookup := PROJECT(InFile,XF(LEFT,COUNTER));
batchHeaderLookup;</programlisting>
  <para>Ver também: <link linkend="MODULE_Structure">Estrutura MODULE</link>,
  <link linkend="LIBRARY">LIBRARY</link></para>
</sect1>

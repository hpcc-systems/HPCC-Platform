import{_ as t,a as i,o as a,ag as o}from"./chunks/framework.Do1Zayaf.js";const p=JSON.parse('{"title":"Dali Physical File Storage","description":"","frontmatter":{},"headers":[],"relativePath":"devdoc/dali.md","filePath":"devdoc/dali.md","lastUpdated":1761843274000}'),l={name:"devdoc/dali.md"};function n(r,e,s,d,c,h){return a(),i("div",null,e[0]||(e[0]=[o('<h1 id="dali-physical-file-storage" tabindex="-1">Dali Physical File Storage <a class="header-anchor" href="#dali-physical-file-storage" aria-label="Permalink to &quot;Dali Physical File Storage&quot;">​</a></h1><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>Dali maintains its metadata store through a versioned file system that uses multiple file types to ensure data integrity and provide crash recovery capabilities. The storage system is designed to handle both normal shutdown/startup cycles and unexpected failures (power loss, crashes).</p><h2 id="file-types-and-structure" tabindex="-1">File Types and Structure <a class="header-anchor" href="#file-types-and-structure" aria-label="Permalink to &quot;File Types and Structure&quot;">​</a></h2><p>Dali uses six types of physical files to manage its metadata store:</p><h3 id="_1-store-pointer-file-store-edition" tabindex="-1">1. Store Pointer File - <code>store.&lt;edition&gt;</code> <a class="header-anchor" href="#_1-store-pointer-file-store-edition" aria-label="Permalink to &quot;1. Store Pointer File - `store.&lt;edition&gt;`&quot;">​</a></h3><p><strong>Purpose</strong>: Indicates the current active version of the metadata store and provides integrity validation.</p><p><strong>Format</strong>: Simple binary file containing a 4-byte CRC value that corresponds to the main store file.</p><p><strong>Example</strong>: <code>store.1001</code> indicates edition 1001 is the current active store, and contains the CRC of <code>dalisds1001.xml</code>.</p><h3 id="_2-main-store-file-dalisds-edition-xml" tabindex="-1">2. Main Store File - <code>dalisds&lt;edition&gt;.xml</code> <a class="header-anchor" href="#_2-main-store-file-dalisds-edition-xml" aria-label="Permalink to &quot;2. Main Store File - `dalisds&lt;edition&gt;.xml`&quot;">​</a></h3><p><strong>Purpose</strong>: Contains the complete Dali metadata store in XML format.</p><p><strong>Format</strong>: Standard XML file containing the entire property tree structure representing all Dali metadata.</p><p><strong>Example</strong>: <code>dalisds1001.xml</code> contains the complete metadata store for edition 1001.</p><h3 id="_3-transaction-delta-file-daliinc-edition-xml" tabindex="-1">3. Transaction Delta File - <code>daliinc&lt;edition&gt;.xml</code> <a class="header-anchor" href="#_3-transaction-delta-file-daliinc-edition-xml" aria-label="Permalink to &quot;3. Transaction Delta File - `daliinc&lt;edition&gt;.xml`&quot;">​</a></h3><p><strong>Purpose</strong>: Records incremental write transactions as deltas to the main store.</p><p><strong>Format</strong>: XML file with special header containing:</p><ul><li>CRC validation header: <code>&lt;CRC&gt;0000000000&lt;/CRC&gt;</code></li><li>Size tracking header: <code>&lt;SIZE&gt;0000000000000000&lt;/SIZE&gt;</code></li><li>Followed by sequential transaction deltas</li></ul><p><strong>Usage</strong>:</p><ul><li>Every write transaction is appended to this file</li><li>Used by Sasha during routine coalescing to create new consolidated store editions</li><li>Used during crash recovery when in-memory state is lost</li><li>Normally not read by Dali during regular operation (only written to)</li></ul><p><strong>Example</strong>: <code>daliinc1001.xml</code> contains all transactions since the <code>dalisds1001.xml</code> store was created.</p><h3 id="_4-detached-transaction-file-dalidet-edition-xml" tabindex="-1">4. Detached Transaction File - <code>dalidet&lt;edition&gt;.xml</code> <a class="header-anchor" href="#_4-detached-transaction-file-dalidet-edition-xml" aria-label="Permalink to &quot;4. Detached Transaction File - `dalidet&lt;edition&gt;.xml`&quot;">​</a></h3><p><strong>Purpose</strong>: Temporary file created during Sasha coalescing operations.</p><p><strong>Format</strong>: Identical to <code>daliinc&lt;edition&gt;.xml</code> format.</p><p><strong>Usage</strong>:</p><ul><li>Created when Sasha begins coalescing a new store revision</li><li>Represents the &quot;detached&quot; transaction file that was atomically renamed from <code>daliinc</code></li><li>Allows Dali to continue writing to a fresh <code>daliinc</code> file during coalescing</li><li>Read by Sasha during normal coalescing process</li><li>Only used by Dali for crash recovery if both Dali and Sasha failed before completing the coalescing</li></ul><p><strong>Example</strong>: <code>dalidet1001.xml</code> contains transactions that were being processed when Sasha started coalescing.</p><h3 id="_5-external-binary-files-dalisds-id-bv2" tabindex="-1">5. External Binary Files - <code>dalisds_&lt;id&gt;.bv2</code> <a class="header-anchor" href="#_5-external-binary-files-dalisds-id-bv2" aria-label="Permalink to &quot;5. External Binary Files - `dalisds_&lt;id&gt;.bv2`&quot;">​</a></h3><p><strong>Purpose</strong>: Stores large property values externally to keep the main store files manageable in size.</p><p><strong>Format</strong>: Binary files containing compressed property values that exceed the size threshold.</p><p><strong>Size Thresholds</strong>:</p><ul><li>Property values are compressed if they exceed 4KB (jptree compression threshold)</li><li>Values exceeding 10KB (after compression, configurable) are externalized to these files</li></ul><p><strong>Usage</strong>:</p><ul><li>Created when write transactions contain property values exceeding the size threshold</li><li>Each file is assigned a sequential integer identifier <code>&lt;id&gt;</code></li><li>Property tree nodes reference external files via <code>@sds:ext</code> attribute (e.g., <code>@sds:ext=&quot;34&quot;</code>)</li><li>Values are loaded lazily on-demand when clients access the property</li><li>External values are not serialized until specifically probed by client code</li></ul><p><strong>Example</strong>: <code>dalisds_34.bv2</code> contains an externalized property value, referenced by <code>@sds:ext=&quot;34&quot;</code> in the property tree.</p><h3 id="_6-coven-configuration-file-dalicoven-xml" tabindex="-1">6. Coven Configuration File - <code>dalicoven.xml</code> <a class="header-anchor" href="#_6-coven-configuration-file-dalicoven-xml" aria-label="Permalink to &quot;6. Coven Configuration File - `dalicoven.xml`&quot;">​</a></h3><p><strong>Purpose</strong>: Stores global Dali state meta data</p><p><strong>Format</strong>: XML file containing a limited flat set of values</p><ul><li>UIDBase - used by getUniqueID to fetch ranged of unique identifiers</li><li>SDSNodes - stores an estimate of # of nodes in SDS, used to pre-size the table on startup</li><li>ServerID - legacy, not actively used</li><li>CovenID - legacy, not actively used</li><li>SDSEdition - legacy, not actively used</li></ul><h2 id="normal-operation" tabindex="-1">Normal Operation <a class="header-anchor" href="#normal-operation" aria-label="Permalink to &quot;Normal Operation&quot;">​</a></h2><p>During normal operation:</p><ol><li><strong>Startup</strong>: Dali loads the main store file (<code>dalisds&lt;edition&gt;.xml</code>) indicated by <code>store.&lt;edition&gt;</code><ul><li>On first startup in a clean environment, no store files exist and Dali creates <code>daliinc.xml</code> (without edition number)</li></ul></li><li><strong>Write Operations</strong>: All write transactions are appended to <code>daliinc&lt;edition&gt;.xml</code> (or <code>daliinc.xml</code> for initial startup)</li><li><strong>Shutdown</strong>: Dali saves its complete in-memory state to a new store file and updates the store pointer</li><li><strong>Transaction files do not exist</strong> after normal shutdown since the complete state is saved to a new store edition</li></ol><h2 id="sasha-coalescing-process" tabindex="-1">Sasha Coalescing Process <a class="header-anchor" href="#sasha-coalescing-process" aria-label="Permalink to &quot;Sasha Coalescing Process&quot;">​</a></h2><p>Sasha (the store coalescing service) periodically consolidates the store:</p><ol><li><strong>Detach</strong>: Atomically renames <code>daliinc&lt;edition&gt;.xml</code> to <code>dalidet&lt;edition&gt;.xml</code></li><li><strong>Fresh Start</strong>: Dali begins writing new transactions to a fresh <code>daliinc&lt;edition+1&gt;.xml</code></li><li><strong>Coalesce</strong>: Sasha loads the base store + detached transactions and saves a new consolidated store</li><li><strong>Atomic Update</strong>: Updates <code>store.&lt;edition+1&gt;</code> to point to the new consolidated store</li><li><strong>Cleanup</strong>: Removes old files after successful coalescing</li></ol><h2 id="crash-recovery-scenarios" tabindex="-1">Crash Recovery Scenarios <a class="header-anchor" href="#crash-recovery-scenarios" aria-label="Permalink to &quot;Crash Recovery Scenarios&quot;">​</a></h2><h3 id="single-file-recovery" tabindex="-1">Single File Recovery <a class="header-anchor" href="#single-file-recovery" aria-label="Permalink to &quot;Single File Recovery&quot;">​</a></h3><p><strong>Scenario</strong>: Dali crashes but Sasha was not coalescing.</p><p><strong>Recovery</strong>:</p><ol><li>Load base store from <code>dalisds&lt;edition&gt;.xml</code></li><li>Apply transactions from <code>daliinc&lt;edition&gt;.xml</code> (if present)</li></ol><h3 id="dual-file-recovery" tabindex="-1">Dual File Recovery <a class="header-anchor" href="#dual-file-recovery" aria-label="Permalink to &quot;Dual File Recovery&quot;">​</a></h3><p><strong>Scenario</strong>: Dali crashes while Sasha was coalescing (both <code>dalidet</code> and <code>daliinc</code> exist).</p><p><strong>Recovery</strong>:</p><ol><li>Load base store from <code>dalisds&lt;edition&gt;.xml</code></li><li>Apply transactions from <code>dalidet&lt;edition&gt;.xml</code> first (older transactions)</li><li>Apply transactions from <code>daliinc&lt;edition&gt;.xml</code> second (newer transactions)</li></ol><h2 id="file-naming-convention" tabindex="-1">File Naming Convention <a class="header-anchor" href="#file-naming-convention" aria-label="Permalink to &quot;File Naming Convention&quot;">​</a></h2><p>Store and transaction files use the pattern <code>&lt;basename&gt;&lt;edition&gt;.xml</code> where:</p><ul><li><code>&lt;basename&gt;</code> identifies the file type (<code>dalisds</code>, <code>daliinc</code>, <code>dalidet</code>)</li><li><code>&lt;edition&gt;</code> is a numeric version identifier that increments with each new store version</li><li>The <code>store.&lt;edition&gt;</code> file uses only the edition number without <code>.xml</code> extension</li></ul><p>External binary files use the pattern <code>dalisds_&lt;id&gt;.bv2</code> where:</p><ul><li><code>&lt;id&gt;</code> is a sequential integer identifier for each externalized property value</li></ul><h2 id="implementation-notes" tabindex="-1">Implementation Notes <a class="header-anchor" href="#implementation-notes" aria-label="Permalink to &quot;Implementation Notes&quot;">​</a></h2><ul><li>CRC validation ensures store integrity during loading</li><li>Multiple store versions are retained for backup purposes (configurable retention count)</li></ul>',60)]))}const u=t(l,[["render",n]]);export{p as __pageData,u as default};

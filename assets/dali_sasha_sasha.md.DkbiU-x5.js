import{_ as t,a as i,o as a,ag as l}from"./chunks/framework.Do1Zayaf.js";const f=JSON.parse('{"title":"Sasha","description":"","frontmatter":{},"headers":[],"relativePath":"dali/sasha/sasha.md","filePath":"dali/sasha/sasha.md","lastUpdated":1761843274000}'),n={name:"dali/sasha/sasha.md"};function o(s,e,r,d,h,u){return a(),i("div",null,e[0]||(e[0]=[l('<h1 id="sasha" tabindex="-1">Sasha <a class="header-anchor" href="#sasha" aria-label="Permalink to &quot;Sasha&quot;">​</a></h1><h2 id="services" tabindex="-1">Services <a class="header-anchor" href="#services" aria-label="Permalink to &quot;Services&quot;">​</a></h2><h3 id="debug-plane-housekeeping-server" tabindex="-1">Debug Plane Housekeeping Server <a class="header-anchor" href="#debug-plane-housekeeping-server" aria-label="Permalink to &quot;Debug Plane Housekeeping Server&quot;">​</a></h3><h4 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h4><ul><li>This is a maintenance service that automatically manages files and directories on the debug plane using a configured retention period.</li><li>This is required to control the disc space used by post-mortem and other files on the debug plane.</li><li>This service is designed to execute on a schedule; a single log entry for a summary of any deleted (or failed to be deleted) files or deleted directories will be generated.</li></ul><h4 id="installation-and-configuration" tabindex="-1">Installation and Configuration <a class="header-anchor" href="#installation-and-configuration" aria-label="Permalink to &quot;Installation and Configuration&quot;">​</a></h4><ul><li>The service is installed and active by default.</li><li>It is configuration-driven with fallback to defaults in the configuration yaml files. <ul><li><p>For example <code>values.yaml</code> :</p><table tabindex="0"><thead><tr><th style="text-align:left;">attribute</th><th style="text-align:left;">description</th><th style="text-align:left;">default</th><th style="text-align:left;">required</th></tr></thead><tbody><tr><td style="text-align:left;">disabled</td><td style="text-align:left;">Disable or enable this service.</td><td style="text-align:left;">false</td><td style="text-align:left;">optional</td></tr><tr><td style="text-align:left;">interval</td><td style="text-align:left;">Minimum interval between debug plane housekeeping expiry checking (in hours, 0 disables).</td><td style="text-align:left;">24</td><td style="text-align:left;">optional</td></tr><tr><td style="text-align:left;">at</td><td style="text-align:left;">Schedule to check for debug plane expired files and directories (cron format).</td><td style="text-align:left;">* 3 * * *</td><td style="text-align:left;">optional</td></tr><tr><td style="text-align:left;">expiryDays</td><td style="text-align:left;">Default number of days passed that debug plane files or directories are deleted.</td><td style="text-align:left;">14</td><td style="text-align:left;">optional</td></tr></tbody></table></li></ul></li></ul><h4 id="user-guide" tabindex="-1">User Guide <a class="header-anchor" href="#user-guide" aria-label="Permalink to &quot;User Guide&quot;">​</a></h4><h5 id="how-it-works-in-steps" tabindex="-1">How it works in steps <a class="header-anchor" href="#how-it-works-in-steps" aria-label="Permalink to &quot;How it works in steps&quot;">​</a></h5><ol><li>The <code>disabled</code> value is read from the component configuration</li><li>If <code>disabled</code> is <code>true</code> then the service is not started.</li><li>The schedule is read from the component configuration.</li><li>If the <code>interval</code> is 0 then the service is stopped.</li><li>The debug plane location is read from the component configuration.</li><li>The service <code>Thread</code> is started.</li><li>A loop of the following is started until the service is stopped: <ol><li>A one minute wait is imposed.</li><li>If the schedule using <code>at</code> and <code>interval</code> indicates that the housekeeping is required then: <ol><li>Any exceptions from the following are caught and logged. <ol><li>The debug plane directory list is read.</li><li>The list of files and directories in the debug plane are processed: <ol><li>If the file or directory&#39;s modified date is over <code>expiryDays</code> old then: <ol><li>The file or directory is deleted.</li><li>A counter for each file or directory is maintained.</li></ol></li></ol></li><li>A log entry is made giving the total number of files and directories deleted.</li></ol></li></ol></li></ol></li></ol><h5 id="inputs-and-outputs" tabindex="-1">Inputs and Outputs <a class="header-anchor" href="#inputs-and-outputs" aria-label="Permalink to &quot;Inputs and Outputs&quot;">​</a></h5><ul><li>The component configuration as per <a href="#installation-and-configuration">Installation and Configuration</a> is the input for this service.</li><li>The outputs are any logs generated for errors and deletion statistics.</li></ul><h5 id="error-handling" tabindex="-1">Error Handling <a class="header-anchor" href="#error-handling" aria-label="Permalink to &quot;Error Handling&quot;">​</a></h5><ul><li>Known exceptions are handled to prevent service interruption.</li></ul><h4 id="limitations-and-considerations" tabindex="-1">Limitations and Considerations <a class="header-anchor" href="#limitations-and-considerations" aria-label="Permalink to &quot;Limitations and Considerations&quot;">​</a></h4><ul><li>The service ensures it only runs in containerized environments.</li></ul><h4 id="future-possible-enhancements" tabindex="-1">Future Possible Enhancements <a class="header-anchor" href="#future-possible-enhancements" aria-label="Permalink to &quot;Future Possible Enhancements&quot;">​</a></h4><ul><li>A bare metal implementation.</li><li>Logging freed up disc space statistics.</li></ul>',18)]))}const g=t(n,[["render",o]]);export{f as __pageData,g as default};

import{_ as a,a as i,o as e,ag as t}from"./chunks/framework.Do1Zayaf.js";const d=JSON.parse('{"title":"elastic4hpccobservability","description":"","frontmatter":{},"headers":[],"relativePath":"helm/managed/observability/eck/README.md","filePath":"helm/managed/observability/eck/README.md","lastUpdated":1761843274000}'),l={name:"helm/managed/observability/eck/README.md"};function n(h,s,r,p,o,c){return e(),i("div",null,s[0]||(s[0]=[t(`<h1 id="elastic4hpccobservability" tabindex="-1">elastic4hpccobservability <a class="header-anchor" href="#elastic4hpccobservability" aria-label="Permalink to &quot;elastic4hpccobservability&quot;">​</a></h1><p><strong>elastic4hpccobservability</strong> is a self-contained observability solution for the HPCC Platform. It leverages the Elastic Stack (Elasticsearch, Kibana, APM Server) and OpenTelemetry Collector to provide tracing and logging observability data for HPCC clusters. This project delivers a streamlined, secure, and automated way to deploy, configure, and access observability infrastructure for testing and development using Helm charts. This chart makes several assumptions, including that no modifications are made to the base HPCC Platform helm deployment. Customization of the HPCC Platform cluster might require counterpart changes to this chart.</p><hr><h2 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-label="Permalink to &quot;Features&quot;">​</a></h2><ul><li>Automated deployment of Elastic Stack components and OpenTelemetry Collector via Helm</li><li>Secure integration with HPCC Platform for trace data export</li><li>Pre-configured dashboards and APM UI in Kibana</li><li>Simple debugging and connectivity validation steps</li></ul><hr><h2 id="quick-start" tabindex="-1">Quick Start <a class="header-anchor" href="#quick-start" aria-label="Permalink to &quot;Quick Start&quot;">​</a></h2><h3 id="pre-requisites" tabindex="-1">Pre-Requisites <a class="header-anchor" href="#pre-requisites" aria-label="Permalink to &quot;Pre-Requisites&quot;">​</a></h3><h4 id="kubernetes-cluster" tabindex="-1">Kubernetes Cluster <a class="header-anchor" href="#kubernetes-cluster" aria-label="Permalink to &quot;Kubernetes Cluster&quot;">​</a></h4><p>A running Kubernetes cluster (v1.21+ recommended). Sufficient resources (CPU, memory, storage) for HPCC components and observability stack. kubectl configured and authenticated to access the cluster.</p><h4 id="helm" tabindex="-1">Helm <a class="header-anchor" href="#helm" aria-label="Permalink to &quot;Helm&quot;">​</a></h4><p>Helm v3.6+ installed and configured.</p><h4 id="hpcc-platform" tabindex="-1">HPCC Platform <a class="header-anchor" href="#hpcc-platform" aria-label="Permalink to &quot;HPCC Platform&quot;">​</a></h4><p>Local access to HPCC-Systems/HPCC-Platform&#39;s git repository</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/hpcc-systems/HPCC-Platform.git</span></span></code></pre></div><h4 id="access-to-the-eck4hpccobservability-chart" tabindex="-1">Access to the ECK4HPCCObservability chart <a class="header-anchor" href="#access-to-the-eck4hpccobservability-chart" aria-label="Permalink to &quot;Access to the ECK4HPCCObservability chart&quot;">​</a></h4><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HPCC-Platform/helm/managed/observability/eck</span></span></code></pre></div><h4 id="elastic-otel-and-hpcc-systems-helm-repositories" tabindex="-1">Elastic, OTel and HPCC Systems Helm Repositories <a class="header-anchor" href="#elastic-otel-and-hpcc-systems-helm-repositories" aria-label="Permalink to &quot;Elastic, OTel and HPCC Systems Helm Repositories&quot;">​</a></h4><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> repo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> elastic</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://helm.elastic.co</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> repo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> otel</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://open-telemetry.github.io/opentelemetry-helm-charts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> repo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hpcc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://hpcc-systems.github.io/helm-chart/</span></span></code></pre></div><blockquote><p><strong>Note:</strong> If any of the above repos were previously added, take note of the local aliases and use them where appropriate</p></blockquote><h3 id="_1-fetch-dependency-helm-charts" tabindex="-1">1. Fetch Dependency Helm Charts <a class="header-anchor" href="#_1-fetch-dependency-helm-charts" aria-label="Permalink to &quot;1. Fetch Dependency Helm Charts&quot;">​</a></h3><p>From the <code>HPCC-Platform/helm/managed/observability/eck/</code> directory:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HPCC-Platform/helm/managed/observability/eck/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dependency</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre></div><h3 id="_2-install-elastic-eck-operator" tabindex="-1">2. Install Elastic ECK Operator <a class="header-anchor" href="#_2-install-elastic-eck-operator" aria-label="Permalink to &quot;2. Install Elastic ECK Operator&quot;">​</a></h3><blockquote><p><strong>Note:</strong> The release must be named <code>elastic-operator</code>.</p></blockquote><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> elastic-operator</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> elastic/eck-operator</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> elastic-system</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --create-namespace</span></span></code></pre></div><h3 id="_3-create-service-account-optional" tabindex="-1">3. Create service Account (optional) <a class="header-anchor" href="#_3-create-service-account-optional" aria-label="Permalink to &quot;3. Create service Account (optional)&quot;">​</a></h3><p>This step is only necessary to annotate HPCC component logs with kubernetes metadata which is useful when using logs to debug issues.</p><p>From the <code>HPCC-Platform/helm/managed/observability/eck/</code> directory:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HPCC-Platform/helm/managed/observability/eck/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apply</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./service-account.yaml</span></span></code></pre></div><h3 id="_4-install-the-observability-chart" tabindex="-1">4. Install the Observability Chart <a class="header-anchor" href="#_4-install-the-observability-chart" aria-label="Permalink to &quot;4. Install the Observability Chart&quot;">​</a></h3><blockquote><p><strong>Note:</strong> The release must be named <code>eck-apm</code>.</p></blockquote><p>From the <code>HPCC-Platform/helm/managed/observability/eck/</code> directory:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HPCC-Platform/helm/managed/observability/eck</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eck-apm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre></div><h3 id="_5-configure-hpcc-to-export-traces" tabindex="-1">5. Configure HPCC to Export Traces <a class="header-anchor" href="#_5-configure-hpcc-to-export-traces" aria-label="Permalink to &quot;5. Configure HPCC to Export Traces&quot;">​</a></h3><p>Inject the sample <a href="https://github.com/hpcc-systems/HPCC-Platform/blob/master/helm/managed/observability/eck/otlp-http-collector-k8s.yaml" target="_blank" rel="noreferrer">jtrace configuration values file</a> onto your HPCC cluster.</p><p>Details on HPCC trace configuration can be found in <a href="https://github.com/hpcc-systems/HPCC-Platform/blob/master/helm/examples/tracing/README.md" target="_blank" rel="noreferrer">helm/examples/tracing/README</a>.</p><p>From the HPCC Platform root directory, run one of:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#Choose this option if HPCC-Platform is currently NOT deployed</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#deploy fresh HPCC cluster</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> myhpcc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hpcc/hpcc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> helm/managed/observability/eck/otlp-http-collector-k8s.yaml</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#Choose this option if HPCC-Platform is already deployed</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#upgrade pre-existing HPCC cluster</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#Note: this command assumes the existing cluster is named myhpcc, use the actual cluster name</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> upgrade</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> myhpcc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hpcc/hpcc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> helm/managed/observability/eck/otlp-http-collector-k8s.yaml</span></span></code></pre></div><p>We can configure ECLWatch to expose links to specific trace graphs on Kibana/APM by providing an &#39;external link&#39; values file.</p><p>This project provides 2 sample values files which links ECLWatch with either a trace query link on the last 15minutes (observability-eclwatch-links-last15mins.yaml) or a custom time range (observability-eclwatch-links-variable-time.yaml).</p><p>To enable the ECK(Elastic/Kibana) links on ECLWatch provide either of the aforementioned values files as such:</p><p>From the HPCC Platform root directory, run one of:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> upgrade</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> myhpcc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> helm/hpcc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> helm/managed/observability/eck/observability-eclwatch-links-last15mins.yaml</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># or</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> upgrade</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> myhpcc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> helm/hpcc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> helm/managed/observability/eck/observability-eclwatch-links-variable-time.yaml</span></span></code></pre></div><p>Of note: the sample commands assume a pre-existing and pre-deployed HPCC cluster named &#39;myhpcc&#39; is available. If not, perform a &#39;helm install&#39; command otherwise. If a pre-deployed cluster does exist, but under a different name, simply replace &#39;myhpcc&#39; in the above command with the correct name.</p><p>Also, the &#39;observability-eclwatch-links&#39; values files overwrite the entire ESP component. If the target HPCC cluster has specific ESP configuration needs, they would need to be reflected in the values file.</p><hr><h2 id="accessing-observability-data" tabindex="-1">Accessing Observability Data <a class="header-anchor" href="#accessing-observability-data" aria-label="Permalink to &quot;Accessing Observability Data&quot;">​</a></h2><h3 id="access-via-kibana" tabindex="-1">Access via Kibana <a class="header-anchor" href="#access-via-kibana" aria-label="Permalink to &quot;Access via Kibana&quot;">​</a></h3><ul><li><p>Kibana UI: <a href="https://localhost:5601" target="_blank" rel="noreferrer">https://localhost:5601</a></p><ul><li>Your browser may warn about a self-signed certificate.</li></ul></li><li><p>Login with username: <code>elastic</code></p></li><li><p>Fetch the password for the <code>elastic</code> user:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> secret</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> elasticsearch-es-elastic-user</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o=jsonpath=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;{.data.elastic}&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> base64</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --decode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span></span></code></pre></div></li></ul><h4 id="access-trace-data" tabindex="-1">Access Trace data <a class="header-anchor" href="#access-trace-data" aria-label="Permalink to &quot;Access Trace data&quot;">​</a></h4><ul><li>Once logged in, navigate to <strong>Observability (top-right hamburger menu) then Applications → Traces</strong></li><li>Ensure the time range (top right) is set appropriately</li><li>Traces are grouped by originating service (esp, thor, etc.) or transaction type (wsstore/feth, wsworkunits/wuquery, run_workunit, etc)</li><li>Specific traces can be queried by many keywords such as trace.id, span.id</li><li>Traces can be interrogated for timings, errors, dependency order, and other transaction span idiosyncrasies</li></ul><h4 id="access-log-data" tabindex="-1">Access Log data <a class="header-anchor" href="#access-log-data" aria-label="Permalink to &quot;Access Log data&quot;">​</a></h4><ul><li>If HPCC logs are available, trace-relevant log information is trivially accessed by choosing &quot;Investigate-&gt;Trace Logs&quot; from the trace view.</li><li>This action will forward the user to the &quot;Discover&quot; view with a default query searching for all logs which contain the trace.id</li><li>This query can be changed to expand or focus the log information presented</li><li>The view can be customized to display fields of interest such as the log message, the source pod name, etc.</li><li>Otherwise, logs can be queried via Elastic&#39;s query language (KQL) by navigating to &quot;Discover&quot; from the hamburger button.</li></ul><h5 id="configure-hpcc-log-access" tabindex="-1">Configure HPCC Log Access <a class="header-anchor" href="#configure-hpcc-log-access" aria-label="Permalink to &quot;Configure HPCC Log Access&quot;">​</a></h5><p>In order to enable ECLWatch logviewers to fetch logs from the ECK stack, provide logaccess configuration values targeting the filebeat index on Elastic Search</p><ul><li><p>Create a Kubernetes secret containing the username and password for the target Elastic. Set the username to &#39;elastic&#39; and the password fetched from the &#39;elasticsearch-es-elastic-user&#39; secret</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> secret</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> elasticsearch-es-elastic-user</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o=jsonpath=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;{.data.elastic}&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> base64</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --decode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> secret</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> generic</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> elastic4hpcclogs-elastic-user</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --from-literal=username=elastic</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --from-literal=password=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">password</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> abov</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div></li><li><p>Provide the name of the newly created secret, and approprite cert secrets. See sample values file &#39;./elastic4hpccobservability-https-logaccess.yaml&#39;</p></li></ul><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> upgrade</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> myhpcc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hpcc/hpcc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> helm/managed/observability/eck/otlp-http-collector-k8s.yaml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> helm/managed/observability/eck/elastic4hpccobservability-https-logaccess.yaml</span></span></code></pre></div><hr><h2 id="debugging-validation" tabindex="-1">Debugging &amp; Validation <a class="header-anchor" href="#debugging-validation" aria-label="Permalink to &quot;Debugging &amp; Validation&quot;">​</a></h2><h3 id="test-opentelemetry-collector" tabindex="-1">Test OpenTelemetry Collector <a class="header-anchor" href="#test-opentelemetry-collector" aria-label="Permalink to &quot;Test OpenTelemetry Collector&quot;">​</a></h3><p>Generate sample traces:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ghcr.io/open-telemetry/opentelemetry-collector-contrib/telemetrygen:latest</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  traces</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --otlp-endpoint=host.docker.internal:4317</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --otlp-insecure</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --duration=30s</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --rate=5</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --service=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;test-service&quot;</span></span></code></pre></div><h3 id="test-apm-server-certificate-based-connectivity" tabindex="-1">Test APM Server Certificate-Based Connectivity <a class="header-anchor" href="#test-apm-server-certificate-based-connectivity" aria-label="Permalink to &quot;Test APM Server Certificate-Based Connectivity&quot;">​</a></h3><p>By default the APM server is not accessible outside of the cluster. To test, perform the following steps from within the cluster, or expose the service outside of the cluster.</p><h4 id="fetch-elastic-apm-token-and-ca-certificate" tabindex="-1">Fetch Elastic APM Token and CA Certificate <a class="header-anchor" href="#fetch-elastic-apm-token-and-ca-certificate" aria-label="Permalink to &quot;Fetch Elastic APM Token and CA Certificate&quot;">​</a></h4><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ELASTIC_APM_SECRET_TOKEN</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> secret/eck-apm-eck-apm-server-apm-token</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --template</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;{{index .data &quot;secret-token&quot;}}&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> base64</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ELASTIC_APM_SERVER_CA_CERT_FILE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mktemp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="confirm-environment-variables" tabindex="-1">Confirm environment variables: <a class="header-anchor" href="#confirm-environment-variables" aria-label="Permalink to &quot;Confirm environment variables:&quot;">​</a></h4><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">env</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ELASTIC_APM_</span></span></code></pre></div><h4 id="contact-apm-server" tabindex="-1">Contact APM server <a class="header-anchor" href="#contact-apm-server" aria-label="Permalink to &quot;Contact APM server&quot;">​</a></h4><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --resolve</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:8200:127.0.0.1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --cacert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \${ELASTIC_APM_SERVER_CA_CERT_FILE} </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -H</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Authorization: Bearer \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ELASTIC_APM_SECRET_TOKEN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  https://eck-apm-eck-apm-server-apm-http.default.svc:8200</span></span></code></pre></div><hr><h2 id="project-structure" tabindex="-1">Project Structure <a class="header-anchor" href="#project-structure" aria-label="Permalink to &quot;Project Structure&quot;">​</a></h2><ul><li><strong>Helm charts:</strong> Automated deployment of Elastic Stack and OpenTelemetry Collector</li><li><strong>Pre-configured values:</strong> HPCC jTrace pipeline</li><li><strong>Documentation:</strong> Step-by-step setup, access, and troubleshooting</li></ul><hr>`,76)]))}const g=a(l,[["render",n]]);export{d as __pageData,g as default};

import{_ as a,a as s,o as n,ag as t}from"./chunks/framework.Do1Zayaf.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"helm/managed/logging/loki-stack/README.md","filePath":"helm/managed/logging/loki-stack/README.md","lastUpdated":1761843274000}'),o={name:"helm/managed/logging/loki-stack/README.md"};function l(i,e,c,p,r,h){return n(),s("div",null,e[0]||(e[0]=[t(`<h2 id="this-folder-contains-lightweight-loki-stack-deployment-chart-and-hpcc-systems-preferred-values" tabindex="-1">This folder contains lightweight Loki Stack deployment chart and HPCC Systems preferred values <a class="header-anchor" href="#this-folder-contains-lightweight-loki-stack-deployment-chart-and-hpcc-systems-preferred-values" aria-label="Permalink to &quot;This folder contains lightweight Loki Stack deployment chart and HPCC Systems preferred values&quot;">​</a></h2><p>This chart describes a local, minimal Loki Stack instance for HPCC Systems component log processing. Once successfully deployed, HPCC component logs produced within the same namespace are forwarded to the Loki aggregation system via Promtail, and exposed via Grafana.</p><p>Users can query those logs by issuing Grafana DataSource API queries, or interactively through the GrafanaUI.</p><p>A Loki Datasource is created automatically, which allowers users to monitor/query HPCC component logs via Grafana.</p><h3 id="helm-deployment" tabindex="-1">Helm Deployment <a class="header-anchor" href="#helm-deployment" aria-label="Permalink to &quot;Helm Deployment&quot;">​</a></h3><p>To deploy the light-weight Loki Stack for HPCC component log processing issue the following command:</p><blockquote><p>helm install myloki4hpcclogs HPCC-Systems/helm/managed/logging/loki-stack/ Note: the deployment name &#39;myloki4hpcclogs&#39; is customizable; however, any changes need to be reflected in the LogAccess configuration (See section on configuring LogAccess below)</p></blockquote><h3 id="dependencies" tabindex="-1">Dependencies <a class="header-anchor" href="#dependencies" aria-label="Permalink to &quot;Dependencies&quot;">​</a></h3><p>This chart is dependent on the Grafana Loki-stack Helm charts which in turn is dependent on Loki, Grafana, Promtail.</p><h4 id="dependency-update" tabindex="-1">Dependency update <a class="header-anchor" href="#dependency-update" aria-label="Permalink to &quot;Dependency update&quot;">​</a></h4><h5 id="helm-command" tabindex="-1">HELM Command <a class="header-anchor" href="#helm-command" aria-label="Permalink to &quot;HELM Command&quot;">​</a></h5><p>Helm provides a convenient command to automatically pull appropriate dependencies to the /charts directory:</p><blockquote><p>helm dependency update HPCC-Systems/helm/managed/logging/loki-stack/</p></blockquote><h5 id="helm-install-parameter" tabindex="-1">HELM Install parameter <a class="header-anchor" href="#helm-install-parameter" aria-label="Permalink to &quot;HELM Install parameter&quot;">​</a></h5><p>Otherwise, provide the &quot;--dependency-update&quot; argument in the helm install command For example:</p><blockquote><p>helm install myloki4hpcclogs HPCC-Systems/helm/managed/logging/loki-stack/ --dependency-update</p></blockquote><p>Note: the deployment name &#39;myloki4hpcclogs&#39; is customizable; however, any changes need to be reflected in the LogAccess configuration (See section on configuring LogAccess below)</p><h3 id="components" tabindex="-1">Components <a class="header-anchor" href="#components" aria-label="Permalink to &quot;Components&quot;">​</a></h3><p>Grafana Loki Stack is comprised of a set of components that which serve as a full-featured logging stack.</p><p>The Stack is described as such:</p><blockquote><p>Unlike other logging systems, Loki is built around the idea of only indexing metadata about your logs: labels (just like Prometheus labels). Log data itself is then compressed and stored in chunks in object stores such as S3 or GCS, or even locally on the filesystem. A small index and highly compressed chunks simplifies the operation and significantly lowers the cost of Loki.</p></blockquote><h4 id="promtail" tabindex="-1">Promtail <a class="header-anchor" href="#promtail" aria-label="Permalink to &quot;Promtail&quot;">​</a></h4><blockquote><p>Promtail is an agent which ships the contents of local logs to a Loki instance</p></blockquote><p>Further reading here: <a href="https://github.com/grafana/helm-charts/tree/main/charts/promtail" target="_blank" rel="noreferrer">https://github.com/grafana/helm-charts/tree/main/charts/promtail</a></p><h4 id="loki" tabindex="-1">Loki <a class="header-anchor" href="#loki" aria-label="Permalink to &quot;Loki&quot;">​</a></h4><blockquote><p>A horizontally-scalable, highly-available, multi-tenant log aggregation system inspired by Prometheus. It is designed to be very cost effective and easy to operate. It does not index the contents of the logs, but rather a set of labels for each log stream.is self described as &quot;Like Prometheus, but for logs&quot;</p></blockquote><p>Further reading here: <a href="https://github.com/grafana/loki" target="_blank" rel="noreferrer">https://github.com/grafana/loki</a></p><h4 id="grafana" tabindex="-1">Grafana <a class="header-anchor" href="#grafana" aria-label="Permalink to &quot;Grafana&quot;">​</a></h4><blockquote><p>Grafana allows users to query, visualize, alert on and understand metrics and logs regardless of target storage.</p></blockquote><p>Further reading here: <a href="https://github.com/grafana/grafana" target="_blank" rel="noreferrer">https://github.com/grafana/grafana</a></p><h3 id="hpcc-component-log-queries" tabindex="-1">HPCC Component Log Queries <a class="header-anchor" href="#hpcc-component-log-queries" aria-label="Permalink to &quot;HPCC Component Log Queries&quot;">​</a></h3><p>HPCC component logs can be queried from the Grafana UI. Out of the box, Grafana is exposed as a LoadBalanced service reachable on &#39;<a href="http://localhost:3000" target="_blank" rel="noreferrer">http://localhost:3000</a>&#39;.</p><p>The Managed Grafana service is declared as type LoadBalancer for convenience to the user. However it is imperative to control external access to the service. The service is defaulted to &quot;internal load balancer&quot; on Azure, the user is encouraged to set similar values on the target cloud provider. See the Grafana.service.annotations section:</p><p>Grafana access is restricted by default to user &#39;admin&#39;, and the dynamic password can be fetched by issuing the following command:</p><div class="language-console vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">kubectl get secret myloki-grafana -o jsonpath=&quot;{.data.admin-password}&quot; | base64 --decode ; echo</span></span></code></pre></div><p>Where &#39;myloki&#39; is the helm release name used to deploy the Loki-stack.</p><p>From the &#39;Explore&#39; view in Grafana, and the &#39;Loki&#39; datasource selected, the following query can be applied to filter in logs from desired HPCC components:</p><div class="language-console vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{component=~&quot;dafilesrv|dali|dfuserver|eclagent|eclccserver|eclscheduler|esp|sasha&quot;}</span></span></code></pre></div><h3 id="persistance" tabindex="-1">Persistance <a class="header-anchor" href="#persistance" aria-label="Permalink to &quot;Persistance&quot;">​</a></h3><p>The default Loki-Stack chart will not declare permanent storage and therefore log data will be lost when the deployment is removed. If persistance is required, set loki.persistence.enabled to true, and provide the appropriate PV</p><div class="language-console vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">loki:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  persistence:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    enabled: true</span></span></code></pre></div><h2 id="configure-hpcc-logaccess" tabindex="-1">Configure HPCC logAccess <a class="header-anchor" href="#configure-hpcc-logaccess" aria-label="Permalink to &quot;Configure HPCC logAccess&quot;">​</a></h2><p>The logAccess feature allows HPCC to query and package relevant logs for various features such as ZAP report, WorkUnit helper logs, ECLWatch log viewer, etc.</p><h3 id="provide-target-grafana-loki-access-information" tabindex="-1">Provide target Grafana/Loki access information <a class="header-anchor" href="#provide-target-grafana-loki-access-information" aria-label="Permalink to &quot;Provide target Grafana/Loki access information&quot;">​</a></h3><p>HPCC logAccess requires access to the Grafana username/password credentials. Those values must be provided via a secure secret object.</p><p>The secret is expected to be in the &#39;esp&#39; category, and be named &#39;grafana-logaccess&#39;. The following key-value pairs are required (key names must be spelled exactly as shown here)</p><pre><code>username - This should contain the Grafana username
password - This should contain the Grafana password
</code></pre><h4 id="create-secret-using-script" tabindex="-1">Create secret using script <a class="header-anchor" href="#create-secret-using-script" aria-label="Permalink to &quot;Create secret using script&quot;">​</a></h4><p>The included &#39;create-grafana-logaccess-secret.sh&#39; helper can be used to create the necessary secret.</p><p>Example scripted secret creation command:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>  create-grafana-logaccess-secret.sh -u admin -p somepass -n hpcc</span></span></code></pre></div><h4 id="create-secret-manually-from-file" tabindex="-1">Create secret manually from file <a class="header-anchor" href="#create-secret-manually-from-file" aria-label="Permalink to &quot;Create secret manually from file&quot;">​</a></h4><p>Otherwise, users can create the secret manually.</p><p>Example manual secret creation command (assuming ./secrets-templates contains files named exactly as the above keys):</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>  kubectl create secret generic grafana-logaccess --from-file=HPCC-Platform/helm/managed/logging/loki-stack/secrets-templates/ -n hpcc</span></span></code></pre></div><h4 id="create-secret-manually-from-manifest" tabindex="-1">Create secret manually from manifest <a class="header-anchor" href="#create-secret-manually-from-manifest" aria-label="Permalink to &quot;Create secret manually from manifest&quot;">​</a></h4><p>Otherwise, users can create the secret through a manifest file.</p><p>First, base64 encode the credentials:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>echo -n &#39;admin&#39; | base64</span></span>
<span class="line"><span>echo -n &#39;whatevergrafanapassword&#39; | base64</span></span></code></pre></div><p>Add the encoded values to the provided manifest file &#39;grafana-logaccess-secret.yaml&#39;</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>apiVersion: v1</span></span>
<span class="line"><span>kind: Secret</span></span>
<span class="line"><span>metadata:</span></span>
<span class="line"><span>  name: grafana-logaccess</span></span>
<span class="line"><span>type: Opaque</span></span>
<span class="line"><span>data:</span></span>
<span class="line"><span>  #Base64 encoded username and password for Grafana</span></span>
<span class="line"><span>  #can be encoded using the following command:</span></span>
<span class="line"><span>  # echo -n &#39;admin&#39; | base64</span></span>
<span class="line"><span>  username: YWRtaW4=</span></span>
<span class="line"><span>  # echo -n &#39;whatevergrafanapassword&#39; | base64</span></span>
<span class="line"><span>  password: d2hhdGV2ZXJncmFmYW5hcGFzc3dvcmQ=</span></span></code></pre></div><p>Then apply the manifest values:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kubectl apply -f ./grafana-logaccess-secret.yaml --namespace hpcc --server-side</span></span></code></pre></div><h4 id="verify-secret" tabindex="-1">Verify secret <a class="header-anchor" href="#verify-secret" aria-label="Permalink to &quot;Verify secret&quot;">​</a></h4><p>At this point, confirm the secret has been created with the expected key values:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kubectl describe secret grafana-logaccess -n hpcc</span></span></code></pre></div><p>The output should be something like this:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kubectl describe secret grafana-logaccess -n hpcc</span></span>
<span class="line"><span>Name:         grafana-logaccess</span></span>
<span class="line"><span>Namespace:    hpcc</span></span>
<span class="line"><span>Labels:       &lt;none&gt;</span></span>
<span class="line"><span>Annotations:  &lt;none&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Type:  Opaque</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Data</span></span>
<span class="line"><span>====</span></span>
<span class="line"><span>password:  40 bytes</span></span>
<span class="line"><span>username:  5 bytes</span></span></code></pre></div><h3 id="configure-hpcc-logaccess-1" tabindex="-1">Configure HPCC logAccess <a class="header-anchor" href="#configure-hpcc-logaccess-1" aria-label="Permalink to &quot;Configure HPCC logAccess&quot;">​</a></h3><p>The target HPCC deployment should be directed to use the desired Grafana endpoint with the Loki datasource, and the newly created secret by providing appropriate logAccess values (such as ./grafana-hpcc-logaccess.yaml).</p><p>Example use for targeting a loki stack deployed as &#39;myloki4hpcclogs&#39; on the default namespace:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>  helm install myhpcc hpcc/hpcc -f HPCC-Platform/helm/managed/logging/loki-stack/grafana-hpcc-logaccess.yaml</span></span></code></pre></div><h4 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h4><p>The grafana hpcc logaccess values should provide Grafana connection information, such as the host, and port; the Loki datasource where the logs reside; the k8s namespace under which the logs were created (non-default namespace highly recommended); and the hpcc component log format (table|json|xml)</p><p>Example values file describing logAccess targeting loki stack deployed as &#39;myloki4hpcclogs&#39; on the default namespace. Note that the &quot;host&quot; entry must reflect the name of the deployed Loki stack, as shown in the excerpt below (eg <strong><em>myloki4hpcclogs</em></strong>-grafana.default.svc.cluster.local):</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>  global:</span></span>
<span class="line"><span>    logAccess:</span></span>
<span class="line"><span>      name: &quot;Grafana/loki stack log access&quot;</span></span>
<span class="line"><span>      type: &quot;GrafanaCurl&quot;</span></span>
<span class="line"><span>      connection:</span></span>
<span class="line"><span>        protocol: &quot;http&quot;</span></span>
<span class="line"><span>        host: &quot;myloki4hpcclogs-grafana.default.svc.cluster.local&quot;</span></span>
<span class="line"><span>        port: 3000</span></span>
<span class="line"><span>      datasource:</span></span>
<span class="line"><span>        id: &quot;1&quot;</span></span>
<span class="line"><span>        name: &quot;Loki&quot;</span></span>
<span class="line"><span>      namespace:</span></span>
<span class="line"><span>        name: &quot;hpcc&quot;</span></span>
<span class="line"><span>      logFormat:</span></span>
<span class="line"><span>        type: &quot;json&quot;</span></span></code></pre></div><h4 id="baremetal-configuration" tabindex="-1">Baremetal configuration <a class="header-anchor" href="#baremetal-configuration" aria-label="Permalink to &quot;Baremetal configuration&quot;">​</a></h4><p>LogAccess can be configured on baremetal systems as well. It is not a common scenario because baremetal logs continue to be persisted on the local filesystem. Enabling LogAccess on a baremetal system would allow users to fetch remotely stored HPCC logs (not likely related to the host HPCC Systems deployment). To enable, inject a logAccess block with all configuration values properly filled in. The logAccess block can be injected within the Software element in the active environment.xml or within the global element on the esp.xml.</p><p>For example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;logAccess name=&quot;MyGrafanaLogaccess&quot; type=&quot;GrafanaCurl&quot;&gt;</span></span>
<span class="line"><span>      &lt;!--username/pass only if secret not available!!--&gt;</span></span>
<span class="line"><span>      &lt;connection protocol=&quot;http&quot; port=&quot;3000&quot; host=&quot;localhost&quot; username=&quot;admin&quot; password=&quot;xyz&quot;/&gt;</span></span>
<span class="line"><span>      &lt;datasource name=&quot;Loki&quot; id=&quot;1&quot;/&gt; &lt;!-- Find this info from Grafana: http://localhost:3000/api/datasources/ --&gt;</span></span>
<span class="line"><span>      &lt;namespace name=&quot;hpcc&quot;/&gt; &lt;!-- the namespace of the HPCC components which have forwarded logs to grafana --&gt;</span></span>
<span class="line"><span>      &lt;logFormat type=&quot;table&quot;/&gt; &lt;!--optional, only needed if HPCC log format set to XML or JSON--&gt;</span></span>
<span class="line"><span>      &lt;logMaps type=&quot;global&quot; searchColumn=&quot;log&quot; columnMode=&quot;DEFAULT&quot; columnType=&quot;string&quot;/&gt;</span></span>
<span class="line"><span>      &lt;logMaps type=&quot;timestamp&quot; searchColumn=&quot;tsNs&quot; columnMode=&quot;MIN&quot; storeName=&quot;values&quot; columnType=&quot;epoch&quot;/&gt;</span></span>
<span class="line"><span>      &lt;!-- logmaps based on streams can be found via http://localhost:3000/api/datasources/proxy/1/loki/api/v1/labels --&gt;</span></span>
<span class="line"><span>      &lt;logMaps type=&quot;components&quot; searchColumn=&quot;component&quot; columnMode=&quot;ALL&quot; storeName=&quot;stream&quot; columnType=&quot;string&quot;/&gt;</span></span>
<span class="line"><span>      &lt;logMaps type=&quot;node&quot; searchColumn=&quot;node_name&quot; columnMode=&quot;ALL&quot; storeName=&quot;stream&quot; columnType=&quot;string&quot;/&gt;</span></span>
<span class="line"><span>      &lt;logMaps type=&quot;pod&quot; searchColumn=&quot;pod&quot; columnMode=&quot;DEFAULT&quot; storeName=&quot;stream&quot; columnType=&quot;string&quot;/&gt;</span></span>
<span class="line"><span>   &lt;/logAccess&gt;</span></span></code></pre></div>`,80)]))}const m=a(o,[["render",l]]);export{u as __pageData,m as default};

import{_ as i,a,o as t,ag as e}from"./chunks/framework.Do1Zayaf.js";const d=JSON.parse('{"title":"Using a Hashicorp Vault PKI Certificate Authority to establish trust between two HPCC environments","description":"","frontmatter":{},"headers":[],"relativePath":"helm/examples/vault-pki-remote/README-vault-pki.md","filePath":"helm/examples/vault-pki-remote/README-vault-pki.md","lastUpdated":1761843274000}'),h={name:"helm/examples/vault-pki-remote/README-vault-pki.md"};function n(l,s,p,k,o,r){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="using-a-hashicorp-vault-pki-certificate-authority-to-establish-trust-between-two-hpcc-environments" tabindex="-1">Using a Hashicorp Vault PKI Certificate Authority to establish trust between two HPCC environments <a class="header-anchor" href="#using-a-hashicorp-vault-pki-certificate-authority-to-establish-trust-between-two-hpcc-environments" aria-label="Permalink to &quot;Using a Hashicorp Vault PKI Certificate Authority to establish trust between two HPCC environments&quot;">​</a></h1><p>This walkthough demonstrates using a single Hashicorp Vault PKI Certificate quthority to establish trust between two or more HPCC environments.</p><p>In the case of this example each HPCC environment is in a separate kubernetes namespace.</p><h2 id="install-hashicorp-vault-service-in-dev-mode" tabindex="-1">Install hashicorp vault service in dev mode: <a class="header-anchor" href="#install-hashicorp-vault-service-in-dev-mode" aria-label="Permalink to &quot;Install hashicorp vault service in dev mode:&quot;">​</a></h2><p>This is for development only, never deploy this way in production. Deploying in dev mode sets up an in memory kv store that won&#39;t persist secret values across restart, and the vault will automatically be unsealed.</p><p>In dev mode the default root token is simply the string &quot;root&quot;.</p><p>Add Hashicorp helm repo:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> repo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hashicorp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://helm.releases.hashicorp.com</span></span></code></pre></div><p>Update Helm repos.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> repo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span></code></pre></div><p>Install vault server.</p><p>Note that a recent change to the developer mode vault means that you have to set the VAULT_DEV_LISTEN_ADDRESS environment variable as shown in order to access the vault service from an external pod.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vault</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hashicorp/vault</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;injector.enabled=false&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;server.dev.enabled=true&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;server.extraEnvironmentVars.VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --namespace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vaultns</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --create-namespace</span></span></code></pre></div><p>Check the pods:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pods</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vaultns</span></span></code></pre></div><p>Vault pods should now be running and ready.</p><h2 id="setting-up-vault" tabindex="-1">Setting up vault <a class="header-anchor" href="#setting-up-vault" aria-label="Permalink to &quot;Setting up vault&quot;">​</a></h2><p>Tell the vault command line application the server location (dev mode is http, default location is https)</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> VAULT_ADDR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">http://127.0.0.1:8200</span></span></code></pre></div><p>Export an environment variable for the vault CLI to authenticate with the Vault server. Because we installed dev mode, the vault token is &#39;root&#39;.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> VAULT_TOKEN</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">root</span></span></code></pre></div><p>In a separate terminal window start vault port forwarding.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> port-forward</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vault-0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 8200:8200</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vaultns</span></span></code></pre></div><p>Login to the vault command line using the vault root token (development mode defaults to &quot;root&quot;):</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vault</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> login</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span></span></code></pre></div><h2 id="enable-the-pki-secrets-engine-at-its-default-path" tabindex="-1">Enable the PKI secrets engine at its default path. <a class="header-anchor" href="#enable-the-pki-secrets-engine-at-its-default-path" aria-label="Permalink to &quot;Enable the PKI secrets engine at its default path.&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vault</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> secrets</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> enable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pki</span></span></code></pre></div><p>Configure the max lease time-to-live (TTL) to 8760h.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vault</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> secrets</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tune</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -max-lease-ttl=87600h</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pki</span></span></code></pre></div><p>Generate the hpcc remote issuer CA, give it an issuer name.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vault</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> write</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -field=certificate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pki/root/generate/internal</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> common_name=&quot;hpcc-issuer&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> issuer_name=&quot;hpcc-remote-issuer&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ttl=87600h</span></span></code></pre></div><p>Configure the PKI secrets engine certificate issuing and certificate revocation list (CRL) endpoints to use the Vault service in the &quot;vaultns&quot; namespace.</p><p>If you installed vault into a different namespace update the urls, replacing &quot;vaultns&quot; with the namespace used.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vault</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> write</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pki/config/urls</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> issuing_certificates=&quot;http://vault.vaultns:8200/v1/pki/ca&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> crl_distribution_points=&quot;http://vault.vaultns:8200/v1/pki/crl&quot;</span></span></code></pre></div><p>For our local MTLS certificates we will use our kubernetes namespace as our domain name. This will allow us to recongize where these components reside. For our public TLS certificates for this demo we will use myhpcc.com as our domain.</p><p>Configure a role named hpccnamespace that enables the creation of certificates hpccnamespace domain with any subdomains.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vault</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> write</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pki/roles/hpccremote</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> key_type=any</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> allowed_domains=&quot;hpcc1,hpcc2&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> allow_subdomains=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> allowed_uri_sans=&quot;spiffe://*&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> max_ttl=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">72</span></span></code></pre></div><p>Create a policy named pki that enables read access to the PKI secrets engine paths.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vault</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> policy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> write</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hpcc-remote-pki</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">EOF</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">path &quot;pki*&quot;                   { capabilities = [&quot;read&quot;, &quot;list&quot;] }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">path &quot;pki/roles/hpccremote&quot;   { capabilities = [&quot;create&quot;, &quot;update&quot;] }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">path &quot;pki/sign/hpccremote&quot;    { capabilities = [&quot;create&quot;, &quot;update&quot;] }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">path &quot;pki/issue/hpccremote&quot;   { capabilities = [&quot;create&quot;] }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">EOF</span></span></code></pre></div><h2 id="install-cert-manager-helm-chart" tabindex="-1">Install cert-manager helm chart: <a class="header-anchor" href="#install-cert-manager-helm-chart" aria-label="Permalink to &quot;Install cert-manager helm chart:&quot;">​</a></h2><p>Add Jetstack helm repo:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> repo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jetstack</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://charts.jetstack.io</span></span></code></pre></div><p>Install cert-manager.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cert-manager</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jetstack/cert-manager</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> installCRDs=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --namespace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cert-manager</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --create-namespace</span></span></code></pre></div><h2 id="installing-two-hpcc-environments-that-will-be-able-to-communicate-in-two-separate-namespaces" tabindex="-1">Installing TWO HPCC environments that will be able to communicate in two separate namespaces <a class="header-anchor" href="#installing-two-hpcc-environments-that-will-be-able-to-communicate-in-two-separate-namespaces" aria-label="Permalink to &quot;Installing TWO HPCC environments that will be able to communicate in two separate namespaces&quot;">​</a></h2><h2 id="for-the-first-hpcc-namespace-hpcc1" tabindex="-1">For the first HPCC namespace &quot;hpcc1&quot; <a class="header-anchor" href="#for-the-first-hpcc-namespace-hpcc1" aria-label="Permalink to &quot;For the first HPCC namespace &quot;hpcc1&quot;&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> namespace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hpcc1</span></span></code></pre></div><p>The local and signing issuers are isolated and won&#39;t be using vault. Create the secrets for this namespace. For this kind of issuer the key pairs will be unique for every instance.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> req</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -x509</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -newkey</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rsa:2048</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -nodes</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -keyout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hpcc1local.key</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -sha256</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -days</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1825</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -out</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hpcc1local.crt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> local-ca-req.cfg</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> secret</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tls</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hpcc-local-issuer-key-pair</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --cert=hpcc1local.crt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --key=hpcc1local.key</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hpcc1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> req</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -x509</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -newkey</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rsa:2048</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -nodes</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -keyout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hpcc1signing.key</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -sha256</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -days</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1825</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -out</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hpcc1signing.crt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> signing-ca-req.cfg</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> secret</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tls</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hpcc-signing-issuer-key-pair</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --cert=hpcc1signing.crt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --key=hpcc1signing.key</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hpcc1</span></span></code></pre></div><p>The remote issuer does use vault. Create the secret the remote issuer that hpcc1 will use to access the vault pki engine</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> secret</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> generic</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cert-manager-vault-token</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --from-literal=token=root</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hpcc1</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> myhpcc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hpcc/hpcc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --values</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> values-hpcc1.yaml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hpcc1</span></span></code></pre></div><p>Use kubectl to check the status of the deployed pods. Wait until all pods are running before continuing.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pods</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hpcc1</span></span></code></pre></div><p>Check and see if the cerficate issuers have been successfully created.</p><h2 id="repeat-for-the-second-hpcc-namespace-hpcc2" tabindex="-1">Repeat for the second HPCC namespace &quot;hpcc2&quot; <a class="header-anchor" href="#repeat-for-the-second-hpcc-namespace-hpcc2" aria-label="Permalink to &quot;Repeat for the second HPCC namespace &quot;hpcc2&quot;&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> namespace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hpcc2</span></span></code></pre></div><p>The local and signing issuers are isolated and won&#39;t be using vault. Create the secrets for this namespace. For this kind of issuer the key pairs will be unique for every instance.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> req</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -x509</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -newkey</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rsa:2048</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -nodes</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -keyout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hpcc2local.key</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -sha256</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -days</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1825</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -out</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hpcc2local.crt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> local-ca-req.cfg</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> secret</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tls</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hpcc-local-issuer-key-pair</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --cert=hpcc2local.crt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --key=hpcc2local.key</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hpcc2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> req</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -x509</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -newkey</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rsa:2048</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -nodes</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -keyout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hpcc2signing.key</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -sha256</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -days</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1825</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -out</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hpcc2signing.crt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> signing-ca-req.cfg</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> secret</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tls</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hpcc-signing-issuer-key-pair</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --cert=hpcc2signing.crt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --key=hpcc2signing.key</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hpcc2</span></span></code></pre></div><p>The remote issuer does use vault. Create the secret the remote issuer that hpcc1 will use to access the vault pki engine</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> secret</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> generic</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cert-manager-vault-token</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --from-literal=token=root</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hpcc2</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> myhpcc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hpcc/hpcc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --values</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> values-hpcc2.yaml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hpcc2</span></span></code></pre></div><p>Use kubectl to check the status of the deployed pods. Wait until all pods are running before continuing.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pods</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hpcc2</span></span></code></pre></div><p>Check and see if the cerficate issuers have been successfully created.</p><h2 id="ecl-example-demonstrating-trust" tabindex="-1">ECL example demonstrating trust <a class="header-anchor" href="#ecl-example-demonstrating-trust" aria-label="Permalink to &quot;ECL example demonstrating trust&quot;">​</a></h2><p>Now we can run some ECL in each environment that will talk to each other.</p><p>roxie_echo.ecl which returns a dataset passed into it. remote_echo.ecl which calls roxie_echo.ecl.</p><p>For this example we will:</p><ol><li>publish roxie_echo.ecl to the hpcc1 namespace.</li><li>Publish remote_echo.ecl to the hpcc2 namespace.</li><li>Use hpcc2::remote_echo.ecl to call hpcc1::roxie_echo.ecl.</li></ol><h2 id="publish-the-queries" tabindex="-1">Publish the queries: <a class="header-anchor" href="#publish-the-queries" aria-label="Permalink to &quot;Publish the queries:&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ecl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> publish</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> roxie1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --ssl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --port</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 18010</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> roxie_echo.ecl</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ecl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> publish</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> roxie2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --ssl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --port</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 28010</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote_echo.ecl</span></span></code></pre></div><h2 id="call-the-query-and-demonstrate-trust" tabindex="-1">Call the query and demonstrate trust <a class="header-anchor" href="#call-the-query-and-demonstrate-trust" aria-label="Permalink to &quot;Call the query and demonstrate trust&quot;">​</a></h2><p>You can navigate to EclQueries/WsEcl on port 28002 in your browser and run the &quot;remote_roxie&quot; query from there, or you can use curl from the command line as shown below.</p><p>NOTE: The use of --insecure for the curl command line has nothing to do with the trust between environments. It only reflects the way this demo set up the one service EclQqueries. The two roxies are using Hashicorp Vault PKI to secure communications. For the purpose of this walkthrough on the other hand EclQueries is set up using self signed certificates, which should never be done in a production environment.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://localhost:28002/WsEcl/submit/query/roxie2/remote_echo/json</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --insecure</span></span></code></pre></div><p>Example Output:</p><p>{&quot;remote_echoResponse&quot;: {&quot;sequence&quot;: 0, &quot;Results&quot;: {&quot;remoteResult&quot;: {&quot;Row&quot;: [{&quot;Dataset&quot;: {&quot;Row&quot;: [{&quot;name&quot;: {&quot;first&quot;: &quot;Joeseph&quot;, &quot;last&quot;: &quot;Johnson&quot;}, &quot;address&quot;: {&quot;city&quot;: &quot;Fresno&quot;, &quot;state&quot;: &quot;CA&quot;, &quot;zipcode&quot;: &quot;11111&quot;}}, {&quot;name&quot;: {&quot;first&quot;: &quot;Joeseph&quot;, &quot;last&quot;: &quot;Johnson&quot;}, &quot;address&quot;: {&quot;city&quot;: &quot;Fresno&quot;, &quot;state&quot;: &quot;CA&quot;, &quot;zipcode&quot;: &quot;22222&quot;}}, {&quot;name&quot;: {&quot;first&quot;: &quot;Joeseph&quot;, &quot;last&quot;: &quot;Johnson&quot;}, &quot;address&quot;: {&quot;city&quot;: &quot;Fresno&quot;, &quot;state&quot;: &quot;CA&quot;, &quot;zipcode&quot;: &quot;33333&quot;}}, {&quot;name&quot;: {&quot;first&quot;: &quot;Joeseph&quot;, &quot;last&quot;: &quot;Johnson&quot;}, &quot;address&quot;: {&quot;city&quot;: &quot;Fresno&quot;, &quot;state&quot;: &quot;CA&quot;, &quot;zipcode&quot;: &quot;44444&quot;}}, {&quot;name&quot;: {&quot;first&quot;: &quot;Joeseph&quot;, &quot;last&quot;: &quot;Johnson&quot;}, &quot;address&quot;: {&quot;city&quot;: &quot;Fresno&quot;, &quot;state&quot;: &quot;CA&quot;, &quot;zipcode&quot;: &quot;55555&quot;}}]}, &quot;Exception&quot;: {&quot;Code&quot;: &quot;0&quot;}}]}}}}</p>`,78)]))}const F=i(h,[["render",n]]);export{d as __pageData,F as default};

import{_ as t,a as s,o as a,ag as o}from"./chunks/framework.Do1Zayaf.js";const l=JSON.parse('{"title":"Systemd scripts for HPCC-Systems Platform","description":"","frontmatter":{},"headers":[],"relativePath":"initfiles/bash/etc/systemd/system/README.md","filePath":"initfiles/bash/etc/systemd/system/README.md","lastUpdated":1761843274000}'),r={name:"initfiles/bash/etc/systemd/system/README.md"};function n(i,e,c,m,p,d){return a(),s("div",null,e[0]||(e[0]=[o('<h1 id="systemd-scripts-for-hpcc-systems-platform" tabindex="-1">Systemd scripts for HPCC-Systems Platform <a class="header-anchor" href="#systemd-scripts-for-hpcc-systems-platform" aria-label="Permalink to &quot;Systemd scripts for HPCC-Systems Platform&quot;">​</a></h1><p>The primary tool for starting and stopping the entire platform on a target machine using systemd is the <code>hpccsystems-platform.target</code>. This target script is entirely dependent on the <code>environment.xml</code> file located on the server, and gets generated using the <code>generate-hpccsystems-target.sh</code> script that is located in <code>/opt/HPCCSystems/sbin</code> on standard installations. This target script will need to be generated any time you modify the environment.xml on the local machine. This can be done manually by an administrator, or by enabling the <code>hpcc-environment-monitor.path</code> systemd script which we provide.</p><h2 id="manual-regeneration-of-hpccsystems-platform-target" tabindex="-1">Manual regeneration of hpccsystems-platform.target <a class="header-anchor" href="#manual-regeneration-of-hpccsystems-platform-target" aria-label="Permalink to &quot;Manual regeneration of hpccsystems-platform.target&quot;">​</a></h2><p>The hpccsystems-platform.target script contains a requirement list for every instance of a component declared in the environment.xml file. The hpccsystems-platform.target can be manually generated by an administrator by invoking the <code>generate-hpccsystems-target.sh</code> script on a target system. It should be noted, that this will overwrite any existing hpccsystems-platform.target currently on the system, so any old components that were declared previously in the environment.xml, that no longer are declared, cannot be start/stopped with the new hpccsystems-platform.target. It is therefore recommended that an administrator wishing to manually (or programatically through a script) update the hpccsystems-platform.target, first run <code>systemctl stop hpccsystems-platform.target</code> to properly shut down hpccsystems components before the hpccsystems-platform.target changes.</p><h2 id="automatic-regeneration-of-hpccsystems-platform-target" tabindex="-1">Automatic regeneration of hpccsystems-platform.target <a class="header-anchor" href="#automatic-regeneration-of-hpccsystems-platform-target" aria-label="Permalink to &quot;Automatic regeneration of hpccsystems-platform.target&quot;">​</a></h2><p>The hpccsystems-platform.target script contains a requirement list for every instance of a component which is explicitly declared in the <code>environment.xml</code> file. In order to generate this required components list, the <code>generate-hpccsystems-target.sh</code> script is invoked. This can be done automatically by enabling the <code>hpcc-environemnt-monitor.path</code> systemd script. This path script will call a corresponding service script of the same name whenever <code>environment.xml</code> is modified.</p><p>When an administrator attempts to regenerate the hpccsystems-platform.target, by modifying the <code>environment.xml</code> file when <code>hpcc-environment-monitor.path</code> is enabled, the <code>hpcc-environment-monitor.service</code> script will first attempt to shut down any hpccsystems-platform.target that is currently running on the target system. This is so components that were previously declared and possibly no longer exist in the environment won&#39;t be orphaned on the target system. After the <code>generate-hpccsystems-target.sh</code> script is done invoking the hpccsystems configgen utility, the appropriate service scripts will be generated from templates and a fresh hpccsystems-platform.target will exist under <code>/opt/HPCCSystems/etc/systemd/system</code> and symlinked to <code>/etc/systemd/system</code> where appropriate.</p><p>Systemd ulimits --------------</p><p>If an administrator wishes to set custom ulimits for specific hpccsystems components, it is recommended that they do so in the templates located in <code>/opt/HPCCSystems/etc/systemd/system</code> so that they persist across regenerations of the hpccsystems-platform.target and component service scripts. The syntax for modifying the user limits can be found in <code>man systemd.exec</code>.</p>',9)]))}const y=t(r,[["render",n]]);export{l as __pageData,y as default};

import{_ as s,a,o as t,ag as e}from"./chunks/framework.Do1Zayaf.js";const k=JSON.parse('{"title":"Migrating from Std.Crypto to Std.OpenSSL","description":"","frontmatter":{},"headers":[],"relativePath":"devdoc/userdoc/Migrating-from-StdCrypto-to-StdOpenSSL.md","filePath":"devdoc/userdoc/Migrating-from-StdCrypto-to-StdOpenSSL.md","lastUpdated":1761843274000}'),n={name:"devdoc/userdoc/Migrating-from-StdCrypto-to-StdOpenSSL.md"};function l(r,i,p,h,o,d){return t(),a("div",null,i[0]||(i[0]=[e(`<h1 id="migrating-from-std-crypto-to-std-openssl" tabindex="-1">Migrating from Std.Crypto to Std.OpenSSL <a class="header-anchor" href="#migrating-from-std-crypto-to-std-openssl" aria-label="Permalink to &quot;Migrating from Std.Crypto to Std.OpenSSL&quot;">​</a></h1><p>This guide explains how to transition from the deprecated <code>Std.Crypto</code> module functions to their replacements in <code>Std.OpenSSL.*</code>.</p><h2 id="overview-of-the-migration-process" tabindex="-1">Overview of the Migration Process <a class="header-anchor" href="#overview-of-the-migration-process" aria-label="Permalink to &quot;Overview of the Migration Process&quot;">​</a></h2><p>The <code>Std.Crypto</code> module provided cryptographic functionality across four main areas:</p><ul><li>Algorithm enumeration (Supported* functions)</li><li>Hashing operations</li><li>Symmetric encryption</li><li>Public key encryption (multiple variants differing by key source and passphrase type)</li></ul><p>All cryptographic features are now unified under Std.OpenSSL.*, improving API consistency, simplifying the codebase, and enhancing OpenSSL integration.</p><h2 id="namespace-migration-mapping" tabindex="-1">Namespace Migration Mapping <a class="header-anchor" href="#namespace-migration-mapping" aria-label="Permalink to &quot;Namespace Migration Mapping&quot;">​</a></h2><p>The following table shows how functional areas map from old to new namespaces:</p><table tabindex="0"><thead><tr><th>Functional Area</th><th>Old Namespace(s)</th><th>New Namespace</th></tr></thead><tbody><tr><td>Hash / Digest</td><td><code>Std.Crypto.Hashing()</code></td><td><code>Std.OpenSSL.Digest()</code></td></tr><tr><td>Symmetric Ciphers</td><td><code>Std.Crypto.SymmetricEncryption()</code>, <code>Std.Crypto.SymmEncryption()</code></td><td><code>Std.OpenSSL.Ciphers()</code></td></tr><tr><td>Public Key (RSA Seal/Unseal, Sign/Verify)</td><td>Multiple: <code>PublicKeyEncryption*()</code>, <code>PKEncryption*()</code> (file, LFN, buffer variants)</td><td><code>Std.OpenSSL.PublicKey</code>()</td></tr><tr><td>Algorithm Enumeration</td><td><code>Std.Crypto.SupportedHashAlgorithms()</code>, etc.</td><td><code>Std.OpenSSL.Digest.AvailableAlgorithms()</code>, <code>Std.OpenSSL.Ciphers.AvailableAlgorithms()</code></td></tr><tr><td>Public Key Algorithm Enumeration</td><td><code>Std.Crypto.SupportedPublicKeyAlgorithms()</code> (deprecated)</td><td>(No direct replacement yet)</td></tr></tbody></table><h2 id="function-mapping-reference" tabindex="-1">Function Mapping Reference <a class="header-anchor" href="#function-mapping-reference" aria-label="Permalink to &quot;Function Mapping Reference&quot;">​</a></h2><p>The following table provides a direct mapping from deprecated functions to their replacements:</p><table tabindex="0"><thead><tr><th>Deprecated (Std.Crypto)</th><th>Replacement (Std.OpenSSL)</th></tr></thead><tbody><tr><td>SupportedHashAlgorithms()</td><td>Digest.AvailableAlgorithms()</td></tr><tr><td>SupportedSymmetricCipherAlgorithms()</td><td>Ciphers.AvailableAlgorithms()</td></tr><tr><td>SupportedPublicKeyAlgorithms()</td><td>(No direct substitute)</td></tr><tr><td>Hashing.Hash()</td><td>Digest.Hash()</td></tr><tr><td>SymmetricEncryption.Encrypt() / Decrypt()</td><td>Ciphers.Encrypt() / Decrypt()</td></tr><tr><td>SymmEncryption.Encrypt() / Decrypt()</td><td>Ciphers.Encrypt() / Decrypt()</td></tr><tr><td><em>PublicKey</em> Encrypt() variants</td><td>PublicKey.RSASeal()</td></tr><tr><td><em>PublicKey</em> Decrypt() variants</td><td>PublicKey.RSAUnseal()</td></tr><tr><td><em>PublicKey</em> Sign() variants</td><td>PublicKey.Sign()</td></tr><tr><td><em>PublicKey</em> VerifySignature() variants</td><td>PublicKey.VerifySignature()</td></tr></tbody></table><p><strong>Note:</strong> The &quot;<em>PublicKey</em> variants&quot; above include:</p><ul><li>PublicKeyEncryption() / PKEncryption()</li><li>PublicKeyEncryptionFromLFN() / PKEncryptionFromLFN()</li><li>PublicKeyEncryptionFromBuffer() / PKEncryptionFromBuffer()</li></ul><p>These variants also include differences in passphrase types (VARSTRING vs DATA).</p><h2 id="key-conceptual-changes" tabindex="-1">Key Conceptual Changes <a class="header-anchor" href="#key-conceptual-changes" aria-label="Permalink to &quot;Key Conceptual Changes&quot;">​</a></h2><h3 id="_1-key-source-abstraction-removal" tabindex="-1">1. Key Source Abstraction Removal <a class="header-anchor" href="#_1-key-source-abstraction-removal" aria-label="Permalink to &quot;1. Key Source Abstraction Removal&quot;">​</a></h3><p><strong>Previous approach:</strong> Select a module based on whether your key is in a file path, LFN, or an in-memory buffer.</p><p><strong>New approach:</strong></p><ul><li>Public keys are always in PEM format</li><li>Load the key content yourself (e.g., using <code>Std.File</code>, dataset read, or preferably obtain from a secrets library into a STRING</li><li>Pass PEM content directly to <code>Std.OpenSSL.PublicKey</code> functions</li></ul><h3 id="_2-passphrase-type-normalization" tabindex="-1">2. Passphrase Type Normalization <a class="header-anchor" href="#_2-passphrase-type-normalization" aria-label="Permalink to &quot;2. Passphrase Type Normalization&quot;">​</a></h3><p><strong>Previous approach:</strong> Different APIs required <code>DATA</code> vs <code>VARSTRING</code> types.</p><p><strong>New approach:</strong> Converge to the string type expected by the new API (usually STRING/VARSTRING). Convert <code>DATA</code> using safe encoding if it represented binary data, or treat it as raw bytes if the API permits.</p><h3 id="_3-algorithm-specification" tabindex="-1">3. Algorithm Specification <a class="header-anchor" href="#_3-algorithm-specification" aria-label="Permalink to &quot;3. Algorithm Specification&quot;">​</a></h3><p><strong>Previous approach:</strong> Implicit algorithm selection with limited control. Further, algorithms were chosen as part of the MODULE definition.</p><p><strong>New approach:</strong> New digest/cipher functions expect an algorithm name parameter (e.g., &#39;SHA256&#39;, &#39;AES-256-CBC&#39;). While some functions may have defaults, explicit specification is recommended for clarity and consistency.</p><h2 id="public-key-material-handling" tabindex="-1">Public Key Material Handling <a class="header-anchor" href="#public-key-material-handling" aria-label="Permalink to &quot;Public Key Material Handling&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Old Distinction</th><th>New Practice</th></tr></thead><tbody><tr><td>File path vs LFN vs Buffer modules</td><td>Keys are always in PEM format and used as STRINGs when calling new functions</td></tr></tbody></table><p><strong>Example (LFN to Buffer):</strong></p><div class="language-ecl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ecl</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">IMPORT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Std;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">publicKeyPEM  :</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GETSECRET(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;mykeys&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;mypublickeypem&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">privateKeyPEM :</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GETSECRET(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;mykeys&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;myprivatekeypem&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sealed :</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Std.OpenSSL.PublicKey.RSASeal(rawData, publicKeyPEM);</span></span></code></pre></div><h2 id="algorithm-enumeration" tabindex="-1">Algorithm Enumeration <a class="header-anchor" href="#algorithm-enumeration" aria-label="Permalink to &quot;Algorithm Enumeration&quot;">​</a></h2><p><strong>Before:</strong></p><div class="language-ecl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ecl</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hashAlgos :</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Std.Crypto.SupportedHashAlgorithms();</span></span></code></pre></div><p><strong>After:</strong></p><div class="language-ecl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ecl</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hashAlgos :</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Std.OpenSSL.Digest.AvailableAlgorithms();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cipherAlgos :</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Std.OpenSSL.Ciphers.AvailableAlgorithms();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// For public key algorithms: consult documentation or maintain a static list (e.g., [&#39;RSA&#39;]) until an API emerges.</span></span></code></pre></div><h2 id="performance-considerations" tabindex="-1">Performance Considerations <a class="header-anchor" href="#performance-considerations" aria-label="Permalink to &quot;Performance Considerations&quot;">​</a></h2><ul><li><strong>Hashing and symmetric operations:</strong> Should have similar performance characteristics. For large streaming operations, consider manual chunking:</li></ul><div class="language-ecl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ecl</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Pseudocode for chunk processing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">chunks :</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DATASET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( ... ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// each row contains chunked DATA</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hashed :</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PROJECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(chunks, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TRANSFORM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(..., </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.outHash :</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Std.OpenSSL.Digest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Hash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">LEFT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.chunk, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;SHA256&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)));</span></span></code></pre></div><h2 id="testing-strategy" tabindex="-1">Testing Strategy <a class="header-anchor" href="#testing-strategy" aria-label="Permalink to &quot;Testing Strategy&quot;">​</a></h2><ol><li><strong>Golden Test Vectors:</strong> Capture output from old implementation for representative inputs before migration</li><li><strong>Migrate code</strong> following this guide</li><li><strong>Re-run tests</strong> and verify outputs for: <ul><li>Hash equivalence for chosen algorithms</li><li>Round-trip symmetric Encrypt/Decrypt operations</li><li>RSASeal/RSAUnseal round-trip functionality</li><li>Signature verification for both positive and negative test cases</li></ul></li><li><strong>Compare outputs:</strong> Acceptable differences may include base64 vs raw binary representation (normalize if needed)</li></ol><h2 id="common-migration-pitfalls" tabindex="-1">Common Migration Pitfalls <a class="header-anchor" href="#common-migration-pitfalls" aria-label="Permalink to &quot;Common Migration Pitfalls&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Pitfall</th><th>Resolution</th></tr></thead><tbody><tr><td>Missing algorithm parameter in new API call</td><td>Always pass explicit algorithm constant</td></tr><tr><td>Wrong passphrase type</td><td>Ensure STRING/VARSTRING; convert DATA appropriately</td></tr><tr><td>Embedded whitespace or newline differences in PEM keys</td><td>Trim or normalize; ensure correct PEM header/footer remain</td></tr><tr><td>Assuming multi-algorithm PublicKey support</td><td>Currently focus on RSA; extend later if library updates</td></tr></tbody></table><h2 id="migration-checklist" tabindex="-1">Migration Checklist <a class="header-anchor" href="#migration-checklist" aria-label="Permalink to &quot;Migration Checklist&quot;">​</a></h2><ul><li>[ ] Enumerate all <code>Std.Crypto.*</code> references in codebase</li><li>[ ] Classify each reference by category (hash, symmetric, public key)</li><li>[ ] Introduce central constants for default digest and cipher algorithms</li><li>[ ] Replace hashing calls and add explicit algorithm parameters</li><li>[ ] Replace symmetric encryption and remove module instantiation pattern</li><li>[ ] Refactor public key encryption: load key content, replace Encrypt/Decrypt with RSASeal/RSAUnseal, update Sign/VerifySignature calls</li><li>[ ] Add comprehensive tests for each transformed operation</li><li>[ ] Remove or quarantine legacy wrapper code</li></ul><h2 id="complete-migration-example" tabindex="-1">Complete Migration Example <a class="header-anchor" href="#complete-migration-example" aria-label="Permalink to &quot;Complete Migration Example&quot;">​</a></h2><p><strong>Before:</strong></p><div class="language-ecl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ecl</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">IMPORT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Std;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pkMod :</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Std.Crypto.PublicKeyEncryptionFromBuffer(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;RSA&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, pubKeyPEM, privKeyPEM, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;pw&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">encPayload :</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pkMod.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Encrypt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(payload);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sig :</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pkMod.Sign(payload);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">isOk :</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pkMod.VerifySignature(sig, payload);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hash :</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Std.Crypto.Hashing.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Hash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(payload);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sym :</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Std.Crypto.SymmetricEncryption(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;AES-256-CBC&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;symPass&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cipher :</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sym.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Encrypt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(payload);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plain :</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sym.Decrypt(cipher);</span></span></code></pre></div><p><strong>After:</strong></p><div class="language-ecl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ecl</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">IMPORT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Std;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">EXPORT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DEFAULT_DIGEST :</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;SHA256&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">EXPORT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DEFAULT_CIPHER :</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;AES-256-CBC&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Public key operations</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">encPayload :</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Std.OpenSSL.PublicKey.RSASeal(payload, pubKeyPEM);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sig :</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Std.OpenSSL.PublicKey.Sign(payload, privKeyPEM, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;pw&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, DEFAULT_DIGEST);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">isOk :</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Std.OpenSSL.PublicKey.VerifySignature(sig, payload, pubKeyPEM, DEFAULT_DIGEST);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Hash operations</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hash :</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Std.OpenSSL.Digest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Hash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(payload, DEFAULT_DIGEST);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Symmetric encryption</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cipher :</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Std.OpenSSL.Ciphers.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Encrypt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(payload, DEFAULT_CIPHER, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;symPass&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plain :</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Std.OpenSSL.Ciphers.Decrypt(cipher, DEFAULT_CIPHER, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;symPass&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="future-proofing-recommendations" tabindex="-1">Future-Proofing Recommendations <a class="header-anchor" href="#future-proofing-recommendations" aria-label="Permalink to &quot;Future-Proofing Recommendations&quot;">​</a></h2><ul><li><strong>Centralize algorithm names</strong> to ease future migrations</li><li><strong>Encapsulate OpenSSL calls</strong> in a small adapter module so future library evolution only affects one layer</li><li><strong>Track HPCC Systems release notes</strong> for introduction of public key algorithm enumeration functions</li></ul>`,51)]))}const E=s(n,[["render",l]]);export{k as __pageData,E as default};

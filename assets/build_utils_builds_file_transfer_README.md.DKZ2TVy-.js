import{_ as o,a as t,o as i,ag as r}from"./chunks/framework.Do1Zayaf.js";const p=JSON.parse('{"title":"Documentation for builds_file_transfer.py and ssh_connection.py","description":"","frontmatter":{},"headers":[],"relativePath":"build_utils/builds_file_transfer/README.md","filePath":"build_utils/builds_file_transfer/README.md","lastUpdated":1761843274000}'),s={name:"build_utils/builds_file_transfer/README.md"};function n(a,e,l,d,c,u){return i(),t("div",null,e[0]||(e[0]=[r('<h1 id="documentation-for-builds-file-transfer-py-and-ssh-connection-py" tabindex="-1">Documentation for <code>builds_file_transfer.py</code> and <code>ssh_connection.py</code> <a class="header-anchor" href="#documentation-for-builds-file-transfer-py-and-ssh-connection-py" aria-label="Permalink to &quot;Documentation for `builds_file_transfer.py` and `ssh_connection.py`&quot;">​</a></h1><p>This document provides instructions on how to use the Python scripts <code>builds_file_transfer.py</code> and <code>ssh_connection.py</code> to download and transfer files from a GitHub repository to a remote server using SFTP.</p><hr><h2 id="overview" tabindex="-1"><strong>Overview</strong> <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;**Overview**&quot;">​</a></h2><ul><li><code>builds_file_transfer.py</code>: This script fetches a specific release of a GitHub repository, downloads a ZIP file from the release, unzips it locally, and then uploads the extracted files to a remote server via SFTP.</li><li><code>ssh_connection.py</code>: Contains a function to upload files and directories recursively to a remote server via SFTP using the <code>paramiko</code> library.</li></ul><hr><h2 id="prerequisites" tabindex="-1"><strong>Prerequisites</strong> <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;**Prerequisites**&quot;">​</a></h2><p>Before using these scripts, ensure that you have the following:</p><ul><li><p><strong>Python 3.x</strong> installed.</p></li><li><p><strong>paramiko</strong> library for SSH/SFTP functionality. If not installed, you can install it using:</p><p><code>pip install paramiko</code></p></li><li><p>Access to a GitHub repository with releases.</p></li><li><p>SFTP credentials (hostname, username, password) for the remote server.</p></li></ul><hr><h2 id="setup" tabindex="-1"><strong>Setup</strong> <a class="header-anchor" href="#setup" aria-label="Permalink to &quot;**Setup**&quot;">​</a></h2><ol><li><p><strong>Configure <code>builds_file_transfer.py</code></strong>:</p><ul><li><p>Set the <code>REPO_OWNER</code>, <code>REPO_NAME</code>, and <code>TAG</code> variables with appropriate values.</p><pre><code>REPO_OWNER = &#39;your-repo-owner&#39;\nREPO_NAME = &#39;your-repo-name&#39; \nTAG = &#39;release-tag&#39;  # Example: community_9.10.4-1\n</code></pre></li><li><p>This script fetches the release information from GitHub based on the repository owner, repository name, and the release tag.</p></li></ul></li><li><p><strong>Configure <code>ssh_connection.py</code></strong>:</p><ul><li><p>In the <code>ssh_connection.py</code> script, configure the following variables:</p><pre><code>hostname = &quot;your.remote.server.com&quot;\nusername = &quot;your-username&quot;\npassword = &quot;your-password&quot;\nport = 22\n</code></pre></li><li><p>These credentials will be used for the SFTP connection to the remote server.</p></li></ul></li></ol><hr><h2 id="how-to-use" tabindex="-1"><strong>How to Use</strong> <a class="header-anchor" href="#how-to-use" aria-label="Permalink to &quot;**How to Use**&quot;">​</a></h2><h3 id="_1-running-builds-file-transfer-py" tabindex="-1"><strong>1. Running <code>builds_file_transfer.py</code></strong> <a class="header-anchor" href="#_1-running-builds-file-transfer-py" aria-label="Permalink to &quot;**1\\. Running `builds_file_transfer.py`**&quot;">​</a></h3><p>This script will:</p><ol><li>Fetch the release details from GitHub using the provided repository details.</li><li>Check if the release ends with <code>-1</code> (indicating a gold release) and fetch the assets (files) from it.</li><li>Download the ZIP file (<code>portal_html_EN_US.zip</code>) from the release.</li><li>Unzip the downloaded file locally.</li><li>Use the <code>sftp_put_directory</code> function from <code>ssh_connection.py</code> to recursively upload the unzipped files to the remote server.</li></ol><p>To run the script, simply execute it:</p><p><code>python builds_file_transfer.py</code></p><hr><h3 id="_2-ssh-connection-sftp-put-directory-function" tabindex="-1"><strong>2. <code>ssh_connection.sftp_put_directory</code> Function</strong> <a class="header-anchor" href="#_2-ssh-connection-sftp-put-directory-function" aria-label="Permalink to &quot;**2\\. `ssh_connection.sftp_put_directory` Function**&quot;">​</a></h3><p>The <code>sftp_put_directory</code> function is responsible for uploading the files to the remote server. The function works as follows:</p><ul><li><strong>local_path</strong>: Path to the local directory that will be uploaded.</li><li><strong>remote_path</strong>: Path to the target directory on the remote server.</li><li><strong>hostname</strong>: The server&#39;s hostname or IP address.</li><li><strong>username</strong>: The username for SSH login.</li><li><strong>password</strong>: The password for SSH login.</li><li><strong>port</strong>: The SSH port (default is 22).</li></ul><p>This function:</p><ul><li>Connects to the remote server using SSH.</li><li>Iterates through the files and directories in the local directory (<code>local_path</code>).</li><li>For each file, it uploads it using the <code>put</code> method.</li><li>For each subdirectory, it creates the corresponding directory on the remote server and recursively uploads its contents.</li></ul><hr><h2 id="additional-notes" tabindex="-1"><strong>Additional Notes</strong> <a class="header-anchor" href="#additional-notes" aria-label="Permalink to &quot;**Additional Notes**&quot;">​</a></h2><ul><li>The script assumes that it&#39;s a gold build, and that the ZIP file contains the directory <code>hpcc-dev/</code>, which is being uploaded to the remote server.</li><li>Modify the <code>extract_to</code> parameter in the <code>download_and_unzip</code> function if you wish to extract the files to a different directory than the current one (<code>.</code>).</li><li>Modifications can/will be made to be configured and automated using GitHub Actions</li></ul><hr><h2 id="conclusion" tabindex="-1"><strong>Conclusion</strong> <a class="header-anchor" href="#conclusion" aria-label="Permalink to &quot;**Conclusion**&quot;">​</a></h2><p>These scripts allow for easy automation of downloading files from GitHub releases and uploading them to a remote server via SFTP. Customize the repository and SFTP details to suit your needs, and the script will handle the rest!</p>',31)]))}const f=o(s,[["render",n]]);export{p as __pageData,f as default};

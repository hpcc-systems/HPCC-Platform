import{_ as a,a as s,o as n,ag as t}from"./chunks/framework.Do1Zayaf.js";const q=JSON.parse('{"title":"Placements","description":"","frontmatter":{},"headers":[],"relativePath":"helm/hpcc/docs/placements.md","filePath":"helm/hpcc/docs/placements.md","lastUpdated":1761843274000}'),o={name:"helm/hpcc/docs/placements.md"};function p(l,e,i,u,c,r){return n(),s("div",null,e[0]||(e[0]=[t(`<h1 id="placements" tabindex="-1">Placements <a class="header-anchor" href="#placements" aria-label="Permalink to &quot;Placements&quot;">â€‹</a></h1><p>The placement is responsible for finding the best Node for a Pod. It can be configured through placement to include an array of objects to configure the Kubernetes Scheduler. It must have a &quot;pods&quot; list which tells it which pod the settings will be applied to. The syntax is:</p><div class="language-code vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">code</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>   placements:</span></span>
<span class="line"><span>   - pods: [list]</span></span>
<span class="line"><span>     placement:</span></span>
<span class="line"><span>       \\&lt;supported configurations\\&gt;</span></span></code></pre></div><p>The list item in &quot;pods&quot; can be one of the following:</p><ol><li>HPCC Systems component types in format: &quot;type:&lt;type name&gt;&quot;. (&lt;type name&gt; includes dali, esp, eclagent, eclccserver, roxie, thor.) For example &quot;type:esp&quot;</li><li>Target, the name of array item of above type in format &quot;target: &lt;target name&gt;&quot; For example &quot;target:roxie&quot;, &quot;target:thor&quot;.</li><li>Pod, &quot;Deployment&quot; metadata name, which usually should be from the name of the array item of a type. For example, &quot;eclwatch&quot;, &quot;mydali&quot;, &quot;thor-thoragent&quot;..</li><li>Job name regular expression: For example &quot;compile-&quot; or &quot;compile-.<em>&quot; or exact match &quot;^compile-.</em>$&quot;</li><li>set pod: [&quot;all&quot;] for all HPCC Systems components</li></ol><p>Regardless of the order of placements in the configuration, they will be processed in the following order: &quot;all&quot;, &quot;type&quot;, &quot;target&quot; and &quot;pod&quot; or &quot;job&quot;.</p><p>Supported configurations under each &quot;placement&quot;</p><ol><li><p>nodeSelector Multiple nodeSelectors can be applied. For example placements:</p><ul><li>pods: [&quot;all&quot;] placement: nodeSelector: group: &quot;hpcc&quot;</li><li>pods: [&quot;type:dali&quot;] placement: nodeSelector: spot: &quot;false&quot; All dali pods will have: spec: nodeSelector: group: &quot;hpcc&quot; spot: &quot;false&quot; If duplicated keys are defined only the last one will prevail.</li></ul></li><li><p>taints/tolerations Multiple taints/tolerations can be applied. For example placements:</p><ul><li>pods: [&quot;all&quot;] tolerations: <ul><li>key: &quot;group&quot; operator: &quot;Equal&quot; value: &quot;hpcc&quot; effect: &quot;NoSchedule&quot;</li></ul></li><li>pods: [&quot;type:thor&quot;] tolerations: <ul><li>key: &quot;gpu&quot; operator: &quot;Equal&quot; value: &quot;true&quot; effect: &quot;NoSchedule&quot; All thor pods will have: tolerations:</li><li>key: &quot;group&quot; operator: &quot;Equal&quot; value: &quot;hpcc&quot; effect: &quot;NoSchedule&quot;</li><li>key: &quot;gpu&quot; operator: &quot;Equal&quot; value: &quot;true&quot; effect: &quot;NoSchedule&quot;</li></ul></li></ul></li><li><p>affinity There is no schema check for the content of affinity. Reference <a href="https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/" target="_blank" rel="noreferrer">https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/</a> Only one &quot;affinity&quot; can be applied to a Pod/Job. If a Pod/Job matches multiple placement &#39;pods&#39; lists, then only the last &quot;affinity&quot; definition will apply.</p></li><li><p>schedulerName: profile names. &quot;affinity&quot; defined in scheduler profile requires Kubernetes 1.20.0 beta and later releases Only one &quot;schedulerName&quot; can be applied to a Pod/Job.</p></li><li><p>topologySpreadConstraints Requires Kubernetes v1.19+. Reference <a href="https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/" target="_blank" rel="noreferrer">https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/</a></p></li></ol><p>&quot;nodeSelector&quot; example:</p><div class="language-code vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">code</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>placements:</span></span>
<span class="line"><span>- pods: [&quot;eclwatch&quot;,&quot;roxie-workunit&quot;,&quot;^compile-.*$&quot;,&quot;mydali&quot;]</span></span>
<span class="line"><span>  placement:</span></span>
<span class="line"><span>    nodeSelector:</span></span>
<span class="line"><span>      name: npone</span></span></code></pre></div><p>&quot;nodeSelector&quot; and &quot;tolerations&quot; example:</p><div class="language-code vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">code</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>- pods: [&quot;thorworker-&quot;, &quot;thor-thoragent&quot;, &quot;thormanager-&quot;,&quot;thor-eclagent&quot;,&quot;hthor-&quot;]</span></span>
<span class="line"><span>  placement:</span></span>
<span class="line"><span>    nodeSelector:</span></span>
<span class="line"><span>      name: nptwo</span></span>
<span class="line"><span>    tolerations:</span></span>
<span class="line"><span>    - key: &quot;name&quot;</span></span>
<span class="line"><span>      operator: &quot;Equal&quot;</span></span>
<span class="line"><span>      value: &quot;nptwo&quot;</span></span>
<span class="line"><span>      effect: &quot;NoSchedule&quot;</span></span></code></pre></div><p>&quot;affinity&quot; example:</p><div class="language-code vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">code</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>- pods: [&quot;thorworker-.*&quot;]</span></span>
<span class="line"><span>  placement:</span></span>
<span class="line"><span>    affinity:</span></span>
<span class="line"><span>      nodeAffinity:</span></span>
<span class="line"><span>        requiredDuringSchedulingIgnoredDuringExecution:</span></span>
<span class="line"><span>          nodeSelectorTerms:</span></span>
<span class="line"><span>          - matchExpressions:</span></span>
<span class="line"><span>            - key: kubernetes.io/e2e-az-name</span></span>
<span class="line"><span>              operator: In</span></span>
<span class="line"><span>              values:</span></span>
<span class="line"><span>              - e2e-az1</span></span>
<span class="line"><span>              - e2e-az2</span></span></code></pre></div><p>&quot;schedulerName&quot; example, above &quot;affinity&quot; settings can be in this file. Caution &quot;affinity&quot; in &quot;schedulerName&quot; file is only supported in Kubernetes 1.20.0 beta and later.</p><div class="language-code vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">code</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>- pods: [&quot;target:roxie&quot;]</span></span>
<span class="line"><span>  placement:</span></span>
<span class="line"><span>    schedulerName: &quot;my-scheduler&quot;</span></span>
<span class="line"><span>#The settings will be applied to all thor pods/jobs and myeclccserver pod and job</span></span>
<span class="line"><span>- pods: [&quot;target:myeclccserver&quot;, &quot;type:thor&quot;]</span></span>
<span class="line"><span>  placement:</span></span>
<span class="line"><span>    nodeSelector:</span></span>
<span class="line"><span>      app: &quot;tf-gpu&quot;</span></span>
<span class="line"><span>    tolerations:</span></span>
<span class="line"><span>    - key: &quot;gpu&quot;</span></span>
<span class="line"><span>      operator: &quot;Equal&quot;</span></span>
<span class="line"><span>      value: &quot;true&quot;</span></span>
<span class="line"><span>      effect: &quot;NoSchedule&quot;</span></span></code></pre></div><p>&quot;topologySpreadConstraints&quot; example, there are two node pools which have &quot;hpcc=nodepool1&quot; and &quot;hpcc=nodepool2&quot; respectively. The Roxie pods will be evenly scheduled on the two node pools. After deployment verify it with</p><div class="language-code vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">code</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kubectl get pod -o wide | grep roxie</span></span></code></pre></div><p>Placements code:</p><div class="language-code vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">code</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>- pods: [&quot;type:roxie&quot;]</span></span>
<span class="line"><span>  placement:</span></span>
<span class="line"><span>    topologySpreadConstraints:</span></span>
<span class="line"><span>    - maxSkew: 1</span></span>
<span class="line"><span>      topologyKey: hpcc</span></span>
<span class="line"><span>      whenUnsatisfiable: ScheduleAnyway</span></span>
<span class="line"><span>      labelSelector:</span></span>
<span class="line"><span>        matchLabels:</span></span>
<span class="line"><span>          roxie-cluster: &quot;roxie&quot;</span></span></code></pre></div>`,20)]))}const h=a(o,[["render",p]]);export{q as __pageData,h as default};

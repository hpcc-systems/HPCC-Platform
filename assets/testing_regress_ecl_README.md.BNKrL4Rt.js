import{_ as e,a,o as n,ag as t}from"./chunks/framework.Do1Zayaf.js";const h=JSON.parse('{"title":"Test Suite for the Parquet Plugin","description":"","frontmatter":{},"headers":[],"relativePath":"testing/regress/ecl/README.md","filePath":"testing/regress/ecl/README.md","lastUpdated":1761843274000}'),i={name:"testing/regress/ecl/README.md"};function p(l,s,r,o,c,u){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="test-suite-for-the-parquet-plugin" tabindex="-1">Test Suite for the Parquet Plugin <a class="header-anchor" href="#test-suite-for-the-parquet-plugin" aria-label="Permalink to &quot;Test Suite for the Parquet Plugin&quot;">​</a></h1><h2 id="running-the-test-suite" tabindex="-1">Running the Test Suite <a class="header-anchor" href="#running-the-test-suite" aria-label="Permalink to &quot;Running the Test Suite&quot;">​</a></h2><p>The Parquet plugin test suite is a subset of tests in the HPCC Systems regression suite. To run the tests:</p><p>Change directory to HPCC Platform/testing/regress.</p><p>To run the entire Parquet test suite:</p><p>Note: Some Parquet tests require initialization of Parquet files. Use the <code>./ecl-test setup</code>command to initialize these files before running the test suite.</p><p>These commands can be run on any cluster, including hthor or Roxie like the example below.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>./ecl-test query --runclass parquet parquet*.ecl</span></span></code></pre></div><p>To run a single test file:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>./ecl-test query --runclass parquet &lt;test_file_name&gt;.ecl</span></span>
<span class="line"><span></span></span>
<span class="line"><span>example below:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/ecl-test query --target hthor --runclass parquet  parquet_schema.ecl</span></span></code></pre></div><p>On the roxie cluster:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>./ecl-test query --target roxie --runclass parquet parquet*.ecl</span></span></code></pre></div><p>This is what you should see when you run the command above:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[Action] Suite: roxie</span></span>
<span class="line"><span>[Action] Queries: 15</span></span>
<span class="line"><span>[Action]   1. Test: parquet_compress.ecl ( version: compressionType=&#39;UNCOMPRESSED&#39; )</span></span>
<span class="line"><span>[Pass]   1. Pass parquet_compress.ecl ( version: compressionType=&#39;UNCOMPRESSED&#39; ) - W20240815-111429 (4 sec)</span></span>
<span class="line"><span>[Pass]   1. URL http://127.0.0.1:8010/?Widget=WUDetailsWidget&amp;Wuid=W20240815-111429</span></span>
<span class="line"><span>[Action]   2. Test: parquet_compress.ecl ( version: compressionType=&#39;Snappy&#39; )</span></span>
<span class="line"><span>[Pass]   2. Pass parquet_compress.ecl ( version: compressionType=&#39;Snappy&#39; ) - W20240815-111434 (3 sec)</span></span>
<span class="line"><span>[Pass]   2. URL http://127.0.0.1:8010/?Widget=WUDetailsWidget&amp;Wuid=W20240815-111434</span></span>
<span class="line"><span>[Action]   3. Test: parquet_compress.ecl ( version: compressionType=&#39;GZip&#39; )</span></span>
<span class="line"><span>[Pass]   3. Pass parquet_compress.ecl ( version: compressionType=&#39;GZip&#39; ) - W20240815-111438 (4 sec)</span></span>
<span class="line"><span>[Pass]   3. URL http://127.0.0.1:8010/?Widget=WUDetailsWidget&amp;Wuid=W20240815-111438</span></span>
<span class="line"><span>[Action]   4. Test: parquet_compress.ecl ( version: compressionType=&#39;Brotli&#39; )</span></span>
<span class="line"><span>[Pass]   4. Pass parquet_compress.ecl ( version: compressionType=&#39;Brotli&#39; ) - W20240815-111442 (4 sec)</span></span>
<span class="line"><span>[Pass]   4. URL http://127.0.0.1:8010/?Widget=WUDetailsWidget&amp;Wuid=W20240815-111442</span></span>
<span class="line"><span>[Action]   5. Test: parquet_compress.ecl ( version: compressionType=&#39;LZ4&#39; )</span></span>
<span class="line"><span>[Pass]   5. Pass parquet_compress.ecl ( version: compressionType=&#39;LZ4&#39; ) - W20240815-111447 (3 sec)</span></span>
<span class="line"><span>[Pass]   5. URL http://127.0.0.1:8010/?Widget=WUDetailsWidget&amp;Wuid=W20240815-111447</span></span>
<span class="line"><span>[Action]   6. Test: parquet_compress.ecl ( version: compressionType=&#39;ZSTD&#39; )</span></span>
<span class="line"><span>[Pass]   6. Pass parquet_compress.ecl ( version: compressionType=&#39;ZSTD&#39; ) - W20240815-111450 (2 sec)</span></span>
<span class="line"><span>[Pass]   6. URL http://127.0.0.1:8010/?Widget=WUDetailsWidget&amp;Wuid=W20240815-111450</span></span>
<span class="line"><span>[Action]   7. Test: parquet_corrupt.ecl</span></span>
<span class="line"><span>[Pass]   7. Pass parquet_corrupt.ecl - W20240815-111453 (2 sec)</span></span>
<span class="line"><span>[Pass]   7. Intentionally fails</span></span>
<span class="line"><span>[Pass]   7. URL http://127.0.0.1:8010/?Widget=WUDetailsWidget&amp;Wuid=W20240815-111453</span></span>
<span class="line"><span>[Action]   8. Test: parquet_empty.ecl</span></span>
<span class="line"><span>[Pass]   8. Pass parquet_empty.ecl - W20240815-111455 (2 sec)</span></span>
<span class="line"><span>[Pass]   8. Intentionally fails</span></span>
<span class="line"><span>[Pass]   8. URL http://127.0.0.1:8010/?Widget=WUDetailsWidget&amp;Wuid=W20240815-111455</span></span>
<span class="line"><span>[Action]   9. Test: parquet_overwrite.ecl</span></span>
<span class="line"><span>[Pass]   9. Pass parquet_overwrite.ecl - W20240815-111457 (2 sec)</span></span>
<span class="line"><span>[Pass]   9. Intentionally fails</span></span>
<span class="line"><span>[Pass]   9. URL http://127.0.0.1:8010/?Widget=WUDetailsWidget&amp;Wuid=W20240815-111457</span></span>
<span class="line"><span>[Action]  10. Test: parquet_partition.ecl</span></span>
<span class="line"><span>[Pass]  10. Pass parquet_partition.ecl - W20240815-111459 (2 sec)</span></span>
<span class="line"><span>[Pass]  10. URL http://127.0.0.1:8010/?Widget=WUDetailsWidget&amp;Wuid=W20240815-111459</span></span>
<span class="line"><span>[Action]  11. Test: parquet_schema.ecl</span></span>
<span class="line"><span>[Pass]  11. Pass parquet_schema.ecl - W20240815-111502 (1 sec)</span></span>
<span class="line"><span>[Pass]  11. URL http://127.0.0.1:8010/?Widget=WUDetailsWidget&amp;Wuid=W20240815-111502</span></span>
<span class="line"><span>[Action]  12. Test: parquet_size.ecl</span></span>
<span class="line"><span>[Pass]  12. Pass parquet_size.ecl - W20240815-111504 (3 sec)</span></span>
<span class="line"><span>[Pass]  12. URL http://127.0.0.1:8010/?Widget=WUDetailsWidget&amp;Wuid=W20240815-111504</span></span>
<span class="line"><span>[Action]  13. Test: parquet_string.ecl</span></span>
<span class="line"><span>[Pass]  13. Pass parquet_string.ecl - W20240815-111507 (1 sec)</span></span>
<span class="line"><span>[Pass]  13. URL http://127.0.0.1:8010/?Widget=WUDetailsWidget&amp;Wuid=W20240815-111507</span></span>
<span class="line"><span>[Action]  14. Test: parquet_types.ecl</span></span>
<span class="line"><span>[Pass]  14. Pass parquet_types.ecl - W20240815-111509 (7 sec)</span></span>
<span class="line"><span>[Pass]  14. URL http://127.0.0.1:8010/?Widget=WUDetailsWidget&amp;Wuid=W20240815-111509</span></span>
<span class="line"><span>[Action]  15. Test: parquet_write.ecl</span></span>
<span class="line"><span>[Pass]  15. Pass parquet_write.ecl - W20240815-111517 (2 sec)</span></span>
<span class="line"><span>[Pass]  15. URL http://127.0.0.1:8010/?Widget=WUDetailsWidget&amp;Wuid=W20240815-111517</span></span>
<span class="line"><span>[Action]</span></span>
<span class="line"><span>    -------------------------------------------------</span></span>
<span class="line"><span>    Result:</span></span>
<span class="line"><span>    Passing: 15</span></span>
<span class="line"><span>    Failure: 0</span></span>
<span class="line"><span>    -------------------------------------------------</span></span>
<span class="line"><span>    Log: /home/user/HPCCSystems-regression/log/roxie.24-08-15-11-14-29.log</span></span>
<span class="line"><span>    -------------------------------------------------</span></span>
<span class="line"><span>    Elapsed time: 52 sec  (00:00:52)</span></span>
<span class="line"><span>    -------------------------------------------------</span></span></code></pre></div><h2 id="project-description" tabindex="-1">Project Description <a class="header-anchor" href="#project-description" aria-label="Permalink to &quot;Project Description&quot;">​</a></h2><p>This project focuses on the development of a comprehensive test suite for the recently integrated Parquet plugin within the HPCC Systems platform. The objective is to thoroughly evaluate the plugin&#39;s functionality, performance, and robustness across different scenarios and configurations. The key deliverables include defining and implementing various test cases, fixing any identified bugs, and providing extensive documentation.</p><p>The test suite will evaluate all data types supported by ECL and Arrow, as well as file operations, various compression formats, and schema handling. Additionally, the test suite will measure the plugin&#39;s performance across different HPCC components and hardware configurations, conduct stress tests to identify potential bottlenecks and bugs, and compare Parquet to other file formats used in the ecosystem, such as JSON, XML, and CSV.</p><h1 id="test-files" tabindex="-1">Test Files <a class="header-anchor" href="#test-files" aria-label="Permalink to &quot;Test Files&quot;">​</a></h1><p>The test suite consists of 10 main test files that test different parquet functionality and operations:</p><ul><li><p>parquet_types.ecl: Tests various ECL and Arrow data types</p></li><li><p>parquet_schema.ecl: Evaluates Parquet&#39;s handling of different schemas</p></li><li><p>parquet_compress.ecl: Tests different compression algorithms</p></li><li><p>parquet_write.ecl: Validates Parquet write operations</p></li><li><p>parquet_empty.ecl: Tests behavior with empty Parquet files</p></li><li><p>parquet_corrupt.ecl: Checks handling of corrupt Parquet data</p></li><li><p>parquet_size.ecl: Compares file sizes across formats</p></li><li><p>parquet_partition.ecl: Tests partitioning in Parquet files</p></li><li><p>parquet_overwrite.ecl: Validates overwrite operations</p></li><li><p>parquet-string.ecl: Focuses on string-related operations</p></li></ul><h2 id="test-suite-overview" tabindex="-1">Test Suite Overview <a class="header-anchor" href="#test-suite-overview" aria-label="Permalink to &quot;Test Suite Overview&quot;">​</a></h2><h2 id="type-testing" tabindex="-1">Type Testing <a class="header-anchor" href="#type-testing" aria-label="Permalink to &quot;Type Testing&quot;">​</a></h2><p>Covers 42 data types including ECL and Arrow types Examples: BOOLEAN, INTEGER, STRING, UNICODE, various numeric types, sets, and Arrow-specific types</p><h3 id="data-type-tests" tabindex="-1">Data Type Tests <a class="header-anchor" href="#data-type-tests" aria-label="Permalink to &quot;Data Type Tests&quot;">​</a></h3><p>The Parquet plugin test suite shows that the plugin supports all ECL types.</p><h4 id="arrow-types-supported-by-the-parquet-plugin" tabindex="-1">Arrow Types Supported by the Parquet Plugin <a class="header-anchor" href="#arrow-types-supported-by-the-parquet-plugin" aria-label="Permalink to &quot;Arrow Types Supported by the Parquet Plugin&quot;">​</a></h4><ul><li>null</li><li>uint8</li><li>int8</li><li>uint16</li><li>int16</li><li>uint32</li><li>int32</li><li>uint64</li><li>int64</li><li>half_float</li><li>float</li><li>double</li><li>string</li><li>binary</li><li>fixed_size_binary</li><li>date32</li><li>date64</li><li>timestamp</li><li>time32</li><li>time64</li><li>interval_months</li><li>list</li><li>decimal</li><li>large_list</li><li>interval_day_time</li></ul><h1 id="compression-testing" tabindex="-1">Compression Testing <a class="header-anchor" href="#compression-testing" aria-label="Permalink to &quot;Compression Testing&quot;">​</a></h1><p>Tests all available Arrow compression types: Snappy, GZip, Brotli, LZ4, ZSTD, Uncompressed Compares performance and file sizes for different compression options</p><h3 id="parquet-read-and-write-operations" tabindex="-1">Parquet Read and Write Operations <a class="header-anchor" href="#parquet-read-and-write-operations" aria-label="Permalink to &quot;Parquet Read and Write Operations&quot;">​</a></h3><p>Tests ParquetIO.Read for creating ECL datasets from Parquet files Tests ParquetIO.Write for writing ECL datasets to Parquet files</p><h1 id="additional-tests" tabindex="-1">Additional Tests <a class="header-anchor" href="#additional-tests" aria-label="Permalink to &quot;Additional Tests&quot;">​</a></h1><p>Read and Write Speeds Comparison with Other File Types Schema Handling and Compatibility Behavior with Corrupt Data and Empty Parquet Files</p><h1 id="test-evaluation" tabindex="-1">Test Evaluation <a class="header-anchor" href="#test-evaluation" aria-label="Permalink to &quot;Test Evaluation&quot;">​</a></h1><p>The test suite generally uses key files located in HPCC-Platform/testing/regress/ecl/key, with a &quot;.xml&quot; extension, to evaluate test outcomes. These files store the expected results for comparison. However, some Parquet tests do not rely on key files, and alternative evaluation methods are used in those cases.</p>`,35)]))}const m=e(i,[["render",p]]);export{h as __pageData,m as default};

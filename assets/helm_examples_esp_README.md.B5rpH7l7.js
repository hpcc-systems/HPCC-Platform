import{_ as a,a as s,o as i,ag as t}from"./chunks/framework.Do1Zayaf.js";const g=JSON.parse('{"title":"ESP Trace Flags","description":"","frontmatter":{},"headers":[],"relativePath":"helm/examples/esp/README.md","filePath":"helm/examples/esp/README.md","lastUpdated":1761843274000}'),l={name:"helm/examples/esp/README.md"};function o(r,e,n,d,p,c){return i(),s("div",null,e[0]||(e[0]=[t(`<h1 id="esp-trace-flags" tabindex="-1">ESP Trace Flags <a class="header-anchor" href="#esp-trace-flags" aria-label="Permalink to &quot;ESP Trace Flags&quot;">​</a></h1><p>Each ESP process may specify its own set of flags for controlling trace behavior. The specific flags may be shared with other platform components, shared amongst ESPs, or unique to an ESP.</p><h2 id="accepted-flags" tabindex="-1">Accepted Flags <a class="header-anchor" href="#accepted-flags" aria-label="Permalink to &quot;Accepted Flags&quot;">​</a></h2><p>Detailed description of flags used by any ESP.</p><h3 id="shared-platform-flags" tabindex="-1">Shared Platform Flags <a class="header-anchor" href="#shared-platform-flags" aria-label="Permalink to &quot;Shared Platform Flags&quot;">​</a></h3><p>Flags defined in <code>system/jlib/jtrace.hpp</code> and used by multiple platform processes.</p><p>Flags will be added to this list as tracing logic is updated in ESP code. For example, the shared platform flag <code>traceHttp</code> is expected to be used, as are a number of ESP-specific options.</p><h3 id="shared-esp-flags" tabindex="-1">Shared ESP Flags <a class="header-anchor" href="#shared-esp-flags" aria-label="Permalink to &quot;Shared ESP Flags&quot;">​</a></h3><p>Flags defined in <code>esp/platform/esptrace.h</code> and applicable to most, if not all, ESP configurations.</p><h4 id="tracedetail" tabindex="-1">traceDetail <a class="header-anchor" href="#tracedetail" aria-label="Permalink to &quot;traceDetail&quot;">​</a></h4><p>Set the default trace level in the process. Accepted case-insensitive values are:</p><ul><li><code>1</code>, <code>standard</code>: most important output</li><li><code>2</code>, <code>detailed</code>: average verbosity output</li><li><code>3</code>, <code>max</code>: highest verbosity output</li><li><code>default</code>: use existing level <ul><li>Release builds default to <code>standard</code></li><li>Debug builds default to <code>max</code></li></ul></li><li><code>0</code>, <code>none</code>, <em>all other values</em>: no trace output</li></ul><h2 id="process-configuration" tabindex="-1">Process Configuration <a class="header-anchor" href="#process-configuration" aria-label="Permalink to &quot;Process Configuration&quot;">​</a></h2><h3 id="containerized" tabindex="-1">Containerized <a class="header-anchor" href="#containerized" aria-label="Permalink to &quot;Containerized&quot;">​</a></h3><h4 id="esp-yaml" tabindex="-1">esp.yaml <a class="header-anchor" href="#esp-yaml" aria-label="Permalink to &quot;esp.yaml&quot;">​</a></h4><p>Each ESP application&#39;s configuration object may embed one instance of a <code>traceFlags</code> object. Within this object, at most one property per <a href="#accepted-flags">accepted flag</a> is expected. Properties not described here are ignored.</p><p>For example, the <code>eclwatch</code> process might be configured to use detailed reporting like this:</p><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">esp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">eclwatch</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  traceFlags</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    traceDetail</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span></span></code></pre></div><h2 id="cluster-overrides" tabindex="-1">Cluster Overrides <a class="header-anchor" href="#cluster-overrides" aria-label="Permalink to &quot;Cluster Overrides&quot;">​</a></h2><p>A values file may be used with the <code>helm install</code> command to override the settings of all ESPs. The <code>--set</code> option may be used to target the settings of a specific ESP in the configured array.</p><h3 id="bare-metal" tabindex="-1">Bare-Metal <a class="header-anchor" href="#bare-metal" aria-label="Permalink to &quot;Bare-Metal&quot;">​</a></h3><p>No support for defining trace flags is provided by the <code>configmgr</code> application. Within a stand-alone <code>esp.xml</code> file, however, a <code>traceFlags</code> child of the <code>EspProcess</code> element may be defined.</p><p>The previous YAML example may be reproduced in XML with the following:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">EspProcess</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ...&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">traceFlags</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> traceDetail</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">EspProcess</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div>`,24)]))}const k=a(l,[["render",o]]);export{g as __pageData,k as default};

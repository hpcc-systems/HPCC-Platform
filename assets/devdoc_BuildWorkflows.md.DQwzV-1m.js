import{_ as t,a as i,o as s,ag as a}from"./chunks/framework.Do1Zayaf.js";const p=JSON.parse('{"title":"HPCC Systems Build Workflows","description":"","frontmatter":{},"headers":[],"relativePath":"devdoc/BuildWorkflows.md","filePath":"devdoc/BuildWorkflows.md","lastUpdated":1761843274000}'),o={name:"devdoc/BuildWorkflows.md"};function r(l,e,n,u,d,h){return s(),i("div",null,e[0]||(e[0]=[a('<h1 id="hpcc-systems-build-workflows" tabindex="-1">HPCC Systems Build Workflows <a class="header-anchor" href="#hpcc-systems-build-workflows" aria-label="Permalink to &quot;HPCC Systems Build Workflows&quot;">​</a></h1><h1 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h1><p>This document outlines the Build Workflows of the HPCC Platform. These workflows are executed using GitHub Actions. Specifically, these workflows are facilitated through the build-assets.yml and build-vcpkg.yml algorithim.Both of these YAML files are apllicable for both enterprise and commmunity builds of the HPCC Platform.</p><h1 id="platforms-which-the-build-processes-support" tabindex="-1">Platforms which the build processes support: <a class="header-anchor" href="#platforms-which-the-build-processes-support" aria-label="Permalink to &quot;Platforms which the build processes support:&quot;">​</a></h1><ul><li>Ubuntu 20.04-24.04</li><li>CentOS 7</li><li>RockyLinux 8</li><li>Windows 2019/2022</li><li>macOS 13/14</li><li>wasm32-emscripten</li></ul><h1 id="purpose" tabindex="-1">Purpose <a class="header-anchor" href="#purpose" aria-label="Permalink to &quot;Purpose&quot;">​</a></h1><p>Build-vcpkg:</p><ul><li>Validate code changes in pull requests, ensuring new contributions do not break existing functions of the HPCC Platform/main codebase.</li><li>Ensuring the HPCC Platform can compile and perform on a variety of different operating systems&#39;s/architecures.</li><li>A main part of this is due to running a test suite(a series of tests for the HPCC-Platform).</li></ul><p>Build-assets:</p><ul><li>To automate the release process when a version tag is pushed to the Github</li><li>This release process is a set of actions where the HPCC platform is compiled through production configurations based on the OS.</li><li>Bundle the compiled file into installable packages.</li><li>Then publish these artifacts based on the specific image type.</li><li>And finally notify the user and systems for this release.</li></ul><h1 id="steps" tabindex="-1">Steps <a class="header-anchor" href="#steps" aria-label="Permalink to &quot;Steps&quot;">​</a></h1><p>How the workflow proceeds depending on the trigger type:</p><h1 id="_1-trigger-event-workflow" tabindex="-1">1.Trigger Event/Workflow <a class="header-anchor" href="#_1-trigger-event-workflow" aria-label="Permalink to &quot;1.Trigger Event/Workflow&quot;">​</a></h1><p>Both files run on:</p><ul><li>Pull Requests.</li><li>Tagged releases.</li><li>input from user.</li></ul><h1 id="_2-execution" tabindex="-1">2. Execution <a class="header-anchor" href="#_2-execution" aria-label="Permalink to &quot;2. Execution&quot;">​</a></h1><ul><li>Compiles the HPCC Platform across the different Operating Systems supported.</li></ul><h1 id="_3-tests-run" tabindex="-1">3. Tests run <a class="header-anchor" href="#_3-tests-run" aria-label="Permalink to &quot;3. Tests run&quot;">​</a></h1><ul><li>This tests are important to ensure that the HPCC platform is behaving as expxected and no new pull request have disrupted its functions</li><li>This done through a rigorous test suite including smoke ,UI ,regression, and bundle tests.</li></ul><h1 id="_4-generate-and-upload-artifiacts" tabindex="-1">4. Generate and Upload Artifiacts <a class="header-anchor" href="#_4-generate-and-upload-artifiacts" aria-label="Permalink to &quot;4. Generate and Upload Artifiacts&quot;">​</a></h1><ul><li>Package the compiled file into the binarie,Docker format, etc</li><li>In the build-assets.yml workflow, a build Docker action is executed concurrently for each supported operating system (please see supported platforms below for a comprehensive list of all supported operating systems). Separate versions are constructed for community and internal/enterprise versions. Variables are computed and stored, followed by the build-assets workflow invoking the build-vcpkg workflow which assembles the Docker image and verifies if its production was successful.</li><li>Publish this artifact to the known users/systems.</li></ul>',21)]))}const f=t(o,[["render",r]]);export{p as __pageData,f as default};

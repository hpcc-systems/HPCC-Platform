import{_ as t,a,o as s,ag as o}from"./chunks/framework.Do1Zayaf.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"esp/esdllib/docs/escapeXmlCharacters.md","filePath":"esp/esdllib/docs/escapeXmlCharacters.md","lastUpdated":1761843274000}'),c={name:"esp/esdllib/docs/escapeXmlCharacters.md"};function r(n,e,l,d,i,p){return s(),a("div",null,e[0]||(e[0]=[o(`<h4 id="escapexmlcharacters" tabindex="-1">escapeXmlCharacters <a class="header-anchor" href="#escapexmlcharacters" aria-label="Permalink to &quot;escapeXmlCharacters&quot;">​</a></h4><pre><code>string escapeXmlCharacters(xml)
</code></pre><p>Return a copy of the input data with XML-restricted characters replaced by character entities. For example, <code>&lt;</code> is replaced with <code>&amp;lt;</code> in the output. Encoding an encoded value, encoding the ampersands, is supported and may be desirable (see below).</p><table tabindex="0"><thead><tr><th style="text-align:left;">Parameter</th><th style="text-align:center;">Required?</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;">xml</td><td style="text-align:center;">Y</td><td style="text-align:left;">Character buffer that may include XML markup. May be empty.</td></tr></tbody></table><h5 id="known-issue-s" tabindex="-1">Known Issue(s) <a class="header-anchor" href="#known-issue-s" aria-label="Permalink to &quot;Known Issue(s)&quot;">​</a></h5><h6 id="hpcc-28673" tabindex="-1">HPCC-28673 <a class="header-anchor" href="#hpcc-28673" aria-label="Permalink to &quot;HPCC-28673&quot;">​</a></h6><p><a href="https://hpccsystems.atlassian.net/browse/HPCC-28673" target="_blank" rel="noreferrer">https://hpccsystems.atlassian.net/browse/HPCC-28673</a></p><p>Insertion of content containing XML-restricted characters into the script context as element content does not behave as expected. Given operations <code>&lt;es:set-value target=&quot;unencoded&quot; select=&quot;&#39;&lt;tag/&gt;&#39;&quot;/&gt;</code> and <code>&lt;es:set-value target=&quot;encodeded&quot; select=&quot;&#39;&amp;lt;tag/&amp;gt;&#39;)&quot;/&gt;</code>, both <code>unencoded</code> and <code>encoded</code> evaluate to <code>&lt;tag/&gt;</code>, when <code>encoded</code> is expected to be <code>&amp;lt;tag/&amp;gt;</code>.</p><p>Double escaping (i.e., <code>escapeXmlCharacters(escapeXmlCharacters(&#39;&lt;tag/&gt;&#39;))</code>) provides a limited workaround. Manipulation of the value by itself is addressed. If the value is included in a larger fragment of markup being manipulated, the value within the fragment will no longer be double-escaped.</p><p>What this means is that an operation like <code>&lt;es:set-value target=&quot;here&quot; select=&quot;toXmlString(&#39;.&#39;)&quot;/&gt;</code> will lose any escaped characters when updating the content of <code>here</code>. Double escaping a value somewhere in the current node will lose one level of escaping when the XML string is assembled, and will lose the second level of escaping when inserted at <code>here</code>. A value that begins as escaped markup becomes unescaped markup at the end.</p>`,10)]))}const m=t(c,[["render",r]]);export{u as __pageData,m as default};

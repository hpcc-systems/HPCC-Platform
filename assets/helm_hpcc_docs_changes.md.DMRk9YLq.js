import{_ as s,a as e,o as n,ag as i}from"./chunks/framework.Do1Zayaf.js";const u=JSON.parse('{"title":"Changes in 8.2.0","description":"","frontmatter":{},"headers":[],"relativePath":"helm/hpcc/docs/changes.md","filePath":"helm/hpcc/docs/changes.md","lastUpdated":1761843274000}'),t={name:"helm/hpcc/docs/changes.md"};function p(l,a,o,c,r,d){return n(),e("div",null,a[0]||(a[0]=[i(`<h1 id="changes-in-8-2-0" tabindex="-1">Changes in 8.2.0 <a class="header-anchor" href="#changes-in-8-2-0" aria-label="Permalink to &quot;Changes in 8.2.0&quot;">​</a></h1><p>There are a few changes in the way the values.yaml needs to be specified for HPCC clusters starting with 8.2.0. These were necessary to implement required functionality. If you have a customized values file that you have been using with 8.0.x builds, you will need to make a few simple changes to be able to use it with 8.2.x. The required changes are all enforced by the schema, so you will see schema errors if you try to use an uncorrected values file.</p><h2 id="service-changes" tabindex="-1">Service changes <a class="header-anchor" href="#service-changes" aria-label="Permalink to &quot;Service changes&quot;">​</a></h2><p>In order to support annotations on services, and thus control whether public services are connected to internal subnets or published to the internet, we have changed the way that services are specified. We have also adjusted some names of fields within service definitions so that Roxie, Sasha and ESP services are more consistent in their syntax.</p><p>The following changes should be noted:</p><ol><li>For ESP and Sasha services, the settings related to the service have been moved into a new service: section within the component settings.</li><li>For Roxie services, the name of the setting used to define the external port has been changed to servicePort</li><li>The “public” setting on ESP services and the “external” setting on Roxie services have been replaced by a new “visibility” setting specifying a user-settable preset. We provide pre-populated presets “cluster”, “local” and “global” but others can be added if needed.</li><li>Annotations and labels can be specified on any service, or for any visibility preset, or for any component pod.</li></ol><p>If you try to launch with an unmodified 8.0.x values.yaml, you may see errors like this:</p><div class="language-code vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">code</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>- esp.1: service is required</span></span>
<span class="line"><span>- esp.2: service is required</span></span>
<span class="line"><span>- esp.3: service is required</span></span>
<span class="line"><span>- esp.4: service is required</span></span>
<span class="line"><span>- roxie.0.services.0: servicePort is required</span></span>
<span class="line"><span>- roxie.0.services.0: Additional property external is not allowed</span></span>
<span class="line"><span>- sasha: Must validate one and only one schema (oneOf)</span></span>
<span class="line"><span>- sasha.dfuwu-archiver: Must validate one and only one schema (oneOf)</span></span>
<span class="line"><span>- sasha.dfuwu-archiver: Additional property servicePort is not allowed</span></span>
<span class="line"><span>- sasha.dfuwu-archiver: Must validate all the schemas (allOf)</span></span>
<span class="line"><span>- sasha.wu-archiver: Must validate one and only one schema (oneOf)</span></span>
<span class="line"><span>- sasha.wu-archiver: Additional property servicePort is not allowed</span></span>
<span class="line"><span>- sasha.wu-archiver: Must validate all the schemas (allOf)</span></span></code></pre></div><p>For the ESP “service is required” errors, you will need to change a spec that looks like (for example)</p><div class="language-code vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">code</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>esp:</span></span>
<span class="line"><span>- name: eclwatch</span></span>
<span class="line"><span>  application: eclwatch</span></span>
<span class="line"><span>  auth: none</span></span>
<span class="line"><span>  replicas: 1</span></span>
<span class="line"><span>  port: 8888</span></span>
<span class="line"><span>  servicePort: 8010</span></span>
<span class="line"><span>  public: true</span></span></code></pre></div><p>to</p><div class="language-code vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">code</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>- name: eclwatch</span></span>
<span class="line"><span>  application: eclwatch</span></span>
<span class="line"><span>  auth: none</span></span>
<span class="line"><span>  replicas: 1</span></span>
<span class="line"><span>  service:</span></span>
<span class="line"><span>    port: 8888</span></span>
<span class="line"><span>    servicePort: 8010</span></span>
<span class="line"><span>    visibility: local  # or global if you want to be open to the internet</span></span></code></pre></div><p>For the roxie errors, change something that looks like (for example)</p><div class="language-code vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">code</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>roxie:</span></span>
<span class="line"><span>- name: roxie</span></span>
<span class="line"><span>  disabled: false</span></span>
<span class="line"><span>  prefix: roxie</span></span>
<span class="line"><span>  services:</span></span>
<span class="line"><span>  - name: roxie</span></span>
<span class="line"><span>    port: 9876</span></span>
<span class="line"><span>    listenQueue: 200</span></span>
<span class="line"><span>    numThreads: 30</span></span>
<span class="line"><span>    external: true</span></span>
<span class="line"><span>  ...</span></span></code></pre></div><p>to</p><div class="language-code vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">code</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>roxie:</span></span>
<span class="line"><span>- name: roxie</span></span>
<span class="line"><span>  disabled: false</span></span>
<span class="line"><span>  prefix: roxie</span></span>
<span class="line"><span>  services:</span></span>
<span class="line"><span>  - name: roxie</span></span>
<span class="line"><span>    servicePort: 9876</span></span>
<span class="line"><span>    listenQueue: 200</span></span>
<span class="line"><span>    numThreads: 30</span></span>
<span class="line"><span>    visibility: local</span></span></code></pre></div><p>The sasha errors are not quite so descriptive but are addressed in the same way as the ESP ones, i.e. change something that looks like:</p><div class="language-code vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">code</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sasha:</span></span>
<span class="line"><span>  wu-archiver:</span></span>
<span class="line"><span>    servicePort: 8877</span></span></code></pre></div><p>to</p><div class="language-code vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">code</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sasha:</span></span>
<span class="line"><span>  wu-archiver:</span></span>
<span class="line"><span>    service:</span></span>
<span class="line"><span>       servicePort: 8877</span></span>
<span class="line"><span>    storage:</span></span></code></pre></div><h2 id="startup-probe-changes" tabindex="-1">Startup probe changes <a class="header-anchor" href="#startup-probe-changes" aria-label="Permalink to &quot;Startup probe changes&quot;">​</a></h2><p>Some components may take a while to start up, but should not be added to the relevant k8s load balancer until they have done so. We us standard k8s startup probes and readiness probes to manage this process. In 8.2.0 it is possible to override the default settings for the startup probe by setting minStartupTime and maxStartupTime on any component (Roxie and Dali are the two that are likely to need it).</p><h2 id="storage-changes" tabindex="-1">Storage changes <a class="header-anchor" href="#storage-changes" aria-label="Permalink to &quot;Storage changes&quot;">​</a></h2><p>In 8.2.x all storage for data, dlls, landing zones etc. is defined in the list of storage.planes.</p><p>Previously daliStorage, dataStorage and dllStorage could either refer to an existing plane, or could implicitly define a storage plane. That implicit plane could be based on a pre-existing persistent volume claim (by setting existingClaim) or ephemeral storage (by setting storageClass and storageSize). In version 8.2. these sections are no longer supported.</p><p>Implicit planes that were defined within those sections must now use an explicit plane definition. The plane definitions have been extended to allow ephemeral storage to be defined (see dali example below).</p><p>Previously the default storage plane for a particular storage category could be specified by naming it in the appropriate storage section. E.g. storage.dataStorage.plane could name the default data storage plane. The default is now the first plane with the corresponding category.</p><p>Another change is that previously a storage plane had a labels: attribute to indicate what kind of data was stored on the plane. It was a list, and if blank defaulted to [ data ]. This has now become a single valued &quot;category&quot; attribute. In the unlikely event of wanting to have multiple categories stored on the same mounted drive, it is possible to define a plane with a duplicate prefix and storage definition with a different category. Planes also support the subPath attribute to allow a subdirectory to be used within a mount point.</p><p>For instance if you have the following definition in 8.0.x:</p><div class="language-code vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">code</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>storage:</span></span>
<span class="line"><span>  daliStorage:</span></span>
<span class="line"><span>     existingClaim: my-pvc</span></span></code></pre></div><p>would be defined as follows in 8.2.x:</p><div class="language-code vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">code</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>storage:</span></span>
<span class="line"><span>  - name: dali</span></span>
<span class="line"><span>    pvc: my-pvc</span></span>
<span class="line"><span>    prefix: &quot;/var/lib/HPCCSystems/dalistorage&quot;</span></span>
<span class="line"><span>    category: dali</span></span></code></pre></div><p>And similarly a definition that uses ephemeral storage: \`</p><div class="language-code vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">code</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>storage:</span></span>
<span class="line"><span>  daliStorage:</span></span>
<span class="line"><span>    storageClass: &quot;&quot;</span></span>
<span class="line"><span>    storageSize: 1Gi</span></span></code></pre></div><p>would be become:</p><div class="language-code vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">code</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>storage:</span></span>
<span class="line"><span>  - name: dali</span></span>
<span class="line"><span>    storageClass: &quot;&quot;</span></span>
<span class="line"><span>    storageSize: 1Gi</span></span>
<span class="line"><span>    prefix: &quot;/var/lib/HPCCSystems/dalistorage&quot;</span></span>
<span class="line"><span>    category: dali</span></span></code></pre></div><p>The default values.yaml and example files have been updated to reflect these changes.</p><h2 id="default-data-plane-changes" tabindex="-1">Default data plane changes <a class="header-anchor" href="#default-data-plane-changes" aria-label="Permalink to &quot;Default data plane changes&quot;">​</a></h2><p>Previously the storagePlane property could be set on an engine to change the default data plane. This has now been renamed to dataPlane for consistency with the category name. In future other types of planes will be configurable in the same way (spill, dll, temp).</p><p>Sasha services used to define their storage plane within a nested storage attribute:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  wu-archiver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    storage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      plane</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">sasha</span></span></code></pre></div><p>This is now simplified to:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  wu-archiver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    plane</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">sasha</span></span></code></pre></div><p>A value of &quot;&quot; can be used mean use the 1st plane with the sasha category.</p>`,44)]))}const g=s(t,[["render",p]]);export{u as __pageData,g as default};

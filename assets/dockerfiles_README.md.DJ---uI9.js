import{_ as a,a as t,o,ag as i}from"./chunks/framework.Do1Zayaf.js";const u=JSON.parse('{"title":"Docker images","description":"","frontmatter":{},"headers":[],"relativePath":"dockerfiles/README.md","filePath":"dockerfiles/README.md","lastUpdated":1761843274000}'),s={name:"dockerfiles/README.md"};function n(l,e,r,c,p,h){return o(),t("div",null,e[0]||(e[0]=[i('<h1 id="docker-images" tabindex="-1">Docker images <a class="header-anchor" href="#docker-images" aria-label="Permalink to &quot;Docker images&quot;">​</a></h1><p>Docker images related to HPCC are structured as follows</p><p><strong>hpccsystems/platform-build-base</strong></p><p>This image contains all the development packages required to build the hpcc platform, but no HPCC code or sources. It changes rarely. The current version is tagged 7.10 and is based on Ubuntu 20.04 base image</p><p><strong>hpccsystems/platform-build</strong></p><p>Building this image builds and installs the HPCC codebase for a specified git tag of the HPCC platform sources. The Dockerfile takes arguments naming the version of the platform-build-base image to use and the git tag to use. Sources are fetched from github. An image will be pushed to Dockerhub for every public tag on the HPCC-Platform repository in GitHub, which developers can use as a base for their own development.</p><p>There is a second Dockerfile in platform-build-incremental that can be used by developers working on a branch that is not yet tagged or merged into upstream, that uses hpccsystems/platform-build as a base in order to avoid the need for full rebuilds each time the image is built.</p><p><strong>hpccsystems/plaform-core</strong></p><p>This uses the build artefacts file from a hpccsystems/plaform-build image to install a copy of the full platform code, which can be used to run any HPCC component.</p><p>If you need additional components installed on your cluster, such as Python libraries, you can create a Docker image based on platform-core with additional components installed. An example can be found in the examples/numpy directory. You will then override the image name when deploying a helm chart in order to enabled your additional components.</p><hr><h1 id="bash-scripts" tabindex="-1">Bash scripts <a class="header-anchor" href="#bash-scripts" aria-label="Permalink to &quot;Bash scripts&quot;">​</a></h1><p>buildall.sh - Used to create and publish a docker container corresponding to a github tag clean.sh - Clean up old docker images (if disk gets full) incr.sh - Build local images for testing (delta from a published image) startall.sh - Start a local k8s cluster, and optional Elastic Stack for log processing purposes stopall.sh - Stop a local k8s cluster, and optional Elastic Stack</p><hr><h1 id="helm-chart" tabindex="-1">Helm chart <a class="header-anchor" href="#helm-chart" aria-label="Permalink to &quot;Helm chart&quot;">​</a></h1><p>The Helm chart in helm/hpcc/ can be used to deploy an entire HPCC environment to a K8s cluster.</p><h2 id="values-yaml-sections" tabindex="-1">values.yaml sections <a class="header-anchor" href="#values-yaml-sections" aria-label="Permalink to &quot;values.yaml sections&quot;">​</a></h2><p>global: # The global section applies to all components within the HPCC system.</p><p>dali: esp: roxie: eclccserver: etc # Each section will specify a list of one or more components of the specified type # Within each section, there&#39;s a map specifying settings specific to that instance of the component, # including (at least) name, plus any other required settings (which vary according to component type).</p><h2 id="template-structure" tabindex="-1">Template structure <a class="header-anchor" href="#template-structure" aria-label="Permalink to &quot;Template structure&quot;">​</a></h2><p>There are some helper templates in _util.tpl to assist in generation of the k8s yaml for each component. Many of these are used for standard boilerplate that ends up in every component:</p><p>hpcc.utils.addImageAttrs</p><ul><li>adds information about the container image source, version and pull mode hpcc.utils.addConfigVolumeMount hpcc.utils.addConfigVolume</li><li>add information that mount the global and local configuration information into /etc/config using k8s ConfigMap hpcc.utils.generateConfigMap</li><li>generates local and global config files for the above hpcc.utils.configArg</li><li>generates the parameter to pass to the container naming the config file hpcc.utils.daliArg</li><li>generates the parameter to pass to the container naming the dali to connect to</li></ul><h2 id="configuration-files" tabindex="-1">Configuration files <a class="header-anchor" href="#configuration-files" aria-label="Permalink to &quot;Configuration files&quot;">​</a></h2><p>Each component can specify local configuration via config: or configFile: settings - configFile names a file that is copied verbatim into the relevant ConfigMap, while config: allows the config file&#39;s contents to be specified inline.</p><p>In addition, global config info (same for every component) is generated into a global.json file and made available via ConfigMap mechanism. So far, this only contains</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   &quot;version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{{ .root.Values.global.image.version | quote }}&quot;</span></span></code></pre></div><p>but we can add more.</p><h2 id="roxie-modes-under-k8s" tabindex="-1">Roxie modes under K8s <a class="header-anchor" href="#roxie-modes-under-k8s" aria-label="Permalink to &quot;Roxie modes under K8s&quot;">​</a></h2><p>When running under K8s, Roxie has 3 fundamental modes of operation:</p><ol><li><p>Scalable array of one-way roxie servers</p><p>Set localSlave=true, replicas=initial number of pods</p></li><li><p>Per-channel-scalable array of combined servers/slaves</p><p>localSlave=false, numChannels=nn, replicas=initial number of pods per channel (default 2)</p><p>There will be numChannels*replicas pods in total</p></li><li><p>Scalable array of servers with per-channel-scalable array of slaves</p><p>localSlave=false, numChannels=nn, replicas=pods/channel, serverReplicas=initial number of server pods</p><p>There will be numChannels*replicas slave pods and serverReplicas server pods in total</p><p>This mode is somewhat experimental at present!</p></li></ol>',31)]))}const m=a(s,[["render",n]]);export{u as __pageData,m as default};

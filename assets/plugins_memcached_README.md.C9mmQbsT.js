import{_ as a,a as s,o as n,ag as t}from"./chunks/framework.Do1Zayaf.js";const m=JSON.parse('{"title":"ECL Memcached Plugin","description":"","frontmatter":{},"headers":[],"relativePath":"plugins/memcached/README.md","filePath":"plugins/memcached/README.md","lastUpdated":1761843274000}'),i={name:"plugins/memcached/README.md"};function o(p,e,l,r,c,d){return n(),s("div",null,e[0]||(e[0]=[t(`<h1 id="ecl-memcached-plugin" tabindex="-1">ECL Memcached Plugin <a class="header-anchor" href="#ecl-memcached-plugin" aria-label="Permalink to &quot;ECL Memcached Plugin&quot;">​</a></h1><p>This is the ECL plugin to utilize the volatile key-value cache <a href="http://memcached.org" target="_blank" rel="noreferrer">Memcached</a>. It utilises the C API <a href="http://libmemcached.org/libMemcached.html" target="_blank" rel="noreferrer">libmemcached</a>.</p><h2 id="installation-and-dependencies" tabindex="-1">Installation and Dependencies <a class="header-anchor" href="#installation-and-dependencies" aria-label="Permalink to &quot;Installation and Dependencies&quot;">​</a></h2><p>To build the memcached plugin with the HPCC-Platform, libmemcached-dev is required.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sudo apt-get install libmemcached-dev</span></span></code></pre></div><p>The memcached daemon can be obtained via - <a href="http://memcached.org/downloads" target="_blank" rel="noreferrer">source</a> or the preferred method:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sudo apt-get install memcached</span></span></code></pre></div><p><em>Note:</em> <strong>libmemcached</strong> 1.0.10 or greater is required to use this plugin as intended. It is advised to use the newest version of <strong>memcached</strong> possible to you.</p><h2 id="getting-started" tabindex="-1">Getting started <a class="header-anchor" href="#getting-started" aria-label="Permalink to &quot;Getting started&quot;">​</a></h2><p>The daemon can be started by typing <code>memcached -d</code> within a terminal. To run with with a non-default configuration, for example to listen on another <strong>IP</strong> and <strong>port</strong> - <code>memcached -d -l \\&lt;ip\\&gt; -p \\&lt;port\\&gt;</code>. When wishing to use a pool of memcached servers, each instance must be started, bound to the <strong>IP</strong> that makes it visible to the other instances, e.g. the default <code>memcached -d</code> on all machines will not work as they will all be bound to the localhost loopback, 127.0.0.1.</p><p>This plugin forces the <strong><em>binary-only</em></strong> communication protocol and therefore <strong>memcached</strong> cannot be started in its ASCII mode, i.e. <code>memcached -b ascii</code>.</p><p><em>Note:</em> The default memcached <strong>port</strong> is 11211 and that if multiple and individual caches are required then they are by definition memacached instances with different ports.</p><p>Further documentation is available <a href="https://code.google.com/p/memcached/wiki/NewStart" target="_blank" rel="noreferrer">here</a>.</p><h2 id="the-actual-plugin" tabindex="-1">The Actual Plugin <a class="header-anchor" href="#the-actual-plugin" aria-label="Permalink to &quot;The Actual Plugin&quot;">​</a></h2><p>The bulk of this memcached plugin for <strong>ECL</strong> is made up of the various <code>SET</code> and <code>GET</code> commands e.g. <code>GetString</code> or <code>SetReal</code>. They are accessible via the module <code>memcached</code> from the memcached plugin <strong>ECL</strong> library <code>lib-memcached</code>. i.e.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>IMPORT memcached FROM lib_memcached;</span></span></code></pre></div><p>Here is a list of the core plugin <strong>functions</strong>.</p><p>###Set</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SetUnicode (CONST VARSTRING key, CONST UNICODE value, CONST VARSTRING options, CONST VARSTRING partitionKey = &#39;&#39;, UNSIGNED expire = 0)</span></span>
<span class="line"><span>SetString  (CONST VARSTRING key, CONST STRING value,  CONST VARSTRING options, CONST VARSTRING partitionKey = &#39;&#39;, UNSIGNED expire = 0)</span></span>
<span class="line"><span>SetUtf8    (CONST VARSTRING key, CONST UTF8 value,    CONST VARSTRING options, CONST VARSTRING partitionKey = &#39;&#39;, UNSIGNED expire = 0)</span></span>
<span class="line"><span>SetBoolean (CONST VARSTRING key, BOOLEAN value,       CONST VARSTRING options, CONST VARSTRING partitionKey = &#39;&#39;, UNSIGNED expire = 0)</span></span>
<span class="line"><span>SetReal    (CONST VARSTRING key, REAL value,          CONST VARSTRING options, CONST VARSTRING partitionKey = &#39;&#39;, UNSIGNED expire = 0)</span></span>
<span class="line"><span>SetInteger (CONST VARSTRING key, INTEGER value,       CONST VARSTRING options, CONST VARSTRING partitionKey = &#39;&#39;, UNSIGNED expire = 0)</span></span>
<span class="line"><span>SetUnsigned(CONST VARSTRING key, UNSIGNED value,      CONST VARSTRING options, CONST VARSTRING partitionKey = &#39;&#39;, UNSIGNED expire = 0)</span></span>
<span class="line"><span>SetData    (CONST VARSTRING key, CONST DATA value,    CONST VARSTRING options, CONST VARSTRING partitionKey = &#39;&#39;, UNSIGNED expire = 0)</span></span></code></pre></div><p>###Get</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>INTEGER8   GetInteger(CONST VARSTRING key, CONST VARSTRING options, CONST VARSTRING partitionKey = &#39;&#39;)</span></span>
<span class="line"><span>UNSIGNED8 GetUnsigned(CONST VARSTRING key, CONST VARSTRING options, CONST VARSTRING partitionKey = &#39;&#39;)</span></span>
<span class="line"><span>STRING      GetString(CONST VARSTRING key, CONST VARSTRING options, CONST VARSTRING partitionKey = &#39;&#39;)</span></span>
<span class="line"><span>UNICODE    GetUnicode(CONST VARSTRING key, CONST VARSTRING options, CONST VARSTRING partitionKey = &#39;&#39;)</span></span>
<span class="line"><span>UTF8          GetUtf8(CONST VARSTRING key, CONST VARSTRING options, CONST VARSTRING partitionKey = &#39;&#39;)</span></span>
<span class="line"><span>BOOLEAN    GetBoolean(CONST VARSTRING key, CONST VARSTRING options, CONST VARSTRING partitionKey = &#39;&#39;)</span></span>
<span class="line"><span>REAL          GetReal(CONST VARSTRING key, CONST VARSTRING options, CONST VARSTRING partitionKey = &#39;&#39;)</span></span>
<span class="line"><span>DATA          GetData(CONST VARSTRING key, CONST VARSTRING options, CONST VARSTRING partitionKey = &#39;&#39;)</span></span></code></pre></div><p>###Utility</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>BOOLEAN Exists(CONST VARSTRING key, CONST VARSTRING options, CONST VARSTRING partitionKey = &#39;&#39;)</span></span>
<span class="line"><span>CONST VARSTRING KeyType(CONST VARSTRING key, CONST VARSTRING options, CONST VARSTRING partitionKey = &#39;&#39;)</span></span>
<span class="line"><span>Clear(CONST VARSTRING options)</span></span>
<span class="line"><span>Delete(CONST VARSTRING key, CONST VARSTRING options, CONST VARSTRING partitionKey = &#39;&#39;)</span></span></code></pre></div><p>The core points to note here are:</p><ul><li>There is a <strong>SET</strong> and <strong>GET</strong> function associated with each fundamental <strong>ECL</strong> type. These must be used for and with their correct <em>value</em> types! Miss-use <em>should</em> result in an runtime exception, however, this is only conditional on having the value retrieved from the server fitting into memory of the requested type. E.g. it is possible for a STRING of length 8, set with SetString, being successfully retrieved from the cache via GetInteger without an <strong>ECL</strong> exception being thrown. A warning is added to the local log file when this occurs. * <code>CONST VARSTRING options</code> passes the server <strong>IP</strong> and <strong>port</strong> to the plugin in the <em>strict</em> format - <code>--SERVER=\\&lt;ip\\&gt;:\\&lt;port\\&gt;</code>. Multiple server use simply requires all to be specified e.g. <code>--SERVER=192.168.1.98:11211 --SERVER=192.168.1.97:11211</code>. In addition a variety of options are passed in with this string e.g <strong><em>timeout</em> <em>values</em></strong>. A full list of possible options exists <a href="http://docs.libmemcached.org/libmemcached_configuration.html" target="_blank" rel="noreferrer">here</a>.</li><li><code>UNSIGNED expire</code> has units seconds and a default of <strong>0</strong>, i.e. <em>forever</em>. <em>Note:</em> Anything above 30 days is treated as a unix timestamp.</li><li>The default timeout is 1 second.</li><li><code>KeyType()</code> returns the <strong>ECL</strong> type as an <strong>ECL</strong> <code>VARSTRING</code>, i.e. <code>STRING</code> or <code>UNSIGNED</code>, or <code>UNKNOWN</code> if the value was set externally from this plugin without a type specifier. <em>c.f.</em> Behaviour and Implementation Details below for further details.</li></ul><p>###An Memcached &#39;Partition Key&#39; A <em>partition key</em> supplied to a <code>SET</code> will be hashed with the key and thus distribute the key-value pair according to this hash, such that all keys with the same <em>partition key</em> are on the same server. The notion of a partition is physical rather than logical. A <em>partition key</em> should therefore <strong><em>not</em></strong> be used with only a single memcached server. Observer the following two examples with servers started as <code>memcached -d -l 192.168.1.97</code> and <code>memcached -d -l 192.168.1.98</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>IMPORT memcached FROM lib_memcached;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>STRING server1 := &#39;--SERVER=192.168.1.97:11211&#39;;</span></span>
<span class="line"><span>REAL pi := 3.14159265359;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>SEQUENTIAL(</span></span>
<span class="line"><span>    memcached.SetReal(&#39;pi&#39;, pi, server1);</span></span>
<span class="line"><span>    memcached.SetReal(&#39;pi&#39;, pi*pi, server1, &#39;pi again&#39;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    memcached.GetReal(&#39;pi&#39;, server1);                                 //returns 9.869604401090658</span></span>
<span class="line"><span>    memcached.GetReal(&#39;pi&#39;, server1, &#39;pi again&#39;);                     //returns 9.869604401090658</span></span>
<span class="line"><span>    memcached.GetReal(&#39;pi&#39;, server1, &#39;you\\&#39;d think this would fail&#39;); //returns 9.869604401090658</span></span>
<span class="line"><span>    memcached.Clear(server1);</span></span>
<span class="line"><span>    );</span></span>
<span class="line"><span></span></span>
<span class="line"><span>STRING servers := server1 + &#39; --SERVER=192.168.1.98:11211&#39;;</span></span>
<span class="line"><span>SEQUENTIAL(</span></span>
<span class="line"><span>    memcached.SetReal(&#39;pi&#39;, pi, servers);</span></span>
<span class="line"><span>    memcached.SetReal(&#39;pi&#39;, pi*pi, servers, &#39;pi again&#39;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    memcached.GetReal(&#39;pi&#39;, servers);                                 //returns 3.14159265359</span></span>
<span class="line"><span>    memcached.GetReal(&#39;pi&#39;, servers, &#39;pi again&#39;);                     //returns 9.869604401090658</span></span>
<span class="line"><span>    memcached.GetReal(&#39;pi&#39;, servers, &#39;you\\&#39;d think this would fail&#39;); //returns 3.14159265359</span></span>
<span class="line"><span>    memcached.Clear(servers);</span></span>
<span class="line"><span>    );</span></span></code></pre></div><p><em>NOTE:</em> <strong>libmemcached</strong> uses a separate set of functions when using a <em>partition key</em>. When this plugin&#39;s default is used, the empty string is not hashed with the key, instead the non-partition-key functions are used.</p><h2 id="behaviour-and-implementation-details" tabindex="-1">Behaviour and Implementation Details <a class="header-anchor" href="#behaviour-and-implementation-details" aria-label="Permalink to &quot;Behaviour and Implementation Details&quot;">​</a></h2><p>A few notes to point out here: * When a key and value are stored with Set&lt;type&gt;, memcached also allows for a 4byte flag to be stored. This plugin utilizes this space to store an enumeration specifying the <strong>ECL</strong> type that is being stored. Care should therefore be taken when using KeyType(&lt;key&gt;) when the key was set from a client other than this plugin.</p><ul><li>The following libmemcached settings are invoked by default for this plugin, all of which take precedence over any passed in via the <code>options</code> string: <strong>MEMCACHED_BEHAVIOR_KETAMA</strong> = 1, <strong>MEMCACHED_BEHAVIOR_USE_UDP</strong> = 0, <strong>MEMCACHED_BEHAVIOR_NO_BLOCK</strong> = 0, <strong>MEMCACHED_BEHAVIOR_BUFFER_REQUESTS</strong> = 0, <strong>MEMCACHED_BEHAVIOR_BINARY_PROTOCOL</strong> = 1.</li></ul>`,31)]))}const g=a(i,[["render",o]]);export{m as __pageData,g as default};

import{_ as a,a as n,o as s,ag as t}from"./chunks/framework.Do1Zayaf.js";const u=JSON.parse('{"title":"Available global/expert settings in HPCC helm chart","description":"","frontmatter":{},"headers":[],"relativePath":"helm/hpcc/docs/expert.md","filePath":"helm/hpcc/docs/expert.md","lastUpdated":1761843274000}'),o={name:"helm/hpcc/docs/expert.md"};function i(l,e,r,p,c,d){return s(),n("div",null,e[0]||(e[0]=[t(`<h1 id="available-global-expert-settings-in-hpcc-helm-chart" tabindex="-1">Available global/expert settings in HPCC helm chart <a class="header-anchor" href="#available-global-expert-settings-in-hpcc-helm-chart" aria-label="Permalink to &quot;Available global/expert settings in HPCC helm chart&quot;">â€‹</a></h1><p>The &#39;expert&#39; section under &#39;global&#39; of the values.yaml should be used to define low-level, testing or developer settings, i.e. in most deployments, it should remain empty.</p><p>This is an example of what the global/expert section might look like:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>global:</span></span>
<span class="line"><span>  expert:</span></span>
<span class="line"><span>    numRenameRetries: 3</span></span>
<span class="line"><span>    maxConnections: 10</span></span>
<span class="line"><span>    keepalive:</span></span>
<span class="line"><span>      time: 200</span></span>
<span class="line"><span>      interval: 75</span></span>
<span class="line"><span>      probes: 9</span></span>
<span class="line"><span>    regex:</span></span>
<span class="line"><span>      cacheSize: 500</span></span>
<span class="line"><span>    memoryCoreDump:</span></span>
<span class="line"><span>      mode: auto # { auto, on, off }</span></span>
<span class="line"><span>      intervalSecs: 10</span></span>
<span class="line"><span>      #thresholdMB: 7500 # supersedes &#39;auto&#39; mode if set</span></span>
<span class="line"><span>      #incrementMB: 100</span></span>
<span class="line"><span>      #useVforkAndGcore: true # (default: false) uses vfork()+exec(gcore), instead of fork()+abort()</span></span>
<span class="line"><span>      #suspendParent: true # (default: false). Suspend parent process during core dump (involves intermediate reaper process)</span></span>
<span class="line"><span>    useJemalloc: true</span></span></code></pre></div><p>NB: Some components (e.g. DfuServer and Thor) also have an &#39;expert&#39; settings area (see values schema) that can be used for relavent settings on a per component instance basis, rather than setting them globally.</p><p>Planes can also have an expert section (see Plane Expert Settings section)</p><p>The following options are currently available:</p><h2 id="numrenameretries-unsigned" tabindex="-1">numRenameRetries (unsigned) <a class="header-anchor" href="#numrenameretries-unsigned" aria-label="Permalink to &quot;numRenameRetries (unsigned)&quot;">â€‹</a></h2><p>If set to a positive number, the platform will re-attempt to perform a rename of a physical file on failure (after a short delay). This should not normally be needed, but on some file systems it may help mitigate issues where the file has just been closed and not exposed correctly at the posix layer.</p><h2 id="maxconnections-unsigned" tabindex="-1">maxConnections (unsigned) <a class="header-anchor" href="#maxconnections-unsigned" aria-label="Permalink to &quot;maxConnections (unsigned)&quot;">â€‹</a></h2><p>This is a DFU Server setting. If set, it will limit the maximum number of parallel connections and partition streams that will be active at any one time. By default a DFU job will run as many active connection/streams as there are partitions involved in the spray, limited to an absolute maximum of 800. Setting maxConnections can be set to reduce this concurrency. This might be helpful in some scenarios where the concurrency is causing network congestion and degraded performance.</p><h2 id="keepalive-time-unsigned-interval-unsigned-probes-unsigned" tabindex="-1">keepalive (time: unsigned, interval: unsigned, probes: unsigned) <a class="header-anchor" href="#keepalive-time-unsigned-interval-unsigned-probes-unsigned" aria-label="Permalink to &quot;keepalive (time: unsigned, interval: unsigned, probes: unsigned)&quot;">â€‹</a></h2><p>See keepalive example above. If set, these settings will override the system default socket keepalive settings each time the platform creates a socket. This may be useful in some scenarios if the connections would otherwise be closed prematurely by external factors (e.g. firewalls). An example of this is that Azure instances will close sockets that have been idle for greater than 4 minutes that are connected outside of its networks.</p><h2 id="savequerydlls-boolean" tabindex="-1">saveQueryDlls (boolean) <a class="header-anchor" href="#savequerydlls-boolean" aria-label="Permalink to &quot;saveQueryDlls (boolean)&quot;">â€‹</a></h2><p>This is a Thor only setting. Default: false If false, query dlls are loaded directly from the default &#39;dll&#39; plane by both the Thor manager and Thor workers. If true, query dlls will be saved and cached in local temporary storage and serialized to the workers. Saving and serializing the query dlls may speed up queries if the &#39;dll&#39; plane is backed by slow storage (e.g. blob storage).</p><h2 id="exceptionhandler-list-of-class-string-code-unsigned-cmd-string" tabindex="-1">exceptionHandler (list of { class: string, code: unsigned, cmd: string }) <a class="header-anchor" href="#exceptionhandler-list-of-class-string-code-unsigned-cmd-string" aria-label="Permalink to &quot;exceptionHandler (list of { class: string, code: unsigned, cmd: string })&quot;">â€‹</a></h2><p>Exception handlers can be added at a global or per component level. Each exception handler must define the &#39;class&#39; (one of &quot;string&quot;, &quot;errno&quot;, &quot;os&quot;, &quot;socket&quot;) and &#39;code&#39; number of the exception to handle, and the command to run (&#39;cmd&#39;). Example exception handler configured for a disk full exception :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>exceptionHandler:</span></span>
<span class="line"><span>- class: &quot;os&quot;</span></span>
<span class="line"><span>  code: 28</span></span>
<span class="line"><span>  cmd: &quot;bash -c &#39;ls -lt /var/lib/HPCCSystems; echo next; ls -lt /var/lib/HPCCSystems/hpcc-spill&#39;&quot;</span></span></code></pre></div><p>Handled exceptions will run the defined command and capture the output in a file in the debug plane with a filename of the following form: &quot;exception-&lt;code&gt;-&lt;datestamp&gt;.log&quot;</p><h2 id="allowforeign-boolean" tabindex="-1">allowForeign (boolean) <a class="header-anchor" href="#allowforeign-boolean" aria-label="Permalink to &quot;allowForeign (boolean)&quot;">â€‹</a></h2><p>Foreign file reads (~foreign:ðŸ˜ƒ are forbidden by default since the official santioned secure route is to use the DFS service via remote file reads with the ~remote:: syntax. Setting expert.allowForeign to true, enables foreign access for compatibility with legacy bare-metal environments that have their Dali and Dafilesrv&#39;s open.</p><h2 id="regex-cachesize-unsigned" tabindex="-1">regex (cacheSize: unsigned) <a class="header-anchor" href="#regex-cachesize-unsigned" aria-label="Permalink to &quot;regex (cacheSize: unsigned)&quot;">â€‹</a></h2><p>See the regex example above. If set, this should be added at the global level. The default value is 500. Set to zero to disable the cache. This value is applied at the process level: Each Thor worker, Roxie process, and hthor worker receives its own cache. Threads/channels within a process share that process&#39;s cache.</p><h2 id="usejemalloc-boolean" tabindex="-1">useJemalloc (boolean) <a class="header-anchor" href="#usejemalloc-boolean" aria-label="Permalink to &quot;useJemalloc (boolean)&quot;">â€‹</a></h2><p>If set to true, components will use jemalloc memory allocator via LD_PRELOAD. jemalloc can provide better memory allocation performance and lower fragmentation compared to the default glibc allocator. This setting can be applied globally or on a per-component basis via the component&#39;s expert section. Default: false</p><p>Note: jemalloc is automatically disabled when valgrind is enabled for a component, as valgrind requires its own memory management.</p><p>Example of enabling jemalloc globally:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>global:</span></span>
<span class="line"><span>  expert:</span></span>
<span class="line"><span>    useJemalloc: true</span></span></code></pre></div><p>Example of enabling jemalloc for a specific Thor component:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>thor:</span></span>
<span class="line"><span>- name: mythor</span></span>
<span class="line"><span>  expert:</span></span>
<span class="line"><span>    useJemalloc: true</span></span></code></pre></div><p>Note: This requires that libjemalloc is installed in the container image at /usr/lib/x86_64-linux-gnu/libjemalloc.so.2</p><h1 id="plane-expert-settings" tabindex="-1">Plane Expert Settings <a class="header-anchor" href="#plane-expert-settings" aria-label="Permalink to &quot;Plane Expert Settings&quot;">â€‹</a></h1><h2 id="validateplanescript-list-of-string" tabindex="-1">validatePlaneScript (list of { string }) <a class="header-anchor" href="#validateplanescript-list-of-string" aria-label="Permalink to &quot;validatePlaneScript (list of { string })&quot;">â€‹</a></h2><p>Optional list of bash commands to execute within an init container in pods that use this plane. This can be used to validate that the plane is healthy, e.g. that it is mounted as expected. If the script returns a non-zero result, the init container and therefore the pod will fail.</p><h2 id="blockedfileiokb-unsigned" tabindex="-1">blockedFileIOKB (unsigned) <a class="header-anchor" href="#blockedfileiokb-unsigned" aria-label="Permalink to &quot;blockedFileIOKB (unsigned)&quot;">â€‹</a></h2><p>The optimal size to read and write sequential file io (e.g. for Azure Blob storage set to 4096)</p><h2 id="blockedrandomiokb-unsigned" tabindex="-1">blockedRandomIOKB (unsigned) <a class="header-anchor" href="#blockedrandomiokb-unsigned" aria-label="Permalink to &quot;blockedRandomIOKB (unsigned)&quot;">â€‹</a></h2><p>The optimal size of random file io reads (e.g. index lookups).</p><h2 id="filesyncwriteclose-boolean" tabindex="-1">fileSyncWriteClose (boolean) <a class="header-anchor" href="#filesyncwriteclose-boolean" aria-label="Permalink to &quot;fileSyncWriteClose (boolean)&quot;">â€‹</a></h2><p>Perform a fsync ahead of file close operations. Default: false</p><h2 id="concurrentwritesupport-boolean" tabindex="-1">concurrentWriteSupport (boolean) <a class="header-anchor" href="#concurrentwritesupport-boolean" aria-label="Permalink to &quot;concurrentWriteSupport (boolean)&quot;">â€‹</a></h2><p>Plane supports concurrent writing to a single physical file. Default: false</p><h2 id="writesyncmarginms-unsigned" tabindex="-1">writeSyncMarginMs (unsigned) <a class="header-anchor" href="#writesyncmarginms-unsigned" aria-label="Permalink to &quot;writeSyncMarginMs (unsigned)&quot;">â€‹</a></h2><p>Minimum time period between the publication of a logical file and when it can be read. This setting will introduce a delay if a read operation is within this margin period. Should be set on planes backed by storage types that do not guarantee files are ready to be read by any other consumer immediately, e.g. Azure Blob storage. Default: 0</p><h2 id="safestatbehaviour-unsigned" tabindex="-1">safeStatBehaviour (unsigned) <a class="header-anchor" href="#safestatbehaviour-unsigned" aria-label="Permalink to &quot;safeStatBehaviour (unsigned)&quot;">â€‹</a></h2><p>Controls error behaviour of jfile stat() calls. 0 = fail on any unexpected error. NB: ENOENT and ENOTDIR as file not present. 1 = ignore EACCES - suppre exception, returns false. 2 = ignore all other errors - suppress exception, return false. This was the legacy behaviour. Default: 0</p><h2 id="renamesupported-boolean" tabindex="-1">renameSupported (boolean) <a class="header-anchor" href="#renamesupported-boolean" aria-label="Permalink to &quot;renameSupported (boolean)&quot;">â€‹</a></h2><p>Plane supports physical file part renaming. Default: based on plane configuration. Planes based with &#39;pvc&#39; and/or storageapi default to false. All others to true.</p><h2 id="memorycoredump-mode-string-intervalsecs-unsigned-thresholdmb-unsigned-incrementmb-unsigned-usevforkandgcore-boolean-suspendparent-boolean" tabindex="-1">memoryCoreDump (mode: string, intervalSecs: unsigned, thresholdMB: unsigned, incrementMB: unsigned, useVforkAndGcore: boolean, suspendParent: boolean) <a class="header-anchor" href="#memorycoredump-mode-string-intervalsecs-unsigned-thresholdmb-unsigned-incrementmb-unsigned-usevforkandgcore-boolean-suspendparent-boolean" aria-label="Permalink to &quot;memoryCoreDump (mode: string, intervalSecs: unsigned, thresholdMB: unsigned, incrementMB: unsigned, useVforkAndGcore: boolean, suspendParent: boolean)&quot;">â€‹</a></h2><p>See memoryCoreDump example above. Defaulted off. If enabled, monitors total memory usage once per &#39;intervalSecs&#39; and if above &#39;thresholdMB&#39; creates a core dump. Further core files will be created if &#39;incrementMB&#39; is set, and memory increases by more than that amount. mode=auto will auto-config &#39;thresholdMB&#39; to 95% of total memory, and &#39;incrementMB&#39; to 4% of total memory, meaning there will be at most 2 cores produced, one if detected &gt;95% and another if detected &gt;99%.</p>`,50)]))}const m=a(o,[["render",i]]);export{u as __pageData,m as default};

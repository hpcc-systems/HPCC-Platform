import{_ as t,a as o,o as n,ag as a}from"./chunks/framework.Do1Zayaf.js";const p=JSON.parse('{"title":"Contributing Documentation to the HPCC Systems Platform Project","description":"","frontmatter":{},"headers":[],"relativePath":"devdoc/docs/ContributeDocs.md","filePath":"devdoc/docs/ContributeDocs.md","lastUpdated":1761843274000}'),i={name:"devdoc/docs/ContributeDocs.md"};function r(s,e,l,d,u,h){return n(),o("div",null,e[0]||(e[0]=[a('<h1 id="contributing-documentation-to-the-hpcc-systems-platform-project" tabindex="-1">Contributing Documentation to the HPCC Systems Platform Project <a class="header-anchor" href="#contributing-documentation-to-the-hpcc-systems-platform-project" aria-label="Permalink to &quot;Contributing Documentation to the HPCC Systems Platform Project&quot;">​</a></h1><p>This document is intended for anyone that wants to contribute documentation to our project. The first audience is platform developers, so we can streamline the process of documenting new features. However, these guidelines apply to anyone who wants to contribute to any of our documentation (Language Reference, Programmer’s Guide, etc.).</p><p>This set of guidelines should help you understand the information needed to create sufficient documentation for any new feature you add. The good news is that we are all here to help you and support your writing efforts. We will help by advising you along the way, and by reviewing and editing your submissions.</p><h2 id="documenting-a-new-software-feature-required-and-optional-components" tabindex="-1">Documenting a New Software Feature--Required and Optional Components <a class="header-anchor" href="#documenting-a-new-software-feature-required-and-optional-components" aria-label="Permalink to &quot;Documenting a New Software Feature--Required and Optional Components&quot;">​</a></h2><p>When you create a new feature or function, clear documentation is crucial for both internal teams and external users. You worked hard on the feature, so it deserves proper notice and usage.</p><p>Contributions to the platform are always welcome, and we strongly encourage developers and users to contribute documentation.</p><p>You can contribute on many levels:</p><ol><li><p>Developer Notes</p></li><li><p>End user “Readmes” in the form of MD files in the GitHub repository</p></li><li><p>Blogs</p></li><li><p>Formal documentation</p></li></ol><p>Regardless of the form you are planning to deliver, here are the required and optional components to include in a document.</p><blockquote><p><strong>Tip</strong>: VS Code is very good at editing MD files. There is a built-in Preview panel available to be able to see the rendered form.</p><p>In addition, GitHub Copilot is MD-aware and can help you write and format. For example, you can ask the Copilot, “How can I align the content within the cells of my Markdown table?” GitHub copilot will show you the alignment options.</p></blockquote><h3 id="required-components" tabindex="-1">Required Components: <a class="header-anchor" href="#required-components" aria-label="Permalink to &quot;Required Components:&quot;">​</a></h3><ol><li><p><strong>Overview</strong></p><ul><li><p><strong>What it is:</strong> Briefly describe the feature&#39;s purpose and the problem it solves.</p></li><li><p><strong>Why it matters:</strong> Explain the value proposition for users and the overall impact on the software.</p></li><li><p><strong>Target audience:</strong> Specify who this feature is designed for (for example, all users or specific user roles).</p></li><li><p><strong>Use Cases:</strong> Provide concrete examples of how a user might leverage this feature in a real-world scenario.</p></li></ul></li><li><p><strong>Installation and Configuration:</strong> Details on how to install and basic setup for use, if needed. This must include any system requirements or dependencies.</p></li><li><p><strong>User Guide / Functionality</strong></p><ul><li><p><strong>How it works:</strong> Provide a task-oriented, step-by-step guide for using the feature. If possible, include screenshots for visual learners.</p></li><li><p><strong>Tips, Tricks, and Techniques:</strong> Explain any shortcuts or clever uses of the feature that may be non-obvious.</p></li><li><p><strong>Inputs and Outputs:</strong> Detail the information users need to provide to the feature and the format of the results.</p></li><li><p><strong>Error Handling:</strong> Explain what happens if users encounter errors and how to troubleshoot common issues.</p></li></ul></li><li><p><strong>Limitations and Considerations:</strong></p><ul><li><strong>Limitations:</strong> Acknowledge any restrictions or boundaries associated with the feature&#39;s functionality.</li></ul></li></ol><h3 id="optional-components" tabindex="-1">Optional Components: <a class="header-anchor" href="#optional-components" aria-label="Permalink to &quot;Optional Components:&quot;">​</a></h3><ol><li><p><strong>Advanced Usage</strong></p><ul><li><strong>Detailed configuration options:</strong> If the feature offers advanced settings or customizations, provide in-depth instructions for experienced users. This is similar to the way some options command line program&#39;s usage are only displayed using the verbose option.</li></ul></li><li><p><strong>API Reference (for technical audiences)</strong></p><ul><li><strong>Technical specifications:</strong> For features with an API component, include detailed API reference documentation for developers integrating it into their applications.</li></ul></li><li><p><strong>FAQs</strong></p><ul><li><strong>Frequently Asked Questions:</strong> Address any commonly anticipated user questions about the feature to pre-empt confusion.</li></ul></li><li><p><strong>Additional Resources</strong></p><ul><li><p><strong>Links to related documentation:</strong> Include links to relevant documentation for features that interact with this new addition.</p></li><li><p><strong>Tutorials:</strong> Consider creating tutorials for a more interactive learning experience.</p></li><li><p><strong>Videos:</strong> Consider requesting that a video be made to provide a more interactive visual learning experience. You should provide a simple script or outline of what should be shown in the video.</p></li></ul></li></ol><h3 id="general-tips" tabindex="-1">General Tips <a class="header-anchor" href="#general-tips" aria-label="Permalink to &quot;General Tips&quot;">​</a></h3><ul><li><p><strong>Target your audience:</strong> Tailor the level of detail and technical jargon you use based on whether the documentation is for developers or end-users.</p></li><li><p><strong>Clarity and Conciseness:</strong> Use clear, concise language and maintain a consistent structure for easy navigation. Always use present tense, active voice. Remember, you’re writing for users and programmers, not academics, so keep it simple and straightforward. See the <a href="./HPCCStyleGuide.html">HPCC Style Guide</a> for additional guidance.</p></li><li><p><strong>Visual Aids:</strong> Screenshots, diagrams, and flowcharts can significantly enhance understanding. A picture can communicate instantly what a thousand words cannot.</p></li><li><p><strong>Maintain and Update:</strong> Regularly review and update documentation as the feature evolves or based on user feedback.</p></li></ul><p>By following these guidelines and including the required and optional components, you can create comprehensive documentation that empowers users and streamlines the adoption of your new software feature.</p><h3 id="who-should-write-it" tabindex="-1">Who should write it? <a class="header-anchor" href="#who-should-write-it" aria-label="Permalink to &quot;Who should write it?&quot;">​</a></h3><p>The boundary between a developer&#39;s responsibilities and the documentation team’s responsibility is not cast in stone. However, there are some guidelines that can help you decide what your responsibility is. Here are some examples:</p><h4 id="changing-the-default-value-of-a-configuration-setting" tabindex="-1">Changing the default value of a configuration setting <a class="header-anchor" href="#changing-the-default-value-of-a-configuration-setting" aria-label="Permalink to &quot;Changing the default value of a configuration setting&quot;">​</a></h4><p>This typically needs a simple one or two word change in the area of the documentation where that setting is documented. However, the change could impact existing deployments or existing code and therefore it might also require a short write-up for the Red Book and/or Release Announcement. If the setting is used by both bare-metal and containerized, you should provide information about how the new setting is used in each of those deployments.</p><h4 id="adding-or-modifying-a-language-keyword-standard-library-function-or-command-line-tool-action" tabindex="-1">Adding or modifying a Language keyword, Standard Library function, or command line tool action <a class="header-anchor" href="#adding-or-modifying-a-language-keyword-standard-library-function-or-command-line-tool-action" aria-label="Permalink to &quot;Adding or modifying a Language keyword, Standard Library function, or command line tool action&quot;">​</a></h4><p>This needs some changes to existing documentation so the best way to provide the information is in a documentation Jira issue. If it s a new keyword, function, or action, a brief overview should be included. For a Standard Library function, the developer should update the Javadoc comment in the appropriate ECL file. For a command line tool change, the developer should update the Usage section of the code.</p><h4 id="adding-a-new-feature-that-requires-an-overview" tabindex="-1">Adding a new feature that requires an overview. <a class="header-anchor" href="#adding-a-new-feature-that-requires-an-overview" aria-label="Permalink to &quot;Adding a new feature that requires an overview.&quot;">​</a></h4><p>This is a candidate for either an MD file, a blog, or both. Since there should have been some sort of design specification document, that could easily be repurposed as a good start for this.</p><h4 id="a-feature-function-that-is-only-used-internally-to-the-system" tabindex="-1">A feature/function that is only used internally to the system <a class="header-anchor" href="#a-feature-function-that-is-only-used-internally-to-the-system" aria-label="Permalink to &quot;A feature/function that is only used internally to the system&quot;">​</a></h4><p>Since this is information that is probably only of interest to other developers, a write-up in the form of an MD file in the repo is the best approach. If it affects end-users or operations, then a more formal document or a blog might be a good idea. If it affects existing deployments or existing code, then a Red Book notice might also be needed.</p><h4 id="extending-the-tests-in-the-regression-suite" tabindex="-1">Extending the tests in the regression suite <a class="header-anchor" href="#extending-the-tests-in-the-regression-suite" aria-label="Permalink to &quot;Extending the tests in the regression suite&quot;">​</a></h4><p>New tests are frequently added and the regression suite readme files should be updated at the same time. If the tests are noteworthy, we could add a mention in the Platform Release Notes.</p><h3 id="placement" tabindex="-1">Placement <a class="header-anchor" href="#placement" aria-label="Permalink to &quot;Placement&quot;">​</a></h3><p>In general, it makes sense to keep simple documentation near the code. For example, a document about ECL Agent should go in the ECLAgent folder. However, there are times where that is either not possible or a document may cover more than one component. In those cases, there are a few options as shown below.</p><h4 id="other-folders" tabindex="-1">Other Folders <a class="header-anchor" href="#other-folders" aria-label="Permalink to &quot;Other Folders&quot;">​</a></h4><p><strong>devdoc</strong>: This is a general folder for any developer document.</p><p><strong>devdoc</strong>/<strong>docs</strong>: This is a folder for documents about documentation.</p><p><strong>devdoc</strong>/<strong>userdoc</strong>: This is a collection of docs targeted toward the end-user rather than developers.</p><p>This is primarily for informal documents aimed at end-users. This info can and should be incorporated into the formal docs. <strong>devdoc</strong>/<strong>userdoc</strong>/<strong>troubleshoot</strong>: Information related to troubleshooting particular components</p><p><strong>devdoc</strong>/<strong>userdoc</strong>/<strong>azure</strong>: Useful information about Azure Cloud portal and cli</p><p><strong>devdoc</strong>/<strong>userdoc</strong>/<strong>roxie</strong>: Useful information for running roxie</p><p><strong>devdoc</strong>/<strong>userdoc</strong>/<strong>thor</strong>: Useful information for running thor</p><p><strong>devdoc</strong>/<strong>userdoc</strong>/<strong>blogs</strong>: COMING SOON: Location and storage of original text for blogs. It also has docs with guidelines and instructions on writing Blogs</p><h4 id="pull-requests" tabindex="-1">Pull Requests <a class="header-anchor" href="#pull-requests" aria-label="Permalink to &quot;Pull Requests&quot;">​</a></h4><p>You can include your documentation with your code in a Pull Request or create a separate Jira and Pull Request for the documentation. This depends on the size of the code and doc. For a large project or change, a separate Pull request for the documentation is better. This might allow the code change to be merged faster.</p><h4 id="documentation-jira-issues" tabindex="-1">Documentation Jira Issues <a class="header-anchor" href="#documentation-jira-issues" aria-label="Permalink to &quot;Documentation Jira Issues&quot;">​</a></h4><p>For minor code changes, for example the addition of a parameter to an existing ECL keyword, you can request a documentation change in a Jira issue. You should provide sufficient details in the Jira.</p><p>For example, If you add an optional parameter named Foo, you should provide details about what values can be passed in through the Foo parameter and what those values mean. You should also provide the default value used if the parameter is omitted.</p>',45)]))}const g=t(i,[["render",r]]);export{p as __pageData,g as default};

################################################################################
#    HPCC SYSTEMS software Copyright (C) 2012 HPCC SystemsÂ®.
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
################################################################################

# Component: jlib 
#####################################################
# Description:
# ------------
#    Cmake Input File for jlib
#####################################################

project( jlib ) 

INCLUDE(CheckLibraryExists) 

if (NOT WIN32 AND NOT WIN64)
CHECK_LIBRARY_EXISTS(dl dlopen "" HAVE_LIBDL) 
CHECK_LIBRARY_EXISTS(crypt crypt "" HAVE_LIBCRYPT) 
endif ()

set (    SRCS 
    ${SCM_GENERATED_INCLUDES}
         jargv.cpp 
         jarray.cpp 
         javahash.cpp 
         jbsocket.cpp 
         jbuff.cpp 
         jcomp.cpp 
         jcrc.cpp 
         jdebug.cpp 
         jencrypt.cpp 
         jexcept.cpp 
         jfile.cpp 
         jflz.cpp 
         jhash.cpp 
         jiface.cpp 
         jio.cpp 
         jiter.cpp 
         jkeyboard.cpp 
         jlib.cpp 
         jlog.cpp 
         jlzma.cpp 
         jlzw.cpp 
         jmalloc.cpp 
         jmd5.cpp 
         jmemleak.cpp 
         jmisc.cpp 
         jmutex.cpp 
         jobserve.cpp 
         jprop.cpp 
         jptree.cpp 
         jregexp.cpp 
         jsem.cpp 
         jset.cpp 
         jsmartsock.cpp 
         jsocket.cpp 
         jsort.cpp 
         jstats.cpp 
         jstream.cpp 
         jstring.cpp 
         jsuperhash.cpp
         jthread.cpp 
         jtime.cpp 
         junicode.cpp 
         jutil.cpp 
         jvmem.cpp 
         sourcedoc.xml
    )

set (    INCLUDES
        jaio.hpp
        jarray.hpp
        jatomic.hpp
        javahash.hpp
        javahash.tpp
        jbuff.hpp
        jcomp.hpp
        jcomp.ipp
        jcrc.hpp
        jdebug.hpp
        jelogtype.hpp
        jencrypt.hpp
        jerror.hpp
        jexcept.hpp
        jfile.hpp
        jfile.ipp
        jflz.hpp
        jhash.hpp
        jhash.ipp
        jheap.hpp
        jheap.ipp
        jiface.hpp
        jio.hpp
        jio.ipp
        jisem.hpp
        jiter.hpp
        jiter.ipp
        jiter.tpp
        jkeyboard.hpp
        jlib.hpp
        jliball.hpp
        jlog.hpp
        jlog.ipp
        jlzma.hpp
        jlzw.hpp
        jlzw.ipp
        jmalloc.hpp
        jmd5.hpp
        jmisc.hpp
        jmutex.hpp
        jobserve.hpp
        jobserve.ipp
        jpqueue.hpp
        jprop.hpp
        jptree.hpp
        jptree.ipp
        jqueue.tpp
        jregexp.hpp
        jrespool.tpp
        jscm.hpp
        jsem.hpp
        jset.hpp
        jsmartsock.hpp
        jsmartsock.ipp
        jsocket.hpp
        jsort.hpp
        jsorta.hpp
        jstream.hpp
        jstream.ipp
        jstring.hpp
        jsuperhash.hpp
        jthread.hpp
        jtime.hpp
        jtime.ipp
        junicode.hpp
        jutil.hpp
        jvmem.hpp
        )

if (CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_CLANG)
    set_source_files_properties (jmalloc.cpp PROPERTIES COMPILE_FLAGS -fno-strict-aliasing)
endif ()

include_directories ( 
         ../../system/win32 
         ../../system/include 
         ../../system/lzma
         ${CMAKE_CURRENT_BINARY_DIR}  # for generated jelog.h file 
         ${CMAKE_BINARY_DIR}
         ${CMAKE_BINARY_DIR}/oss
         ${TBB_INCLUDE_DIR}
    )

ADD_DEFINITIONS( -DLOGMSGCOMPONENT=1 -D_USRDLL -DJLIB_EXPORTS )
HPCC_ADD_LIBRARY( jlib SHARED ${SRCS} ${INCLUDES} )

install ( TARGETS jlib RUNTIME DESTINATION ${EXEC_DIR} LIBRARY DESTINATION ${LIB_DIR} )
target_link_libraries ( jlib
        lzma
       )

if ( ${USE_TBB} )
   target_link_libraries ( jlib ${TBB_LIBRARIES})
endif()

if ( ${HAVE_LIBDL} )
target_link_libraries ( jlib dl)
endif ( ${HAVE_LIBDL} )

if ( ${HAVE_LIBCRYPT} )
target_link_libraries ( jlib crypt)
endif ( ${HAVE_LIBCRYPT} )

if (WIN32)
 target_link_libraries ( jlib ws2_32 mpr.lib Winmm.lib psapi.lib )
elseif (("${CMAKE_SYSTEM_NAME}" STREQUAL "Darwin" ))
else ()
 target_link_libraries ( jlib rt)
endif ()

if (WIN32)
    FILE(TO_NATIVE_PATH "${CMAKE_CURRENT_BINARY_DIR}" WINDOWS_CMAKE_CURRENT_BINARY_DIR)
    FILE(TO_NATIVE_PATH "${CMAKE_CURRENT_SOURCE_DIR}\\jelog.mc" WINDOWS_CMAKE_CURRENT_SOURCE_DIR)
    add_custom_command ( DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/jelog.mc
                         OUTPUT ${EXECUTABLE_OUTPUT_PATH}/${CMAKE_CFG_INTDIR}/jelog.dll ${CMAKE_CURRENT_BINARY_DIR}/jelog.h
                         COMMAND echo mc -r ${WINDOWS_CMAKE_CURRENT_BINARY_DIR} -h ${WINDOWS_CMAKE_CURRENT_BINARY_DIR} ${WINDOWS_CMAKE_CURRENT_SOURCE_DIR}
                         COMMAND echo rc -r -fo ${CMAKE_CURRENT_BINARY_DIR}/jelog.res ${CMAKE_CURRENT_BINARY_DIR}/jelog.rc 
                         COMMAND echo link -dll -noentry -machine:IX86 -out:${EXECUTABLE_OUTPUT_PATH}/${CMAKE_CFG_INTDIR}/jelog.dll ${CMAKE_CURRENT_BINARY_DIR}/jelog.res
                         COMMAND mc -r ${WINDOWS_CMAKE_CURRENT_BINARY_DIR} -h ${WINDOWS_CMAKE_CURRENT_BINARY_DIR} ${WINDOWS_CMAKE_CURRENT_SOURCE_DIR}
                         COMMAND rc -r -fo ${CMAKE_CURRENT_BINARY_DIR}/jelog.res ${CMAKE_CURRENT_BINARY_DIR}/jelog.rc 
                         COMMAND link -dll -noentry -machine:IX86 -out:${EXECUTABLE_OUTPUT_PATH}/${CMAKE_CFG_INTDIR}/jelog.dll ${CMAKE_CURRENT_BINARY_DIR}/jelog.res
                        )
    add_custom_target ( jelog ALL DEPENDS ${EXECUTABLE_OUTPUT_PATH}/${CMAKE_CFG_INTDIR}/jelog.dll )
    add_dependencies( jlib jelog )
    install ( PROGRAMS ${EXECUTABLE_OUTPUT_PATH}/${CMAKE_BUILD_TYPE}/jelog.dll DESTINATION ${EXEC_DIR} )
endif ()

Install ( FILES ${CMAKE_CURRENT_SOURCE_DIR}/jscm.hpp DESTINATION componentfiles/cl/include COMPONENT Runtime )

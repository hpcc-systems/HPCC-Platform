{
  "$schema": "https://json-schema.org/draft-07/schema#",
  "additionalProperties": false,
  "properties": {
    "global": {
      "$ref": "#/definitions/global"
    },
    "security" : {
      "$ref": "#/definitions/security"
    },
    "placements": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "pods": {
            "type": "array",
            "items": { "type": "string" }
           },
          "placement": {
            "$ref": "#/definitions/placement"
          }
        }
      }
    },
    "storage": {
      "type": "object",
      "properties": {
        "hostGroups": {
          "$ref": "#/definitions/hostGroups"
        },
        "planes": {
          "$ref": "#/definitions/storagePlanes"
        }
      },
      "additionalProperties": false
    },
    "certificates": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "issuers": {
          "type": "object",
          "properties": {
            "local": {
              "$ref": "#/definitions/issuer"
            },
            "public": {
              "$ref": "#/definitions/issuer"
            }
          }
        }
      }
    },
    "secrets": {
      "description": "configuration for secrets accessed by the components",
      "type": "object",
      "properties": {
        "timeout": {
          "type": "integer"
        },
        "storage": {
          "$ref": "#/definitions/secrets"
        },
        "authn": {
          "$ref": "#/definitions/secrets"
        },
        "ecl": {
          "$ref": "#/definitions/secrets"
        },
        "codeSign": {
          "$ref": "#/definitions/secrets"
        },
        "codeVerify": {
          "$ref": "#/definitions/secrets"
        },
        "system": {
          "$ref": "#/definitions/secrets"
        }
      },
      "additionalProperties": false
    },
    "vaults": {
      "description": "configuration for vaults accessed by the components",
      "type": "object",
      "properties": {
        "timeout": {
          "type": "integer"
        },
        "storage": {
          "$ref": "#/definitions/vaultCategory"
        },
        "authn": {
          "$ref": "#/definitions/vaultCategory"
        },
        "esp": {
          "$ref": "#/definitions/vaultCategory"
        },
        "ecl": {
          "$ref": "#/definitions/vaultCategory"
        },
        "ecl-user": {
          "$ref": "#/definitions/vaultCategory"
        },
        "codeSign": {
          "$ref": "#/definitions/vaultCategory"
        },
        "codeVerify": {
          "$ref": "#/definitions/vaultCategory"
        }
      },
      "additionalProperties": false
    },
    "bundles": {
      "description": "bundles",
      "type": "array",
      "items": { "$ref": "#/definitions/bundle" }
    },
    "dali": {
      "description": "dali process",
      "type": "array",
      "minItems": 1,
      "maxItems": 1,
      "items": { "$ref": "#/definitions/dali" }
    },
    "eclccserver": {
      "description": "eclccserver process",
      "type": "array",
      "items": { "$ref": "#/definitions/eclccserver" }
    },
    "eclscheduler": {
      "description": "eclscheduler process",
      "type": "array",
      "items": { "$ref": "#/definitions/eclscheduler" }
    },
    "esp": {
      "description": "esp process",
      "type": "array",
      "items": { "$ref": "#/definitions/esp" }
    },
    "eclagent": {
      "description": "eclagent process",
      "type": "array",
      "items": {
        "allOf": [
          { "$ref": "#/definitions/eclagent" },
          {
            "name": {
              "type": "string",
              "description": "The name of the eclagent process"
            },
            "prefix": {
              "type": "string",
              "description": "The (optional) file prefix to add to relative filenames"
            },
            "dataPlane": {
              "description": "The default storage plane to write data files to",
              "type": "string"
            },
            "spillPlane": {
              "description": "The storage plane to write spill files to",
              "type": "string"
            },
            "required": [ "name" ]
          }
        ]
      }
    },
    "dfuserver": {
      "description": "dfuserver process",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the dfuserver process"
          },
          "disabled": {
            "type": "boolean"
          },
          "maxJobs": {
            "type": "integer"
          },
          "env": {
            "$ref": "#/definitions/env"
          },
          "annotations": {
            "type": "object",
            "additionalProperties": { "type": "string" }
          },
          "labels": {
            "type": "object",
            "additionalProperties": { "type": "string" }
          }
        },
        "additionalProperties": { "type": ["integer", "string", "boolean"] },
        "required": [ "name" ]
      }
    },
    "roxie": {
      "description": "roxie process",
      "type": "array",
      "items": { "$ref": "#/definitions/roxie" }
    },
    "thor": {
      "description": "thor process",
      "type": "array",
      "items": { "$ref": "#/definitions/thor" }
    },
    "sasha": {
      "description": "sasha services",
      "type": "object",
      "$ref": "#/definitions/sashaservice"
    },
    "dafilesrv": {
      "description": "dafilesrv process",
      "type": "array",
      "items": { "$ref": "#/definitions/dafilesrv" }
    }
  },
  "required": [
    "dali"
  ],
  "title": "Values",
  "type": "object",
  "definitions": {
    "global": {
      "type": "object",
      "properties": {
        "privileged": {
          "type": "boolean"
        },
        "noResourceValidation": {
          "type": "boolean"
        },
        "image": {
          "$ref": "#/definitions/image"
        },
        "env": {
          "$ref": "#/definitions/env"
        },
        "logging": {
          "$ref": "#/definitions/logging"
        },
        "egress": {
          "$ref": "#/definitions/egress"
        },
        "defaultEsp": {
          "type": "string"
        },
        "defaultDataPath": {
          "type": "string"
        },
        "defaultMirrorPath": {
          "type": "string"
        },
        "cost": {
          "description": "resource cost",
          "type": "object",
          "properties": {
            "perCpu": {
              "description": "cost of a single cpu",
              "type": "number"
            }
          }
        },
        "misc": {
          "description": "Miscellaneous settings",
          "oneOf": [
            {
              "type": "object",
              "properties": {
                "postJobCommand": {
                  "description": "Execute this command when a K8s Job launched by a deployment ends, either gracefully or when terminated externally causing a preStop event",
                  "type": "string"
                },
                "postJobCommandViaSidecar": {
                  "description": "Causes shareProcessNamespace to be enabled, and the postJobCommand to execute via a sidecar",
                  "type": "boolean"
                }
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "metrics": {
          "type" : "object",
          "description" : "Global metrics configuration",
          "properties" : {
            "sinks" : {
              "$ref" : "#/definitions/sinks"
            }
          }
        },
        "visibilities": {
          "type": "object",
          "description" : "Global visibilities configuration",
          "additionalProperties": {
            "type": "object",
            "required": [ "type" ],
            "properties":
            {
              "annotations": {
                "type": "object",
                "additionalProperties": { "type": "string" }
              },
              "labels": {
                "type": "object",
                "additionalProperties": { "type": "string" }
              },
              "type": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        }
      },
      "additionalProperties": false
    },
    "security": {
      "type": "object",
      "properties": {
        "mtls": {
          "description": "enable global mtls between clients (except roxie which has own setting). NB: requires certificates.enabled=true",
          "type": "boolean",
          "default": true
        },
        "eclSecurity": {
          "$ref": "#/definitions/eclSecurity"
        }
      }
    },
    "eclSecurity": {
      "type": "object",
      "properties": {
        "embedded": {
          "$ref": "#/definitions/eclSecurityValues"
        },
        "pipe": {
          "$ref": "#/definitions/eclSecurityValues"
        },
        "extern": {
          "$ref": "#/definitions/eclSecurityValues"
        },
        "datafile": {
          "$ref": "#/definitions/eclSecurityValues"
        }
      }
    },
    "eclSecurityValues": {
      "type": "string",
      "enum": ["deny", "allow", "allowSigned"]
    },
    "image": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "root": {
          "type": "string",
          "default": "hpccsystems"
        },
        "name": {
          "type": "string",
          "default": "platform-core"
        },
        "pullPolicy": {
          "type": "string",
          "enum": ["IfNotPresent", "Always", "Never"]
        }
      },
      "additionalProperties": false
    },
    "storagePlanes": {
      "description": "storage plane definitions",
      "type": "array",
      "items": { "$ref": "#/definitions/storagePlane" }
    },
    "storagePlane": {
      "description": "information about an individual storage plane",
      "type": "object",
      "properties": {
        "name": {
          "description": "the name of the storage plane",
          "type": "string"
        },
        "prefix": {
          "description": "either the path for a local mount, or the url prefix",
          "type": "string"
        },
        "subPath": {
          "description": "optional subdirectory within the mount directory",
          "type": "string"
        },
        "secret": {
          "description": "optional name of any secret required to access this storage plane",
          "type": "string"
        },
        "pvc": {
          "description": "optional name of the persistent volume claim for this plane",
          "type": "string"
        },
        "hostGroup": {
          "description": "optional name of the host group (for bare metal storage)",
          "type": "string"
        },
        "hosts": {
          "description": "a list of host names",
          "type": "array",
          "items": { "type": "string" }
        },
        "numDevices": {
          "description": "optional number of devices in the storage plane (default 1)",
          "type": "integer"
        },
        "includeDeviceInPath": {
          "description": "is a directory based on the part number appended to the path.  May not be needed",
          "type": "boolean"
        },
        "replication": {
          "description": "which planes (if any) the data is replicated onto (primarily bare metal)",
          "type": "array",
          "items": { "type": "string" }
        },
        "category": {
          "description": "the category this plane is usd for, e.g. lz, data",
          "type": "string",
          "enum": ["data", "lz", "dali", "sasha", "dll", "spill" ]
        },
        "umask" : {
          "description": "file creation mask (used by despray)",
          "type" : "string"
        },
        "defaultSprayParts" : {
          "description": "Number of parts sprayed by default",
          "type" : "integer"
        },
        "storageSize": {
          "type": "string"
        },
        "storageClass": {
          "type": "string"
        },
        "storageMode": {
          "type": "string"
        },
        "forcePermissions": {
          "type": "boolean"
        },
        "cost" : {
          "description": "Costs associated with the storage and use of the plane",
          "type" : "object",
          "properties": {
            "storageAtRest" : {
              "description": "Storage cost (GiB/month)",
              "type": "number"
            }
          }
        },
        "subDirPerFilePart" : {
          "description": "Place each logical file part in its own subdirectory",
          "type": "boolean",
          "default": true
        }
      },
      "required": [ "name", "prefix", "category" ],
      "additionalProperties": false
    },
    "resources": {
      "type": "object"
    },
    "secrets": {
      "oneOf": [
        {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        {
          "type": "null"
        }
      ]
    },
    "vaultCategory": {
      "description": "set of vaults under a given category",
      "oneOf": [
        {
            "type": "array",
            "items": { "$ref": "#/definitions/vault" }
        },
        {
          "type": "null"
        }
      ]
    },
    "vault": {
      "description": "information about an individual vault",
      "type": "object",
      "properties": {
        "name": {
          "description": "the name of the vault",
          "type": "string"
        },
        "url": {
          "description": "the url used to access the vault",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "enum": ["kv-v2", "kv-v1"]
        },
        "client-secret": {
          "description": "optional name of kubernetes secret that will provide the vault client token",
          "type": "string"
        }
      },
      "required": [ "name", "url" ],
      "additionalProperties": false
    },
    "hostGroups": {
      "oneOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/hostGroup" }
        },
        {
          "type": "null"
        }
      ]
    },
    "hostGroup": {
      "type": "object",
      "oneOf": [
        {
          "required": [ "name", "hosts" ]
        },
        {
          "required": [ "name", "hostGroup" ]
        }
      ],
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the host group process"
        },
        "hosts": {
          "description": "a list of host names",
          "type": "array",
          "items": { "type": "string" }
        },
        "hostGroup": {
          "description": "Name of the hostgroup to create a subset of",
          "type": "string"
        },
        "count": {
          "description": "Number of hosts in the subset",
          "type": "integer"
        },
        "offset": {
          "description": "Offset of the first host within the group",
          "type": "integer"
        },
        "delta": {
          "type": "integer",
          "description": "Cycle offset to apply to the hosts"
        }
      }
    },
    "ldap": {
      "type": "object",
      "additionalProperties": { "type": ["integer", "string", "boolean"] },
      "properties": {
        "ldapProtocol": {
          "type": "string",
          "description": "The protocol to use - standard \"LDAP\" or secure \"LDAPS\" over SSL"
        },
        "servertype": {
          "type": "string",
          "description": "LDAP Server Implementation Type (\"ActiveDirectory\", \"AzureActiveDirectory\")"
        },
        "description": {
          "type": "string",
          "description": "Description of this Active Directory Server component"
        },
        "adminGroupName": {
          "type": "string",
          "description": "The Active Directory group containing HPCC Administrators"
        },
        "filesBasedn": {
          "type": "string",
          "description": "The base distinguished name that should be used when looking up HPCC file scopes on the Active Directory server"
        },
        "groupsBasedn": {
          "type": "string",
          "description": "The base distinguished name that should be used when looking up HPCC groups on the Active Directory server"
        },
        "usersBasedn": {
          "type": "string",
          "description": "The base distinguished name that should be used when looking up HPCC users on the Active Directory server"
        },
        "systemBasedn": {
          "type": "string",
          "description": "The base distinguished name of the Active Directory systemUser"
        },
        "resourcesBasedn": {
          "type": "string",
          "description": "The base distinguished name that should be used when looking up HPCC feature resources on the Active Directory server"
        },
        "workunitsBasedn": {
          "type": "string",
          "description": "The base distinguished name that should be used when looking up workunit scopes on the Active Directory server"
        },
        "ldapAdminSecretKey": {
          "type": "string",
          "description": "The key name to be used to look up the Active Directory system administrator account Username/Password"
        },
        "ldapAdminVaultId": {
          "type": "string",
          "description": "The optional vault name to be used to look up the Active Directory system administrator account Username/Password, using ldapAdminSecretKey"
        },
        "ldapPort": {
          "type": "integer",
          "description": "The port of the nonsecure Active Directory server"
        },
        "ldapSecurePort": {
          "type": "integer",
          "description": "The secure port of the secure Active Directory server"
        },
        "maxConnections": {
          "type": "integer",
          "description": "The maximum number of concurrent LDAP connections to the Active Directory server (default 10)"
        },
        "passwordExpirationWarningDays": {
          "type": "integer",
          "description": "Within this time period, ECLWatch displays a warning about pending password expiration"
        },
        "cacheTimeout": {
          "type": "integer",
          "description": "Time in minutes after which the cached security information should be reloaded"
        },
        "ldapTimeoutSecs": {
          "type": "integer",
          "description": "The maximum number of seconds to wait for most Active Directory calls"
        },
        "sharedCache": {
          "type": "boolean",
          "description": "Use a single, shared LDAP cache"
        }
      }
    },
    "logging": {
      "type": "object",
      "properties": {
        "audiences": {
          "type": "string",
          "description": "List of target audiences to include in logging output. Comprised of 3 letter codes delimited by + or -"
        },
        "classes": {
          "type": "string",
          "description": "List of target logging classes to include in output. Comprised of 3 letter codes delimited by + or -"
        },
        "detail": {
          "type": "integer",
          "description": "Log output verbosity"
        }
      },
      "additionalProperties": { "type": ["integer", "string", "boolean"] }
    },
    "compileOption": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Compiler option name"
        },
        "value": {
          "type": ["number", "string", "boolean"],
          "description": "Compiler option  value"
        },
        "cluster": {
          "type": "string",
          "description": "Cluster to apply option to"
        }
      },
      "required": [ "name", "value" ],
      "additionalProperties": false
    },
    "env": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Environment variable name"
          },
          "value": {
            "type": ["number", "string", "boolean"],
            "description": "Environment variable value"
          }
        }
      }
    },
    "egress": {
      "type": "object",
      "properties": {
        "restricted": {
          "description": "Are any egress controls applied",
          "type": "boolean"
        },
        "kubeApiCidr": {
          "description": "IP range for kubectl API service",
          "type": "string"
        },
        "kubeApiPort": {
          "description": "Port used for connections to kubectl API",
          "type": "integer"
        },
        "kubeSystemLabel": {
          "type": "string",
          "description": "Label that has been applied to the kube-system namespace, used to restrict DNS service calls on port 53 to pods in the kube-system namespace"
        }
      },
      "additionalProperties": false
    },
    "service": {
      "description": "Service properties",
      "type": "object",
      "required": [ "servicePort", "visibility" ],
      "properties": {
        "port": {
          "type": "integer",
          "description": "The local port used by the pod",
          "default": 8880
        },
        "servicePort": {
          "type": "integer",
          "description": "The port that this service will be exposed on"
        },
        "visibility": {
          "type": "string",
          "description": "Should this service be exposed outside the cluster, locally or to the internet"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        "labels": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        }
      }
    },
    "dali": {
      "type": "object",
      "required": [ "name" ],
      "additionalProperties": { "type": ["integer", "string", "boolean"] },
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the dali process"
        },
        "image": {
          "$ref": "#/definitions/image"
        },
        "env": {
          "$ref": "#/definitions/env"
        },
        "logging": {
          "$ref": "#/definitions/logging"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        "labels": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        "resources": {
          "$ref": "#/definitions/resources"
        },
        "minStartupTime": {
          "$ref": "#/definitions/minStartupTime"
        },
        "maxStartupTime": {
          "$ref": "#/definitions/maxStartupTime"
        },
        "services": {
          "description": "sasha services",
          "type": "object",
          "$ref": "#/definitions/sashaservice"
        }
      }
    },
    "eclccserver": {
      "type": "object",
      "required": [ "name", "maxActive" ],
      "additionalProperties": { "type": ["integer", "string", "boolean"] },
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the eclccserver process"
        },
        "maxActive": {
          "type": "integer",
          "minimum": 1,
          "description": "Maximum number of compile jobs that can be active simultaneously",
          "default": 4
        },
        "replicas": {
          "type": "integer"
        },
        "listen": {
          "type": "array",
          "items": { "type": "string" }
        },
        "useChildProcesses": {
          "type": "boolean",
          "description": "Launch each workunit compile as a child process rather than in its own container"
        },
        "image": {
          "$ref": "#/definitions/image"
        },
        "env": {
          "$ref": "#/definitions/env"
        },
        "logging": {
          "$ref": "#/definitions/logging"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        "labels": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        "options": {
          "type": "array",
          "items": { "$ref": "#/definitions/compileOption" }
        },
        "resources": {
          "$ref": "#/definitions/resources"
        }
      }
    },
    "eclscheduler": {
      "type": "object",
      "required": [ "name" ],
      "additionalProperties": { "type": ["integer", "string", "boolean"] },
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the eclccserver process"
        },
        "image": {
          "$ref": "#/definitions/image"
        },
        "env": {
          "$ref": "#/definitions/env"
        },
        "logging": {
          "$ref": "#/definitions/logging"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        "labels": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        "resources": {
          "$ref": "#/definitions/resources"
        }
      }
    },
    "esp": {
      "type": "object",
      "required": [ "name", "service" ],
      "additionalProperties": { "type": ["integer", "string", "boolean"] },
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the esp process"
        },
        "replicas": {
          "type": "integer"
        },
        "image": {
          "$ref": "#/definitions/image"
        },
        "env": {
          "$ref": "#/definitions/env"
        },
        "logging": {
          "$ref": "#/definitions/logging"
        },
        "resources": {
          "$ref": "#/definitions/resources"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        "labels": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        "ldap": {
          "$ref": "#/definitions/ldap"
        },
        "service": {
          "$ref": "#/definitions/service"
        }
      }
    },
    "eclagent": {
      "type": "object",
      "additionalProperties": { "type": ["integer", "string", "boolean"] },
      "required": [ "maxActive" ],
      "properties": {
        "replicas": {
          "type": "integer"
        },
        "maxActive": {
          "type": "integer",
          "minimum": 1,
          "description": "Maximum number of workunits that can be active simultaneously",
          "default": 100
        },
        "useChildProcesses": {
          "type": "boolean",
          "description": "Launch each workunit as a child process rather than in its own container"
        },
        "type": {
          "type": "string",
          "enum": ["hthor", "roxie"],
          "description": "Use the hthor or roxie execution engine for eclagent queries"
        },
        "image": {
          "$ref": "#/definitions/image"
        },
        "env": {
          "$ref": "#/definitions/env"
        },
        "logging": {
          "$ref": "#/definitions/logging"
        },
        "dataPlane": {
          "description": "The default storage plane to write data files to",
          "type": "string"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        "labels": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        "resources": {
          "$ref": "#/definitions/resources"
        }
      }
    },
    "roxie": {
      "type": "object",
      "required": [ "name" ],
      "additionalProperties": { "type": ["integer", "string", "boolean"] },
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the roxie process"
        },
        "prefix": {
          "type": "string",
          "description": "The (optional) file prefix to add to relative filenames"
        },
        "minStartupTime": {
          "$ref": "#/definitions/minStartupTime"
        },
        "maxStartupTime": {
          "$ref": "#/definitions/maxStartupTime"
        },
        "image": {
          "$ref": "#/definitions/image"
        },
        "topoServer": {
          "$ref": "#/definitions/toposerver"
        },
        "env": {
          "$ref": "#/definitions/env"
        },
        "logging": {
          "$ref": "#/definitions/logging"
        },
        "preload": {
          "description": "Preloaded plugins",
          "type": "array",
          "items": { "type": "string" }
        },
        "services": {
          "description": "Roxie query services",
          "type": "array",
          "items": { "$ref": "#/definitions/roxieservice" }
        },
        "dataPlane": {
          "description": "The default storage plane to write data files to",
          "type": "string"
        },
        "directAccessPlanes": {
          "description": "A list of storage planes suitable for roxie to read from directly and not have roxie copy the data to roxie's default plane",
          "type": "array",
          "items": { "type": "string" }
        },
        "spillPlane": {
          "description": "The storage plane to write spill files to",
          "type": "string"
        },
        "serverResources": {
          "$ref": "#/definitions/resources"
        },
        "channelResources": {
          "$ref": "#/definitions/resources"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        "labels": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        }
      }
    },
    "toposerver": {
      "type": "object",
      "additionalProperties": { "type": ["integer", "string", "boolean"] },
      "properties": {
        "port": {
          "type": "integer"
        },
        "traceLevel": {
          "type": "integer"
        },
        "replicas": {
          "type": "integer"
        },
        "env": {
          "$ref": "#/definitions/env"
        },
        "logging": {
          "$ref": "#/definitions/logging"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        "labels": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        }
      }
    },
    "roxieservice": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "description": "The local port used by the pod (same as servicePort if not specified)"
        },
        "servicePort": {
          "type": "integer",
          "description": "The port that this service will be exposed on"
        },
        "numThreads": {
          "type": "integer"
        },
        "listenQueue": {
          "type": "integer"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        "labels": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        "visibility": {
          "type": "string",
          "description": "Should this service be exposed outside the cluster, locally or to the internet"
        }
      },
      "required": [ "name", "servicePort" ],
      "additionalProperties": false
    },
    "bundle": {
      "type": "object",
      "required": [ "name" ],
      "additionalProperties": { "type": ["integer", "string", "boolean"] },
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the bundle process"
        }
      }
    },
    "thor": {
      "type": "object",
      "required": [ "name", "maxJobs", "maxGraphs" ],
      "additionalProperties": { "type": ["integer", "string", "boolean"] },
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the thor process"
        },
        "prefix": {
          "type": "string",
          "description": "The (optional) file prefix to add to relative filenames"
        },
        "numWorkers": {
          "type": "integer",
          "description": "The number of worker pods",
          "minimum": 1
        },
        "maxJobs": {
          "type": "integer",
          "description": "The maximum number of jobs that can be run concurrenly",
          "minimum": 1
        },
        "maxGraphs": {
          "type": "integer",
          "description": "The maximum number of Thor graphs that be run concurrently",
          "minimum": 1
        },
        "eclAgentUseChildProcesses": {
          "type": "boolean",
          "description": "Use processes instead of pods per job (eclagent)"
        },
        "eclAgentReplicas": {
          "type": "integer",
          "description": "Number of eclagent replicas",
          "minimum": 1
        },
        "thorAgentReplicas": {
          "type": "integer",
          "description": "Number of thoragent replicas",
          "minimum": 1
        },
        "eclAgentType": {
          "enum": [ "hthor", "roxie" ],
          "description": "eclagent engine type"
        },
        "keepJobs": {
          "enum": [ "none", "podfailures", "all" ],
          "description": "For debugging purposes. Choose whether to keep jobs after execution"
        },
        "lingerPeriod": {
          "type": "integer",
          "description": "[Optional] Seconds to keep Thor instance running, waiting for more graphs to execute",
          "minimum": 1
        },
        "multiJobLinger": {
          "type": "boolean",
          "description": "[Optional] If lingerPeriod set, allows Thor to process more graphs from any job"
        },
        "image": {
          "$ref": "#/definitions/image"
        },
        "env": {
          "$ref": "#/definitions/env"
        },
        "logging": {
          "$ref": "#/definitions/logging"
        },
        "dataPlane": {
          "description": "The default storage plane to write data files to",
          "type": "string"
        },
        "spillPlane": {
          "description": "The storage plane to write spill files to",
          "type": "string"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        "labels": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        "managerResources": {
          "$ref": "#/definitions/resources"
        },
        "workerResources": {
          "$ref": "#/definitions/resources"
        },
        "eclAgentResources": {
          "$ref": "#/definitions/resources"
        },
        "expert": {
          "description": "Custom internal options usually reserved for internal testing",
          "type": "object"
        }
      }
    },
    "sashacommon": {
      "type": "object",
      "properties": {
        "disabled": {
          "type": "boolean"
        },
        "interval": {
          "type": "integer",
          "default": 1
        },
        "env": {
          "$ref": "#/definitions/env"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        "labels": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        "service": {
          "description": "Service properties",
          "type": "object",
          "required": [ "servicePort" ],
          "properties": {
            "port": {
              "type": "integer",
              "description": "The local port used by the pod",
              "default": 8880
            },
            "servicePort": {
              "type": "integer",
              "description": "The port that this service will be exposed on"
            },
            "annotations": {
              "type": "object",
              "additionalProperties": { "type": "string" }
            },
            "labels": {
              "type": "object",
              "additionalProperties": { "type": "string" }
            }
          }
        },
        "at" : {
          "type": "string",
          "default": "* * * * *"
        },
        "throttle": {
          "type": "integer",
          "description": "throttle ratio percentage (0-99, 0 no throttling, 50 is half speed)"
        },
        "image": {
          "$ref": "#/definitions/image"
        },
        "plane": {
          "type": "string",
          "description": "which storage plane to store the sasha data on"
        },
        "resources": {
          "$ref": "#/definitions/resources"
        }
      }
    },
    "sasha-limitcutoff": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "threshold before removal starts (0 disables)",
          "default": "20"
        },
        "cutoff": {
          "type": "integer",
          "description": "minimum age (days)",
          "default": "4"
        }
      }
    },
    "sasha-coalescer": {
      "oneOf": [
        {
          "type": "object",
          "allOf": [
            { "$ref": "#/definitions/sashacommon" },
            {
              "properties": {
                "minDeltaSize": {
                  "type": "integer",
                  "description": "Coalescing will only begin, if the delta size is above this threshold (K)"
                },
                "disabled": {},
                "interval": {},
                "service": {},
                "at" : {},
                "throttle": {},
                "image": {},
                "plane": {},
                "resources": {},
                "env": {},
                "annotations": {},
                "labels": {}
              },
              "additionalProperties": false
            }
          ]
        },
        {
          "type": "null"
        }
      ]
    },
    "sasha-wu-archiver": {
      "oneOf": [
        {
          "type": "object",
          "required": [ "plane" ],
          "allOf": [
            { "$ref": "#/definitions/sashacommon" },
            { "$ref": "#/definitions/sasha-limitcutoff" },
            {
              "properties": 
              {
                "backup": {
                  "type": "integer",
                  "description": "minimum workunit age to backup (days, 0 disables)",
                  "default": "0"
                },
                "duration": {
                  "type": "integer",
                  "description": "Maximum duration to run WorkUnit archiving session (hours, 0 unlimited)",
                  "default": "0"
                },
                "keepResultFiles": {
                  "type": "boolean",
                  "description": "option to keep result files owned by workunits after workunit is archived",
                  "default": "false"
                },
                "retryinterval": {
                  "type": "integer",
                  "description": "minimal time before retrying archive of failed WorkUnits (days)",
                  "default": "7"
                },
                "disabled": {},
                "interval": {},
                "service": {},
                "at" : {},
                "throttle": {},
                "image": {},
                "plane": {},
                "resources": {},
                "env": {},
                "annotations": {},
                "labels": {},
                "limit": {},
                "cutoff": {}    
              },
              "additionalProperties": false
            }
          ]
        },
        {
          "type": "null"
        }
      ]
    },
    "sasha-dfuwu-archiver": {
      "oneOf": [
        {
          "type": "object",
          "required": [ "plane" ],
          "allOf": [ 
            { "$ref": "#/definitions/sashacommon" },
            { "$ref": "#/definitions/sasha-limitcutoff" },
            {
              "properties": 
              {
                "disabled": {},
                "interval": {},
                "service": {},
                "at" : {},
                "throttle": {},
                "image": {},
                "plane": {},
                "resources": {},
                "env": {},
                "annotations": {},
                "labels": {},
                "limit": {},
                "cutoff": {}
              },
              "additionalProperties": false
            }
          ]
        },
        {
          "type": "null"
        }
      ]
    },
    "sasha-dfurecovery-archiver": {
      "oneOf": [
        {
          "type": "object",
          "allOf": [
            { "$ref": "#/definitions/sashacommon" },
            { "$ref": "#/definitions/sasha-limitcutoff" },
            {
              "properties": {
                "disabled": {},
                "interval": {},
                "service": {},
                "at" : {},
                "throttle": {},
                "image": {},
                "plane": {},
                "resources": {},
                "env": {},
                "annotations": {},
                "labels": {},
                "limit": {},
                "cutoff": {}    
              },
              "additionalProperties": false
            }
          ]
        },
        {
          "type": "null"
        }
      ]
    },
    "sasha-file-expiry": {
      "oneOf": [
        {
          "type": "object",
          "allOf": [{ "$ref": "#/definitions/sashacommon" }],
          "properties": {
            "persistExpiryDefault": {
              "type": "integer",
              "description": "Default number of days to delete unused persist files",
              "default": "7"
            },
            "expiryDefault": {
              "type": "integer",
              "description": "Default number of days to delete unused standard files that are flagged with EXPIRY",
              "default": "14"
            },
            "user": {
              "type": "string",
              "description": "A username authorized to access and remove expired files"
            },
            "disabled": {},
            "interval": {},
            "service": {},
            "at" : {},
            "throttle": {},
            "image": {},
            "plane": {},
            "resources": {},
            "annotations": {},
            "labels": {}
          },
          "additionalProperties": false
        },
        {
          "type": "null"
        }
      ]
    },
    "sashaservice": {
      "oneOf": [
        {
          "description": "sasha services",
          "type": "object",
          "properties": {
            "coalescer": {
              "$ref": "#/definitions/sasha-coalescer"
            },
            "wu-archiver": {
              "$ref": "#/definitions/sasha-wu-archiver"
            },
            "dfuwu-archiver": {
              "$ref": "#/definitions/sasha-dfuwu-archiver"
            },
            "dfurecovery-archiver": {
              "$ref": "#/definitions/sasha-dfurecovery-archiver"
            },
            "file-expiry": {
              "$ref": "#/definitions/sasha-file-expiry"
            },
            "disabled": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "null"
        }
      ]
    },
    "dafilesrv": {
      "type": "object",
      "required": [ "name", "service" ],
      "additionalProperties": { "type": ["integer", "string", "boolean"] },
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the dafilesrv process"
        },
        "service": {
          "$ref": "#/definitions/service"
        },
        "parallelRequestLimit": {
          "type": "integer",
          "default": "20"
        },
        "replicas": {
          "type": "integer"
        },
        "image": {
          "$ref": "#/definitions/image"
        },
        "logging": {
          "$ref": "#/definitions/logging"
        },
        "resources": {
          "$ref": "#/definitions/resources"
        }
      }
    },
    "placement": {
      "type": "object",
      "properties": {
        "nodeSelector": {
          "$ref": "#/definitions/nodeSelector"
        },
        "tolerations": {
          "$ref": "#/definitions/tolerations"
        },
        "affinity": {
          "type": "object"
        },
        "schedulerName": {
          "type": "string"
        }
      }
    },
    "nodeSelector": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "tolerations": {
      "type": "array",
      "items": { "$ref": "#/definitions/toleration" }
    },
    "toleration": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "operator": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "effect": {
          "type": "string"
        },
        "tolerationSeconds": {
          "type": "integer"
        }
      }
    },
    "issuer": {
      "type": "object",
      "required": [ "name" ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the issuer which will be referenced in certificate objects"
        },
        "kind": {
          "type": "string",
          "enum": [
              "Issuer",
              "ClusterIssuer"
          ]
        },
        "spec": {
          "description": "The cert-manager spec for the issuer. Should match issuer spec(s) defined by https://cert-manager.io/docs/configuration/",
          "type": "object"
        }
      }
    },
    "minStartupTime": {
      "description": "The time to wait before initiating startup probing (in seconds). Default 0",
      "type": "integer"
    },
    "maxStartupTime": {
      "description": "The time to wait before startup probing fails (in seconds). Default 300",
      "type": "integer"
    },
    "sinks": {
      "type": "array",
      "items" : {
        "$ref" : "#/definitions/sink"
      }
    },
    "sink": {
      "type" : "object",
      "description" : "Definition of a metric sink",
      "properties" : {
        "type": {
          "type" : "string",
          "description" : "The defined metric sink type"
        },
        "name" : {
          "type" : "string",
          "description" : "Name for the sink, must be unique for the component"
        },
        "settings": {
          "type" : "object",
          "description" : "Settings specific to the sink"
        }
      },
      "required" : [
        "type",
        "name"
      ]
    }
  }
}

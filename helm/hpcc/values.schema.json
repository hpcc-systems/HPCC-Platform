{
  "$schema": "https://json-schema.org/draft-07/schema#",
  "additionalProperties": false,
  "properties": {
    "global": {
      "$ref": "#/definitions/global"
    },
    "security" : {
      "$ref": "#/definitions/security"
    },
    "placements": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "pods": {
            "type": "array",
            "items": { "type": "string" }
           },
          "placement": {
            "$ref": "#/definitions/placement"
          }
        }
      }
    },
    "storage": {
      "type": "object",
      "properties": {
        "hostGroups": {
          "$ref": "#/definitions/hostGroups"
        },
        "planes": {
          "$ref": "#/definitions/storagePlanes"
        },
        "remote": {
          "$ref": "#/definitions/remoteStorage"
        },
        "indexBuildPlane": {
          "type": "string",
          "description": "Default plane for index builds"
        }
      },
      "additionalProperties": false
    },
    "certificates": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "issuers": {
          "type": "object",
          "properties": {
            "local": {
              "$ref": "#/definitions/issuer"
            },
            "public": {
              "$ref": "#/definitions/issuer"
            }
          }
        }
      }
    },
    "secrets": {
      "description": "configuration for secrets accessed by the components",
      "type": "object",
      "properties": {
        "timeout": {
          "type": "integer"
        },
        "storage": {
          "$ref": "#/definitions/secrets"
        },
        "authn": {
          "$ref": "#/definitions/secrets"
        },
        "ecl": {
          "$ref": "#/definitions/secrets"
        },
        "eclUser": {
          "$ref": "#/definitions/secrets"
        },
        "codeSign": {
          "$ref": "#/definitions/secrets"
        },
        "codeVerify": {
          "$ref": "#/definitions/secrets"
        },
        "git": {
          "$ref": "#/definitions/secrets"
        },
        "system": {
          "$ref": "#/definitions/secrets"
        }
        ,
        "esp": {
          "$ref": "#/definitions/secrets"
        }
      },
      "additionalProperties": false
    },
    "vaults": {
      "description": "configuration for vaults accessed by the components",
      "type": "object",
      "properties": {
        "timeout": {
          "type": "integer"
        },
        "storage": {
          "$ref": "#/definitions/vaultCategory"
        },
        "authn": {
          "$ref": "#/definitions/vaultCategory"
        },
        "esp": {
          "$ref": "#/definitions/vaultCategory"
        },
        "ecl": {
          "$ref": "#/definitions/vaultCategory"
        },
        "eclUser": {
          "$ref": "#/definitions/vaultCategory"
        },
        "codeSign": {
          "$ref": "#/definitions/vaultCategory"
        },
        "codeVerify": {
          "$ref": "#/definitions/vaultCategory"
        },
        "git": {
          "$ref": "#/definitions/vaultCategory"
        }
      },
      "additionalProperties": false
    },
    "bundles": {
      "description": "bundles",
      "type": "array",
      "items": { "$ref": "#/definitions/bundle" }
    },
    "dali": {
      "description": "dali process",
      "type": "array",
      "minItems": 1,
      "maxItems": 1,
      "items": { "$ref": "#/definitions/dali" }
    },
    "eclccserver": {
      "description": "eclccserver process",
      "type": "array",
      "items": { "$ref": "#/definitions/eclccserver" }
    },
    "eclscheduler": {
      "description": "eclscheduler process",
      "type": "array",
      "items": { "$ref": "#/definitions/eclscheduler" }
    },
    "esp": {
      "description": "esp process",
      "type": "array",
      "items": { "$ref": "#/definitions/esp" }
    },
    "eclagent": {
      "description": "eclagent process",
      "type": "array",
      "items": {
        "allOf": [
          { "$ref": "#/definitions/eclagent" },
          {
            "name": {
              "type": "string",
              "description": "The name of the eclagent process"
            },
            "prefix": {
              "type": "string",
              "description": "The (optional) file prefix to add to relative filenames"
            },
            "dataPlane": {
              "description": "The default storage plane to write data files to",
              "type": "string"
            },
            "spillPlane": {
              "description": "The storage plane to write spill files to",
              "type": "string"
            },
            "required": [ "name" ]
          }
        ]
      }
    },
    "dfuserver": {
      "description": "dfuserver process",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the dfuserver process"
          },
          "disabled": {
            "type": "boolean"
          },
          "maxJobs": {
            "type": "integer"
          },
          "sprayServiceName": {
            "description": "Optional name of the dafilesrv spray service to use (will default to 1st 'spray' dafilesrv)",
            "type": "string"
          },
          "useFtSlave": {
            "description": "Use legacy ftslave processes (ran within dfuserver pod)",
            "type": "boolean",
            "default": false
          },
          "env": {
            "$ref": "#/definitions/env"
          },
          "annotations": {
            "type": "object",
            "additionalProperties": { "type": "string" }
          },
          "resources": {
            "$ref": "#/definitions/resources"
          },
          "labels": {
            "type": "object",
            "additionalProperties": { "type": "string" }
          },
          "egress": {
              "$ref" : "#/definitions/egress"
          },
          "expert": {
            "description": "Custom internal options usually reserved for internal testing",
            "type": "object"
          },
          "hpa": {
            "$ref": "#/definitions/hpa"
          }
        },
        "additionalProperties": { "type": ["integer", "string", "boolean"] },
        "required": [ "name" ]
      }
    },
    "roxie": {
      "description": "roxie process",
      "type": "array",
      "items": { "$ref": "#/definitions/roxie" }
    },
    "thor": {
      "description": "thor process",
      "type": "array",
      "items": { "$ref": "#/definitions/thor" }
    },
    "sasha": {
      "description": "sasha services",
      "type": "object",
      "$ref": "#/definitions/sashaservice"
    },
    "dafilesrv": {
      "description": "dafilesrv process",
      "type": "array",
      "items": { "$ref": "#/definitions/dafilesrv" }
    }
  },
  "title": "Values",
  "type": "object",
  "definitions": {
    "global": {
      "type": "object",
      "properties": {
        "privileged": {
          "type": "boolean"
        },
        "noResourceValidation": {
          "type": "boolean"
        },
        "stubInstanceResources": {
          "$ref": "#/definitions/stubInstanceResources"
        },
        "image": {
          "$ref": "#/definitions/image"
        },
        "user": {
          "$ref": "#/definitions/user"
        },
        "env": {
          "$ref": "#/definitions/env"
        },
        "logging": {
          "$ref": "#/definitions/logging"
        },
        "logAccess": {
          "$ref": "#/definitions/logAccess"
        },
        "egress": {
          "$ref": "#/definitions/globalEgress"
        },
        "defaultEsp": {
          "type": "string"
        },
        "busybox": {
          "description": "image for busybox containers",
          "type": "string",
          "default": "busybox:stable"
        },
        "defaultDataPath": {
          "type": "string"
        },
        "defaultMirrorPath": {
          "type": "string"
        },
        "cost": {
          "description": "default resource cost",
          "type": "object",
          "properties": {
            "currencyCode": {
                "description": "currency code (ISO 4217)",
                "type": "string",
                "maxLength": 3
            },
            "perCpu": {
              "description": "cost of a single cpu",
              "type": "number"
            },
            "storageAtRest": {
                "description": "storage cost (GiB per month)",
                "type": "number"
            },
            "storageReads": {
                "description": "cost per 10,000 read operations",
                "type": "number"
            },
            "storageWrites": {
                "description": "cost per 10,000 write operations",
                "type": "number"
            }
          }
        },
        "expert": {
          "description": "Settings for developers, debugging and testing"
        },
        "misc": {
          "description": "Miscellaneous settings",
          "oneOf": [
            {
              "type": "object",
              "properties": {
                "postJobCommand": {
                  "description": "Execute this command when a K8s Job launched by a deployment ends, either gracefully or when terminated externally causing a preStop event",
                  "type": "string"
                },
                "postJobCommandViaSidecar": {
                  "description": "Causes shareProcessNamespace to be enabled, and the postJobCommand to execute via a sidecar",
                  "type": "boolean"
                }
              }
            },
            {
              "type": "null"
            }
          ]
        },
        "metrics": {
          "type" : "object",
          "description" : "Global metrics configuration",
          "properties" : {
            "sinks" : {
              "$ref" : "#/definitions/sinks"
            }
          }
        },
        "visibilities": {
          "type": "object",
          "description" : "Global visibilities configuration",
          "additionalProperties": {
            "type": "object",
            "required": [ "type" ],
            "properties":
            {
              "annotations": {
                "type": "object",
                "additionalProperties": { "type": "string" }
              },
              "labels": {
                "type": "object",
                "additionalProperties": { "type": "string" }
              },
              "ingress": {
                "$ref" : "#/definitions/ingress"
              },
              "loadBalancerSourceRanges": {
                "type": "array",
                "items": { "type": "string" },
                "description": "A list of CIDR ranges that you would like to allow for access to the Service"
              },
              "type": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        }
      },
      "additionalProperties": false
    },
    "security": {
      "type": "object",
      "properties": {
        "mtls": {
          "description": "enable global mtls between clients (except roxie which has own setting). NB: requires certificates.enabled=true",
          "type": "boolean",
          "default": true
        },
        "eclSecurity": {
          "$ref": "#/definitions/eclSecurity"
        }
      }
    },
    "eclSecurity": {
      "type": "object",
      "properties": {
        "embedded": {
          "$ref": "#/definitions/eclSecurityValues"
        },
        "pipe": {
          "$ref": "#/definitions/eclSecurityValues"
        },
        "extern": {
          "$ref": "#/definitions/eclSecurityValues"
        },
        "datafile": {
          "$ref": "#/definitions/eclSecurityValues"
        }
      }
    },
    "eclSecurityValues": {
      "type": "string",
      "enum": ["deny", "allow", "allowSigned"]
    },
    "image": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "root": {
          "type": "string",
          "default": "hpccsystems"
        },
        "name": {
          "type": "string",
          "default": "platform-core"
        },
        "pullPolicy": {
          "type": "string",
          "enum": ["IfNotPresent", "Always", "Never"]
        },
        "imagePullSecrets": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "user": {
      "type": "object",
      "properties": {
        "uid": {
          "type": "integer",
          "default": 10000
        },
        "gid": {
          "type": "integer",
          "default": 10001
        }
      },
      "additionalProperties": false
    },
    "storagePlanes": {
      "description": "storage plane definitions",
      "type": "array",
      "items": { "$ref": "#/definitions/storagePlane" }
    },
    "storagePlane": {
      "description": "information about an individual storage plane",
      "type": "object",
      "allOf": [
        { "$ref": "#/definitions/storagePlaneCommon" },
        {
          "properties": {
            "name": {
              "description": "the name of the storage plane",
              "type": "string"
            },
            "disabled": {
              "description": "disable this plane definition",
              "type": "boolean"
            },
            "numDevices": {
              "description": "optional number of devices in the storage plane (default 1)",
              "type": "integer"
            },
            "includeDeviceInPath": {
              "description": "is a directory based on the part number appended to the path.  May not be needed",
              "type": "boolean"
            },
            "replication": {
              "description": "which planes (if any) the data is replicated onto (primarily bare metal)",
              "type": "array",
              "items": { "type": "string" }
            },
            "category": {
              "description": "the category this plane is used for, e.g. lz, data",
              "type": "string",
              "enum": ["data", "lz", "dali", "sasha", "dll", "spill", "temp", "git", "remote", "debug" ]
            },
            "defaultSprayParts" : {
              "description": "Number of parts sprayed by default",
              "type" : "integer"
            },
            "subDirPerFilePart" : {
              "description": "Place each logical file part in its own subdirectory",
              "type": "boolean",
              "default": true
            },
            "aliases" : {
              "description": "A list of additional ways of accessing the data, along with the reasons why",
              "type": "array",
              "items": { "$ref": "#/definitions/storagePlaneAlias" }
            },
            "storageSize": {
              "type": "string"
            },
            "storageClass": {
              "type": "string"
            },
            "storageMode": {
              "type": "string"
            },
            "forcePermissions": {
              "type": "boolean"
            },
            "waitForMount": {
              "type": "boolean"
            },
            "blockedFileIOKB": {
              "description": "Optimal block size for efficient reading from this plane. Implementations will use if they can",
              "type": "integer",
              "default": 0
            },
            "eclwatchVisible": {
              "type": "boolean"
            },
            "components": {},
            "prefix": {},
            "subPath": {},
            "secret": {},
            "pvc": {},
            "hostGroup": {},
            "hosts": {},
            "umask": {},
            "numMounts": {},
            "cost": {},
            "storageapi": {}
          },
          "additionalProperties": false
        }
      ],
      "required": [ "name", "prefix", "category" ]
    },
    "storagePlaneCommon": {
      "$comment": "The following properties make sense either on a storage plane or an an alias.  For that reason they do not include properties that are used to create implement pvcs e.g. storageClass.  All new entries must be added as null entries in storagePlane and storagePlaneAlias",
      "properties": {
        "prefix": {
          "description": "either the path for a local mount, or the url prefix",
          "type": "string"
        },
        "subPath": {
          "description": "optional subdirectory within the mount directory",
          "type": "string"
        },
        "secret": {
          "description": "optional name of any secret required to access this storage plane",
          "type": "string"
        },
        "pvc": {
          "description": "optional name of the persistent volume claim for this plane",
          "type": "string"
        },
        "hostGroup": {
          "description": "optional name of the host group (for bare metal storage)",
          "type": "string"
        },
        "hosts": {
          "description": "a list of host names",
          "type": "array",
          "items": { "type": "string" }
        },
        "umask" : {
          "description": "file creation mask (used by despray)",
          "type" : "string"
        },
        "numMounts": {
          "description": "the number of mounts for this pvc - defaults to numDevices",
          "type": "integer"
        },
        "cost" : {
          "description": "Costs associated with the storage and use of the plane",
          "type" : "object",
          "properties": {
            "storageAtRest" : {
              "description": "Storage cost (GiB/month)",
              "type": "number"
            }
          }
        },
        "storageapi": {
          "description": "Optional information for storage api",
          "type": "object",
          "properties": {
            "type": {
              "description": "Type of storage api",
              "type": "string",
              "enum": ["azurefile", "azureblob"]
            },
            "account": {
              "description": "Account name",
              "type": "string"
            },
            "secret": {
              "description": "Secret id",
              "type": "string"
            },
      	    "containers": {
              "type": "array",
              "description": "List of containers",
              "items": {
                "description": "storage container/file share (one item for each device)",
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of storage container/file share",
                    "type" : "string"
                  },
                  "account" : {
                    "description" : "Acccount Name (optional - will default to parent object if not specified)",
                    "type" : "string"
                  },
                  "secret" : {
                    "description" : "Secret id (optional - will default to parent object if not specified)",
                    "type" : "string"
                  }
                },
                "additionalProperties": false,
                "required": [ "name" ]
              }
            }
          },
          "additionalProperties": false,
          "required": [ "type", "containers" ]
        },
        "components": {
          "description": "If specified, only mount the storage plane in the specified components",
          "type": "array",
          "items": { "type": "string" }
        }
      }
    },
    "storagePlaneAlias": {
      "$comment": "The following properties are required for providing an alternative path to a data plane",
      "allOf": [
        { "$ref": "#/definitions/storagePlaneCommon" },
        {
          "properties": {
            "name": {
              "description": "the name of the alias",
              "type": "string"
            },
            "mode": {
              "description": "A list of access modes the engines would use to select this alias",
              "type": "array",
              "items": {
                "type": "string",
                "enum": [ "write", "sequential", "random", "api"]
              }
            },
            "prefix": {},
            "subPath": {},
            "secret": {},
            "pvc": {},
            "hostGroup": {},
            "hosts": {},
            "umask": {},
            "numMounts": {},
            "components": {},
            "cost": {}
          },
          "additionalProperties": false,
          "required": [ "name", "mode", "prefix" ]
        }
      ]
    },
    "remoteStorage": {
      "description": "remote storage definitions",
      "type": "array",
      "items": { "$ref": "#/definitions/remoteStorageEntry" }
    },
    "remoteStorageEntry": {
      "description": "information about an individual remote storage definition",
      "type": "object",
      "properties": {
        "name": {
          "description": "the name of the remote storage definition",
          "type": "string"
        },
        "service": {
          "description": "the remote DFS service",
          "type": "string"
        },
        "secret": {
          "description": "the name of the secret containing the certificates to connect to the service",
          "type": "string"
        },
        "planes": {
          "description": "mapping of remote planes to local planes",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "remote": {
                "type": "string",
                "description": "The name of the remote plane to map from"
              },
              "local": {
                "type": "string",
                "description": "The name of the local plane to map to"
              }
            }
          }
        },
        "useDafilesrv": { "const": true }
      },
      "oneOf":[
        {
          "required": [
            "name",
            "service",
            "planes"
          ]
        },
        {
          "required": [
            "name",
            "service",
            "useDafilesrv"
          ]
        }
      ],
      "additionalProperties": false
    },
    "resources": {
      "type": "object"
    },
    "componentCost": {
      "description": "component level costs",
      "type": "object",
      "properties": {
        "perCpu": {
          "description": "cost of a single cpu",
          "type": "number"
        }
      }
    },
    "memory": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "description": "The amount of overall resourced memory to dedicate to the query"
        },
        "thirdParty": {
          "type": "string",
          "description": "The amount of overall resource memory to reserve for 3rd party use"
        },
        "maxMemPercentage": {
          "type": "number",
          "description": "The default maximum percentage of resource memory to dedicate to HPCC"
        }
      },
      "additionalProperties": false
    },
    "secrets": {
      "oneOf": [
        {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        {
          "type": "null"
        }
      ]
    },
    "vaultCategory": {
      "description": "set of vaults under a given category",
      "oneOf": [
        {
            "type": "array",
            "items": { "$ref": "#/definitions/vault" }
        },
        {
          "type": "null"
        }
      ]
    },
    "vault": {
      "description": "information about an individual vault",
      "type": "object",
      "properties": {
        "name": {
          "description": "the name of the vault",
          "type": "string"
        },
        "url": {
          "description": "the url used to access the vault",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "enum": ["kv-v2", "kv-v1"]
        },
        "client-secret": {
          "description": "optional name of kubernetes secret that will provide the vault client token",
          "type": "string"
        },
        "appRoleId": {
          "description": "app role id assigned for use with Hashicorp appRole authentication",
          "type": "string"
        },
        "appRoleSecret": {
          "description": "name of the secret that will contain the 'secret-id' used with Hashicorp appRole authentication",
          "type": "string"
        },
        "namespace": {
          "description": "the namespace to use when authenticating with, and accessing the vault",
          "type": "string"
        },
        "verify_server": {
          "description": "optional relax server verification for trouble shooting",
          "type": "boolean"
        },
        "retries": {
          "description": "optional number of times to retry vault request in case of connect / socker error",
          "type": "number"
        },
        "retryWait": {
          "description": "optional wait time (in ms) between socket retries",
          "type": "number"
        },
        "connectTimeout": {
          "description": "optional timeout (in ms) for socket connect to vault",
          "type": "number"
        },
        "readTimeout": {
          "description": "optional timeout (in ms) for socket reading from vault",
          "type": "number"
        },
        "writeTimeout": {
          "description": "optional timeout (in ms) for socket writing to vault",
          "type": "number"
        }
      },
      "required": [ "name", "url" ],
      "additionalProperties": false
    },
    "hostGroups": {
      "oneOf": [
        {
          "type": "array",
          "items": { "$ref": "#/definitions/hostGroup" }
        },
        {
          "type": "null"
        }
      ]
    },
    "hostGroup": {
      "type": "object",
      "oneOf": [
        {
          "required": [ "name", "hosts" ]
        },
        {
          "required": [ "name", "hostGroup" ]
        }
      ],
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the host group process"
        },
        "hosts": {
          "description": "a list of host names",
          "type": "array",
          "items": { "type": "string" }
        },
        "hostGroup": {
          "description": "Name of the hostgroup to create a subset of",
          "type": "string"
        },
        "count": {
          "description": "Number of hosts in the subset",
          "type": "integer"
        },
        "offset": {
          "description": "Offset of the first host within the group",
          "type": "integer"
        },
        "delta": {
          "type": "integer",
          "description": "Cycle offset to apply to the hosts"
        }
      }
    },
    "auth": {
      "type": "string",
      "description": "Authentication method"
    },
    "authNZ": {
      "type": "object",
      "additionalProperties": { "type": ["object"] }
    },
    "authDomain": {
      "type": "object",
      "additionalProperties": { "type": ["integer", "string"] }
    },
    "ldap": {
      "type": "object",
      "required": [ "ldapAddress" ],
      "additionalProperties": { "type": ["integer", "string", "boolean"] },
      "properties": {
        "ldapAddress": {
          "type": "string",
          "description": "LDAP Server IP address(es), comma separated"
        },
        "ldapProtocol": {
          "type": "string",
          "description": "The protocol to use - standard \"LDAP\" or secure \"LDAPS\" over SSL"
        },
        "servertype": {
          "type": "string",
          "description": "LDAP Server Implementation Type (\"ActiveDirectory\", \"AzureActiveDirectory\")"
        },
        "description": {
          "type": "string",
          "description": "Description of this Active Directory Server component"
        },
        "ldapCipherSuite": {
          "type": "string",
          "description": "The optional Cipher Suite to be applied to LDAPS connections"
        },
        "adminGroupName": {
          "type": "string",
          "description": "The Active Directory group containing HPCC Administrators"
        },
        "filesBasedn": {
          "type": "string",
          "description": "The base distinguished name that should be used when looking up HPCC file scopes on the Active Directory server"
        },
        "groupsBasedn": {
          "type": "string",
          "description": "The base distinguished name that should be used when looking up HPCC groups on the Active Directory server"
        },
        "usersBasedn": {
          "type": "string",
          "description": "The base distinguished name that should be used when looking up HPCC users on the Active Directory server"
        },
        "systemBasedn": {
          "type": "string",
          "description": "The base distinguished name of the Active Directory Administrator"
        },
        "resourcesBasedn": {
          "type": "string",
          "description": "The base distinguished name that should be used when looking up HPCC feature resources on the Active Directory server"
        },
        "workunitsBasedn": {
          "type": "string",
          "description": "The base distinguished name that should be used when looking up workunit scopes on the Active Directory server"
        },
        "ldapAdminSecretKey": {
          "type": "string",
          "description": "The key name to be used to look up the Active Directory Administrator account Username/Password"
        },
        "ldapAdminVaultId": {
          "type": "string",
          "description": "The optional vault name to be used to look up the Active Directory Administrator account Username/Password, using ldapAdminSecretKey"
        },
        "hpccAdminSecretKey": {
          "type": "string",
          "description": "The optional key name to be used to look up the HPCC Administrator account Username/Password"
        },
        "hpccAdminVaultId": {
          "type": "string",
          "description": "The optional vault name to be used to look up the HPCC Administrator account Username/Password, using hpccAdminSecretKey"
        },
        "ldapPort": {
          "type": "integer",
          "description": "The port of the nonsecure Active Directory server"
        },
        "ldapSecurePort": {
          "type": "integer",
          "description": "The secure port of the secure Active Directory server"
        },
        "maxConnections": {
          "type": "integer",
          "description": "The maximum number of concurrent LDAP connections to the Active Directory server (default 10)"
        },
        "passwordExpirationWarningDays": {
          "type": "integer",
          "description": "Within this time period, ECLWatch displays a warning about pending password expiration"
        },
        "cacheTimeout": {
          "type": "integer",
          "description": "Time in minutes after which the cached security information should be reloaded"
        },
        "ldapTimeoutSecs": {
          "type": "integer",
          "description": "The maximum number of seconds to wait for most Active Directory calls"
        },
        "sharedCache": {
          "type": "boolean",
          "description": "Use a single, shared LDAP cache"
        },
        "checkScopeScans": {
          "type": "boolean",
          "description": "Only return iterated logical file metadata for files that user has scope permission to access"
        }
      }
    },
    "logging": {
      "type": "object",
      "properties": {
        "audiences": {
          "type": "string",
          "description": "List of target audiences to include in logging output. Comprised of 3 letter codes delimited by + or -"
        },
        "classes": {
          "type": "string",
          "description": "List of target logging classes to include in output. Comprised of 3 letter codes delimited by + or -"
        },
        "detail": {
          "type": "integer",
          "description": "Log output verbosity"
        },
        "queueLength": {
          "type": "integer",
          "description": "Maximum number of log entries to buffer in the log queue. Set to 0 for synchronous logging",
          "default": 512
        },
        "queueDrop": {
          "type": "integer",
          "description": "Number of log entries to drop from the log queue when it is full. Disabled if 0, or if queueLength is 0",
          "default": 0
        },
        "dataFormat": {
          "type": "string",
          "description": "The data format used to report logging: xml|json|table(space delimited values)",
          "enum": [ "xml", "json", "table"]
        }
      },
      "additionalProperties": { "type": ["integer", "string", "boolean"] }
    },
    "compileOption": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Compiler option name"
        },
        "value": {
          "type": ["number", "string", "boolean"],
          "description": "Compiler option  value"
        },
        "cluster": {
          "type": "string",
          "description": "Cluster to apply option to"
        }
      },
      "required": [ "name", "value" ],
      "additionalProperties": false
    },
    "env": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Environment variable name"
          },
          "value": {
            "type": ["number", "string", "boolean"],
            "description": "Environment variable value"
          }
        }
      }
    },
    "ingress": {
      "type": "array",
      "items": {
        "additionalProperties": {
          "type": "array",
          "items": { "type": "object" }
        }
      }
    },
    "egress": {
      "oneOf": [
        {
          "type": "string",
          "description": "Named egress section (from global.egress) to apply to this component"
        },
        {
          "type": "array",
          "items": {
            "additionalProperties": {
              "type": "array",
              "items": { "type": "object" }
            }
          }
        }  
      ]
    },
    "globalEgress": {
      "type": "object",
      "properties": {
        "restricted": {
          "description": "Are any egress controls applied",
          "type": "boolean"
        },
        "kubeApiCidr": {
          "description": "IP range for kubectl API service",
          "type": "string"
        },
        "kubeApiPort": {
          "description": "Port used for connections to kubectl API",
          "type": "integer"
        },
        "kubeSystemLabel": {
          "type": "string",
          "description": "Label that has been applied to the kube-system namespace, used to restrict DNS service calls on port 53 to pods in the kube-system namespace"
        }
      },
      "additionalProperties": {
        "type": "array",
        "properties":
        {
          "egress": {
            "$ref" : "#/definitions/egress"
          },              
          "additionalProperties": false
        }
      }
    },
    "service": {
      "description": "Service properties",
      "type": "object",
      "required": [ "servicePort", "visibility" ],
      "properties": {
        "application": {
          "type": "string",
          "description": "Application name"
        },
        "port": {
          "type": "integer",
          "description": "The local port used by the pod",
          "default": 8880
        },
        "servicePort": {
          "type": "integer",
          "description": "The port that this service will be exposed on"
        },
        "visibility": {
          "type": "string",
          "description": "Should this service be exposed outside the cluster, locally or to the internet"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        "ingress": {
          "$ref" : "#/definitions/ingress"
        },
        "labels": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        "loadBalancerSourceRanges": {
          "type": "array",
          "items": { "type": "string" },
          "description": "A list of CIDR ranges that you would like to allow for access to the Service"
        }
      }
    },
    "dali": {
      "type": "object",
      "required": [ "name", "auth" ],
      "additionalProperties": { "type": ["integer", "string", "boolean"] },
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the dali process"
        },
        "image": {
          "$ref": "#/definitions/image"
        },
        "env": {
          "$ref": "#/definitions/env"
        },
        "logging": {
          "$ref": "#/definitions/logging"
        },
        "auth": {
          "$ref": "#/definitions/auth"
        },
        "ldap": {
          "$ref": "#/definitions/ldap"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        "labels": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        "resources": {
          "$ref": "#/definitions/resources"
        },
        "minStartupTime": {
          "$ref": "#/definitions/minStartupTime"
        },
        "maxStartupTime": {
          "$ref": "#/definitions/maxStartupTime"
        },
        "services": {
          "description": "sasha services",
          "type": "object",
          "$ref": "#/definitions/sashaservice"
        },
        "service": {
          "$ref": "#/definitions/service"
        },
        "egress": {
          "$ref" : "#/definitions/egress"
        }
      }
    },
    "eclccserver": {
      "type": "object",
      "required": [ "name", "maxActive" ],
      "additionalProperties": { "type": ["integer", "string", "boolean"] },
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the eclccserver process"
        },
        "maxActive": {
          "type": "integer",
          "minimum": 1,
          "description": "Maximum number of compile jobs that can be active simultaneously",
          "default": 4
        },
        "replicas": {
          "type": "integer"
        },
        "listen": {
          "type": "array",
          "items": { "type": "string" }
        },
        "useChildProcesses": {
          "type": "boolean",
          "description": "Launch each workunit compile as a child process rather than in its own container"
        },
        "childProcessTimeLimit": {
          "type": "integer",
          "description": "Time limit (in seconds) for child process compilation before aborting and using separate container, when useChildProcesses is false",
          "default": 10
        },
        "gitPlane": {
          "description": "The storage plane to check git repositories out to",
          "type": "string"
        },
        "image": {
          "$ref": "#/definitions/image"
        },
        "env": {
          "$ref": "#/definitions/env"
        },
        "logging": {
          "$ref": "#/definitions/logging"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        "labels": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        "options": {
          "type": "array",
          "items": { "$ref": "#/definitions/compileOption" }
        },
        "gitUsername": {
          "type": "string",
          "description": "The username to use for all remote repository access"
        },
        "defaultRepo": {
          "type": "string",
          "description": "The default package/repo used to resolve code if not compiling from an archive"
        },
        "defaultRepoVersion": {
          "type": "string",
          "description": "The default repo version used if not supplied for the defaultRepo"
        },
        "resources": {
          "$ref": "#/definitions/resources"
        },
        "cost": {
          "$ref" : "#/definitions/componentCost"
        },
        "egress": {
          "$ref" : "#/definitions/egress"
        },
        "hpa": {
          "$ref": "#/definitions/hpa"
        }
      }
    },
    "eclscheduler": {
      "type": "object",
      "required": [ "name" ],
      "additionalProperties": { "type": ["integer", "string", "boolean"] },
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the eclccserver process"
        },
        "image": {
          "$ref": "#/definitions/image"
        },
        "env": {
          "$ref": "#/definitions/env"
        },
        "logging": {
          "$ref": "#/definitions/logging"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        "labels": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        "resources": {
          "$ref": "#/definitions/resources"
        }
      }
    },
    "esp": {
      "type": "object",
      "required": [ "name", "service", "auth" ],
      "additionalProperties": { "type": ["integer", "string", "boolean"] },
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the esp process"
        },
        "replicas": {
          "type": "integer"
        },
        "image": {
          "$ref": "#/definitions/image"
        },
        "env": {
          "$ref": "#/definitions/env"
        },
        "logging": {
          "$ref": "#/definitions/logging"
        },
        "resources": {
          "$ref": "#/definitions/resources"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        "labels": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        "auth": {
          "$ref": "#/definitions/auth"
        },
        "authNZ": {
          "$ref": "#/definitions/authNZ"
        },
        "authDomain": {
          "$ref": "#/definitions/authDomain"
        },
        "ldap": {
          "$ref": "#/definitions/ldap"
        },
        "service": {
          "$ref": "#/definitions/service"
        },
        "certificate": {
          "type": "string",
          "description": "Name of the secret which contains the TLS certificate.  Custom configuration instead of using, or overriding cert-manager certificate."
        },
        "bindingInfo": {
          "description": "Customizable binding options",
          "type": "object"
        },
        "remoteClients": {
          "$ref": "#/definitions/remoteClients"
        },
        "corsAllowed": {
          "$ref": "#/definitions/corsAllowed"
        },
        "egress": {
          "$ref" : "#/definitions/egress"
        },
        "hpa": {
          "$ref": "#/definitions/hpa"
        }
      }
    },
    "eclagent": {
      "type": "object",
      "additionalProperties": { "type": ["integer", "string", "boolean"] },
      "required": [ "maxActive" ],
      "properties": {
        "replicas": {
          "type": "integer"
        },
        "maxActive": {
          "type": "integer",
          "minimum": 1,
          "description": "Maximum number of workunits that can be active simultaneously",
          "default": 100
        },
        "useChildProcesses": {
          "type": "boolean",
          "description": "Launch each workunit as a child process rather than in its own container"
        },
        "type": {
          "type": "string",
          "enum": ["hthor", "roxie"],
          "description": "Use the hthor or roxie execution engine for eclagent queries"
        },
        "image": {
          "$ref": "#/definitions/image"
        },
        "env": {
          "$ref": "#/definitions/env"
        },
        "logging": {
          "$ref": "#/definitions/logging"
        },
        "dataPlane": {
          "description": "The default storage plane to write data files to",
          "type": "string"
        },
        "indexBuildPlane": {
          "description": "The default storage plane to write index files to",
          "type": "string"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        "labels": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        "resources": {
          "$ref": "#/definitions/resources"
        },
        "jobMemory": {
          "$ref": "#/definitions/memory"
        },
        "cost": {
          "$ref" : "#/definitions/componentCost"
        },
        "egress": {
          "$ref" : "#/definitions/egress"
        },
        "preferredDataReadPlanes": {
          "$ref" : "#/definitions/preferredDataReadPlanes"
        },
        "allowedPipePrograms": {
          "$ref" : "#/definitions/allowedPipePrograms"
        },
        "hpa": {
          "$ref": "#/definitions/hpa"
        }
      }
    },
    "roxie": {
      "type": "object",
      "required": [ "name" ],
      "additionalProperties": { "type": ["integer", "string", "boolean"] },
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the roxie process"
        },
        "prefix": {
          "type": "string",
          "description": "The (optional) file prefix to add to relative filenames"
        },
        "minStartupTime": {
          "$ref": "#/definitions/minStartupTime"
        },
        "maxStartupTime": {
          "$ref": "#/definitions/maxStartupTime"
        },
        "image": {
          "$ref": "#/definitions/image"
        },
        "topoServer": {
          "$ref": "#/definitions/toposerver"
        },
        "env": {
          "$ref": "#/definitions/env"
        },
        "logging": {
          "$ref": "#/definitions/logging"
        },
        "preload": {
          "description": "Preloaded plugins",
          "type": "array",
          "items": { "type": "string" }
        },
        "services": {
          "description": "Roxie query services",
          "type": "array",
          "items": { "$ref": "#/definitions/roxieservice" }
        },
        "dataPlane": {
          "description": "The default storage plane to write data files to",
          "type": "string"
        },
        "directAccessPlanes": {
          "description": "A list of storage planes suitable for roxie to read from directly and not have roxie copy the data to roxie's default plane",
          "type": "array",
          "items": { "type": "string" }
        },
        "spillPlane": {
          "description": "The storage plane to write spill files to",
          "type": "string"
        },
        "indexBuildPlane": {
          "description": "The default storage plane to write index files to",
          "type": "string"
        },
        "resources": {
          "$ref": "#/definitions/resources"
        },
        "serverResources": {
          "$ref": "#/definitions/resources"
        },
        "channelResources": {
          "$ref": "#/definitions/resources"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        "labels": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        "certificate": {
          "type": "string",
          "description": "Name of the secret which contains the TLS certificate.  Custom configuration instead of using, or overriding cert-manager certificate."
        },
        "allFilesDynamic": { 
          "type": "boolean",
          "default": false,
          "description": "If enabled, files will be resolved per-query and not locked between queries"
        },
        "backgroundCopyClass": { 
          "type": "string",
          "default": "none",
          "enum": [ "none", "best-effort", "idle"],
          "description": "Specify an IONICE class for the background copy thread."
        },
        "backgroundCopyPrio": { 
          "type": "integer",
          "default": 0,
          "description": "Specify an IONICE value for the background copy thread, if backgroundCopyClass set to best-effort."
        },
        "callbackRetries": { 
          "type": "integer",
          "default": 3,
          "minimum": 1,
          "description": "Number of retries before callbacks from agents to server are aborted"
        },
        "callbackTimeout": { 
          "type": "integer",
          "default": 5000,
          "minimum": 0,
          "description": "Timeout (in ms) before callbacks from agents to server are resent"
        },
        "checkFileDate": { 
          "type": "boolean",
          "default": true,
          "description": "Compare file dates of physical files with the information in DFS."
        },
        "collectFactoryStatistics": { 
          "type": "boolean",
          "default": true,
          "description": "Accumulate summary statistics for all queries"
        },
        "copyResources": { 
          "type": "boolean",
          "default": true,
          "description": "Copies any missing data files/keys from the position they were in when query was deployed."
        },
        "defaultHighPriorityTimeLimit": { 
          "type": "integer",
          "default": 0,
          "minimum": 0,
          "description": "Maximum run time (in ms) for any single active high-priority query (if not overridden)"
        },
        "defaultHighPriorityTimeWarning": { 
          "type": "integer",
          "default": 5000,
          "minimum": 0,
          "description": "Time (in ms) before generating SNMP warning for a high-priority query (if not overridden)"
        },
        "defaultLowPriorityTimeLimit": { 
          "type": "integer",
          "default": 0,
          "minimum": 0,
          "description": "Maximum run time (in ms) for any single active low-priority query (if not overridden)"
        },
        "defaultLowPriorityTimeWarning": { 
          "type": "integer",
          "default": 0,
          "minimum": 0,
          "description": "Time (in ms) before generating SNMP warning for a low-priority query (if not overridden)"
        },
        "defaultMemoryLimit": { 
          "type": "integer",
          "default": 0,
          "minimum": 0,
          "description": "Maximum amount of memory available for row data in any single active query (if not overridden)"
        },
        "defaultSLAPriorityTimeLimit": { 
          "type": "integer",
          "default": 0,
          "minimum": 0,
          "description": "Maximum run time (in ms) for any single active SLA-high-priority query (if not overridden)"
        },
        "defaultSLAPriorityTimeWarning": { 
          "type": "integer",
          "default": 5000,
          "minimum": 0,
          "description": "Time (in ms) before generating SNMP warning for a SLA-high-priority query (if not overridden)"
        },
        "defaultStripLeadingWhitespace": { 
          "type": "boolean",
          "default": true,
          "description": "Default value for stripping leading whitespace in input XML values"
        },
        "encryptionInTransit": { 
          "type": "boolean",
          "default": false,
          "description": "Encrypt traffic between Roxie nodes."
        },
        "flushJHtreeCacheOnOOM": { 
          "type": "boolean",
          "default": true,
          "description": "Should the index node memory allocation flush the cache and retry if memory allocation fails"
        },
        "fieldTranslationEnabled": {
          "default": "payload",
          "enum": ["false", "true", "payload"],
          "description": "Enables translation (where possible) of mismatched file layouts on-the-fly. Specify 'payload' to attempt to translate payload fields only"
        },
        "highTimeout": { 
          "type": "integer",
          "default": 2000,
          "minimum": 0,
          "description": "Timeout (in ms) before high priority requests are resent to agents"
        },
        "httpCallerIdHeader": { 
          "type": "string",
          "default": "HPCC-Caller-Id",
          "description": "HTTP Header field to use for sending and receiving CallerId"
        },
        "httpGlobalIdHeader": { 
          "type": "string",
          "default": "HPCC-Global-Id",
          "description": "HTTP Header field to use for sending and receiving GlobalId"
        },
        "ignoreOrphans": { 
          "type": "boolean",
          "default": true,
          "description": "Treat out-of-date local files as if they were not present."
        },
        "ignoreFileDateMismatches": { 
          "type": "boolean",
          "default": false,
          "description": "Ignore mismatched file dates on local files"
        },
        "ignoreFileSizeMismatches": {
          "type": "boolean",
          "default": false,
          "description": "Ignore mismatched file sizes on local files"
        },
        "fileTimeFuzzySeconds": { 
          "type": "integer",
          "default": 0,
          "description": "Ignore mismatched file dates of up to this amount"
        },
        "lazyOpen": {
          "type": "boolean",
          "default": false,
          "description": "Delay opening files until first use."
        },
        "localFilesExpire": { 
          "type": "integer",
          "default": -1,
          "description": "Period (in ms) of inactivity before a local datafile handle is closed"
        },
        "lockSuperFiles": { 
          "type": "boolean",
          "default": false,
          "description": "If enabled, superfiles will be locked while queries that use them are loaded"
        },
        "lowTimeout": { 
          "type": "integer",
          "default": 10000,
          "minimum": 0,
          "description": "Timeout (in ms) before low priority requests are resent to agents"
        },
        "maxHttpConnectionRequests": { 
          "type": "integer",
          "default": 0,
          "minimum": 0,
          "description": "Max number of query requests per persistent http connection"
        },
        "maxHttpKeepAliveWait": { 
          "type": "integer",
          "default": 5000,
          "minimum": 0,
          "description": "Max number of miliseconds to wait for additional requests on a persistent http connection"
        },
        "maxLocalFilesOpen": { 
          "type": "integer",
          "default": 4000,
          "minimum": 0,
          "description": "Maximum number of local files to keep open"
        },
        "maxRemoteFilesOpen": { 
          "type": "integer",
          "default": 1000,
          "minimum": 0,
          "description": "Maximum number of remote files to keep open"
        },
        "minLocalFilesOpen": { 
          "type": "integer",
          "default": 2000,
          "minimum": 0,
          "description": "Minimum number of local files to keep open"
        },
        "minRemoteFilesOpen": { 
          "type": "integer",
          "default": 500,
          "minimum": 0,
          "description": "Minimum number of remote files to keep open"
        },
        "packetAcknowledgeTimeout": { 
          "type": "integer",
          "default": 100,
          "minimum": 10,
          "description": "Maximum time to wait for agent query packets to be acknowledged before resending"
        },
        "parallelQueryLoadThreads": { 
          "type": "integer",
          "default": 0,
          "minimum": 0,
          "description": "Use up to n multiple threads for initial query loading"
        },
        "preloadOnceData": { 
          "type": "boolean",
          "default": true,
          "description": "Evaluate : ONCE sections of queries at query load time"
        },
        "prestartAgentThreads": { 
          "type": "boolean",
          "default": false,
          "description": "Prestart agent worker threads at startup"
        },
        "reloadRetriesSuspended": { 
          "type": "boolean",
          "default": true,
          "description": "Retry loading of suspended queries whenever QuerySet reloads"
        },
        "remoteFilesExpire": { 
          "type": "integer",
          "default": 3600000,
          "minimum": 0,
          "description": "Period (in ms) of inactivity before a remote datafile handle is closed"
        },
        "serverThreads": { 
          "type": "integer",
          "default": 30,
          "minimum": 0,
          "description": "Default number of threads processing Roxie server requests (if not specified on service)"
        },
        "slaTimeout": { 
          "type": "integer",
          "default": 2000,
          "minimum": 0,
          "description": "Timeout (in ms) before SLA high priority requests are resent to agents"
        },
        "agentQueryReleaseDelaySeconds": { 
          "type": "integer",
          "default": 60,
          "minimum": 0,
          "description": "Delay before unregistering slave queries to allow in-flight to complete. Files are locked until query is unregistered."
        },
        "agentThreads": { 
          "type": "integer",
          "default": 30,
          "minimum": 0,
          "description": "Number of threads processing agent requests"
        },
        "statsExpiryTime": { 
          "type": "integer",
          "default": 3600,
          "minimum": 0,
          "description": "Time (in seconds) that detailed reporting stats are kept"
        },
        "totalMemoryLimit": { 
          "type": "string",
          "description": "Maximum amount of memory available for row data in all active queries"
        },
        "heapUseHugePages": { 
          "type": "boolean",
          "default": false,
          "description": "Allow roxie to use memory from huge pages if they have been configured."
        },
        "heapUseTransparentHugePages": { 
          "type": "boolean",
          "default": true,
          "description": "Allow roxie to use memory from transparent huge pages."
        },
        "heapRetainMemory": { 
          "type": "boolean",
          "default": false,
          "description": "Retain and do not return unused memory to the operating system."
        },
        "trapTooManyActiveQueries": { 
          "type": "boolean",
          "default": true,
          "description": "should an SNMP trap get sent when too many active query error occurs"
        },
        "useMemoryMappedIndexes": { 
          "type": "boolean",
          "default": false,
          "description": "Using memory-mapped files when merging multiple result streams from row-compressed indexes."
        },
        "useRemoteResources": { 
          "type": "boolean",
          "default": false,
          "description": "Reads any missing data files/keys from the position they were in when deployed."
        },
        "traceLevel": { 
          "type": "integer",
          "default": 1,
          "minimum": 0,
          "description": "Level of detail in reporting (set to 0 for none, 1 for normal, > 1 or more for extended)"
        },
        "logFullQueries": { 
          "type": "boolean",
          "default": false,
          "description": "Log full text (unless blindLogging) and resource usage of all queries received "
        },
        "blindLogging": { 
          "type": "boolean",
          "default": false,
          "description": "Suppress all logging of any data or query text"
        },
        "memTraceLevel": { 
          "type": "integer",
          "default": 1,
          "minimum": 0,
          "description": "Level of detail in reporting mem mgr information(set to 0 for none, 1 for normal, >1 or more for extended)"
        },
        "miscDebugTraceLevel": { 
          "type": "integer",
          "default": 0,
          "minimum": 0,
          "description": "Level of miscellaneous debug tracing unrelated to all other tracing(set to 0 for none, 1 for normal, >1 or more for extended)"
        },
        "soapTraceLevel": { 
          "type": "integer",
          "default": 1,
          "minimum": 0,
          "description": "Level of detail in reporting SOAPCALL information(set to 0 for none, 1 for normal, >1 or more for extended)"
        },
        "traceTranslations": { 
          "type": "boolean",
          "default": true,
          "description": "Trace record layout translations to log file"
        },
        "traceEnabled": { 
          "type": "boolean",
          "default": false,
          "description": "TRACE activity output enabled by default (can be overridden in workunit or query)"
        },
        "traceLimit": { 
          "type": "integer",
          "default": 10,
          "minimum": 0,
          "description": "Number of rows output by TRACE activity"
        },
        "udpTraceLevel": { 
          "type": "integer",
          "default": 1,
          "minimum": 0,
          "description": "Level of detail in reporting udp information(set to 0 for none, 1 for normal, >1 or more for extended)"
        },
        "udpAdjustThreadPriorities": { 
          "type": "boolean",
          "default": false,
          "description": "Should UDP socket reading threads operate at elevated priority"
        },
        "udpFlowSocketsSize": { 
          "type": "integer",
          "default": 131072,
          "minimum": 0,
          "description": "Controls the read socket buffer size of the UDP layer flow control sockets"
        },
        "udpLocalWriteSocketSize": { 
          "type": "integer",
          "default": 1024000,
          "minimum": 0,
          "description": "Controls the write socket buffer size of the local UDP sockets (Agent to Server on same node)"
        },
        "udpAgentBufferSize": { 
          "type": "integer",
          "default": 262142,
          "minimum": 0,
          "description": "Controls the read socket buffer size of the UDP agent read sockets"
        },
        "udpOutQsPriority": { 
          "type": "integer",
          "default": 0,
          "minimum": 0,
          "description": "Turns on/off Priority weight-based for output queues (0 round-robin no priority - old logic, 1 round-robin new logic, 2 and higher is factor of priority)"
        },
        "udpQueueSize": { 
          "type": "integer",
          "default": 100,
          "minimum": 0,
          "description": "UDP transport layer receive queue size"
        },
        "udpResendLostPackets": { 
          "type": "boolean",
          "default": true,
          "description": "UDP transport layer resend lost packets"
        },
        "udpSendQueueSize": { 
          "type": "integer",
          "default": 50,
          "minimum": 0,
          "description": "UDP transport layer send queue size"
        },
        "udpStatsReportInterval": { 
          "type": "integer",
          "default": 60000,
          "minimum": 0,
          "description": "UDP transport layer stats reporting interval"
        },
        "blobCacheMem": { 
          "type": "integer",
          "default": 0,
          "minimum": 0,
          "description": "Size (in Mb) of blob index page cache"
        },
        "leafCacheMem": { 
          "type": "integer",
          "default": 50,
          "minimum": 0,
          "description": "Size (in Mb) of leaf index page cache"
        },
        "nodeCacheMem": { 
          "type": "integer",
          "default": 100,
          "minimum": 0,
          "description": "Size (in Mb) of non-leaf index page cache"
        },
        "mysqlCacheCheckPeriod": { 
          "type": "integer",
          "default": 10000,
          "minimum": 0,
          "description": "Time to wait (ms) between checking if any cached MySQL connections can be closed"
        },
        "mysqlCacheTimeoutPeriod": { 
          "type": "integer",
          "default": 60000,
          "minimum": 0,
          "description": "Time to wait (ms) before closing a cached MySQL connection"
        },
        "mysqlConnectionCacheSize": { 
          "type": "integer",
          "default": 10000,
          "minimum": 0,
          "description": "Number of MySQL connections to hold in cache"
        },
        "checkCompleted": { 
          "type": "boolean",
          "default": true,
          "description": "Check pending replies when agent gets a retry request"
        },
        "dafilesrvLookupTimeout": { 
          "type": "integer",
          "default": 10000,
          "minimum": 0,
          "description": "Maximum time (in milliseconds) dafilesrv will wait before timing out the first time through the list"
        },
        "defaultConcatPreload": { 
          "type": "integer",
          "default": 0,
          "minimum": 0,
          "description": "Default concat preload"
        },
        "defaultFetchPreload": { 
          "type": "integer",
          "default": 0,
          "minimum": 0,
          "description": "Default fetch preload"
        },
        "defaultFullKeyedJoinPreload": { 
          "type": "integer",
          "default": 0,
          "minimum": 0,
          "description": "Default full keyed join preload"
        },
        "defaultKeyedJoinPreload": { 
          "type": "integer",
          "default": 0,
          "minimum": 0,
          "description": "Default keyed join preload"
        },
        "defaultParallelJoinPreload": { 
          "type": "integer",
          "default": 0,
          "minimum": 0,
          "description": "Default parallel join preload"
        },
        "defaultPrefetchProjectPreload": { 
          "type": "integer",
          "default": 10,
          "minimum": 0,
          "description": "Default prefetch value for PROJECT,PREFETCH activity"
        },
        "doIbytiDelay": { 
          "type": "boolean",
          "default": true,
          "description": "Enables the IBYTI delay logic in the agents."
        },
        "enableHeartBeat": { 
          "type": "boolean",
          "default": true,
          "description": "Enable HeartBeat messages to roxiepipe clients"
        },
        "fastLaneQueue": { 
          "type": "boolean",
          "default": true,
          "description": "Enable special fast-lane queue for simple queries."
        },
        "ignoreMissingFiles": { 
          "type": "boolean",
          "default": false,
          "description": "Ignore missing files"
        },
        "indexReadChunkSize": { 
          "type": "integer",
          "default": 60000,
          "minimum": 0,
          "description": "Break up results from indexRead (and other remote activities) every N bytes"
        },
        "initIbytiDelay": { 
          "type": "integer",
          "default": 50,
          "minimum": 0,
          "description": "Initial time (in milliseconds) a secondary agent will wait for an IBYTI packet from a primary peer."
        },
        "mtuPayload": { 
          "type": "integer",
          "default": 1400,
          "minimum": 1400,
          "maximum": 9000,
          "description": "Set higher than 1400 for networks with a larger MTU."
        },
        "linuxYield": { 
          "type": "boolean",
          "default": false,
          "description": "Yield to scheduler in some tight loops. May help latency on uniprocessor machines"
        },
        "maxBlockSize": { 
          "type": "integer",
          "default": 10000000,
          "minimum": 0,
          "description": "Max size of block read from client socket"
        },
        "maxLockAttempts": { 
          "type": "integer",
          "default": 5,
          "minimum": 0,
          "description": "Number of retries to get lock for global queries"
        },
        "memoryStatsInterval": { 
          "type": "integer",
          "default": 60,
          "minimum": 0,
          "description": "Interval (in seconds) between reports on Roxie heap usage"
        },
        "memTraceSizeLimit": { 
          "type": "integer",
          "default": 10,
          "minimum": 0,
          "description": "Generate stacktrace whenever a request is made for a row larger than this threshold (0 to disable)"
        },
        "parallelAggregate": { 
          "type": "integer",
          "default": 0,
          "minimum": 0,
          "description": "Number of parallel threads to use for in-memory aggregate processing. Set to 0 to use one per CPU, 1 to disable parallel processing of in-memory aggregates"
        },
        "perChannelFlowLimit": { 
          "type": "integer",
          "default": 10,
          "minimum": 1,
          "description": "Number of pending queries permitted per channel (per active activity) before blocking"
        },
        "pingInterval": { 
          "type": "integer",
          "default": 60,
          "minimum" : 0,
          "description": "Interval (in seconds) between Roxie server ping tests"
        },
        "preabortIndexReadsThreshold": { 
          "type": "integer",
          "default": 100,
          "minimum": 0,
          "description": "Use seek to precheck keyed limits (i.e. assume ,COUNT) on index reads if limit greater than this value"
        },
        "preabortKeyedJoinsThreshold": { 
          "type": "integer",
          "minimum" : 0,
          "default": 100,
          "description": "Use seek to precheck limits on keyed joins if limit greater than this value"
        },
        "simpleLocalKeyedJoins": { 
          "type": "boolean",
          "default": true,
          "description": "Enable single-threaded local keyed joins"
        },
        "socketCheckInterval": { 
          "type": "integer",
          "default": 5000,
          "minimum": 0,
          "description": "Interval (in milliseconds) between checks that client socket is still open"
        },
        "expert": {
          "description": "Custom internal options usually reserved for internal testing",
          "type": "object"
        },
        "egress": {
          "$ref" : "#/definitions/egress"
        },
        "preferredDataReadPlanes": {
          "$ref" : "#/definitions/preferredDataReadPlanes"
        },
        "allowedPipePrograms": {
          "$ref" : "#/definitions/allowedPipePrograms"
        },
        "hpa": {
          "$ref": "#/definitions/hpa"
        }
      }
    },
    "toposerver": {
      "type": "object",
      "additionalProperties": { "type": ["integer", "string", "boolean"] },
      "properties": {
        "port": {
          "type": "integer"
        },
        "traceLevel": {
          "type": "integer"
        },
        "replicas": {
          "type": "integer"
        },
        "env": {
          "$ref": "#/definitions/env"
        },
        "logging": {
          "$ref": "#/definitions/logging"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        "labels": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        "hpa": {
          "$ref": "#/definitions/hpa"
        }
      }
    },
    "roxieservice": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "description": "The local port used by the pod (same as servicePort if not specified)"
        },
        "servicePort": {
          "type": "integer",
          "description": "The port that this service will be exposed on"
        },
        "numThreads": {
          "type": "integer"
        },
        "listenQueue": {
          "type": "integer"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        "labels": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        "ingress": {
          "$ref" : "#/definitions/ingress"
        },
        "visibility": {
          "type": "string",
          "description": "Should this service be exposed outside the cluster, locally or to the internet"
        },
        "tls": {
          "type": "boolean",
          "description": "Whether the roxie service uses tls.  Requires cert-manager or custom certificate."
        }
      },
      "required": [ "name", "servicePort" ],
      "additionalProperties": false
    },
    "bundle": {
      "type": "object",
      "required": [ "name" ],
      "additionalProperties": { "type": ["integer", "string", "boolean"] },
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the bundle process"
        }
      }
    },
    "thor": {
      "type": "object",
      "required": [ "name", "maxJobs", "maxGraphs" ],
      "additionalProperties": { "type": ["integer", "string", "boolean"] },
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the thor process"
        },
        "prefix": {
          "type": "string",
          "description": "The (optional) file prefix to add to relative filenames"
        },
        "numWorkers": {
          "type": "integer",
          "description": "The number of worker containers. NB: There will be <numWorker>/<numWorkersPerPod> pods",
          "minimum": 1
        },
        "numWorkersPerPod": {
          "type": "integer",
          "description": "The number of workers to place per pod (must be a factor of numWorkers)",
          "minimum": 1,
          "default": 1
        },
        "maxJobs": {
          "type": "integer",
          "description": "The maximum number of jobs that can be run concurrenly",
          "minimum": 1
        },
        "maxGraphs": {
          "type": "integer",
          "description": "The maximum number of Thor graphs that be run concurrently",
          "minimum": 1
        },
        "eclAgentUseChildProcesses": {
          "type": "boolean",
          "description": "Use processes instead of pods per job (eclagent)"
        },
        "eclAgentReplicas": {
          "type": "integer",
          "description": "Number of eclagent replicas",
          "minimum": 1
        },
        "thorAgentReplicas": {
          "type": "integer",
          "description": "Number of thoragent replicas",
          "minimum": 1
        },
        "eclAgentType": {
          "enum": [ "hthor", "roxie" ],
          "description": "eclagent engine type"
        },
        "keepJobs": {
          "enum": [ "none", "podfailures", "all" ],
          "description": "For debugging purposes. Choose whether to keep jobs after execution"
        },
        "lingerPeriod": {
          "type": "integer",
          "description": "[Optional] Seconds to keep Thor instance running, waiting for more graphs to execute",
          "minimum": 1
        },
        "multiJobLinger": {
          "type": "boolean",
          "description": "[Optional] If lingerPeriod set, allows Thor to process more graphs from any job",
          "default": true
        },
        "maxGraphStartupTime": {
          "type": "integer",
          "description": "[Optional] The time (seconds) for the job to wait for a Thor instance to start",
          "default": 600
        },
        "image": {
          "$ref": "#/definitions/image"
        },
        "env": {
          "$ref": "#/definitions/env"
        },
        "logging": {
          "$ref": "#/definitions/logging"
        },
        "dataPlane": {
          "description": "The default storage plane to write data files to",
          "type": "string"
        },
        "spillPlane": {
          "description": "The storage plane to write spill files to",
          "type": "string"
        },
        "indexBuildPlane": {
          "description": "The default storage plane to write index files to",
          "type": "string"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        "labels": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        "eclAgentMemory": {
          "$ref": "#/definitions/memory"
        },
        "workerMemory": {
          "$ref": "#/definitions/memory"
        },
        "managerMemory": {
          "$ref": "#/definitions/memory"
        },
        "managerResources": {
          "$ref": "#/definitions/resources"
        },
        "workerResources": {
          "$ref": "#/definitions/resources"
        },
        "eclAgentResources": {
          "$ref": "#/definitions/resources"
        },
        "cost": {
          "$ref" : "#/definitions/componentCost"
        },
        "expert": {
          "description": "Custom internal options usually reserved for internal testing",
          "type": "object"
        },
        "egress": {
          "$ref" : "#/definitions/egress"
        },
        "preferredDataReadPlanes": {
          "$ref" : "#/definitions/preferredDataReadPlanes"
        },
        "allowedPipePrograms": {
          "$ref" : "#/definitions/allowedPipePrograms"
        }
      }
    },
    "sashacommon": {
      "type": "object",
      "properties": {
        "disabled": {
          "type": "boolean"
        },
        "interval": {
          "type": "integer",
          "default": 1
        },
        "env": {
          "$ref": "#/definitions/env"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        "labels": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        },
        "service": {
          "description": "Service properties",
          "type": "object",
          "required": [ "servicePort" ],
          "properties": {
            "port": {
              "type": "integer",
              "description": "The local port used by the pod",
              "default": 8880
            },
            "servicePort": {
              "type": "integer",
              "description": "The port that this service will be exposed on"
            },
            "annotations": {
              "type": "object",
              "additionalProperties": { "type": "string" }
            },
            "labels": {
              "type": "object",
              "additionalProperties": { "type": "string" }
            }
          }
        },
        "at" : {
          "type": "string",
          "default": "* * * * *"
        },
        "throttle": {
          "type": "integer",
          "description": "throttle ratio percentage (0-99, 0 no throttling, 50 is half speed)"
        },
        "image": {
          "$ref": "#/definitions/image"
        },
        "plane": {
          "type": "string",
          "description": "which storage plane to store the sasha data on"
        },
        "resources": {
          "$ref": "#/definitions/resources"
        },
        "egress": {
          "$ref" : "#/definitions/egress"
        }
      }
    },
    "sasha-limitcutoff": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "description": "threshold before removal starts (0 disables)",
          "default": "20"
        },
        "cutoff": {
          "type": "integer",
          "description": "minimum age (days)",
          "default": "4"
        }
      }
    },
    "sasha-coalescer": {
      "type": "object",
      "allOf": [
        { "$ref": "#/definitions/sashacommon" },
        {
          "properties": {
            "minDeltaSize": {
              "type": "integer",
              "description": "Coalescing will only begin, if the delta size is above this threshold (K)"
            },
            "disabled": {},
            "interval": {},
            "service": {},
            "at" : {},
            "throttle": {},
            "image": {},
            "plane": {},
            "resources": {},
            "env": {},
            "annotations": {},
            "labels": {},
            "egress": {}
          },
          "additionalProperties": false
        }
      ]
    },
    "sasha-wu-archiver": {
      "type": "object",
      "required": [ "plane" ],
      "allOf": [
        { "$ref": "#/definitions/sashacommon" },
        { "$ref": "#/definitions/sasha-limitcutoff" },
        {
          "properties": 
          {
            "backup": {
              "type": "integer",
              "description": "minimum workunit age to backup (days, 0 disables)",
              "default": "0"
            },
            "duration": {
              "type": "integer",
              "description": "Maximum duration to run WorkUnit archiving session (hours, 0 unlimited)",
              "default": "0"
            },
            "keepResultFiles": {
              "type": "boolean",
              "description": "option to keep result files owned by workunits after workunit is archived",
              "default": "false"
            },
            "retryinterval": {
              "type": "integer",
              "description": "minimal time before retrying archive of failed WorkUnits (days)",
              "default": "7"
            },
            "disabled": {},
            "interval": {},
            "service": {},
            "at" : {},
            "throttle": {},
            "image": {},
            "plane": {},
            "resources": {},
            "env": {},
            "annotations": {},
            "labels": {},
            "limit": {},
            "cutoff": {},
            "egress": {}    
          },
          "additionalProperties": false
        }
      ]
    },
    "sasha-dfuwu-archiver": {
      "type": "object",
      "required": [ "plane" ],
      "allOf": [ 
        { "$ref": "#/definitions/sashacommon" },
        { "$ref": "#/definitions/sasha-limitcutoff" },
        {
          "properties": 
          {
            "disabled": {},
            "interval": {},
            "service": {},
            "at" : {},
            "throttle": {},
            "image": {},
            "plane": {},
            "resources": {},
            "env": {},
            "annotations": {},
            "labels": {},
            "limit": {},
            "cutoff": {},
            "egress": {}
          },
          "additionalProperties": false
        }
      ]
    },
    "sasha-dfurecovery-archiver": {
      "type": "object",
      "allOf": [
        { "$ref": "#/definitions/sashacommon" },
        { "$ref": "#/definitions/sasha-limitcutoff" },
        {
          "properties": {
            "disabled": {},
            "interval": {},
            "service": {},
            "at" : {},
            "throttle": {},
            "image": {},
            "plane": {},
            "resources": {},
            "env": {},
            "annotations": {},
            "labels": {},
            "limit": {},
            "cutoff": {},
            "egress": {}
          },
          "additionalProperties": false
        }
      ]
    },
    "sasha-file-expiry": {
      "type": "object",
      "allOf": [{ "$ref": "#/definitions/sashacommon" }],
      "properties": {
        "persistExpiryDefault": {
          "type": "integer",
          "description": "Default number of days to delete unused persist files",
          "default": "7"
        },
        "expiryDefault": {
          "type": "integer",
          "description": "Default number of days to delete unused standard files that are flagged with EXPIRY",
          "default": "14"
        },
        "user": {
          "type": "string",
          "description": "A username authorized to access and remove expired files"
        },
        "disabled": {},
        "interval": {},
        "service": {},
        "at" : {},
        "throttle": {},
        "image": {},
        "plane": {},
        "resources": {},
        "annotations": {},
        "labels": {},
        "egress": {}
      },
      "additionalProperties": false
    },
    "sashaservice": {
      "oneOf": [
        {
          "description": "sasha services",
          "type": "object",
          "properties": {
            "coalescer": {
              "$ref": "#/definitions/sasha-coalescer"
            },
            "wu-archiver": {
              "$ref": "#/definitions/sasha-wu-archiver"
            },
            "dfuwu-archiver": {
              "$ref": "#/definitions/sasha-dfuwu-archiver"
            },
            "dfurecovery-archiver": {
              "$ref": "#/definitions/sasha-dfurecovery-archiver"
            },
            "file-expiry": {
              "$ref": "#/definitions/sasha-file-expiry"
            },
            "disabled": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "null"
        }
      ]
    },
    "dafilesrv": {
      "type": "object",
      "required": [ "name", "application", "service" ],
      "additionalProperties": { "type": ["integer", "string", "boolean"] },
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the dafilesrv process"
        },
        "application": {
          "type": "string",
          "enum": ["stream", "directio", "spray"],
          "description": "Application type"
        },
        "service": {
          "$ref": "#/definitions/service"
        },
        "parallelRequestLimit": {
          "type": "integer",
          "default": "20"
        },
        "replicas": {
          "type": "integer"
        },
        "image": {
          "$ref": "#/definitions/image"
        },
        "logging": {
          "$ref": "#/definitions/logging"
        },
        "resources": {
          "$ref": "#/definitions/resources"
        },
        "egress": {
          "$ref" : "#/definitions/egress"
        },
        "hpa": {
          "$ref": "#/definitions/hpa"
        }
      }
    },
    "placement": {
      "type": "object",
      "properties": {
        "nodeSelector": {
          "$ref": "#/definitions/nodeSelector"
        },
        "tolerations": {
          "$ref": "#/definitions/tolerations"
        },
        "affinity": {
          "type": "object"
        },
        "schedulerName": {
          "type": "string"
        },
        "topologySpreadConstraints": {
          "type": "array",
          "items": { "$ref": "#/definitions/topologySpreadConstraint" }
        }
      }
    },
    "nodeSelector": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "tolerations": {
      "type": "array",
      "items": { "$ref": "#/definitions/toleration" }
    },
    "toleration": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "operator": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "effect": {
          "type": "string"
        },
        "tolerationSeconds": {
          "type": "integer"
        }
      }
    },
    "topologySpreadConstraint": {
      "type": "object",
      "properties": {
        "maxSkew": {
          "type": "integer",
          "description": "describes the degree to which Pods may be unevenly distributed. It must be greater than zero"
        },
        "topologyKey": {
          "type": "string",
          "description": "is the key of node labels"
        },
        "whenUnsatisfiable": {
          "type": "string",
          "enum": ["DoNotSchedule", "ScheduleAnyway"],
          "description": "indicates how to deal with a Pod if it doesn't satisfy the spread constraint"
        },
        "labelSelector": {
          "type": "object",
          "description": "labelSelector is used to find matching Pods"
        }
      }
    },
    "issuer": {
      "type": "object",
      "required": [ "name" ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the issuer which will be referenced in certificate objects"
        },
        "kind": {
          "type": "string",
          "enum": [
              "Issuer",
              "ClusterIssuer"
          ]
        },
        "spec": {
          "description": "The cert-manager spec for the issuer. Should match issuer spec(s) defined by https://cert-manager.io/docs/configuration/",
          "type": "object"
        }
      }
    },
    "minStartupTime": {
      "description": "The time to wait before initiating startup probing (in seconds). Default 0",
      "type": "integer"
    },
    "maxStartupTime": {
      "description": "The time to wait before startup probing fails (in seconds). Default 300",
      "type": "integer"
    },
    "logAccess": {
      "type" : "object",
      "description" : "Remote log access information",
      "properties" : {
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Name of HPCC LogAccess plugin type such as 'elasticstack'"
        },
        "connection" : {
          "$ref" : "#/definitions/logAccessConnection"
        },
        "logMaps": {
          "description": "A list of log maps",
          "type": "array",
          "items": {
            "$ref" : "#/definitions/logMap"
           }
        }
      }
    },
    "logAccessConnection": {
      "type": "object",
      "description" : "Connection information for target remote log access",
      "properties": {
        "protocol": {
          "type": "string"
        },
        "host": {
          "type": "string"
        },
        "port": {
          "type": "integer"
        }
      }
    },
    "logMap": {
      "type": "object",
      "description" : "Provides log-store mapping to searchable HPCC log columns",
      "properties": {
        "type": {
          "type": "string",
          "description" : "The searchable HPCC log column to be mapped - 'global' applies to all known fields",
          "enum": [ "global", "workunits", "components", "audience", "class", "instance", "host", "node", "message", "logid", "processid", "threadid", "timestamp"]
        },
        "timeStampColumn": {
          "description" : "Name of timestamp column related to mapped field (only requried for 'global' mapping)",
          "type": "string"
        },
        "searchColumn": {
          "description" : "Name of column mapped to HPCC log entry column",
          "type": "string"
        },
        "storeName": {
          "description" : "Name of container housing mapped HPCC log column",
          "type": "string"
        },
        "keyColumn": {
          "description" : "Name of join key column",
          "type": "string"
        },
        "columnType": {
          "description" : "Data type of the given column",
          "type": "string"
        },
        "disableJoins": {
          "description" : "Disables expensive table join operations",
          "type": "boolean"
        }
      }
    },
    "sinks": {
      "type": "array",
      "items" : {
        "$ref" : "#/definitions/sink"
      }
    },
    "sink": {
      "type" : "object",
      "description" : "Definition of a metric sink",
      "properties" : {
        "type": {
          "type" : "string",
          "description" : "The defined metric sink type"
        },
        "name" : {
          "type" : "string",
          "description" : "Name for the sink, must be unique for the component"
        },
        "settings": {
          "type" : "object",
          "description" : "Settings specific to the sink"
        }
      },
      "required" : [
        "type",
        "name"
      ]
    },
    "stubInstanceResources": {
      "type": "object",
      "description" : "resource definitions per instance for stub components",
      "properties": {
        "memory": {
          "description": "default per stub instance memory requirements",
          "type": "string",
          "default": "200Mi"
        },
        "cpu": {
          "description": "default per stub instance milli cpu requirements",
          "type": "string",
          "default": "50m"
        },
        "additionalProperties": false
      }
    },
    "remoteClients": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Remote client name"
          },
          "organization": {
            "type": "string",
            "description": "Remote client organization"
          },
          "secretTemplate": {
            "type": "object",
            "description": "cert-manager secretTemplate for this remoteClient secret",
            "properties": {
              "annotations": {
                "type": "object",
                "additionalProperties": { "type": "string" }
              },
              "labels": {
                "type": "object",
                "additionalProperties": { "type": "string" }
              }
            }
          }
        }
      }
    },
    "corsAllowed": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "origin": {
            "description": "CORS allowed origin",
            "type": "string"
          },
          "headers": {
            "description": "a list of CORS allowed headers",
            "type": "array",
            "items": { "type": "string" }
          },
          "methods": {
            "description": "a list of CORS allowed HTTP methods (default is GET, POST, OPTIONS)",
            "type": "array",
            "items": { "type": "string" }
          }
        }
      }
    },
    "preferredDataReadPlanes": {
      "description": "A list of planes that will take precedence to read from if logical files reside on mutiple planes",
      "type": "array",
      "items": { "type": "string" }
    },
    "allowedPipePrograms": {
      "description": "Permitted list of programs that can be used by the ECL PIPE directive",
      "type": "array",
      "items": { "type": "string" }
    },
    "hpa" : {
      "type": "object",
      "description": "Horizontal Pod Autoscaler parameters",
      "properties": {
        "minReplicas": {
          "description": "Lower limit for number of replicas which the autoscaler can scale down. It defaults to 1 pod.",
          "type": "integer"
        },
        "maxReplicas": {
          "description": "Upper limit for number of replicas which the autoscaler can scale up. It cannot be less that minReplicas",
          "type": "integer"
        },
        "behavior": {
          "type": "object",
          "description": "Configures the scaling behavior of the target in both Up and Down directions",
          "properties": {
            "scaleUp": {
              "type": "object",
              "$ref": "#/definitions/hpaScalingRules"
            },
            "scaleDown": {
              "type": "object",
              "$ref": "#/definitions/hpaScalingRules"
            }
          }
        },
        "metrics": {
          "type": "array",
          "description": "Specifies variables used to calculate the desired replica count. The desired replica count is calculated multiplying the ratio between the target value and the current value by the current number of pods.",
          "items": { "$ref": "#/definitions/hpaMetric" }
        }
      },
      "required": [ "maxReplicas", "metrics" ]
    },
    "hpaScalingRules": {
      "type": "object",
      "properties": {
        "policies" : {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "Specifies the scaling policy type"
              },
              "value": {
                "type": "integer",
                "description": "The amount of change which is permitted by the policy. It must be greater than zero"
              },
              "periodSeconds": {
                "type": "integer",
                "description": "Specifies the window of time for which the policy should hold true. PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min)."
              }
            },
            "required": ["type", "value", "periodSeconds"]
          }
        },
        "selectPolicy": {
          "type": "string",
          "description": "Specify which policy should be used. If not set, the default value Max is used."
        },
        "stabilizationWindowSeconds": {
          "type": "integer",
          "description": "Seconds for which past recommendations should be considered while scaling up or scaling down. StabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600 (one hour). If not set, use the default values: - For scale up: 0 (i.e. no stabilization is done). - For scale down: 300 (i.e. the stabilization window is 300 seconds long)."
        }
      }
    },
    "hpaMetric" : {
      "type": "object",
      "description": "Target metric for Horizontal Pod Autoscaler",
      "properties": {
        "type": {
          "type": "string",
          "description" : "The metric type to determine workload scaling",
          "enum": [ "Resource","Pods", "External", "Object"]
        },
        "name": {
          "description": "The metric name",
          "type": "string"
        },
        "selector": {
          "type": "object",
          "description": "The string-encoded form of a standard kubernetes label selector for the given metric. When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics.",
          "properties": {
            "matchLabels": {
              "type": "object"
             }
          }
        },
        "describedObject": {
          "type": "object",
          "description": "Specifies the descriptions of an object, such as kind, name, apiVersion",
          "properties": {
            "kind": {
              "type": "string",
              "description": "Specifies the referent kind; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
             },
             "name": {
              "type": "string",
              "description": "Specifies the referent name; More info: http://kubernetes.io/docs/user-guide/identifiers#names"
             },
             "apiVersion": {
              "type": "string",
              "description": "Specifies the referent api version; eg: networking.k8s.io/v1"
             }
          },
          "required": [ "kind", "name" ]
        },
        "target": {
          "description": "Describes th HPA target threshold",
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "enum": [ "Utilization", "AverageValue", "Value" ]
             },
             "value": {
              "description": "Represents the target averageUtilization or averageValue, or the value",
              "type": "string"
             }
          },
          "required": [ "type", "value" ]
        }
      },
      "required": [ "name", "type", "target" ]
    }
  }
}

{{ range $thor := $.Values.thor -}}
{{- if not $thor.disabled -}}
{{- include "hpcc.checkDefaultStoragePlane" (dict "root" $ "me" $thor) }}
{{- $hthorName := printf "%s-hthor" .name }}
{{- $eclAgentName := printf "%s-agent" .name }}
{{- $thorAgentName := printf "%s-thoragent" .name }}
{{- $slaveName := printf "%s-slave" .name }}
{{- $serviceName := printf "%s-svc" .name }}
{{- $eclAgentDefaults := dict "name" $eclAgentName "useChildProcesses" true "replicas" 1 }}
{{- $eclAgentScope := .eclagent | mergeOverwrite $eclAgentDefaults | default $eclAgentDefaults }}
{{- $agentAppType := $eclAgentScope.type | default "hthor" }}
{{- $thorAgentDefaults := dict "name" $thorAgentName "useChildProcesses" false "replicas" 1 }}
{{- $thorAgentScope := .thoragent | mergeOverwrite $thorAgentDefaults | default $thorAgentDefaults }}
{{- $hthorDefaults := dict "name" $hthorName }}
{{- $hthorScope := .eclagent | mergeOverwrite $hthorDefaults | default $hthorDefaults }}
{{- $thorScopeStd := omit . "eclagent" "thoragent" "hthor" }}
{{- $thorScope := $thorAgentScope.useChildProcesses | ternary ($thorScopeStd | mergeOverwrite (dict "masterport" 0 "slaveport" 0)) ($thorScopeStd) }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $eclAgentName | quote }}
spec:
  replicas: {{ $eclAgentScope.replicas }}
  selector:
    matchLabels:
      run: {{ $eclAgentName | quote }}
  template:
    metadata:
      labels:
        run: {{ $eclAgentName | quote }}
        accessDali: "yes"
        accessEsp: {{ .useChildProcesses | default false | ternary "yes" "no" | quote }}
    spec:
      serviceAccountName: {{ $eclAgentScope.useChildProcesses | default false | ternary "hpcc-default" "hpcc-agent" }}
      containers:
      - name: {{ $eclAgentName | quote }}
        workingDir: /var/lib/HPCCSystems
        command: [ agentexec ]
        args: [
                {{ include "hpcc.configArg" . }},
                {{ include "hpcc.daliArg" $ }},
                {{ printf "\"--name=%s\"" .name }}
              ]
{{- include "hpcc.addSecurityContext" (dict "root" $ "me" .) | indent 8 }}
{{- if .useChildProcesses }}
{{- include "hpcc.addResources" (dict "me" $thorScope.eclAgentResources) | indent 8 }}
{{- else }}
{{- include "hpcc.addStubResources" . | indent 8 }}
{{- end }}
{{ include "hpcc.addImageAttrs" (dict "root" $ "me" .) | indent 8 }}
        volumeMounts:
{{ include "hpcc.addConfigMapVolumeMount" . | indent 8 }}
{{ include "hpcc.addDataVolumeMount" (dict "root" $ "me" . ) | indent 8 }}
{{ include "hpcc.addDllVolumeMount" $ | indent 8 }}
{{ include "hpcc.addSecretVolumeMounts" (dict "root" $ "categories" (list "system" "ecl" "storage" ) ) | indent 8 }}
      volumes:
{{ include "hpcc.addConfigMapVolume" . | indent 6 }}
{{ include "hpcc.addDataVolume" (dict "root" $ "me" . ) | indent 6 }}
{{ include "hpcc.addDllVolume" $ | indent 6 }}
{{ include "hpcc.addSecretVolumes" (dict "root" $ "categories" (list "system" "ecl" "storage" ) ) | indent 6 }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $thorAgentName | quote }}
spec:
  replicas: {{ $thorAgentScope.replicas }}
  selector:
    matchLabels:
      run: {{ $thorAgentName | quote }}
  template:
    metadata:
      labels:
        run: {{ $thorAgentName | quote }}
        accessDali: "yes"
        accessEsp: {{ .useChildProcesses | default false | ternary "yes" "no" | quote }}
    spec:
      serviceAccountName: {{ $thorAgentScope.useChildProcesses | default false | ternary "hpcc-default" "hpcc-thoragent" }}
      containers:
      - name: {{ $thorAgentName | quote }}
        workingDir: /var/lib/HPCCSystems
        command: [ agentexec ]
        args: [
                {{ include "hpcc.configArg" $thorAgentScope }},
                {{ include "hpcc.daliArg" $ }},
                {{ printf "\"--name=%s\"" .name }}
              ]
{{- include "hpcc.addSecurityContext" (dict "root" $ "me" .) | indent 8 }}
{{- if not .useChildProcesses }}
{{- include "hpcc.addStubResources" . | indent 8 }}
{{- end }}
{{ include "hpcc.addImageAttrs" (dict "root" $ "me" .) | indent 8 }}
        volumeMounts:
{{ include "hpcc.addConfigMapVolumeMount" . | indent 8 }}
{{ include "hpcc.addDataVolumeMount" (dict "root" $ "me" . ) | indent 8 }}
{{ include "hpcc.addDllVolumeMount" $ | indent 8 }}
{{ include "hpcc.addSecretVolumeMounts" (dict "root" $ "categories" (list "system" "ecl" "storage" ) ) | indent 8 }}
      volumes:
{{ include "hpcc.addConfigMapVolume" . | indent 6 }}
{{ include "hpcc.addDataVolume" (dict "root" $ "me" . ) | indent 6 }}
{{ include "hpcc.addDllVolume" $ | indent 6 }}
{{ include "hpcc.addSecretVolumes" (dict "root" $ "categories" (list "system" "ecl" "storage" ) ) | indent 6 }}
---
kind: ConfigMap 
apiVersion: v1 
metadata:
  name: {{ $thorScope.name }}-configmap 
data:
  {{ $thorScope.name }}.yaml: |
    version: 1.0
    thor:
{{ toYaml (omit $thorScope "logging") | indent 6 }}
{{- include "hpcc.generateLoggingConfig" (dict "root" $ "me" $thorScope) | indent 6 }}
{{ include "hpcc.generateVaultConfig" (dict "root" $ "categories" (list "storage" "ecl" "ecl-user" ) ) | indent 6 }}
    {{ $agentAppType }}:
{{- if $thorScope.multiJobLinger }}
      multiJobLinger: true
{{- end }}
{{ toYaml (omit $hthorScope "logging") | indent 6 }}
      platform:
        type: "thor"
        width: {{ $thor.numSlaves }}
{{- include "hpcc.generateLoggingConfig" (dict "root" $ "me" $hthorScope) | indent 6 }}
{{ include "hpcc.generateVaultConfig" (dict "root" $ "categories" (list "storage" "ecl" "ecl-user" ) ) | indent 6 }}
    eclagent: # main agent Q handler
{{ toYaml (omit $eclAgentScope "logging") | indent 6 }}
{{- include "hpcc.generateLoggingConfig" (dict "root" $ "me" $eclAgentScope) | indent 6 }}
{{ include "hpcc.generateVaultConfig" (dict "root" $ "categories" (list "storage" "ecl" "ecl-user" ) ) | indent 6 }}
    global:
{{ include "hpcc.generateGlobalConfigMap" $ | indent 6 }}

  {{ $thorAgentScope.name }}.yaml: |
    version: 1.0
    eclagent:
{{ toYaml (omit $thorAgentScope "logging") | indent 6 }}
{{- include "hpcc.generateLoggingConfig" (dict "root" $ "me" $thorAgentScope) | indent 6 }}
      type: thor
{{- if $thorAgentScope.useChildProcesses }}
    thor:
{{ toYaml (omit $thorScope "logging") | indent 6 }}
{{- include "hpcc.generateLoggingConfig" (dict "root" $ "me" $thorScope) | indent 6 }}
{{- end }}
    global:
{{ include "hpcc.generateGlobalConfigMap" $ | indent 6 }}
{{- if not $eclAgentScope.useChildProcesses }}

  {{ $agentAppType }}-jobspec.yaml: |
    apiVersion: batch/v1
    kind: Job
    metadata:
      name: {{ $agentAppType }}-%jobname
    spec:
      ttlSecondsAfterFinished: 100
      template:
        metadata:
          labels:
            accessDali: "yes"
            accessEsp: "yes"
        spec:
          serviceAccountName: {{ $thorAgentScope.useChildProcesses | default false | ternary "hpcc-default" "hpcc-agent" }}
          initContainers: 
            {{- include "hpcc.checkDataMount" (dict "root" $) | indent 10 }}
          containers:
          - name: {{ $agentAppType }}-%jobname
{{- include "hpcc.addSecurityContext" (dict "root" $ "me" .) | indent 12 }}
{{ include "hpcc.addImageAttrs" (dict "root" $ "me" .) | indent 12 }}
{{- include "hpcc.addResources" (dict "me" $thorScope.eclAgentResources) | indent 12 }}
            workingDir: /var/lib/HPCCSystems
            command: [ {{ $agentAppType | quote }} ] 
            args: [
                        {{ include "hpcc.configArg" . }},
                        {{ include "hpcc.daliArg" $ }},
                        %args
                     ]
            volumeMounts:
{{ include "hpcc.addConfigMapVolumeMount" . | indent 12 }}
{{ include "hpcc.addDataVolumeMount" (dict "root" $ "me" . ) | indent 12 }}
{{ include "hpcc.addDllVolumeMount" $ | indent 12 }}
{{ include "hpcc.addSecretVolumeMounts" (dict "root" $ "categories" (list "system" "ecl" "storage" ) ) | indent 12 }}
          volumes:
{{ include "hpcc.addConfigMapVolume" . | indent 10 }}
{{ include "hpcc.addDataVolume" (dict "root" $ "me" . ) | indent 10 }}
{{ include "hpcc.addDllVolume" $ | indent 10 }}
{{ include "hpcc.addSecretVolumes" (dict "root" $ "categories" (list "system" "ecl" "storage" ) ) | indent 10 }}
          restartPolicy: Never
      backoffLimit: 0
{{- end }}
{{- if not $thorAgentScope.useChildProcesses }}

  thormaster-jobspec.yaml: |
    apiVersion: batch/v1
    kind: Job
    metadata:
      name: thormaster-%jobname
    spec:
      ttlSecondsAfterFinished: 100
      template:
        metadata:
          labels:
            app: thor
            accessDali: "yes"
            accessEsp: "yes"
            job: %jobname
        spec:
          serviceAccountName: hpcc-agent
          initContainers:
            {{- include "hpcc.checkDataMount" (dict "root" $) | indent 10 }}
          containers:
          - name: thormaster-%jobname
{{- include "hpcc.addSecurityContext" (dict "root" $ "me" .) | indent 12 }}
{{ include "hpcc.addImageAttrs" (dict "root" $ "me" .) | indent 12 }}
{{- include "hpcc.addResources" (dict "me" $thorScope.managerResources) | indent 12 }}
            workingDir: /var/lib/HPCCSystems
            command: [ thormaster_lcr ] 
            args: [
                    {{ include "hpcc.configArg" . }},
                    {{ include "hpcc.daliArg" $ }},
                    %args
                  ]
            volumeMounts:
{{ include "hpcc.addConfigMapVolumeMount" . | indent 12 }}
{{ include "hpcc.addDataVolumeMount" (dict "root" $ "me" . ) | indent 12 }}
{{ include "hpcc.addDllVolumeMount" $ | indent 12 }}
{{ include "hpcc.addSecretVolumeMounts" (dict "root" $ "categories" (list "system" "ecl" "storage" ) ) | indent 12 }}
          volumes:
{{ include "hpcc.addConfigMapVolume" . | indent 10 }}
{{ include "hpcc.addDataVolume" (dict "root" $ "me" . ) | indent 10 }}
{{ include "hpcc.addDllVolume" $ | indent 10 }}
{{ include "hpcc.addSecretVolumes" (dict "root" $ "categories" (list "system" "ecl" "storage" ) ) | indent 10 }}
          restartPolicy: Never
      backoffLimit: 0

  thorslave-jobspec.yaml: |
    apiVersion: batch/v1
    kind: Job
    metadata:
      name: thorslave-%jobname
    spec:
      parallelism: %numSlaves
      ttlSecondsAfterFinished: 100
      template:
        metadata:
          labels:
            app: thor
            accessEsp: "true"
            job: %jobname
        spec:
          serviceAccountName: hpcc-default
          containers:
          - name: thorslave-%jobname
{{- include "hpcc.addSecurityContext" (dict "root" $ "me" .) | indent 12 }}
{{ include "hpcc.addImageAttrs" (dict "root" $ "me" .) | indent 12 }}
{{- include "hpcc.addResources" (dict "me" $thorScope.workerResources) | indent 12 }}
            workingDir: /var/lib/HPCCSystems
            command: [ thorslave_lcr ] 
            args: [
                    {{ include "hpcc.configArg" . }},
                    {{ include "hpcc.daliArg" $ }},
                    %args
                  ]
            volumeMounts:
{{ include "hpcc.addConfigMapVolumeMount" . | indent 12 }}
{{ include "hpcc.addDataVolumeMount" (dict "root" $ "me" . ) | indent 12 }}
{{ include "hpcc.addDllVolumeMount" $ | indent 12 }}
{{ include "hpcc.addSecretVolumeMounts" (dict "root" $ "categories" (list "system" "ecl" "storage" ) ) | indent 12 }}
          volumes:
{{ include "hpcc.addConfigMapVolume" . | indent 10 }}
{{ include "hpcc.addDataVolume" (dict "root" $ "me" . ) | indent 10 }}
{{ include "hpcc.addDllVolume" $ | indent 10 }}
{{ include "hpcc.addSecretVolumes" (dict "root" $ "categories" (list "system" "ecl" "storage" ) ) | indent 10 }}
          restartPolicy: Never
      backoffLimit: 0

  thormaster-networkspec.yaml: |
    apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      name: thormaster-%jobname
    spec:
      podSelector:
        matchLabels:
          app: thor
          job: %jobname
      ingress:
      - from:
        - podSelector:
            matchLabels:
              app: thor
              job: %jobname
      egress:
      - to:
        - podSelector:
            matchLabels:
              app: thor
              job: %jobname
               
{{- end }}
{{- end }}
{{- end }}

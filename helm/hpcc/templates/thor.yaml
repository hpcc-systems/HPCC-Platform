{{/*
Thor configmap
Pass in dict with root and me
*/}}
{{- define "hpcc.thorConfigMap" -}}
{{- $eclAgentType := .me.eclAgentType | default "hthor" }}
{{- $hthorName := printf "%s-%s" .me.name $eclAgentType }}
{{- $eclAgentScope := dict "name" .eclAgentName "type" $eclAgentType "useChildProcesses" .eclAgentUseChildProcesses "replicas" .eclAgentReplicas | merge (pick .me "keepJobs") }}
{{- $thorAgentScope := dict "name" .thorAgentName "replicas" .thorAgentReplicas  | merge (pick .me "keepJobs") }}
{{- $hthorScope := dict "name" $hthorName | merge (pick .me "multiJobLinger") }}
{{- $thorScope := omit .me "eclagent" "thoragent" "hthor" "logging" "eclAgentResources" "eclAgentUseChildProcesses" "eclAgentReplicas" "thorAgentReplicas" "eclAgentType" }}
{{- $misc := .root.Values.global.misc | default dict }}
{{- $postJobCommand := $misc.postJobCommand | default "" }}
apiVersion: v1 
metadata:
  name: {{ $thorScope.name }}-configmap
data:
  {{ $thorScope.name }}.yaml: |
    version: 1.0
    thor:
{{ toYaml $thorScope | indent 6 }}
{{- include "hpcc.generateLoggingConfig" (dict "root" .root "me" $thorScope) | indent 6 }}
{{ include "hpcc.generateVaultConfig" (dict "root" .root "categories" (list "storage" "ecl" "ecl-user" ) ) | indent 6 }}
    {{ $eclAgentType }}: # hthor or roxie
{{ toYaml $hthorScope | indent 6 }}
      platform:
        type: "thor"
        width: {{ mul ($thorScope.numWorkers | default 1) ( $thorScope.channelsPerWorker | default 1) }}
{{- include "hpcc.generateLoggingConfig" (dict "root" .root "me" $hthorScope ) | indent 6 }}
{{ include "hpcc.generateVaultConfig" (dict "root" .root "categories" (list "storage" "ecl" "ecl-user" ) ) | indent 6 }}
    eclagent: # main agent Q handler
{{ toYaml $eclAgentScope | indent 6 }}
{{- include "hpcc.generateLoggingConfig" (dict "root" .root "me" $eclAgentScope) | indent 6 }}
    thoragent: # Thor graph handler
{{ toYaml $thorAgentScope | indent 6 }}
{{- include "hpcc.generateLoggingConfig" (dict "root" .root "me" $thorAgentScope) | indent 6 }}
      type: thor
    global:
{{ include "hpcc.generateGlobalConfigMap" .root| indent 6 }}

{{- if not .eclAgentUseChildProcesses }}
  {{ $eclAgentType }}-jobspec.yaml: |
    apiVersion: batch/v1
    kind: Job
    metadata:
      name: {{ $eclAgentType }}-%jobname
    spec:
      ttlSecondsAfterFinished: 100
      template:
        metadata:
          labels:
            accessDali: "yes"
            accessEsp: "yes"
        spec:
          serviceAccountName: "hpcc-agent"
          initContainers: 
            {{- include "hpcc.checkDataMount" . | indent 10 }}
          containers:
          - name: {{ $eclAgentType }}-%jobname
{{- include "hpcc.addSecurityContext" . | indent 12 }}
{{ include "hpcc.addImageAttrs" . | indent 12 }}
{{- include "hpcc.addResources" (dict "me" .eclAgentResources) | indent 12 }}
{{- $agentCmd := printf "%s %s %s %%args" $eclAgentType (include "hpcc.configArg" .me) (include "hpcc.daliArg" .root) }}
            workingDir: /var/lib/HPCCSystems
{{- if $postJobCommand }}
            lifecycle:
              preStop:
                exec:
                  command:
                  - >-
                      {{ $misc.postJobCommand }}
{{- end }}
            command: ["/bin/bash"]
            args:
            - -c
            - >-
                {{ $agentCmd }}
{{- if $postJobCommand -}} ;
                {{ $misc.postJobCommand }}
{{- end }}
            volumeMounts:
{{ include "hpcc.addConfigMapVolumeMount" .me | indent 12 }}
{{ include "hpcc.addDataVolumeMount" . | indent 12 }}
{{ include "hpcc.addDllVolumeMount" . | indent 12 }}
{{ include "hpcc.addSecretVolumeMounts" (dict "root" .root "categories" (list "system" "ecl" "storage" ) ) | indent 12 }}
          volumes:
{{ include "hpcc.addConfigMapVolume" .me | indent 10 }}
{{ include "hpcc.addDataVolume" . | indent 10 }}
{{ include "hpcc.addDllVolume" . | indent 10 }}
{{ include "hpcc.addSecretVolumes" (dict "root" .root "categories" (list "system" "ecl" "storage" ) ) | indent 10 }}
          restartPolicy: Never
      backoffLimit: 0
{{- end }}

  thormanager-jobspec.yaml: |
    apiVersion: batch/v1
    kind: Job
    metadata:
      name: thormanager-%jobname
    spec:
      ttlSecondsAfterFinished: 100
      template:
        metadata:
          labels:
            app: thor
            accessDali: "yes"
            accessEsp: "yes"
            job: %jobname
        spec:
          serviceAccountName: hpcc-agent
          initContainers:
            {{- include "hpcc.checkDataMount" . | indent 10 }}
          containers:
          - name: thormanager-%jobname
{{- include "hpcc.addSecurityContext" . | indent 12 }}
{{ include "hpcc.addImageAttrs" . | indent 12 }}
{{- include "hpcc.addResources" (dict "me" $thorScope.managerResources) | indent 12 }}
{{- $thorManagerCmd := printf "thormaster_lcr %s %s %%args" (include "hpcc.configArg" .me) (include "hpcc.daliArg" .root) }}
            workingDir: /var/lib/HPCCSystems
{{- if $postJobCommand }}
            lifecycle:
              preStop:
                exec:
                  command:
                  - >-
                      {{ $misc.postJobCommand }}
{{- end }}
            command: ["/bin/bash"]
            args:
            - -c
            - >-
                {{ $thorManagerCmd }}
{{- if $postJobCommand -}} ;
                {{ $misc.postJobCommand }}
{{- end }}
            volumeMounts:
{{ include "hpcc.addConfigMapVolumeMount" .me | indent 12 }}
{{ include "hpcc.addDataVolumeMount" . | indent 12 }}
{{ include "hpcc.addDllVolumeMount" . | indent 12 }}
{{ include "hpcc.addSecretVolumeMounts" (dict "root" .root "categories" (list "system" "ecl" "storage" ) ) | indent 12 }}
          volumes:
{{ include "hpcc.addConfigMapVolume" .me | indent 10 }}
{{ include "hpcc.addDataVolume" . | indent 10 }}
{{ include "hpcc.addDllVolume" . | indent 10 }}
{{ include "hpcc.addSecretVolumes" (dict "root" .root "categories" (list "system" "ecl" "storage" ) ) | indent 10 }}
          restartPolicy: Never
      backoffLimit: 0

  thorworker-jobspec.yaml: |
    apiVersion: batch/v1
    kind: Job
    metadata:
      name: thorworker-%jobname
    spec:
      parallelism: %numWorkers
      ttlSecondsAfterFinished: 100
      template:
        metadata:
          labels:
            app: thor
            accessEsp: "true"
            job: %jobname
        spec:
          serviceAccountName: hpcc-default
          containers:
          - name: thorworker-%jobname
{{- include "hpcc.addSecurityContext" . | indent 12 }}
{{ include "hpcc.addImageAttrs" . | indent 12 }}
{{- include "hpcc.addResources" (dict "me" $thorScope.workerResources) | indent 12 }}
{{- $thorWorkerCmd := printf "thorslave_lcr %s %s %%args" (include "hpcc.configArg" .me) (include "hpcc.daliArg" .root) }}
            workingDir: /var/lib/HPCCSystems
{{- if $postJobCommand }}
            lifecycle:
              preStop:
                exec:
                  command:
                  - >-
                      {{ $misc.postJobCommand }}
{{- end }}
            command: ["/bin/bash"]
            args:
            - -c
            - >-
                {{ $thorWorkerCmd }}
{{- if $postJobCommand -}} ;
                {{ $misc.postJobCommand }}
{{- end }}
            volumeMounts:
{{ include "hpcc.addConfigMapVolumeMount" .me | indent 12 }}
{{ include "hpcc.addDataVolumeMount" . | indent 12 }}
{{ include "hpcc.addDllVolumeMount" . | indent 12 }}
{{ include "hpcc.addSecretVolumeMounts" (dict "root" .root "categories" (list "system" "ecl" "storage" ) ) | indent 12 }}
          volumes:
{{ include "hpcc.addConfigMapVolume" .me | indent 10 }}
{{ include "hpcc.addDataVolume" . | indent 10 }}
{{ include "hpcc.addDllVolume" . | indent 10 }}
{{ include "hpcc.addSecretVolumes" (dict "root" .root "categories" (list "system" "ecl" "storage" ) ) | indent 10 }}
          restartPolicy: Never
      backoffLimit: 0

  thormanager-networkspec.yaml: |
    apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      name: thormanager-%jobname
    spec:
      podSelector:
        matchLabels:
          app: thor
          job: %jobname
      ingress:
      - from:
        - podSelector:
            matchLabels:
              app: thor
              job: %jobname
      egress:
      - to:
        - podSelector:
            matchLabels:
              app: thor
              job: %jobname
{{- end -}}

{{ range $.Values.thor -}}
{{- if not .disabled -}}
{{- $commonCtx := dict "root" $ "me" . -}}
{{- $_ := set $commonCtx "eclAgentName" (printf "%s-eclagent" .name) -}}
{{- $_ := set $commonCtx "thorAgentName" (printf "%s-thoragent" .name) -}}
{{- $_ := set $commonCtx "eclAgentUseChildProcesses" (hasKey . "eclAgentUseChildProcesses" | ternary .eclAgentUseChildProcesses true) }}
{{- $_ := set $commonCtx "eclAgentReplicas" (.eclAgentReplicas | default 1) }}
{{- $_ := set $commonCtx "thorAgentReplicas" (.thorAgentReplicas | default 1) }}
{{- $configSHA := include "hpcc.thorConfigMap" $commonCtx | sha256sum }}
{{- include "hpcc.checkDefaultStoragePlane" $commonCtx }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $commonCtx.eclAgentName | quote }}
spec:
  replicas: {{ $commonCtx.eclAgentReplicas }}
  selector:
    matchLabels:
      run: {{ $commonCtx.eclAgentName | quote }}
  template:
    metadata:
      labels:
        run: {{ $commonCtx.eclAgentName | quote }}
        accessDali: "yes"
        accessEsp: {{ $commonCtx.eclAgentUseChildProcesses | ternary "yes" "no" | quote }}
      annotations:
        checksum/config: {{ $configSHA }}
    spec:
      serviceAccountName: {{ $commonCtx.eclAgentUseChildProcesses | ternary "hpcc-default" "hpcc-agent" }}
      containers:
      - name: {{ $commonCtx.eclAgentName | quote }}
        workingDir: /var/lib/HPCCSystems
        command: [ agentexec ]
        args: [
                {{ include "hpcc.configArg" . }},
                {{ include "hpcc.daliArg" $ }},
                {{ printf "\"--name=%s\"" .name }}
              ]
{{- include "hpcc.addSecurityContext" $commonCtx | indent 8 }}
{{- if $commonCtx.eclAgentUseChildProcesses }}
{{- include "hpcc.addResources" (dict "me" .eclAgentResources) | indent 8 }}
{{- else if not $.Values.global.privileged }}
{{- include "hpcc.addStubResources" . | indent 8 }}
{{- end }}
{{ include "hpcc.addImageAttrs" $commonCtx | indent 8 }}
        volumeMounts:
{{ include "hpcc.addConfigMapVolumeMount" . | indent 8 }}
{{ include "hpcc.addDataVolumeMount" $commonCtx | indent 8 }}
{{ include "hpcc.addDllVolumeMount" $commonCtx | indent 8 }}
{{ include "hpcc.addSecretVolumeMounts" (dict "root" $ "categories" (list "system" "ecl" "storage" ) ) | indent 8 }}
      volumes:
{{ include "hpcc.addConfigMapVolume" . | indent 6 }}
{{ include "hpcc.addDataVolume" $commonCtx | indent 6 }}
{{ include "hpcc.addDllVolume" $commonCtx | indent 6 }}
{{ include "hpcc.addSecretVolumes" (dict "root" $ "categories" (list "system" "ecl" "storage" ) ) | indent 6 }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $commonCtx.thorAgentName | quote }}
spec:
  replicas: {{ $commonCtx.thorAgentReplicas }}
  selector:
    matchLabels:
      run: {{ $commonCtx.thorAgentName | quote }}
  template:
    metadata:
      labels:
        run: {{ $commonCtx.thorAgentName | quote }}
        accessDali: "yes"
        accessEsp: "no"
      annotations:
        checksum/config: {{ $configSHA }}
    spec:
      serviceAccountName: "hpcc-thoragent"
      containers:
      - name: {{ $commonCtx.thorAgentName | quote }}
        workingDir: /var/lib/HPCCSystems
        command: [ agentexec ]
        args: [
                {{ include "hpcc.configArg" . }},
                {{ "\"--componentTag=thoragent\"" }},
                {{ include "hpcc.daliArg" $ }},
                {{ printf "\"--name=%s\"" .name }}
              ]
{{- include "hpcc.addSecurityContext" $commonCtx | indent 8 }}
{{- if not $.Values.global.privileged }}
{{- include "hpcc.addStubResources" . | indent 8 }}
{{- end }}
{{ include "hpcc.addImageAttrs" $commonCtx | indent 8 }}
        volumeMounts:
{{ include "hpcc.addConfigMapVolumeMount" . | indent 8 }}
{{ include "hpcc.addDataVolumeMount" $commonCtx | indent 8 }}
{{ include "hpcc.addDllVolumeMount" $commonCtx | indent 8 }}
{{ include "hpcc.addSecretVolumeMounts" (dict "root" $ "categories" (list "system" "ecl" "storage" ) ) | indent 8 }}
      volumes:
{{ include "hpcc.addConfigMapVolume" . | indent 6 }}
{{ include "hpcc.addDataVolume" $commonCtx | indent 6 }}
{{ include "hpcc.addDllVolume" $commonCtx | indent 6 }}
{{ include "hpcc.addSecretVolumes" (dict "root" $ "categories" (list "system" "ecl" "storage" ) ) | indent 6 }}
---
kind: ConfigMap
{{ include "hpcc.thorConfigMap" $commonCtx }}
---
{{- end }}
{{- end }}

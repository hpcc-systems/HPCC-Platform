{{ range $.Values.thor -}}
{{- if not .disabled -}}
{{- include "hpcc.checkDefaultStoragePlane" (dict "root" $ "me" .) }}
{{- $eclAgentName := printf "%s-eclagent" .name }}
{{- $thorAgentName := printf "%s-thoragent" .name }}
{{- $eclAgentType := .eclAgentType | default "hthor" }}
{{- $hthorName := printf "%s-%s" .name $eclAgentType }}
{{- $workerName := printf "%s-worker" .name }}
{{- $serviceName := printf "%s-svc" .name }}
{{- $eclAgentUseChildProcesses := hasKey . "eclAgentUseChildProcesses" | ternary .eclAgentUseChildProcesses true }}
{{- $eclAgentReplicas := .eclAgentReplicas | default 1 }}
{{- $thorAgentReplicas := .thorAgentReplicas | default 1 }}
{{- $eclAgentScope := dict "name" $eclAgentName "type" $eclAgentType "useChildProcesses" $eclAgentUseChildProcesses "replicas" $eclAgentReplicas | merge (pick . "keepJobs") }}
{{- $thorAgentScope := dict "name" $thorAgentName "replicas" $thorAgentReplicas  | merge (pick . "keepJobs") }}
{{- $hthorScope := dict "name" $hthorName | merge (pick . "multiJobLinger") }}
{{- $thorScope := omit . "eclagent" "thoragent" "hthor" "logging" "eclAgentResources" "eclAgentUseChildProcesses" "eclAgentReplicas" "thorAgentReplicas" "eclAgentType" }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $eclAgentName | quote }}
spec:
  replicas: {{ $eclAgentReplicas }}
  selector:
    matchLabels:
      run: {{ $eclAgentName | quote }}
  template:
    metadata:
      labels:
        run: {{ $eclAgentName | quote }}
        accessDali: "yes"
        accessEsp: {{ $eclAgentUseChildProcesses | ternary "yes" "no" | quote }}
    spec:
      {{- include "hpcc.placementsByPodTargetType" (dict "root" $ "pod" $eclAgentName "target" .name "type" "thor") | indent 6 }}
      serviceAccountName: {{ $eclAgentUseChildProcesses | ternary "hpcc-default" "hpcc-agent" }}
      containers:
      - name: {{ $eclAgentName | quote }}
        workingDir: /var/lib/HPCCSystems
        command: [ agentexec ]
        args: [
                {{ include "hpcc.configArg" . }},
                {{ include "hpcc.daliArg" $ }},
                {{ printf "\"--name=%s\"" .name }}
              ]
{{- include "hpcc.addSecurityContext" (dict "root" $ "me" .) | indent 8 }}
{{- if $eclAgentUseChildProcesses }}
{{- include "hpcc.addResources" (dict "me" .eclAgentResources) | indent 8 }}
{{- else if not $.Values.global.privileged }}
{{- include "hpcc.addStubResources" . | indent 8 }}
{{- end }}
{{ include "hpcc.addImageAttrs" (dict "root" $ "me" .) | indent 8 }}
        volumeMounts:
{{ include "hpcc.addConfigMapVolumeMount" . | indent 8 }}
{{ include "hpcc.addDataVolumeMount" (dict "root" $ "me" . ) | indent 8 }}
{{ include "hpcc.addDllVolumeMount" $ | indent 8 }}
{{ include "hpcc.addSecretVolumeMounts" (dict "root" $ "categories" (list "system" "ecl" "storage" ) ) | indent 8 }}
      volumes:
{{ include "hpcc.addConfigMapVolume" . | indent 6 }}
{{ include "hpcc.addDataVolume" (dict "root" $ "me" . ) | indent 6 }}
{{ include "hpcc.addDllVolume" $ | indent 6 }}
{{ include "hpcc.addSecretVolumes" (dict "root" $ "categories" (list "system" "ecl" "storage" ) ) | indent 6 }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $thorAgentName | quote }}
spec:
  replicas: {{ $thorAgentReplicas }}
  selector:
    matchLabels:
      run: {{ $thorAgentName | quote }}
  template:
    metadata:
      labels:
        run: {{ $thorAgentName | quote }}
        accessDali: "yes"
        accessEsp: "no"
    spec:
      {{- include "hpcc.placementsByPodTargetType" (dict "root" $ "pod" $thorAgentName "target" .name "type" "thor") | indent 6 }}
      serviceAccountName: "hpcc-thoragent"
      containers:
      - name: {{ $thorAgentName | quote }}
        workingDir: /var/lib/HPCCSystems
        command: [ agentexec ]
        args: [
                {{ include "hpcc.configArg" . }},
                {{ "\"--componentTag=thoragent\"" }},
                {{ include "hpcc.daliArg" $ }},
                {{ printf "\"--name=%s\"" .name }}
              ]
{{- include "hpcc.addSecurityContext" (dict "root" $ "me" .) | indent 8 }}
{{- if not $.Values.global.privileged }}
{{- include "hpcc.addStubResources" . | indent 8 }}
{{- end }}
{{ include "hpcc.addImageAttrs" (dict "root" $ "me" .) | indent 8 }}
        volumeMounts:
{{ include "hpcc.addConfigMapVolumeMount" . | indent 8 }}
{{ include "hpcc.addDataVolumeMount" (dict "root" $ "me" . ) | indent 8 }}
{{ include "hpcc.addDllVolumeMount" $ | indent 8 }}
{{ include "hpcc.addSecretVolumeMounts" (dict "root" $ "categories" (list "system" "ecl" "storage" ) ) | indent 8 }}
      volumes:
{{ include "hpcc.addConfigMapVolume" . | indent 6 }}
{{ include "hpcc.addDataVolume" (dict "root" $ "me" . ) | indent 6 }}
{{ include "hpcc.addDllVolume" $ | indent 6 }}
{{ include "hpcc.addSecretVolumes" (dict "root" $ "categories" (list "system" "ecl" "storage" ) ) | indent 6 }}
---
kind: ConfigMap 
apiVersion: v1 
metadata:
  name: {{ .name }}-configmap 
data:
  {{ .name }}.yaml: |
    version: 1.0
    thor:
{{ toYaml $thorScope | indent 6 }}
{{- include "hpcc.generateLoggingConfig" (dict "root" $ "me" .) | indent 6 }}
{{ include "hpcc.generateVaultConfig" (dict "root" $ "categories" (list "storage" "ecl" "ecl-user" ) ) | indent 6 }}
    {{ $eclAgentType }}: # hthor or roxie
{{ toYaml $hthorScope | indent 6 }}
      platform:
        type: "thor"
        width: {{ mul (.numWorkers | default 1) ( .channelsPerWorker | default 1) }}
{{- include "hpcc.generateLoggingConfig" (dict "root" $ "me" . ) | indent 6 }}
{{ include "hpcc.generateVaultConfig" (dict "root" $ "categories" (list "storage" "ecl" "ecl-user" ) ) | indent 6 }}
    eclagent: # main agent Q handler
{{ toYaml $eclAgentScope | indent 6 }}
{{- include "hpcc.generateLoggingConfig" (dict "root" $ "me" .) | indent 6 }}
    thoragent: # Thor graph handler
{{ toYaml $thorAgentScope | indent 6 }}
{{- include "hpcc.generateLoggingConfig" (dict "root" $ "me" .) | indent 6 }}
      type: thor
    global:
{{ include "hpcc.generateGlobalConfigMap" $ | indent 6 }}

{{- if not $eclAgentUseChildProcesses }}
{{- $eclAgentJobNamePrefix := printf "%s-%s-" .name  $eclAgentType }}
  {{ $eclAgentType }}-jobspec.yaml: |
    apiVersion: batch/v1
    kind: Job
    metadata:
      name: {{ $eclAgentType }}-%jobname
    spec:
      ttlSecondsAfterFinished: 100
      template:
        metadata:
          labels:
            accessDali: "yes"
            accessEsp: "yes"
        spec:
          {{- include "hpcc.placementsByPodTargetType" (dict "root" $ "pod" $eclAgentJobNamePrefix "target" .name "type" "thor") | indent 10 }}
          serviceAccountName: "hpcc-agent"
          initContainers: 
            {{- include "hpcc.checkDataMount" (dict "root" $) | indent 10 }}
          containers:
          - name: {{ $eclAgentType }}-%jobname
{{- include "hpcc.addSecurityContext" (dict "root" $ "me" .) | indent 12 }}
{{ include "hpcc.addImageAttrs" (dict "root" $ "me" .) | indent 12 }}
{{- include "hpcc.addResources" (dict "me" .eclAgentResources) | indent 12 }}
            workingDir: /var/lib/HPCCSystems
            command: [ {{ $eclAgentType | quote }} ] 
            args: [
                        {{ include "hpcc.configArg" . }},
                        {{ include "hpcc.daliArg" $ }},
                        %args
                     ]
            volumeMounts:
{{ include "hpcc.addConfigMapVolumeMount" . | indent 12 }}
{{ include "hpcc.addDataVolumeMount" (dict "root" $ "me" . ) | indent 12 }}
{{ include "hpcc.addDllVolumeMount" $ | indent 12 }}
{{ include "hpcc.addSecretVolumeMounts" (dict "root" $ "categories" (list "system" "ecl" "storage" ) ) | indent 12 }}
          volumes:
{{ include "hpcc.addConfigMapVolume" . | indent 10 }}
{{ include "hpcc.addDataVolume" (dict "root" $ "me" . ) | indent 10 }}
{{ include "hpcc.addDllVolume" $ | indent 10 }}
{{ include "hpcc.addSecretVolumes" (dict "root" $ "categories" (list "system" "ecl" "storage" ) ) | indent 10 }}
          restartPolicy: Never
      backoffLimit: 0
{{- end }}

  {{- $thorMgrJobNamePrefix := printf "%s-thormanager-" .name }}
  thormanager-jobspec.yaml: |
    apiVersion: batch/v1
    kind: Job
    metadata:
      name: thormanager-%jobname
    spec:
      ttlSecondsAfterFinished: 100
      template:
        metadata:
          labels:
            app: thor
            accessDali: "yes"
            accessEsp: "yes"
            job: %jobname
        spec:
          {{- include "hpcc.placementsByPodTargetType" (dict "root" $ "pod" $thorMgrJobNamePrefix "target" .name "type" "thor") | indent 10 }}
          serviceAccountName: hpcc-agent
          initContainers:
            {{- include "hpcc.checkDataMount" (dict "root" $) | indent 10 }}
          containers:
          - name: thormanager-%jobname
{{- include "hpcc.addSecurityContext" (dict "root" $ "me" .) | indent 12 }}
{{ include "hpcc.addImageAttrs" (dict "root" $ "me" .) | indent 12 }}
{{- include "hpcc.addResources" (dict "me" .managerResources) | indent 12 }}
            workingDir: /var/lib/HPCCSystems
            command: [ thormaster_lcr ] 
            args: [
                    {{ include "hpcc.configArg" . }},
                    {{ include "hpcc.daliArg" $ }},
                    %args
                  ]
            volumeMounts:
{{ include "hpcc.addConfigMapVolumeMount" . | indent 12 }}
{{ include "hpcc.addDataVolumeMount" (dict "root" $ "me" . ) | indent 12 }}
{{ include "hpcc.addDllVolumeMount" $ | indent 12 }}
{{ include "hpcc.addSecretVolumeMounts" (dict "root" $ "categories" (list "system" "ecl" "storage" ) ) | indent 12 }}
          volumes:
{{ include "hpcc.addConfigMapVolume" . | indent 10 }}
{{ include "hpcc.addDataVolume" (dict "root" $ "me" . ) | indent 10 }}
{{ include "hpcc.addDllVolume" $ | indent 10 }}
{{ include "hpcc.addSecretVolumes" (dict "root" $ "categories" (list "system" "ecl" "storage" ) ) | indent 10 }}
          restartPolicy: Never
      backoffLimit: 0

  {{- $thorWkrJobNamePrefix := printf "%s-thorworker-" .name }}
  thorworker-jobspec.yaml: |
    apiVersion: batch/v1
    kind: Job
    metadata:
      name: thorworker-%jobname
    spec:
      {{- include "hpcc.placementsByPodTargetType" (dict "root" $ "pod" $thorWkrJobNamePrefix "target" .name "type" "thor") | indent 6 }}
      parallelism: %numWorkers
      ttlSecondsAfterFinished: 100
      template:
        metadata:
          labels:
            app: thor
            accessEsp: "true"
            job: %jobname
        spec:
          serviceAccountName: hpcc-default
          containers:
          - name: thorworker-%jobname
{{- include "hpcc.addSecurityContext" (dict "root" $ "me" .) | indent 12 }}
{{ include "hpcc.addImageAttrs" (dict "root" $ "me" .) | indent 12 }}
{{- include "hpcc.addResources" (dict "me" .workerResources) | indent 12 }}
            workingDir: /var/lib/HPCCSystems
            command: [ thorslave_lcr ] 
            args: [
                    {{ include "hpcc.configArg" . }},
                    {{ include "hpcc.daliArg" $ }},
                    %args
                  ]
            volumeMounts:
{{ include "hpcc.addConfigMapVolumeMount" . | indent 12 }}
{{ include "hpcc.addDataVolumeMount" (dict "root" $ "me" . ) | indent 12 }}
{{ include "hpcc.addDllVolumeMount" $ | indent 12 }}
{{ include "hpcc.addSecretVolumeMounts" (dict "root" $ "categories" (list "system" "ecl" "storage" ) ) | indent 12 }}
          volumes:
{{ include "hpcc.addConfigMapVolume" . | indent 10 }}
{{ include "hpcc.addDataVolume" (dict "root" $ "me" . ) | indent 10 }}
{{ include "hpcc.addDllVolume" $ | indent 10 }}
{{ include "hpcc.addSecretVolumes" (dict "root" $ "categories" (list "system" "ecl" "storage" ) ) | indent 10 }}
          restartPolicy: Never
      backoffLimit: 0

  thormanager-networkspec.yaml: |
    apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      name: thormanager-%jobname
    spec:
      podSelector:
        matchLabels:
          app: thor
          job: %jobname
      ingress:
      - from:
        - podSelector:
            matchLabels:
              app: thor
              job: %jobname
      egress:
      - to:
        - podSelector:
            matchLabels:
              app: thor
              job: %jobname
---
{{- end }}
{{- end }}

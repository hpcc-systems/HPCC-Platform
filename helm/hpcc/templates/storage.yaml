{{/*

---  DO NOT EDIT THIS FILE - all configuration of HPCC platform should be done via values.yaml ----

##############################################################################

    HPCC SYSTEMS software Copyright (C) 2021 HPCC SystemsÂ®.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

##############################################################################

*/}}
{{- /* check planes are unique, have valid names, and do not define the mount in multiple ways */ -}}
{{- $storage := (.Values.storage | default dict) }}
{{- $planes := ($storage.planes | default list) -}}
{{- $previousPlanes := dict -}}
{{- $previousMounts := dict -}}
{{- range $plane := $planes -}}
 {{- if (ne (lower $plane.name) $plane.name) -}}
  {{- required (printf "Name of storage plane '%s' must not contain upper case" $plane.name) nil -}}
 {{- end -}}
 {{- if hasKey $previousPlanes $plane.name -}}
  {{- required (printf "Storage plane '%s' is defined more than once" $plane.name) nil -}}
 {{- end -}}
 {{- $_ := set $previousPlanes $plane.name true -}}
 {{- $rawPlane := omit $plane "name" "category" "subPath" -}}
 {{- if hasKey $previousMounts $plane.prefix -}}
  {{- /* Should this restrict if has a pvc or a storage class? */ -}}
  {{- if not (deepEqual (get $previousMounts $plane.prefix) $rawPlane) -}}
    {{- required (printf "Multiple incompatible planes refer to prefix '%s'" $plane.prefix) nil -}}
  {{- end -}}
 {{- end -}}
 {{- $_ := set $previousMounts $plane.prefix $rawPlane -}}
{{- end -}}
{{- /* check that planes exist for each of the required planes */ -}}
{{ $need := dict }}
{{- range $.Values.dali -}}
 {{- if not .disabled -}}
   {{- $_ := set $need "dali" true -}}
 {{- end }}
{{ end -}}
{{- range $.Values.eclccserver -}}
 {{- if not .disabled -}}
   {{- $_ := set $need "dll" true -}}
 {{- end }}
{{ end -}}
{{- range $.Values.eclscheduler -}}
 {{- if not .disabled -}}
   {{- $_ := set $need "dali" true -}}
   {{- $_ := set $need "dll" true -}}
 {{- end }}
{{ end -}}
{{- range $.Values.esp -}}
 {{- if not .disabled -}}
  {{- /* placeholder .. if any planes are required */ -}}
 {{- end }}
{{ end -}}
{{- range $.Values.eclagent -}}
 {{- if not .disabled -}}
   {{- $_ := set $need "data" true -}}
   {{- $_ := set $need "dll" true -}}
   {{- $_ := set $need "dali" true -}}
 {{- end }}
{{ end -}}
{{- range $.Values.roxie -}}
 {{- if not .disabled -}}
   {{- $_ := set $need "data" true -}}
   {{- $_ := set $need "dll" true -}}
 {{- end }}
{{ end -}}
{{- range $.Values.thor -}}
 {{- if not .disabled -}}
   {{- $_ := set $need "data" true -}}
   {{- $_ := set $need "dll" true -}}
   {{- $_ := set $need "dali" true -}}
 {{- end }}
{{ end -}}
{{- range $category, $value := $need }}
 {{- $_ := required (printf "No plane defined for category '%s'" $category) (include "hpcc.getFirstPlaneForCategory" (dict "root" $ "category" $category)) }}
{{- end -}}
{{- /* finally generate the pvcs for each of the storage planes that need one */ -}}
{{- include "hpcc.addPVCsFromPlanes" . }}

{{/*

---  DO NOT EDIT THIS FILE - all configuration of HPCC platform should be done via values.yaml ----

##############################################################################

    HPCC SYSTEMS software Copyright (C) 2021 HPCC SystemsÂ®.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

##############################################################################

*/}}
{{/*
Agent configmap
Pass in dict with root and me
*/}}
{{- define "hpcc.agentConfigMap" }}
{{- $apptype := .me.type | default "hthor" -}}
{{- $appJobName := printf "%s-job-_HPCC_JOBNAME_" $apptype }}
apiVersion: v1
metadata:
  name: {{ .me.name }}-configmap
data:
  {{ .me.name }}.yaml:
    version: 1.0
    eclagent:
{{ toYaml (omit .me "logging" "tracing" "env") | indent 6 }}
{{- include "hpcc.generateLoggingConfig" . | indent 6 }}
{{- include "hpcc.generateTracingConfig" . | indent 6 }}
    {{ $apptype }}:
{{ toYaml (omit .me "logging" "tracing" "env") | indent 6 }}
{{- include "hpcc.generateLoggingConfig" . | indent 6 }}
{{- include "hpcc.generateTracingConfig" . | indent 6 }}
{{ include "hpcc.generateVaultConfig" . | indent 6 }}
      queues:
{{ include "hpcc.generateConfigMapQueues" .root | indent 6 }}
    global:
{{ include "hpcc.generateGlobalConfigMap" .root | indent 6 }}
{{- if not .me.useChildProcesses }}
{{- $misc := .root.Values.global.misc | default dict }}
  {{ $apptype }}-job.yaml:
    apiVersion: batch/v1
    kind: Job
    metadata:
      name: {{ $appJobName }}
    spec:
      ttlSecondsAfterFinished: 100
      template:
        metadata:
          labels:
            {{- include "hpcc.addStandardLabels" (dict "root" $ "component" $apptype "name" "eclagent" "instance" $appJobName "instanceOf" (printf "%s-job" .me.name)) | indent 12 }}
            accessDali: "yes"
            accessSasha: "yes"
            accessEsp: "yes"
            {{- include "hpcc.generateHelmVersion" . | nindent 12 }}
{{- if hasKey .me "labels" }}
{{ toYaml .me.labels | indent 12 }}
{{- end }}
          annotations:
            {{- include "hpcc.generateAnnotations" . | indent 12 }}
        spec:
          {{- include "hpcc.placementsByJobTargetType" (dict "root" .root "job" $appJobName "target" .me.name "type" "eclagent") | indent 10 }}
          serviceAccountName: "hpcc-agent"
{{- if $misc.postJobCommandViaSidecar }}
          shareProcessNamespace: true
{{- end }}
          terminationGracePeriodSeconds: {{ .terminationGracePeriodSeconds | default 600 }}
          initContainers:
          {{- include "hpcc.createConfigInitContainers" . | indent 10 }}
          {{- include "hpcc.addImagePullSecrets" . | nindent 10 -}}
          containers:
{{- if $misc.postJobCommandViaSidecar }}
{{ include "hpcc.addWaitAndRunContainer" (. | merge (dict "command" $misc.postJobCommand)) | indent 10 }}
{{- end }}
          - name: {{ $appJobName }}
{{- include "hpcc.addSecurityContext" . | indent 12 }}
{{ include "hpcc.addImageAttrs" . | indent 12 }}
{{- include "hpcc.addResources" (dict "me" .me.resources "root" .root) | indent 12 }}
{{- include "hpcc.addCommandAndLifecycle" (. | merge (dict "isJob" true "process" $apptype "extraArgs" (list "_HPCC_ARGS_") "component" "ECL Agent" "optional" false)) | nindent 12 }}
            env:
{{- include "hpcc.mergeEnvironments" (dict "env" (append (.env | default list) (dict "name" "MY_JOB_NAME" "value" "_HPCC_JOBNAME_")) "defaultArenas" 1) | nindent 12 }}
{{- include "hpcc.generateImageEnv" . | nindent 12 }}
            workingDir: /var/lib/HPCCSystems
            volumeMounts:
{{ include "hpcc.addEphemeralVolumeMounts" .me | indent 12 }}
{{ include "hpcc.addVolumeMounts" . | indent 12 }}
{{ include "hpcc.addSecretVolumeMounts" . | indent 12 }}
{{ include "hpcc.addVaultClientCertificateVolumeMounts" . | indent 12 }}
{{ include "hpcc.addCertificateVolumeMount" (dict "root" .root "name" .me.name "component" $apptype "includeRemote" true) | indent 12 }}
{{- if $misc.postJobCommandViaSidecar }}
{{ include "hpcc.addWaitAndRunVolumeMount" . | indent 12 }}
{{- end }}
{{- include "hpcc.addPostRunContainer" (. | merge (dict "isJob" true)) | nindent 10 }}
          volumes:
{{ include "hpcc.addEphemeralVolumes" .me | indent 10 }}
{{ include "hpcc.addVolumes" . | indent 10 }}
{{ include "hpcc.addSecretVolumes" . | indent 10 }}
{{ include "hpcc.addVaultClientCertificateVolumes" . | indent 10 }}
{{ include "hpcc.addCertificateVolume" (dict "root" .root "name" .me.name "component" $apptype "includeRemote" true) | indent 10 }}
{{- if $misc.postJobCommandViaSidecar }}
{{ include "hpcc.addWaitAndRunVolume" . | indent 10 }}
{{- end }}
          restartPolicy: Never
      backoffLimit: 0
{{- end }}
{{- end -}}

{{ range $.Values.eclagent -}}
{{- if not .disabled -}}
{{- $env := concat ($.Values.global.env | default list) (.env | default list) -}}
{{- $apptype := .type | default "hthor" -}}
{{- $secretsCategories := list "system" "eclUser" "ecl" "storage" }}
{{- $enginePlaneDetails := dict -}}
{{- $_ := include "hpcc.getEnginePlanes" (dict "root" $ "me" . "result" $enginePlaneDetails) -}}
{{- $commonCtx := dict "root" $ "me" . "secretsCategories" $secretsCategories "includeCategories" $enginePlaneDetails.planeCategories "includeNames" $enginePlaneDetails.namedPlanes "env" $env }}
{{- $configSHA := include "hpcc.getConfigSHA" ($commonCtx | merge (dict "configMapHelper" "hpcc.agentConfigMap" "component" "eclagent" "excludeKeys" "global,hthor::queues" "lifeCycleCtx" (dict "containers" list))) }}
{{- $_ := set $commonCtx "lifeCycleCtx" (dict "containers" list) -}}
{{- include "hpcc.checkDefaultStoragePlane" $commonCtx }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .name | quote }}
spec:
  replicas: {{ .replicas | default 1 }}
  selector:
    matchLabels:
      run: {{ .name | quote }}
  template:
    metadata:
      labels:
        {{- include "hpcc.addStandardLabels" (dict "root" $ "component" $apptype "name" "eclagent" "instance" .name) | indent 8 }}
        run: {{ .name | quote }}
        accessDali: "yes"
        accessSasha: {{ .useChildProcesses | default false | ternary "yes" "no" | quote }}
        accessEsp: {{ .useChildProcesses | default false | ternary "yes" "no" | quote }}
        {{- include "hpcc.generateHelmVersion" . | nindent 8 }}
{{- if hasKey . "labels" }}
{{ toYaml .labels | indent 8 }}
{{- end }}
      annotations:
        checksum/config: {{ $configSHA }}
        {{- include "hpcc.generateAnnotations" $commonCtx | indent 8 }}
    spec:
      {{- include "hpcc.placementsByPodTargetType" (dict "root" $ "pod" .name "target" .name "type" "eclagent") | indent 6 }}
      serviceAccountName: "hpcc-agent"
      terminationGracePeriodSeconds: {{ .terminationGracePeriodSeconds | default 600 }}
      initContainers:
      {{- include "hpcc.createConfigInitContainers" $commonCtx | indent 6 }}
      {{- include "hpcc.addImagePullSecrets" $commonCtx | nindent 6 -}}
      containers:
      - name: {{ .name | quote }}
        workingDir: /var/lib/HPCCSystems
{{- include "hpcc.addCommandAndLifecycle" ($commonCtx | merge (dict "process" "agentexec" "component" "ECL Agent" "optional" false)) | nindent 8 }}
        env:
{{ include "hpcc.mergeEnvironments" (dict "env" $env "defaultArenas" 1) | indent 8 -}}
        - name: "SENTINEL"
          value: "/tmp/{{ .name }}.sentinel"
{{ include "hpcc.addSentinelProbes" . | indent 8 }}
{{- include "hpcc.addSecurityContext" $commonCtx | indent 8 }}
{{- if .useChildProcesses }}
{{- include "hpcc.addResources" (dict "me" .resources "root" $) | indent 8 }}
{{- else }}
{{- include "hpcc.addStubResources" (dict "me" .stubResources "root" $) | indent 8 }}
{{- end }}
{{ include "hpcc.addImageAttrs" $commonCtx | indent 8 }}
        volumeMounts:
{{ include "hpcc.addEphemeralVolumeMounts" . | indent 8 }}
{{ include "hpcc.addVolumeMounts" $commonCtx | indent 8 }}
{{ include "hpcc.addSecretVolumeMounts" $commonCtx | indent 8 }}
{{ include "hpcc.addVaultClientCertificateVolumeMounts" $commonCtx | indent 8 }}
{{ include "hpcc.addCertificateVolumeMount" (dict "root" $ "name" .name "component" $apptype "includeRemote" true) | indent 8 }}
{{- include "hpcc.addPostRunContainer" $commonCtx | nindent 6 }}
      volumes:
{{ include "hpcc.addEphemeralVolumes" . | indent 6 }}
{{ include "hpcc.addVolumes" $commonCtx | indent 6 }}
{{ include "hpcc.addSecretVolumes" $commonCtx | indent 6 }}
{{ include "hpcc.addVaultClientCertificateVolumes" $commonCtx | indent 6 }}
{{ include "hpcc.addCertificateVolume" (dict "root" $ "name" .name "component" $apptype "includeRemote" true) | indent 6 }}
---
{{- if and (hasKey . "hpa") .useChildProcesses }}
 {{- include "hpcc.addHorizontalPodAutoscaler" (dict "name" .name "kind" "Deployment" "hpa" .hpa) }}
{{- end }}
---
kind: ConfigMap
{{ include "hpcc.generateConfig" ((omit $commonCtx "lifeCycleCtx") | merge (dict "configMapHelper" "hpcc.agentConfigMap" "lifeCycleCtx" (dict "containers" list))) }}
---
{{ include "hpcc.addCertificate" (dict "root" $ "name" .name "component" $apptype "includeRemote" true) }}
---
{{- $egressedPodLabels := list (ternary .name (printf "%s-job" .name) (.useChildProcesses | default false)) -}}
{{- include "hpcc.addEgress" (dict "root" $ "me" . "labels" $egressedPodLabels) | nindent 0 -}}
{{- end }}
{{- end }}

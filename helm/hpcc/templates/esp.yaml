{{/*
Esp configmap
Pass in dict with root and me
*/}}
{{- define "hpcc.espConfigMap" -}}
apiVersion: v1
metadata:
  name: {{ .me.name }}-configmap
data:
  {{ .me.name }}.yaml: |
    version: 1.0
    esp:
{{ toYaml (omit .me "logging" "metrics") | indent 6 }}
{{- include "hpcc.generateLoggingConfig" . | indent 6 }}
{{- include "hpcc.generateMetricsConfig" . | indent 6 }}
{{- if and .root.Values.certificates .root.Values.certificates.enabled }}
 {{- if not (hasKey .me "tls" )}}
      tls: true
 {{- end }}
      tls_config:
 {{- if .me.public }}
        certificate: /opt/HPCCSystems/secrets/certificates/public/tls.crt
        privatekey: /opt/HPCCSystems/secrets/certificates/public/tls.key
 {{- else }}
        certificate: /opt/HPCCSystems/secrets/certificates/local/tls.crt
        privatekey: /opt/HPCCSystems/secrets/certificates/local/tls.key
        verify:
          enable: true
          address_match: false
          accept_selfsigned: false
          trusted_peers: [ anyone ]
          ca_certificates:
            path: "/opt/HPCCSystems/secrets/certificates/local/ca.crt"
 {{- end }}
{{- else if not (hasKey .me "tls" )}}
      tls: false
{{- end }}
      queues:
{{ include "hpcc.generateConfigMapQueues" .root | indent 6 }}
      dfuQueues:
{{- include "hpcc.generateConfigDfuQueues" . | indent 6}}
      services:
{{ include "hpcc.generateConfigMapServices" .root | indent 6 }}
{{ include "hpcc.generateVaultConfig" . | indent 6 }}
    global:
{{ include "hpcc.generateGlobalConfigMap" .root | indent 6 }}
{{- end -}}

{{ range $.Values.esp -}}
{{- if not .disabled -}}
{{- $application := .application | default "eclwatch" -}}
{{- $secretsCategories := ternary (list "storage" "esp" "codeSign" "codeVerify" "authn")  (list "storage" "esp") (eq $application "eclwatch") -}}
{{- $includeStorageLabels := ternary (list "lz" "data" "") (list "data" "") (eq $application "eclwatch") -}}
{{- $commonCtx := dict "root" $ "me" . "secretsCategories" $secretsCategories  "includeLabels" $includeStorageLabels -}}
{{- $configSHA := include "hpcc.espConfigMap" $commonCtx | sha256sum }}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .name | quote }}
spec:
  replicas: {{ .replicas | default 1 }}
  selector:
    matchLabels:
      run: {{ .name | quote }}
  template:
    metadata:
      labels:
        run: {{ .name | quote }}
        accessDali: "yes"
        app: {{ $application }}
      annotations:
        checksum/config: {{ $configSHA }}
    spec:
      {{- include "hpcc.placementsByPodTargetType" (dict "root" $ "pod" .name "type" "esp") | indent 6 }}
      serviceAccountName: "hpcc-default"
      containers:
      - name: {{ .name | quote }}
        workingDir: /var/lib/HPCCSystems
        command: [ esp ] 
        args: [
                {{ printf "--application=%s" $application | quote }},
                {{ include "hpcc.configArg" . }},
                {{ include "hpcc.daliArg" $ }}
              ]
{{ include "hpcc.addSentinelProbes" . | indent 8 }}
{{- include "hpcc.addSecurityContext" $commonCtx | indent 8 }}
{{- include "hpcc.addResources" (dict "me" .resources) | indent 8 }}
{{ include "hpcc.addImageAttrs" $commonCtx | indent 8 }}
        volumeMounts:
{{ include "hpcc.addConfigMapVolumeMount" . | indent 8 }}
{{ include "hpcc.addVolumeMounts" $commonCtx | indent 8 }}
{{ include "hpcc.addDllVolumeMount" $commonCtx | indent 8 }}
{{ include "hpcc.addSecretVolumeMounts" $commonCtx | indent 8 }}
{{ include "hpcc.addCertificateVolumeMount" (dict "root" $ "component" $application "name" .name  "certificate" .certificate "external" (and (hasKey . "public") .public)) | indent 8 }}
      volumes:
{{ include "hpcc.addConfigMapVolume" . | indent 6 }}
{{ include "hpcc.addVolumes" $commonCtx | indent 6 }}
{{ include "hpcc.addDllVolume" $commonCtx | indent 6 }}
{{ include "hpcc.addSecretVolumes" $commonCtx | indent 6 }}
{{ include "hpcc.addCertificateVolume" (dict "root" $ "component" $application "name" .name "certificate" .certificate "external" (and (hasKey . "public") .public)) | indent 6 }}
---
kind: ConfigMap
{{ include "hpcc.espConfigMap" $commonCtx }}

---
apiVersion: v1
kind: Service
metadata:
  name: {{ .name | quote }}
spec:
  ports:
  - port: {{ required "servicePort must be specified" .servicePort }}
    protocol: TCP
    targetPort: {{ .port | default 8880 }}
  selector:
    run: {{ .name | quote }}
  type: {{ .public | ternary "LoadBalancer" "ClusterIP" }}
---
{{ include "hpcc.addCertificate" (dict "root" $ "name" .name "service" . "component" $application "external" (and (hasKey . "public") .public)) }}
{{- end }}
{{- end }}

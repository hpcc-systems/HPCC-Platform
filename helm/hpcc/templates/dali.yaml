{{/*

---  DO NOT EDIT THIS FILE - all configuration of HPCC platform should be done via values.yaml ----
  
##############################################################################

    HPCC SYSTEMS software Copyright (C) 2021 HPCC SystemsÂ®.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    
##############################################################################

*/}}

{{/*
Return true if Dali setup as exposed service with directio enabled
Pass in root and me
*/}}
{{- define "hpcc.isForeignAccessConfigured" }}
{{- $service := .me.service | default dict -}}
{{- $visibility := $service.visibility | default "cluster" -}}
{{- if (not (eq $visibility "cluster")) -}}
 {{ range .root.Values.dafilesrv -}}
  {{- if not .disabled -}}
   {{- if (eq "directio" .application) -}}
true
   {{- end -}}
  {{- end -}}
 {{- end -}}
{{- end }}
{{- end -}}


{{ range $dali := $.Values.dali -}}
{{- if not $dali.disabled -}}
{{- $env := concat ($.Values.global.env | default list) (.env | default list) -}}
{{- $daliPlaneIncludeCategories := list "dali" "debug" -}}
{{- $commonCtx := dict "root" $ "me" $dali "includeCategories" $daliPlaneIncludeCategories "env" $env -}}
{{- $daliSecretsCategories := list "system" "authn" -}}
{{- $tmpDaliScope := dict "aggregateSashaSecretsCategories" list "aggregatePlaneCategories" $daliPlaneIncludeCategories "aggregateSashaNamedPlanes" list -}}
{{- $daliSashaServicesCtx := dict "services" ($dali.services | default dict) -}}
{{- include "hpcc.getSashaServices" $daliSashaServicesCtx -}}
{{- range $sashaName, $_sasha := $daliSashaServicesCtx.services -}}
 {{- $sasha := deepCopy ($_sasha | default dict) -}}
 {{- $_ := set $sasha "name" $sashaName -}}
 {{- $sashaAccess := splitList " " (include "hpcc.getSashaServiceAccess" $sasha) -}}
 {{- $sashaPlaneCategories := list (include "hpcc.getSashaPlanesFromAccess" (dict "access" $sashaAccess)) -}}
 {{- $_ := set $tmpDaliScope "aggregatePlaneCategories" ((concat $tmpDaliScope.aggregatePlaneCategories $sashaPlaneCategories) | uniq) -}}
 {{- $sashaServiceSecretsCategories := concat ((or (has "data" $sashaAccess) (has "dalidata" $sashaAccess)) | ternary (list "storage") list) $daliSecretsCategories -}}
 {{- $_ := set $tmpDaliScope "aggregateSashaSecretsCategories" ((concat $tmpDaliScope.aggregateSashaSecretsCategories $sashaServiceSecretsCategories) | uniq) -}}
 {{- if hasKey $sasha "plane" -}}
  {{- $sashaStoragePlane := $sasha.plane | default (include "hpcc.getFirstPlaneForCategory" (dict "root" $ "category" "sasha")) -}}
  {{- $_ := set $tmpDaliScope "aggregateSashaNamedPlanes" ((append $tmpDaliScope.aggregateSashaNamedPlanes $sashaStoragePlane) | uniq) -}}
 {{- end -}}
{{- end }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $dali.name | quote }}
spec:
  replicas: 1
  selector:
    matchLabels:
      run: {{ $dali.name | quote }}
      server: {{ $dali.name | quote }}
      app: dali
  template:
    metadata:
      labels:
        {{- include "hpcc.addStandardLabels" (dict "root" $ "component" "dali" "name" "dali" "instance" $dali.name) | indent 8 }}
        run: {{ $dali.name | quote }}
        server: {{ $dali.name | quote }}
        app: dali
        helmVersion: 8.10.5-closedown0
{{- if hasKey $.Values.global "metrics" }}
 {{- include "hpcc.generateMetricsReporterLabel" $.Values.global.metrics | nindent 8 }}
{{- end }}
{{- if hasKey $dali "labels" }}
{{ toYaml $dali.labels | indent 8 }}
{{- end }}
{{- if or (hasKey $dali "annotations") (hasKey $.Values.global "metrics") }}
      annotations:
 {{- if hasKey $.Values.global "metrics" }}
  {{- include "hpcc.addPrometheusScrapeAnnotations" $.Values.global.metrics | nindent 8 }}
 {{- end }}
 {{- if hasKey $dali "annotations" }}
  {{- toYaml $dali.annotations | nindent 8 }}
 {{- end }}
{{- end }}
    spec:
      {{- include "hpcc.placementsByPodTargetType" (dict "root" $ "pod" $dali.name "type" "dali") | indent 6 }}
      serviceAccountName: "hpcc-dali"
      initContainers: 
      {{- include "hpcc.changePlaneMountPerms" (dict "root" $ "includeCategories" $tmpDaliScope.aggregatePlaneCategories "includeNames" $tmpDaliScope.aggregateSashaNamedPlanes) | indent 6 }}
      {{- include "hpcc.addImagePullSecrets" $commonCtx | nindent 6 -}}
      containers:
      - name: {{ $dali.name | quote }}
        workingDir: /var/lib/HPCCSystems
        command: [ {{ include "hpcc.componentCommand" (dict "me" $dali "root" $ "process" "daserver") }} ] 
        args: [ {{- include "hpcc.componentStartArgs" (dict "me" $dali "root" $ "process" "daserver") | nindent 16 }}
                {{ include "hpcc.configArg" $dali }}
              ]
        env:
{{ include "hpcc.mergeEnvironments" $env | indent 8 -}}
        - name: "SENTINEL"
          value: "/tmp/{{ $dali.name }}.sentinel"
{{ include "hpcc.addSentinelProbes" $dali | indent 8 }}
{{- include "hpcc.addSecurityContext" $commonCtx | indent 8 }}
{{- include "hpcc.addResources" (dict "me" $dali.resources) | indent 8 }}
{{ include "hpcc.addImageAttrs" $commonCtx | indent 8 }}
        volumeMounts:
{{ include "hpcc.addConfigMapVolumeMount" $dali | indent 8 }}
{{ include "hpcc.addVolumeMounts" $commonCtx | indent 8 }}
{{- include "hpcc.addSecretVolumeMounts" (dict "root" $ "secretsCategories" $daliSecretsCategories) | nindent 8 }}
{{- include "hpcc.addCertificateVolumeMount" (dict "root" $ "name" .name "component" "dali" "external" false) | nindent 8 }}
{{- range $sashaName, $_sasha := $daliSashaServicesCtx.services -}}
 {{- $sasha := deepCopy ($_sasha | default dict) -}}
 {{- $_ := set $sasha "name" $sashaName -}}
 {{- $thisServiceCtx := dict -}}
 {{- $sashaAccess := splitList " " (include "hpcc.getSashaServiceAccess" $sasha) -}}
 {{- $sashaServiceSecretsCategories := concat ((or (has "data" $sashaAccess) (has "dalidata" $sashaAccess)) | ternary (list "storage") list) $daliSecretsCategories -}}
 {{- if hasKey $sasha "plane" -}}
  {{- $_ := set $thisServiceCtx "sashaStoragePlane" ($sasha.plane | default (include "hpcc.getFirstPlaneForCategory" (dict "root" $ "category" "sasha"))) -}}
 {{- end -}}
 {{- with ($sasha | merge (dict "access" $sashaAccess)) -}}
  {{- include "hpcc.addSashaContainer" (dict "root" $ "me" . "dali" $dali) | nindent 6 }}
        volumeMounts:
  {{- $serviceName := printf "sasha-%s" $sashaName -}}
  {{- with (dict "name" $serviceName) }}
   {{- include "hpcc.addConfigMapVolumeMount" . | nindent 8 }}
  {{ end -}}
  {{- $sashaPlaneCategories := splitList " " (include "hpcc.getSashaPlanesFromAccess" .) -}}
  {{- include "hpcc.addVolumeMounts" (dict "root" $ "includeCategories" $sashaPlaneCategories "includeNames" (list $thisServiceCtx.sashaStoragePlane)) | indent 8 }}
  {{- include "hpcc.addSecretVolumeMounts" (dict "root" $ "secretsCategories" $sashaServiceSecretsCategories) | nindent 8 }}
  {{- include "hpcc.addCertificateVolumeMount" (dict "root" $ "name" $dali.name "component" "dali" "external" false) | nindent 8 }}
 {{- end }}
{{- end }}
      volumes:
{{- include "hpcc.addConfigMapVolume" $dali | nindent 6 -}}
{{- range $sashaName, $_sasha := $daliSashaServicesCtx.services -}}
 {{- $sasha := ($_sasha | default dict) -}}
 {{- $serviceName := printf "sasha-%s" $sashaName -}}
 {{- with (dict "name" $serviceName) -}}
  {{- include "hpcc.addConfigMapVolume" . | nindent 6 -}}
 {{- end -}}
{{- end -}}
{{- include "hpcc.addVolumes" (dict "root" $ "includeNames" $tmpDaliScope.aggregateSashaNamedPlanes "includeCategories" $tmpDaliScope.aggregatePlaneCategories) | indent 6 }}
{{- include "hpcc.addSecretVolumes" (dict "root" $ "secretsCategories" $tmpDaliScope.aggregateSashaSecretsCategories) | indent 6 }}
{{ include "hpcc.addCertificateVolume" (dict "root" $ "name" .name "component" "dali" "external" false) | indent 6 }}
---
{{- $daliStoragePlane := $dali.daliPlane | default (include "hpcc.getFirstPlaneForCategory" (dict "root" $ "category" "dali")) }}
kind: ConfigMap 
apiVersion: v1 
metadata:
  name: {{ $dali.name }}-configmap 
data:
  {{ $dali.name }}.yaml: |
    version: 1.0
    dali:
{{ toYaml (omit $dali "logging" "services" "env") | indent 6 }}
      dataPath: {{ include "hpcc.getPlanePrefix" (dict "root" $ "planeName" $daliStoragePlane) }}
{{- include "hpcc.generateLoggingConfig" $commonCtx | indent 6 }}
{{- include "hpcc.generateMetricsConfig" $commonCtx | indent 6 }}
{{ include "hpcc.generateVaultConfig" (dict "root" $ "secretsCategories" $daliSecretsCategories ) | indent 6 }}
      foreignAccess: {{ include "hpcc.isForeignAccessConfigured" (dict "root" $ "me" .) | default "false" }}
    global:
{{ include "hpcc.generateGlobalConfigMap" $ | indent 6 }}
---
{{- range $sashaName, $_sasha := $daliSashaServicesCtx.services -}}
{{- $sasha := deepCopy ($_sasha | default dict) -}}
{{- $_ := set $sasha "name" $sashaName }}
kind: ConfigMap
{{- with ($sasha | merge (pick $dali "logging") | merge (dict "inDaliPod" true "access" (splitList " " (include "hpcc.getSashaServiceAccess" $sasha)))) -}}
{{- $sashaSecretsCategories := append ((or (has "data" .access) (has "dalidata" .access)) | ternary (list "storage") list) "system" -}}
{{ include "hpcc.generateConfig" (dict "root" $ "me" . "secretsCategories" $sashaSecretsCategories "configMapHelper" "hpcc.sashaConfigMap") }}
---
{{- if (hasKey $sasha "service") -}}
{{- if $sasha.service.servicePort -}}
{{ include "hpcc.addService" ( dict "root" $ "name" (printf "sasha-%s" $sasha.name) "service" $sasha.service "selector" $dali.name "defaultPort" 8877 ) }}
---
{{- end }}
{{- end }}

{{- end }}
{{- end }}
{{/*
Expose dali as a external service, only if there is a service definition and dafilesrv directio service is active.
*/}}
{{- $dafilesrvCtx := dict -}}
{{- $service := deepCopy (.service | default dict) -}}
{{- $_ := set $service "visibility" ($service.visibility | default "cluster") -}}
{{- $_ := set $service "servicePort" ($service.servicePort | default 7070) -}}
{{- if (include "hpcc.isForeignAccessConfigured" (dict "root" $ "me" .)) -}}
 {{- if not (hasKey $service "labels") -}}
  {{- $_ := set $service "labels" dict -}}
 {{- end -}}
 {{- $_ := set $service "labels" (merge $service.labels (dict "server" .name)) -}}
{{- else -}}
 {{- $_ := set $service "visibility" "cluster" -}}
{{- end }}
{{- include "hpcc.addService" ( dict "root" $ "name" .name "service" $service "selector" .name "defaultPort" 7070 ) | nindent 0 }}
---
{{ include "hpcc.addCertificate" (dict "root" $ "name" .name "service" $service "component" "dali" "external" false) }}
---
{{ include "hpcc.addEgress" $commonCtx }}
{{- end }}
{{- end }}

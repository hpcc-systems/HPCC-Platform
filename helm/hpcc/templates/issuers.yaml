{{/*

---  DO NOT EDIT THIS FILE - all configuration of HPCC platform should be done via values.yaml ----
  
##############################################################################

    HPCC SYSTEMS software Copyright (C) 2021 HPCC SystemsÂ®.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    
##############################################################################

*/}}

{{/*
Use cert-manager to create a public certificate and private key for use with TLS
There are separate certificate issuers for local and public certificates
by default public certificates are self-signed and local certificates are signed
by our own certificate authority.  A CA certificate is also provided to the pod
so that we can recognize the signature of our own CA.
NB: if optional 'issuer' passed in use it, otherwise base on visibility and
use "public" or "local"
*/}}


{{/*
Some issuers, such as letsencrypt, have limitations on the number of resources that can
be created. When using wildcards we can share a common certificate across all users
of that issuer.

This is initially intended for non-prod use of letsencrypt for our public issuer.
All public services should use the same cert, greatly minimizing the letsencrypt
resources except in prod.
*/}}
{{- define "hpcc.addWildIssuerCertificate" -}}
 {{- $namespace := .root.Release.Namespace -}}
 {{- $issuerKeyName := .issuerKeyName -}}
 {{- $issuer := .me -}}
 {{- if $issuer.wildcard -}}
  {{- if ne $issuerKeyName "public" -}}
   {{- $_ := fail (printf "Issuer %s - wildcard currently only supported for public issuer." $issuerKeyName) -}}
  {{- end -}}
  {{- if not $issuer.domain -}}
   {{- $_ := fail (printf "Issuer %s - setting wildcard requires configuring a domain." $issuerKeyName) -}}
  {{- end }}
  {{- $spiffe := (hasKey $issuer "spiffe" | ternary $issuer.spiffe (ne "public" $issuerKeyName)) }}
  {{- if $spiffe -}}
   {{- $_ := fail (printf "Issuer %s - setting wildcard not supported with spiffe setting enabled." $issuerKeyName) -}}
  {{- end }}
  {{- $clientUsage := (hasKey $issuer "clientUsage" | ternary $issuer.clientUsage (ne "public" $issuerKeyName)) -}}
  {{- if $clientUsage -}}
   {{- $_ := fail (printf "Issuer %s - setting wildcard not supported with clientUsage setting enabled." $issuerKeyName) -}}
  {{- end }}
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: {{ $issuerKeyName }}-wild-cert
  namespace: {{ $namespace }}
spec:
  secretName: {{ $issuerKeyName }}-wild-tls
  duration: 2160h # 90d
  renewBefore: 360h # 15d
  subject:
    organizations:
    - HPCC Systems
  commonName: {{ (printf "*.%s" $issuer.domain) | trunc 64 | quote }}
  isCA: false
  privateKey:
    algorithm: RSA
    encoding: PKCS1
    size: 2048
  usages:
    - server auth
  dnsNames:
  - {{ (printf "*.%s" $issuer.domain) | quote }}
  issuerRef:
    name: {{ $issuer.name }}
    kind: {{ $issuer.kind }}
    group: cert-manager.io
---
 {{- end -}}
{{- end -}}

{{- define "hpcc.addIssuer" -}}
 {{- $issuerEnabled := (hasKey .me "enabled" | ternary .me.enabled true) -}}
 {{- if $issuerEnabled }}
  {{- if (hasKey .me "spec") -}} {{- /* no spec means we are referencing an external issuer and don't need to instantiate our own */ -}}
apiVersion: cert-manager.io/v1
kind: {{ .me.kind | default "Issuer" }}
metadata:
  name: {{ .me.name }}
  namespace: {{ .root.Release.Namespace | default "default" }}
   {{- if .me.spec }}
spec:
    {{- if not .root.Values.global.noResourceValidation -}}
     {{- if .me.spec.ca }}
      {{- if .me.spec.ca.secretName }}
       {{- if not (lookup "v1" "Secret" .root.Release.Namespace .me.spec.ca.secretName) }}
        {{- $_ := fail (printf "\n\nUsing a local certificate authority requires a CA certificate stored in the secret named '%s'. To disable mTLS security set \"certificates.enabled=false\". To bypass this validation check set \"global.noResourceValidation=true\". \n" .me.spec.ca.secretName ) -}}
       {{- end }}
      {{- end }}
     {{- end }}
    {{- end }}
{{ toYaml .me.spec | indent 2 }}
---
   {{- end }}
  {{- end }}
  {{ include "hpcc.addWildIssuerCertificate" (dict "root" .root "issuerKeyName" .issuerKeyName "me" .me ) }}
 {{- end }}
{{- end }}

{{- template "hpcc.ensureNoResourceValidationFlag" ( dict "root" $ ) }}

{{- if $.Values.certificates -}}
 {{- if $.Values.certificates.enabled -}}
  {{- if not $.Values.global.noResourceValidation -}}
   {{- if not (.Capabilities.APIVersions.Has "cert-manager.io/v1") }}
    {{- $_ := fail (printf "\n\nEnabling certificate generation requires cert-manager resources. Please intall cert-manager. To disable mTLS security set \"certificates.enabled=false\". To bypass this validation check set \"global.noResourceValidation=true\". \n" ) -}}
   {{- end -}}
  {{- end -}}
  {{- range $k, $v := .Values.certificates.issuers }}
{{- include "hpcc.addIssuer" (dict "root" $ "issuerKeyName" $k "me" $v ) }}
  {{- end }}
 {{- end }}
{{- end }}

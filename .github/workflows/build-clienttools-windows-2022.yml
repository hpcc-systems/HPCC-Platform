name: Build Clienttools windows-2022

env:
  VCPKG_BINARY_SOURCES: "clear;nuget,GitHub,readwrite"
  VCPKG_NUGET_REPOSITORY: "https://github.com/${{ github.repository_owner }}/vcpkg"
  NUGET_PLUGIN_HANDSHAKE_TIMEOUT_IN_SECONDS: 120
  NUGET_PLUGIN_REQUEST_TIMEOUT_IN_SECONDS: 120

on:
  workflow_call:
    inputs:
      upload-package:
        type: boolean
        description: 'Share asset for eclide build'
        required: false
        default: false
      asset-name:
        type: string
        description: 'ECLIDE clienttools Asset name'
        required: false
        default: 'windows-2022-clienttools'
      community-ref:
        type: string
        description: 'community_[semver]'
        required: true
      ln-ref:
        type: string
        description: 'internal_[semver]'
        required: false
        default: ''
      cmake-config-options:
        type: string
        description: 'CMake config options'
        required: false
        default: '-T host=x64 -A x64 -DUSE_OPTIONAL=OFF -DCLIENTTOOLS_ONLY=ON -DUSE_AZURE=OFF -DUSE_CASSANDRA=OFF -DUSE_PARQUET=OFF -DUSE_JAVA=OFF -DUSE_OPENLDAP=OFF'
      cmake-build-options:
        type: string
        description: 'CMake build options'
        required: false
        default: '--config Release --parallel $NUMBER_OF_PROCESSORS'
      make-latest:
        type: boolean
        description: 'Make Latest'
        required: false
        default: false
      

jobs:
  generate_windows_2022_clienttools:
    name: Generate Windows Clienttools
    runs-on: "windows-2022"

    steps:
      - name: Checkout HPCC-Platform
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.community-ref }}
          submodules: recursive
          path: ./HPCC-Platform

      - name: Checkout LN
        if: ${{ inputs.ln-ref != '' }}
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/LN
          ref: ${{ inputs.ln-ref }}
          token: ${{ secrets.LNB_TOKEN }}
          submodules: recursive
          path: ./LN

      - name: Setup Code Signing
        shell: "pwsh"
        run: |
          mkdir -p ./sign
          cd sign
          $pfxPath = "hpcc_code_signing.pfx"
          $encodedBytes = [System.Convert]::FromBase64String("${{ secrets.SIGNING_CERTIFICATE }}")
          $currentDirectory = Get-Location
          $certificatePath = Join-Path -Path $currentDirectory -ChildPath $pfxPath
          [IO.File]::WriteAllBytes("$certificatePath", $encodedBytes)
          $passphrasePath = Join-Path -Path $currentDirectory -ChildPath "passphrase.txt"
          Set-Content -Path $passphrasePath -Value "${{ secrets.SIGNING_CERTIFICATE_PASSPHRASE }}"
          CertUtil -p ${{ secrets.SIGNING_CERTIFICATE_PASSPHRASE }} hpcc_code_signing.pfx           

      - name: vcpkg bootstrap
        shell: "bash"
        run: |
          ./HPCC-Platform/vcpkg/bootstrap-vcpkg.sh

      - name: "Setup NuGet credentials"
        shell: "bash"
        run: |
          `./HPCC-Platform/vcpkg/vcpkg fetch nuget | tail -n 1` \
            sources add \
            -source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
            -storepasswordincleartext \
            -name "GitHub" \
            -username "${{ github.repository_owner }}" \
            -password "${{ secrets.GITHUB_TOKEN }}"
          `./HPCC-Platform/vcpkg/vcpkg fetch nuget | tail -n 1` \
            setapikey "${{ secrets.GITHUB_TOKEN }}" \
            -source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"

      - name: Setup Source Directory
        id: setup_source
        shell: "bash"
        run: |
          if [ -d ./LN ]; then
            echo "LN directory exists; building internal clienttools"
            echo "source_dir=./LN" >> $GITHUB_OUTPUT
          else
            echo "LN directory does not exist; building community clienttools"
            echo "source_dir=./HPCC-Platform" >> $GITHUB_OUTPUT
          fi

      - name: Build Clienttools
        shell: "bash"
        run: |
          mkdir -p ./build
          cmake -S ${{ steps.setup_source.outputs.source_dir }} -B ./build ${{ inputs.cmake-config-options }}
          cmake --build ./build ${{ inputs.cmake-build-options }} --target SIGN

      - name: Release Community Clienttools
        if: ${{ inputs.ln-ref == '' }}
        uses: ncipollo/release-action@v1.16.0
        with:
          allowUpdates: true
          generateReleaseNotes: false
          prerelease: ${{ contains(github.ref, '-rc') }}
          makeLatest: ${{ inputs.make-latest }}
          artifacts: "./build/hpccsystems-clienttools-community*.exe"

      - name: Release Internal Clienttools to JFrog Repository
        if: ${{ inputs.ln-ref != '' && github.repository_owner == 'hpcc-systems' }}
        shell: "bash"
        run: |
          cd ./build
          packages=($(ls -1 hpccsystems-clienttools-internal*.exe ))
          for _package in ${packages[@]}; do
            curl -u${{ secrets.JFROG_USERNAME }}:${{ secrets.JFROG_PASSWORD }} "https://${{ secrets.JFROG_REGISTRY }}/hpccpl-windows-local/LN/windows/x86_64/${_package}" -T ${_package}
          done

      - name: Share Asset for ECLIDE build
        if: ${{ inputs.upload-package }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.asset-name }}
          path: ./build/hpccsystems-clienttools*.exe
          compression-level: 0
      
      - name: Upload Error Logs
        if: ${{ failure() || cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: windows-2022-clienttools-logs-${{ github.job }}-${{ github.run_number }}
          path: ./build/**/*.log
          retention-days: 1

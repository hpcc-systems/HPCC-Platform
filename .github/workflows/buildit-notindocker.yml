# This is a basic workflow to help you get started with Actions

name: buildit

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Cache cmake
        uses: actions/cache@v2
        id: cache-cmake
        with:
          path: "~/boost"
          key: cmake
      - name: Install cmake
        env:
          CACHE_HIT: ${{steps.cache-cmake.outputs.cache-hit}}
        run: |
          if [[ "$CACHE_HIT" == 'true' ]]; then
            sudo cp --force --recursive ~/cmake/* /
          else
            sudo apt-get update && sudo apt-get install -yq cmake
            mkdir -p ~/cmake
            for dep in cmake; do
                dpkg -L $dep | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/cmake/
            done
          fi

      - name: Install Prerequisites
        #run: sudo apt-get install cmake bison flex build-essential binutils-dev libldap2-dev libcppunit-dev libicu-dev libxslt1-dev zlib1g-dev libboost-regex-dev libarchive-dev python-dev libv8-dev default-jdk libapr1-dev libaprutil1-dev libiberty-dev libhiredis-dev libtbb-dev libxalan-c-dev libnuma-dev nodejs libevent-dev libatlas-base-dev libblas-dev python3-dev default-libmysqlclient-dev libsqlite3-dev libmemcached-dev libcurl4-openssl-dev pkg-config libtool autotools-dev automake libssl-dev
        run: sudo apt-get install cmake 
        #run: sudo apt-get install cmake bison flex build-essential binutils-dev libldap2-dev libcppunit-dev libicu-dev libxslt1-dev zlib1g-dev libboost-regex-dev libarchive-dev python-dev libv8-dev libapr1-dev libaprutil1-dev libiberty-dev libhiredis-dev libtbb-dev libxalan-c-dev libnuma-dev nodejs libevent-dev libatlas-base-dev libblas-dev python3-dev default-libmysqlclient-dev libsqlite3-dev libmemcached-dev libcurl4-openssl-dev pkg-config libtool autotools-dev automake libssl-dev
#      - name: stage2
#        run: sudo apt-get install r-cran-rcpp
#      - name: stage3
#        run: sudo apt-get install r-cran-rinside
#      - name: stage4
#        run: sudo apt-get install r-cran-inline
#      - name: stage5
#        run: sudo apt-get install r-base-dev

#      - name: cmake
#        run: mkdir ../build && cd ../build && cmake ../HPCC-Platform
#      - name: make
#        run: cd ../build && make -j 3 install

      - name: list dir
        shell: bash
        run: |
          ls -lt > output.log
      - name: Upload output file
        uses: actions/upload-artifact@v1
        with:
          name: output-log-file
          path: output.log
          

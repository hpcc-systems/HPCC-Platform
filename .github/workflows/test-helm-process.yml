# Helm Test - Process PR (Privileged)
name: test-helm-process

on:
  workflow_run:
    workflows: ["test-helm"]
    types:
      - completed

permissions:
  contents: read
  pull-requests: write

jobs:
  helm-test:
    runs-on: ubuntu-latest
    if: >
      github.event.workflow_run.event == 'pull_request' &&
      github.event.workflow_run.conclusion == 'success'
    steps:
      - name: "Download Helm Test Info"
        uses: actions/github-script@v7
        with:
          script: |
            var artifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: ${{github.event.workflow_run.id }},
            });
            var matchArtifact = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "helm-test-info"
            })[0];
            var download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            var fs = require('fs');
            fs.writeFileSync('${{github.workspace}}/helm-info.zip', Buffer.from(download.data));
            
      - name: "Extract Helm Test Info"
        run: |
          unzip helm-info.zip
          echo "PR_NUMBER=$(cat pr_number)" >> $GITHUB_ENV
          echo "HEAD_SHA=$(cat head_sha)" >> $GITHUB_ENV
          echo "BASE_SHA=$(cat base_sha)" >> $GITHUB_ENV
          echo "BASE_REF=$(cat base_ref)" >> $GITHUB_ENV
          
      - name: "Checkout base branch" 
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BASE_REF }}
          submodules: false
          
      - name: "Setup Helm"
        uses: azure/setup-helm@v3
        with:
          version: 'latest'
          token: ${{ secrets.GITHUB_TOKEN }}
        id: install
        
      - name: "Install additional tools"
        working-directory: .
        run: wget https://github.com/zegl/kube-score/releases/download/v1.8.1/kube-score_1.8.1_linux_amd64 && sudo mv kube-score_1.8.1_linux_amd64 /usr/bin/kube-score && sudo chmod +x /usr/bin/kube-score
        
      - name: "Validate Helm Templates from base branch"
        working-directory: ./testing/helm
        run: ./run.sh
        
      - name: "Check for changes in helm output for default values"
        working-directory: .
        run: |
          resultcode=0
          mkdir ${{ runner.temp }}/new
          mkdir ${{ runner.temp }}/old

          helm version
          #Generate the output for the default values file, and each of the specialised test files.
          #Check to see if anything has changed between old and new, and report the differences
          echo Generating helm template output for PR changes
          
          # First get the current base branch output 
          helm template helm/hpcc > ${{ runner.temp }}/old/output.txt
          for file in testing/helm/tests/*.yaml
          do
            tail=$(basename $file)
            helm template helm/hpcc --values $file > ${{ runner.temp }}/old/$tail.txt
          done

          # Now checkout the PR head and generate new output
          git fetch --no-tags --prune --progress --no-recurse-submodules --quiet --depth=1 origin
          git checkout ${{ env.HEAD_SHA }}

          echo Generating helm template for PR branch
          helm template helm/hpcc > ${{ runner.temp }}/new/output.txt
          for file in testing/helm/tests/*.yaml
          do
            tail=$(basename $file)
            helm template helm/hpcc --values $file > ${{ runner.temp }}/new/$tail.txt
          done

          diff ${{ runner.temp }}/old/output.txt ${{ runner.temp }}/new/output.txt
          if [ $? -ne 0 ]
          then
            resultcode=1
          else
            #Only check for differences in the specialised test files if the default values file is the same
            for file in testing/helm/tests/*.yaml
            do
              tail=$(basename $file)
              diff ${{ runner.temp }}/old/$tail.txt ${{ runner.temp }}/new/$tail.txt
              if [ $? -ne 0 ]
              then
                resultcode=1
              fi
            done
          fi

          exit $resultcode
